// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/admin/graph/model"
	model1 "VehicleSupervision/internal/modules/admin/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	SystemUser() SystemUserResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Department struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DepartmentCategory   func(childComplexity int) int
		DepartmentCode       func(childComplexity int) int
		DepartmentID         func(childComplexity int) int
		DepartmentName       func(childComplexity int) int
		EnterpriseID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalNumber       func(childComplexity int) int
		IsDelete             func(childComplexity int) int
		Remarks              func(childComplexity int) int
		SuperiorDepartmentID func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	DepartmentAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DepartmentAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DepartmentSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DepartmentAvgFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentMaxFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DepartmentCategory   func(childComplexity int) int
		DepartmentCode       func(childComplexity int) int
		DepartmentID         func(childComplexity int) int
		DepartmentName       func(childComplexity int) int
		EnterpriseID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalNumber       func(childComplexity int) int
		Remarks              func(childComplexity int) int
		SuperiorDepartmentID func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	DepartmentMinFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DepartmentCategory   func(childComplexity int) int
		DepartmentCode       func(childComplexity int) int
		DepartmentID         func(childComplexity int) int
		DepartmentName       func(childComplexity int) int
		EnterpriseID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalNumber       func(childComplexity int) int
		Remarks              func(childComplexity int) int
		SuperiorDepartmentID func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	DepartmentMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DepartmentStddevFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentStddevPopFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentStddevSampFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentSumFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentVarPopFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentVarSampFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentVarianceFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	Enterprise struct {
		AssociationReviewBy              func(childComplexity int) int
		AssociationReviewOpinion         func(childComplexity int) int
		AssociationReviewTime            func(childComplexity int) int
		BrigadeID                        func(childComplexity int) int
		BrigadeReviewBy                  func(childComplexity int) int
		BrigadeReviewOpinion             func(childComplexity int) int
		BrigadeReviewTime                func(childComplexity int) int
		BusinessLicenseExpiryDate        func(childComplexity int) int
		BusinessLicenseIssuanceDate      func(childComplexity int) int
		BusinessLicensePhoto             func(childComplexity int) int
		BusinessPhoto                    func(childComplexity int) int
		BusinessScope                    func(childComplexity int) int
		CheckStatus                      func(childComplexity int) int
		CityID                           func(childComplexity int) int
		ContactPersons                   func(childComplexity int) int
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DisplayNumber                    func(childComplexity int) int
		DistrictID                       func(childComplexity int) int
		EnterpriseAddress                func(childComplexity int) int
		EnterpriseCode                   func(childComplexity int) int
		EnterpriseID                     func(childComplexity int) int
		EnterpriseLevel                  func(childComplexity int) int
		EnterpriseName                   func(childComplexity int) int
		EnterpriseNature                 func(childComplexity int) int
		EntrustedAgent                   func(childComplexity int) int
		EntrustedAgentIDCard             func(childComplexity int) int
		EntrustedAgentIDCardPhoto        func(childComplexity int) int
		EntrustedAgentPhone              func(childComplexity int) int
		FaxNumber                        func(childComplexity int) int
		ID                               func(childComplexity int) int
		InstitutionCategory              func(childComplexity int) int
		IsBlack                          func(childComplexity int) int
		IsDeleted                        func(childComplexity int) int
		IsInput                          func(childComplexity int) int
		IsInstall                        func(childComplexity int) int
		IsUploadProvince                 func(childComplexity int) int
		LegalRepresentative              func(childComplexity int) int
		LegalRepresentativeIDCard        func(childComplexity int) int
		LegalRepresentativeIDCardPhoto   func(childComplexity int) int
		LegalRepresentativePhone         func(childComplexity int) int
		OperatingLicensePhoto            func(childComplexity int) int
		OrganizationCode                 func(childComplexity int) int
		OrganizationCodeCertificatePhoto func(childComplexity int) int
		PoliceStationID                  func(childComplexity int) int
		ProvinceID                       func(childComplexity int) int
		RecordAt                         func(childComplexity int) int
		RecordBy                         func(childComplexity int) int
		Remarks                          func(childComplexity int) int
		Score                            func(childComplexity int) int
		SuperiorEnterpriseID             func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		UpdateTimeIn                     func(childComplexity int) int
	}

	EnterpriseAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	EnterpriseAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.EnterpriseSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseAvgFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseMaxFields struct {
		AssociationReviewBy              func(childComplexity int) int
		AssociationReviewOpinion         func(childComplexity int) int
		AssociationReviewTime            func(childComplexity int) int
		BrigadeID                        func(childComplexity int) int
		BrigadeReviewBy                  func(childComplexity int) int
		BrigadeReviewOpinion             func(childComplexity int) int
		BrigadeReviewTime                func(childComplexity int) int
		BusinessLicenseExpiryDate        func(childComplexity int) int
		BusinessLicenseIssuanceDate      func(childComplexity int) int
		BusinessLicensePhoto             func(childComplexity int) int
		BusinessPhoto                    func(childComplexity int) int
		BusinessScope                    func(childComplexity int) int
		CheckStatus                      func(childComplexity int) int
		CityID                           func(childComplexity int) int
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DisplayNumber                    func(childComplexity int) int
		DistrictID                       func(childComplexity int) int
		EnterpriseAddress                func(childComplexity int) int
		EnterpriseCode                   func(childComplexity int) int
		EnterpriseID                     func(childComplexity int) int
		EnterpriseLevel                  func(childComplexity int) int
		EnterpriseName                   func(childComplexity int) int
		EnterpriseNature                 func(childComplexity int) int
		EntrustedAgent                   func(childComplexity int) int
		EntrustedAgentIDCard             func(childComplexity int) int
		EntrustedAgentIDCardPhoto        func(childComplexity int) int
		EntrustedAgentPhone              func(childComplexity int) int
		FaxNumber                        func(childComplexity int) int
		ID                               func(childComplexity int) int
		InstitutionCategory              func(childComplexity int) int
		LegalRepresentative              func(childComplexity int) int
		LegalRepresentativeIDCard        func(childComplexity int) int
		LegalRepresentativeIDCardPhoto   func(childComplexity int) int
		LegalRepresentativePhone         func(childComplexity int) int
		OperatingLicensePhoto            func(childComplexity int) int
		OrganizationCode                 func(childComplexity int) int
		OrganizationCodeCertificatePhoto func(childComplexity int) int
		PoliceStationID                  func(childComplexity int) int
		ProvinceID                       func(childComplexity int) int
		RecordAt                         func(childComplexity int) int
		RecordBy                         func(childComplexity int) int
		Remarks                          func(childComplexity int) int
		Score                            func(childComplexity int) int
		SuperiorEnterpriseID             func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		UpdateTimeIn                     func(childComplexity int) int
	}

	EnterpriseMinFields struct {
		AssociationReviewBy              func(childComplexity int) int
		AssociationReviewOpinion         func(childComplexity int) int
		AssociationReviewTime            func(childComplexity int) int
		BrigadeID                        func(childComplexity int) int
		BrigadeReviewBy                  func(childComplexity int) int
		BrigadeReviewOpinion             func(childComplexity int) int
		BrigadeReviewTime                func(childComplexity int) int
		BusinessLicenseExpiryDate        func(childComplexity int) int
		BusinessLicenseIssuanceDate      func(childComplexity int) int
		BusinessLicensePhoto             func(childComplexity int) int
		BusinessPhoto                    func(childComplexity int) int
		BusinessScope                    func(childComplexity int) int
		CheckStatus                      func(childComplexity int) int
		CityID                           func(childComplexity int) int
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DisplayNumber                    func(childComplexity int) int
		DistrictID                       func(childComplexity int) int
		EnterpriseAddress                func(childComplexity int) int
		EnterpriseCode                   func(childComplexity int) int
		EnterpriseID                     func(childComplexity int) int
		EnterpriseLevel                  func(childComplexity int) int
		EnterpriseName                   func(childComplexity int) int
		EnterpriseNature                 func(childComplexity int) int
		EntrustedAgent                   func(childComplexity int) int
		EntrustedAgentIDCard             func(childComplexity int) int
		EntrustedAgentIDCardPhoto        func(childComplexity int) int
		EntrustedAgentPhone              func(childComplexity int) int
		FaxNumber                        func(childComplexity int) int
		ID                               func(childComplexity int) int
		InstitutionCategory              func(childComplexity int) int
		LegalRepresentative              func(childComplexity int) int
		LegalRepresentativeIDCard        func(childComplexity int) int
		LegalRepresentativeIDCardPhoto   func(childComplexity int) int
		LegalRepresentativePhone         func(childComplexity int) int
		OperatingLicensePhoto            func(childComplexity int) int
		OrganizationCode                 func(childComplexity int) int
		OrganizationCodeCertificatePhoto func(childComplexity int) int
		PoliceStationID                  func(childComplexity int) int
		ProvinceID                       func(childComplexity int) int
		RecordAt                         func(childComplexity int) int
		RecordBy                         func(childComplexity int) int
		Remarks                          func(childComplexity int) int
		Score                            func(childComplexity int) int
		SuperiorEnterpriseID             func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		UpdateTimeIn                     func(childComplexity int) int
	}

	EnterpriseMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseStddevFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseStddevPopFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseStddevSampFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseSumFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseVarPopFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseVarSampFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseVarianceFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	Mutation struct {
		DeleteDepartment     func(childComplexity int, where model.DepartmentBoolExp) int
		DeleteDepartmentByPk func(childComplexity int, id int64) int
		DeleteEnterprise     func(childComplexity int, where model.EnterpriseBoolExp) int
		DeleteEnterpriseByPk func(childComplexity int, id int64) int
		DeleteSystemUser     func(childComplexity int, where model.SystemUserBoolExp) int
		DeleteSystemUserByPk func(childComplexity int, id int64) int
		InsertDepartment     func(childComplexity int, objects []*model.DepartmentInsertInput, onConflict *model.DepartmentOnConflict) int
		InsertDepartmentOne  func(childComplexity int, object model.DepartmentInsertInput, onConflict *model.DepartmentOnConflict) int
		InsertEnterprise     func(childComplexity int, objects []*model.EnterpriseInsertInput, onConflict *model.EnterpriseOnConflict) int
		InsertEnterpriseOne  func(childComplexity int, object model.EnterpriseInsertInput, onConflict *model.EnterpriseOnConflict) int
		InsertSystemUser     func(childComplexity int, objects []*model.SystemUserInsertInput, onConflict *model.SystemUserOnConflict) int
		InsertSystemUserOne  func(childComplexity int, object model.SystemUserInsertInput, onConflict *model.SystemUserOnConflict) int
		UpdateDepartment     func(childComplexity int, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, where model.DepartmentBoolExp) int
		UpdateDepartmentByPk func(childComplexity int, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, pkColumns model.DepartmentPkColumnsInput) int
		UpdateEnterprise     func(childComplexity int, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, where model.EnterpriseBoolExp) int
		UpdateEnterpriseByPk func(childComplexity int, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, pkColumns model.EnterprisePkColumnsInput) int
		UpdateSystemUser     func(childComplexity int, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, where model.SystemUserBoolExp) int
		UpdateSystemUserByPk func(childComplexity int, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, pkColumns model.SystemUserPkColumnsInput) int
	}

	Query struct {
		Department          func(childComplexity int, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) int
		DepartmentAggregate func(childComplexity int, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) int
		DepartmentByPk      func(childComplexity int, id int64) int
		Enterprise          func(childComplexity int, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) int
		EnterpriseAggregate func(childComplexity int, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) int
		EnterpriseByPk      func(childComplexity int, id int64) int
		SystemUser          func(childComplexity int, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) int
		SystemUserAggregate func(childComplexity int, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) int
		SystemUserByPk      func(childComplexity int, id int64) int
	}

	SystemUser struct {
		AppVersion func(childComplexity int) int
		AuditLevel func(childComplexity int) int
		CreateBy   func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		DeleteAt   func(childComplexity int) int
		DeleteBy   func(childComplexity int) int
		Department func(childComplexity int) int
		Email      func(childComplexity int) int
		Enterprise func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		IPAddress  func(childComplexity int) int
		IsBindIP   func(childComplexity int) int
		IsDelete   func(childComplexity int) int
		IsValid    func(childComplexity int) int
		Mkey       func(childComplexity int) int
		Mobile     func(childComplexity int) int
		Password   func(childComplexity int) int
		ProxyUser  func(childComplexity int) int
		Remarks    func(childComplexity int) int
		Telephone  func(childComplexity int) int
		Ukey       func(childComplexity int) int
		UpdateAt   func(childComplexity int) int
		UpdateBy   func(childComplexity int) int
		UserID     func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
		Username   func(childComplexity int) int
	}

	SystemUserAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	SystemUserAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.SystemUserSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	SystemUserAvgFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserMaxFields struct {
		AppVersion   func(childComplexity int) int
		AuditLevel   func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		Email        func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		Grade        func(childComplexity int) int
		ID           func(childComplexity int) int
		IPAddress    func(childComplexity int) int
		Mkey         func(childComplexity int) int
		Mobile       func(childComplexity int) int
		Password     func(childComplexity int) int
		ProxyUser    func(childComplexity int) int
		Remarks      func(childComplexity int) int
		Telephone    func(childComplexity int) int
		Ukey         func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserState    func(childComplexity int) int
		UserType     func(childComplexity int) int
		Username     func(childComplexity int) int
	}

	SystemUserMinFields struct {
		AppVersion   func(childComplexity int) int
		AuditLevel   func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		Email        func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		Grade        func(childComplexity int) int
		ID           func(childComplexity int) int
		IPAddress    func(childComplexity int) int
		Mkey         func(childComplexity int) int
		Mobile       func(childComplexity int) int
		Password     func(childComplexity int) int
		ProxyUser    func(childComplexity int) int
		Remarks      func(childComplexity int) int
		Telephone    func(childComplexity int) int
		Ukey         func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserState    func(childComplexity int) int
		UserType     func(childComplexity int) int
		Username     func(childComplexity int) int
	}

	SystemUserMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	SystemUserStddevFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserStddevPopFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserStddevSampFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserSumFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserVarPopFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserVarSampFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserVarianceFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteDepartment(ctx context.Context, where model.DepartmentBoolExp) (*model.DepartmentMutationResponse, error)
	DeleteDepartmentByPk(ctx context.Context, id int64) (*model1.Department, error)
	InsertDepartment(ctx context.Context, objects []*model.DepartmentInsertInput, onConflict *model.DepartmentOnConflict) (*model.DepartmentMutationResponse, error)
	InsertDepartmentOne(ctx context.Context, object model.DepartmentInsertInput, onConflict *model.DepartmentOnConflict) (*model1.Department, error)
	UpdateDepartment(ctx context.Context, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, where model.DepartmentBoolExp) (*model.DepartmentMutationResponse, error)
	UpdateDepartmentByPk(ctx context.Context, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, pkColumns model.DepartmentPkColumnsInput) (*model1.Department, error)
	DeleteEnterprise(ctx context.Context, where model.EnterpriseBoolExp) (*model.EnterpriseMutationResponse, error)
	DeleteEnterpriseByPk(ctx context.Context, id int64) (*model1.Enterprise, error)
	InsertEnterprise(ctx context.Context, objects []*model.EnterpriseInsertInput, onConflict *model.EnterpriseOnConflict) (*model.EnterpriseMutationResponse, error)
	InsertEnterpriseOne(ctx context.Context, object model.EnterpriseInsertInput, onConflict *model.EnterpriseOnConflict) (*model1.Enterprise, error)
	UpdateEnterprise(ctx context.Context, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, where model.EnterpriseBoolExp) (*model.EnterpriseMutationResponse, error)
	UpdateEnterpriseByPk(ctx context.Context, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, pkColumns model.EnterprisePkColumnsInput) (*model1.Enterprise, error)
	DeleteSystemUser(ctx context.Context, where model.SystemUserBoolExp) (*model.SystemUserMutationResponse, error)
	DeleteSystemUserByPk(ctx context.Context, id int64) (*model1.SystemUser, error)
	InsertSystemUser(ctx context.Context, objects []*model.SystemUserInsertInput, onConflict *model.SystemUserOnConflict) (*model.SystemUserMutationResponse, error)
	InsertSystemUserOne(ctx context.Context, object model.SystemUserInsertInput, onConflict *model.SystemUserOnConflict) (*model1.SystemUser, error)
	UpdateSystemUser(ctx context.Context, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, where model.SystemUserBoolExp) (*model.SystemUserMutationResponse, error)
	UpdateSystemUserByPk(ctx context.Context, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, pkColumns model.SystemUserPkColumnsInput) (*model1.SystemUser, error)
}
type QueryResolver interface {
	Department(ctx context.Context, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) ([]*model1.Department, error)
	DepartmentAggregate(ctx context.Context, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) (*model.DepartmentAggregate, error)
	DepartmentByPk(ctx context.Context, id int64) (*model1.Department, error)
	Enterprise(ctx context.Context, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) ([]*model1.Enterprise, error)
	EnterpriseAggregate(ctx context.Context, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) (*model.EnterpriseAggregate, error)
	EnterpriseByPk(ctx context.Context, id int64) (*model1.Enterprise, error)
	SystemUser(ctx context.Context, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) ([]*model1.SystemUser, error)
	SystemUserAggregate(ctx context.Context, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) (*model.SystemUserAggregate, error)
	SystemUserByPk(ctx context.Context, id int64) (*model1.SystemUser, error)
}
type SystemUserResolver interface {
	Department(ctx context.Context, obj *model1.SystemUser) (*model1.Department, error)

	Enterprise(ctx context.Context, obj *model1.SystemUser) (*model1.Enterprise, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Department.create_at":
		if e.complexity.Department.CreateAt == nil {
			break
		}

		return e.complexity.Department.CreateAt(childComplexity), true

	case "Department.create_by":
		if e.complexity.Department.CreateBy == nil {
			break
		}

		return e.complexity.Department.CreateBy(childComplexity), true

	case "Department.delete_at":
		if e.complexity.Department.DeleteAt == nil {
			break
		}

		return e.complexity.Department.DeleteAt(childComplexity), true

	case "Department.delete_by":
		if e.complexity.Department.DeleteBy == nil {
			break
		}

		return e.complexity.Department.DeleteBy(childComplexity), true

	case "Department.department_category":
		if e.complexity.Department.DepartmentCategory == nil {
			break
		}

		return e.complexity.Department.DepartmentCategory(childComplexity), true

	case "Department.department_code":
		if e.complexity.Department.DepartmentCode == nil {
			break
		}

		return e.complexity.Department.DepartmentCode(childComplexity), true

	case "Department.department_id":
		if e.complexity.Department.DepartmentID == nil {
			break
		}

		return e.complexity.Department.DepartmentID(childComplexity), true

	case "Department.department_name":
		if e.complexity.Department.DepartmentName == nil {
			break
		}

		return e.complexity.Department.DepartmentName(childComplexity), true

	case "Department.enterprise_id":
		if e.complexity.Department.EnterpriseID == nil {
			break
		}

		return e.complexity.Department.EnterpriseID(childComplexity), true

	case "Department.id":
		if e.complexity.Department.ID == nil {
			break
		}

		return e.complexity.Department.ID(childComplexity), true

	case "Department.internal_number":
		if e.complexity.Department.InternalNumber == nil {
			break
		}

		return e.complexity.Department.InternalNumber(childComplexity), true

	case "Department.is_delete":
		if e.complexity.Department.IsDelete == nil {
			break
		}

		return e.complexity.Department.IsDelete(childComplexity), true

	case "Department.remarks":
		if e.complexity.Department.Remarks == nil {
			break
		}

		return e.complexity.Department.Remarks(childComplexity), true

	case "Department.superior_department_id":
		if e.complexity.Department.SuperiorDepartmentID == nil {
			break
		}

		return e.complexity.Department.SuperiorDepartmentID(childComplexity), true

	case "Department.update_at":
		if e.complexity.Department.UpdateAt == nil {
			break
		}

		return e.complexity.Department.UpdateAt(childComplexity), true

	case "Department.update_by":
		if e.complexity.Department.UpdateBy == nil {
			break
		}

		return e.complexity.Department.UpdateBy(childComplexity), true

	case "DepartmentAggregate.aggregate":
		if e.complexity.DepartmentAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DepartmentAggregate.Aggregate(childComplexity), true

	case "DepartmentAggregate.nodes":
		if e.complexity.DepartmentAggregate.Nodes == nil {
			break
		}

		return e.complexity.DepartmentAggregate.Nodes(childComplexity), true

	case "DepartmentAggregateFields.avg":
		if e.complexity.DepartmentAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Avg(childComplexity), true

	case "DepartmentAggregateFields.count":
		if e.complexity.DepartmentAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_DepartmentAggregateFields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DepartmentAggregateFields.Count(childComplexity, args["columns"].([]model.DepartmentSelectColumn), args["distinct"].(*bool)), true

	case "DepartmentAggregateFields.max":
		if e.complexity.DepartmentAggregateFields.Max == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Max(childComplexity), true

	case "DepartmentAggregateFields.min":
		if e.complexity.DepartmentAggregateFields.Min == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Min(childComplexity), true

	case "DepartmentAggregateFields.stddev":
		if e.complexity.DepartmentAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Stddev(childComplexity), true

	case "DepartmentAggregateFields.stddev_pop":
		if e.complexity.DepartmentAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.StddevPop(childComplexity), true

	case "DepartmentAggregateFields.stddev_samp":
		if e.complexity.DepartmentAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.StddevSamp(childComplexity), true

	case "DepartmentAggregateFields.sum":
		if e.complexity.DepartmentAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Sum(childComplexity), true

	case "DepartmentAggregateFields.var_pop":
		if e.complexity.DepartmentAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.VarPop(childComplexity), true

	case "DepartmentAggregateFields.var_samp":
		if e.complexity.DepartmentAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.VarSamp(childComplexity), true

	case "DepartmentAggregateFields.variance":
		if e.complexity.DepartmentAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Variance(childComplexity), true

	case "DepartmentAvgFields.department_category":
		if e.complexity.DepartmentAvgFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentAvgFields.DepartmentCategory(childComplexity), true

	case "DepartmentAvgFields.id":
		if e.complexity.DepartmentAvgFields.ID == nil {
			break
		}

		return e.complexity.DepartmentAvgFields.ID(childComplexity), true

	case "DepartmentAvgFields.internal_number":
		if e.complexity.DepartmentAvgFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentAvgFields.InternalNumber(childComplexity), true

	case "DepartmentMaxFields.create_at":
		if e.complexity.DepartmentMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.CreateAt(childComplexity), true

	case "DepartmentMaxFields.create_by":
		if e.complexity.DepartmentMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.CreateBy(childComplexity), true

	case "DepartmentMaxFields.delete_at":
		if e.complexity.DepartmentMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DeleteAt(childComplexity), true

	case "DepartmentMaxFields.delete_by":
		if e.complexity.DepartmentMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DeleteBy(childComplexity), true

	case "DepartmentMaxFields.department_category":
		if e.complexity.DepartmentMaxFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentCategory(childComplexity), true

	case "DepartmentMaxFields.department_code":
		if e.complexity.DepartmentMaxFields.DepartmentCode == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentCode(childComplexity), true

	case "DepartmentMaxFields.department_id":
		if e.complexity.DepartmentMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentID(childComplexity), true

	case "DepartmentMaxFields.department_name":
		if e.complexity.DepartmentMaxFields.DepartmentName == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentName(childComplexity), true

	case "DepartmentMaxFields.enterprise_id":
		if e.complexity.DepartmentMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.EnterpriseID(childComplexity), true

	case "DepartmentMaxFields.id":
		if e.complexity.DepartmentMaxFields.ID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.ID(childComplexity), true

	case "DepartmentMaxFields.internal_number":
		if e.complexity.DepartmentMaxFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.InternalNumber(childComplexity), true

	case "DepartmentMaxFields.remarks":
		if e.complexity.DepartmentMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.Remarks(childComplexity), true

	case "DepartmentMaxFields.superior_department_id":
		if e.complexity.DepartmentMaxFields.SuperiorDepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.SuperiorDepartmentID(childComplexity), true

	case "DepartmentMaxFields.update_at":
		if e.complexity.DepartmentMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.UpdateAt(childComplexity), true

	case "DepartmentMaxFields.update_by":
		if e.complexity.DepartmentMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.UpdateBy(childComplexity), true

	case "DepartmentMinFields.create_at":
		if e.complexity.DepartmentMinFields.CreateAt == nil {
			break
		}

		return e.complexity.DepartmentMinFields.CreateAt(childComplexity), true

	case "DepartmentMinFields.create_by":
		if e.complexity.DepartmentMinFields.CreateBy == nil {
			break
		}

		return e.complexity.DepartmentMinFields.CreateBy(childComplexity), true

	case "DepartmentMinFields.delete_at":
		if e.complexity.DepartmentMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DeleteAt(childComplexity), true

	case "DepartmentMinFields.delete_by":
		if e.complexity.DepartmentMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DeleteBy(childComplexity), true

	case "DepartmentMinFields.department_category":
		if e.complexity.DepartmentMinFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentCategory(childComplexity), true

	case "DepartmentMinFields.department_code":
		if e.complexity.DepartmentMinFields.DepartmentCode == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentCode(childComplexity), true

	case "DepartmentMinFields.department_id":
		if e.complexity.DepartmentMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentID(childComplexity), true

	case "DepartmentMinFields.department_name":
		if e.complexity.DepartmentMinFields.DepartmentName == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentName(childComplexity), true

	case "DepartmentMinFields.enterprise_id":
		if e.complexity.DepartmentMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.EnterpriseID(childComplexity), true

	case "DepartmentMinFields.id":
		if e.complexity.DepartmentMinFields.ID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.ID(childComplexity), true

	case "DepartmentMinFields.internal_number":
		if e.complexity.DepartmentMinFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentMinFields.InternalNumber(childComplexity), true

	case "DepartmentMinFields.remarks":
		if e.complexity.DepartmentMinFields.Remarks == nil {
			break
		}

		return e.complexity.DepartmentMinFields.Remarks(childComplexity), true

	case "DepartmentMinFields.superior_department_id":
		if e.complexity.DepartmentMinFields.SuperiorDepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.SuperiorDepartmentID(childComplexity), true

	case "DepartmentMinFields.update_at":
		if e.complexity.DepartmentMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.DepartmentMinFields.UpdateAt(childComplexity), true

	case "DepartmentMinFields.update_by":
		if e.complexity.DepartmentMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.DepartmentMinFields.UpdateBy(childComplexity), true

	case "DepartmentMutationResponse.affected_rows":
		if e.complexity.DepartmentMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DepartmentMutationResponse.AffectedRows(childComplexity), true

	case "DepartmentMutationResponse.returning":
		if e.complexity.DepartmentMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DepartmentMutationResponse.Returning(childComplexity), true

	case "DepartmentStddevFields.department_category":
		if e.complexity.DepartmentStddevFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentStddevFields.DepartmentCategory(childComplexity), true

	case "DepartmentStddevFields.id":
		if e.complexity.DepartmentStddevFields.ID == nil {
			break
		}

		return e.complexity.DepartmentStddevFields.ID(childComplexity), true

	case "DepartmentStddevFields.internal_number":
		if e.complexity.DepartmentStddevFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentStddevFields.InternalNumber(childComplexity), true

	case "DepartmentStddevPopFields.department_category":
		if e.complexity.DepartmentStddevPopFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentStddevPopFields.DepartmentCategory(childComplexity), true

	case "DepartmentStddevPopFields.id":
		if e.complexity.DepartmentStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DepartmentStddevPopFields.ID(childComplexity), true

	case "DepartmentStddevPopFields.internal_number":
		if e.complexity.DepartmentStddevPopFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentStddevPopFields.InternalNumber(childComplexity), true

	case "DepartmentStddevSampFields.department_category":
		if e.complexity.DepartmentStddevSampFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentStddevSampFields.DepartmentCategory(childComplexity), true

	case "DepartmentStddevSampFields.id":
		if e.complexity.DepartmentStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DepartmentStddevSampFields.ID(childComplexity), true

	case "DepartmentStddevSampFields.internal_number":
		if e.complexity.DepartmentStddevSampFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentStddevSampFields.InternalNumber(childComplexity), true

	case "DepartmentSumFields.department_category":
		if e.complexity.DepartmentSumFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentSumFields.DepartmentCategory(childComplexity), true

	case "DepartmentSumFields.id":
		if e.complexity.DepartmentSumFields.ID == nil {
			break
		}

		return e.complexity.DepartmentSumFields.ID(childComplexity), true

	case "DepartmentSumFields.internal_number":
		if e.complexity.DepartmentSumFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentSumFields.InternalNumber(childComplexity), true

	case "DepartmentVarPopFields.department_category":
		if e.complexity.DepartmentVarPopFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentVarPopFields.DepartmentCategory(childComplexity), true

	case "DepartmentVarPopFields.id":
		if e.complexity.DepartmentVarPopFields.ID == nil {
			break
		}

		return e.complexity.DepartmentVarPopFields.ID(childComplexity), true

	case "DepartmentVarPopFields.internal_number":
		if e.complexity.DepartmentVarPopFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentVarPopFields.InternalNumber(childComplexity), true

	case "DepartmentVarSampFields.department_category":
		if e.complexity.DepartmentVarSampFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentVarSampFields.DepartmentCategory(childComplexity), true

	case "DepartmentVarSampFields.id":
		if e.complexity.DepartmentVarSampFields.ID == nil {
			break
		}

		return e.complexity.DepartmentVarSampFields.ID(childComplexity), true

	case "DepartmentVarSampFields.internal_number":
		if e.complexity.DepartmentVarSampFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentVarSampFields.InternalNumber(childComplexity), true

	case "DepartmentVarianceFields.department_category":
		if e.complexity.DepartmentVarianceFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentVarianceFields.DepartmentCategory(childComplexity), true

	case "DepartmentVarianceFields.id":
		if e.complexity.DepartmentVarianceFields.ID == nil {
			break
		}

		return e.complexity.DepartmentVarianceFields.ID(childComplexity), true

	case "DepartmentVarianceFields.internal_number":
		if e.complexity.DepartmentVarianceFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentVarianceFields.InternalNumber(childComplexity), true

	case "Enterprise.association_review_by":
		if e.complexity.Enterprise.AssociationReviewBy == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewBy(childComplexity), true

	case "Enterprise.association_review_opinion":
		if e.complexity.Enterprise.AssociationReviewOpinion == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewOpinion(childComplexity), true

	case "Enterprise.association_review_time":
		if e.complexity.Enterprise.AssociationReviewTime == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewTime(childComplexity), true

	case "Enterprise.brigade_id":
		if e.complexity.Enterprise.BrigadeID == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeID(childComplexity), true

	case "Enterprise.brigade_review_by":
		if e.complexity.Enterprise.BrigadeReviewBy == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewBy(childComplexity), true

	case "Enterprise.brigade_review_opinion":
		if e.complexity.Enterprise.BrigadeReviewOpinion == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewOpinion(childComplexity), true

	case "Enterprise.brigade_review_time":
		if e.complexity.Enterprise.BrigadeReviewTime == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewTime(childComplexity), true

	case "Enterprise.business_license_expiry_date":
		if e.complexity.Enterprise.BusinessLicenseExpiryDate == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicenseExpiryDate(childComplexity), true

	case "Enterprise.business_license_issuance_date":
		if e.complexity.Enterprise.BusinessLicenseIssuanceDate == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicenseIssuanceDate(childComplexity), true

	case "Enterprise.business_license_photo":
		if e.complexity.Enterprise.BusinessLicensePhoto == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicensePhoto(childComplexity), true

	case "Enterprise.business_photo":
		if e.complexity.Enterprise.BusinessPhoto == nil {
			break
		}

		return e.complexity.Enterprise.BusinessPhoto(childComplexity), true

	case "Enterprise.business_scope":
		if e.complexity.Enterprise.BusinessScope == nil {
			break
		}

		return e.complexity.Enterprise.BusinessScope(childComplexity), true

	case "Enterprise.check_status":
		if e.complexity.Enterprise.CheckStatus == nil {
			break
		}

		return e.complexity.Enterprise.CheckStatus(childComplexity), true

	case "Enterprise.city_id":
		if e.complexity.Enterprise.CityID == nil {
			break
		}

		return e.complexity.Enterprise.CityID(childComplexity), true

	case "Enterprise.contact_persons":
		if e.complexity.Enterprise.ContactPersons == nil {
			break
		}

		return e.complexity.Enterprise.ContactPersons(childComplexity), true

	case "Enterprise.create_at":
		if e.complexity.Enterprise.CreateAt == nil {
			break
		}

		return e.complexity.Enterprise.CreateAt(childComplexity), true

	case "Enterprise.create_by":
		if e.complexity.Enterprise.CreateBy == nil {
			break
		}

		return e.complexity.Enterprise.CreateBy(childComplexity), true

	case "Enterprise.delete_at":
		if e.complexity.Enterprise.DeleteAt == nil {
			break
		}

		return e.complexity.Enterprise.DeleteAt(childComplexity), true

	case "Enterprise.delete_by":
		if e.complexity.Enterprise.DeleteBy == nil {
			break
		}

		return e.complexity.Enterprise.DeleteBy(childComplexity), true

	case "Enterprise.display_number":
		if e.complexity.Enterprise.DisplayNumber == nil {
			break
		}

		return e.complexity.Enterprise.DisplayNumber(childComplexity), true

	case "Enterprise.district_id":
		if e.complexity.Enterprise.DistrictID == nil {
			break
		}

		return e.complexity.Enterprise.DistrictID(childComplexity), true

	case "Enterprise.enterprise_address":
		if e.complexity.Enterprise.EnterpriseAddress == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseAddress(childComplexity), true

	case "Enterprise.enterprise_code":
		if e.complexity.Enterprise.EnterpriseCode == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseCode(childComplexity), true

	case "Enterprise.enterprise_id":
		if e.complexity.Enterprise.EnterpriseID == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseID(childComplexity), true

	case "Enterprise.enterprise_level":
		if e.complexity.Enterprise.EnterpriseLevel == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseLevel(childComplexity), true

	case "Enterprise.enterprise_name":
		if e.complexity.Enterprise.EnterpriseName == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseName(childComplexity), true

	case "Enterprise.enterprise_nature":
		if e.complexity.Enterprise.EnterpriseNature == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseNature(childComplexity), true

	case "Enterprise.entrusted_agent":
		if e.complexity.Enterprise.EntrustedAgent == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgent(childComplexity), true

	case "Enterprise.entrusted_agent_id_card":
		if e.complexity.Enterprise.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgentIDCard(childComplexity), true

	case "Enterprise.entrusted_agent_id_card_photo":
		if e.complexity.Enterprise.EntrustedAgentIDCardPhoto == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgentIDCardPhoto(childComplexity), true

	case "Enterprise.entrusted_agent_phone":
		if e.complexity.Enterprise.EntrustedAgentPhone == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgentPhone(childComplexity), true

	case "Enterprise.fax_number":
		if e.complexity.Enterprise.FaxNumber == nil {
			break
		}

		return e.complexity.Enterprise.FaxNumber(childComplexity), true

	case "Enterprise.id":
		if e.complexity.Enterprise.ID == nil {
			break
		}

		return e.complexity.Enterprise.ID(childComplexity), true

	case "Enterprise.institution_category":
		if e.complexity.Enterprise.InstitutionCategory == nil {
			break
		}

		return e.complexity.Enterprise.InstitutionCategory(childComplexity), true

	case "Enterprise.is_black":
		if e.complexity.Enterprise.IsBlack == nil {
			break
		}

		return e.complexity.Enterprise.IsBlack(childComplexity), true

	case "Enterprise.is_deleted":
		if e.complexity.Enterprise.IsDeleted == nil {
			break
		}

		return e.complexity.Enterprise.IsDeleted(childComplexity), true

	case "Enterprise.is_input":
		if e.complexity.Enterprise.IsInput == nil {
			break
		}

		return e.complexity.Enterprise.IsInput(childComplexity), true

	case "Enterprise.is_install":
		if e.complexity.Enterprise.IsInstall == nil {
			break
		}

		return e.complexity.Enterprise.IsInstall(childComplexity), true

	case "Enterprise.is_upload_province":
		if e.complexity.Enterprise.IsUploadProvince == nil {
			break
		}

		return e.complexity.Enterprise.IsUploadProvince(childComplexity), true

	case "Enterprise.legal_representative":
		if e.complexity.Enterprise.LegalRepresentative == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentative(childComplexity), true

	case "Enterprise.legal_representative_id_card":
		if e.complexity.Enterprise.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentativeIDCard(childComplexity), true

	case "Enterprise.legal_representative_id_card_photo":
		if e.complexity.Enterprise.LegalRepresentativeIDCardPhoto == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentativeIDCardPhoto(childComplexity), true

	case "Enterprise.legal_representative_phone":
		if e.complexity.Enterprise.LegalRepresentativePhone == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentativePhone(childComplexity), true

	case "Enterprise.operating_license_photo":
		if e.complexity.Enterprise.OperatingLicensePhoto == nil {
			break
		}

		return e.complexity.Enterprise.OperatingLicensePhoto(childComplexity), true

	case "Enterprise.organization_code":
		if e.complexity.Enterprise.OrganizationCode == nil {
			break
		}

		return e.complexity.Enterprise.OrganizationCode(childComplexity), true

	case "Enterprise.organization_code_certificate_photo":
		if e.complexity.Enterprise.OrganizationCodeCertificatePhoto == nil {
			break
		}

		return e.complexity.Enterprise.OrganizationCodeCertificatePhoto(childComplexity), true

	case "Enterprise.police_station_id":
		if e.complexity.Enterprise.PoliceStationID == nil {
			break
		}

		return e.complexity.Enterprise.PoliceStationID(childComplexity), true

	case "Enterprise.province_id":
		if e.complexity.Enterprise.ProvinceID == nil {
			break
		}

		return e.complexity.Enterprise.ProvinceID(childComplexity), true

	case "Enterprise.record_at":
		if e.complexity.Enterprise.RecordAt == nil {
			break
		}

		return e.complexity.Enterprise.RecordAt(childComplexity), true

	case "Enterprise.record_by":
		if e.complexity.Enterprise.RecordBy == nil {
			break
		}

		return e.complexity.Enterprise.RecordBy(childComplexity), true

	case "Enterprise.remarks":
		if e.complexity.Enterprise.Remarks == nil {
			break
		}

		return e.complexity.Enterprise.Remarks(childComplexity), true

	case "Enterprise.score":
		if e.complexity.Enterprise.Score == nil {
			break
		}

		return e.complexity.Enterprise.Score(childComplexity), true

	case "Enterprise.superior_enterprise_id":
		if e.complexity.Enterprise.SuperiorEnterpriseID == nil {
			break
		}

		return e.complexity.Enterprise.SuperiorEnterpriseID(childComplexity), true

	case "Enterprise.update_at":
		if e.complexity.Enterprise.UpdateAt == nil {
			break
		}

		return e.complexity.Enterprise.UpdateAt(childComplexity), true

	case "Enterprise.update_by":
		if e.complexity.Enterprise.UpdateBy == nil {
			break
		}

		return e.complexity.Enterprise.UpdateBy(childComplexity), true

	case "Enterprise.update_time_in":
		if e.complexity.Enterprise.UpdateTimeIn == nil {
			break
		}

		return e.complexity.Enterprise.UpdateTimeIn(childComplexity), true

	case "EnterpriseAggregate.aggregate":
		if e.complexity.EnterpriseAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseAggregate.Aggregate(childComplexity), true

	case "EnterpriseAggregate.nodes":
		if e.complexity.EnterpriseAggregate.Nodes == nil {
			break
		}

		return e.complexity.EnterpriseAggregate.Nodes(childComplexity), true

	case "EnterpriseAggregateFields.avg":
		if e.complexity.EnterpriseAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Avg(childComplexity), true

	case "EnterpriseAggregateFields.count":
		if e.complexity.EnterpriseAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_EnterpriseAggregateFields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EnterpriseAggregateFields.Count(childComplexity, args["columns"].([]model.EnterpriseSelectColumn), args["distinct"].(*bool)), true

	case "EnterpriseAggregateFields.max":
		if e.complexity.EnterpriseAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Max(childComplexity), true

	case "EnterpriseAggregateFields.min":
		if e.complexity.EnterpriseAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Min(childComplexity), true

	case "EnterpriseAggregateFields.stddev":
		if e.complexity.EnterpriseAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Stddev(childComplexity), true

	case "EnterpriseAggregateFields.stddev_pop":
		if e.complexity.EnterpriseAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.StddevPop(childComplexity), true

	case "EnterpriseAggregateFields.stddev_samp":
		if e.complexity.EnterpriseAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.StddevSamp(childComplexity), true

	case "EnterpriseAggregateFields.sum":
		if e.complexity.EnterpriseAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Sum(childComplexity), true

	case "EnterpriseAggregateFields.var_pop":
		if e.complexity.EnterpriseAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.VarPop(childComplexity), true

	case "EnterpriseAggregateFields.var_samp":
		if e.complexity.EnterpriseAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.VarSamp(childComplexity), true

	case "EnterpriseAggregateFields.variance":
		if e.complexity.EnterpriseAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Variance(childComplexity), true

	case "EnterpriseAvgFields.business_scope":
		if e.complexity.EnterpriseAvgFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.BusinessScope(childComplexity), true

	case "EnterpriseAvgFields.check_status":
		if e.complexity.EnterpriseAvgFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.CheckStatus(childComplexity), true

	case "EnterpriseAvgFields.city_id":
		if e.complexity.EnterpriseAvgFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.CityID(childComplexity), true

	case "EnterpriseAvgFields.display_number":
		if e.complexity.EnterpriseAvgFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.DisplayNumber(childComplexity), true

	case "EnterpriseAvgFields.district_id":
		if e.complexity.EnterpriseAvgFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.DistrictID(childComplexity), true

	case "EnterpriseAvgFields.enterprise_level":
		if e.complexity.EnterpriseAvgFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseAvgFields.enterprise_nature":
		if e.complexity.EnterpriseAvgFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.EnterpriseNature(childComplexity), true

	case "EnterpriseAvgFields.id":
		if e.complexity.EnterpriseAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.ID(childComplexity), true

	case "EnterpriseAvgFields.institution_category":
		if e.complexity.EnterpriseAvgFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.InstitutionCategory(childComplexity), true

	case "EnterpriseAvgFields.province_id":
		if e.complexity.EnterpriseAvgFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.ProvinceID(childComplexity), true

	case "EnterpriseAvgFields.score":
		if e.complexity.EnterpriseAvgFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.Score(childComplexity), true

	case "EnterpriseMaxFields.association_review_by":
		if e.complexity.EnterpriseMaxFields.AssociationReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.AssociationReviewBy(childComplexity), true

	case "EnterpriseMaxFields.association_review_opinion":
		if e.complexity.EnterpriseMaxFields.AssociationReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.AssociationReviewOpinion(childComplexity), true

	case "EnterpriseMaxFields.association_review_time":
		if e.complexity.EnterpriseMaxFields.AssociationReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.AssociationReviewTime(childComplexity), true

	case "EnterpriseMaxFields.brigade_id":
		if e.complexity.EnterpriseMaxFields.BrigadeID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeID(childComplexity), true

	case "EnterpriseMaxFields.brigade_review_by":
		if e.complexity.EnterpriseMaxFields.BrigadeReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeReviewBy(childComplexity), true

	case "EnterpriseMaxFields.brigade_review_opinion":
		if e.complexity.EnterpriseMaxFields.BrigadeReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeReviewOpinion(childComplexity), true

	case "EnterpriseMaxFields.brigade_review_time":
		if e.complexity.EnterpriseMaxFields.BrigadeReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeReviewTime(childComplexity), true

	case "EnterpriseMaxFields.business_license_expiry_date":
		if e.complexity.EnterpriseMaxFields.BusinessLicenseExpiryDate == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessLicenseExpiryDate(childComplexity), true

	case "EnterpriseMaxFields.business_license_issuance_date":
		if e.complexity.EnterpriseMaxFields.BusinessLicenseIssuanceDate == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessLicenseIssuanceDate(childComplexity), true

	case "EnterpriseMaxFields.business_license_photo":
		if e.complexity.EnterpriseMaxFields.BusinessLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessLicensePhoto(childComplexity), true

	case "EnterpriseMaxFields.business_photo":
		if e.complexity.EnterpriseMaxFields.BusinessPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessPhoto(childComplexity), true

	case "EnterpriseMaxFields.business_scope":
		if e.complexity.EnterpriseMaxFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessScope(childComplexity), true

	case "EnterpriseMaxFields.check_status":
		if e.complexity.EnterpriseMaxFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CheckStatus(childComplexity), true

	case "EnterpriseMaxFields.city_id":
		if e.complexity.EnterpriseMaxFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CityID(childComplexity), true

	case "EnterpriseMaxFields.create_at":
		if e.complexity.EnterpriseMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CreateAt(childComplexity), true

	case "EnterpriseMaxFields.create_by":
		if e.complexity.EnterpriseMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CreateBy(childComplexity), true

	case "EnterpriseMaxFields.delete_at":
		if e.complexity.EnterpriseMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DeleteAt(childComplexity), true

	case "EnterpriseMaxFields.delete_by":
		if e.complexity.EnterpriseMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DeleteBy(childComplexity), true

	case "EnterpriseMaxFields.display_number":
		if e.complexity.EnterpriseMaxFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DisplayNumber(childComplexity), true

	case "EnterpriseMaxFields.district_id":
		if e.complexity.EnterpriseMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DistrictID(childComplexity), true

	case "EnterpriseMaxFields.enterprise_address":
		if e.complexity.EnterpriseMaxFields.EnterpriseAddress == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseAddress(childComplexity), true

	case "EnterpriseMaxFields.enterprise_code":
		if e.complexity.EnterpriseMaxFields.EnterpriseCode == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseCode(childComplexity), true

	case "EnterpriseMaxFields.enterprise_id":
		if e.complexity.EnterpriseMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseID(childComplexity), true

	case "EnterpriseMaxFields.enterprise_level":
		if e.complexity.EnterpriseMaxFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseMaxFields.enterprise_name":
		if e.complexity.EnterpriseMaxFields.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseName(childComplexity), true

	case "EnterpriseMaxFields.enterprise_nature":
		if e.complexity.EnterpriseMaxFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseNature(childComplexity), true

	case "EnterpriseMaxFields.entrusted_agent":
		if e.complexity.EnterpriseMaxFields.EntrustedAgent == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgent(childComplexity), true

	case "EnterpriseMaxFields.entrusted_agent_id_card":
		if e.complexity.EnterpriseMaxFields.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgentIDCard(childComplexity), true

	case "EnterpriseMaxFields.entrusted_agent_id_card_photo":
		if e.complexity.EnterpriseMaxFields.EntrustedAgentIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgentIDCardPhoto(childComplexity), true

	case "EnterpriseMaxFields.entrusted_agent_phone":
		if e.complexity.EnterpriseMaxFields.EntrustedAgentPhone == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgentPhone(childComplexity), true

	case "EnterpriseMaxFields.fax_number":
		if e.complexity.EnterpriseMaxFields.FaxNumber == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.FaxNumber(childComplexity), true

	case "EnterpriseMaxFields.id":
		if e.complexity.EnterpriseMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.ID(childComplexity), true

	case "EnterpriseMaxFields.institution_category":
		if e.complexity.EnterpriseMaxFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.InstitutionCategory(childComplexity), true

	case "EnterpriseMaxFields.legal_representative":
		if e.complexity.EnterpriseMaxFields.LegalRepresentative == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentative(childComplexity), true

	case "EnterpriseMaxFields.legal_representative_id_card":
		if e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCard(childComplexity), true

	case "EnterpriseMaxFields.legal_representative_id_card_photo":
		if e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCardPhoto(childComplexity), true

	case "EnterpriseMaxFields.legal_representative_phone":
		if e.complexity.EnterpriseMaxFields.LegalRepresentativePhone == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentativePhone(childComplexity), true

	case "EnterpriseMaxFields.operating_license_photo":
		if e.complexity.EnterpriseMaxFields.OperatingLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.OperatingLicensePhoto(childComplexity), true

	case "EnterpriseMaxFields.organization_code":
		if e.complexity.EnterpriseMaxFields.OrganizationCode == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.OrganizationCode(childComplexity), true

	case "EnterpriseMaxFields.organization_code_certificate_photo":
		if e.complexity.EnterpriseMaxFields.OrganizationCodeCertificatePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.OrganizationCodeCertificatePhoto(childComplexity), true

	case "EnterpriseMaxFields.police_station_id":
		if e.complexity.EnterpriseMaxFields.PoliceStationID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.PoliceStationID(childComplexity), true

	case "EnterpriseMaxFields.province_id":
		if e.complexity.EnterpriseMaxFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.ProvinceID(childComplexity), true

	case "EnterpriseMaxFields.record_at":
		if e.complexity.EnterpriseMaxFields.RecordAt == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.RecordAt(childComplexity), true

	case "EnterpriseMaxFields.record_by":
		if e.complexity.EnterpriseMaxFields.RecordBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.RecordBy(childComplexity), true

	case "EnterpriseMaxFields.remarks":
		if e.complexity.EnterpriseMaxFields.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.Remarks(childComplexity), true

	case "EnterpriseMaxFields.score":
		if e.complexity.EnterpriseMaxFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.Score(childComplexity), true

	case "EnterpriseMaxFields.superior_enterprise_id":
		if e.complexity.EnterpriseMaxFields.SuperiorEnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.SuperiorEnterpriseID(childComplexity), true

	case "EnterpriseMaxFields.update_at":
		if e.complexity.EnterpriseMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.UpdateAt(childComplexity), true

	case "EnterpriseMaxFields.update_by":
		if e.complexity.EnterpriseMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.UpdateBy(childComplexity), true

	case "EnterpriseMaxFields.update_time_in":
		if e.complexity.EnterpriseMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.UpdateTimeIn(childComplexity), true

	case "EnterpriseMinFields.association_review_by":
		if e.complexity.EnterpriseMinFields.AssociationReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.AssociationReviewBy(childComplexity), true

	case "EnterpriseMinFields.association_review_opinion":
		if e.complexity.EnterpriseMinFields.AssociationReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.AssociationReviewOpinion(childComplexity), true

	case "EnterpriseMinFields.association_review_time":
		if e.complexity.EnterpriseMinFields.AssociationReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.AssociationReviewTime(childComplexity), true

	case "EnterpriseMinFields.brigade_id":
		if e.complexity.EnterpriseMinFields.BrigadeID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeID(childComplexity), true

	case "EnterpriseMinFields.brigade_review_by":
		if e.complexity.EnterpriseMinFields.BrigadeReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeReviewBy(childComplexity), true

	case "EnterpriseMinFields.brigade_review_opinion":
		if e.complexity.EnterpriseMinFields.BrigadeReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeReviewOpinion(childComplexity), true

	case "EnterpriseMinFields.brigade_review_time":
		if e.complexity.EnterpriseMinFields.BrigadeReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeReviewTime(childComplexity), true

	case "EnterpriseMinFields.business_license_expiry_date":
		if e.complexity.EnterpriseMinFields.BusinessLicenseExpiryDate == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessLicenseExpiryDate(childComplexity), true

	case "EnterpriseMinFields.business_license_issuance_date":
		if e.complexity.EnterpriseMinFields.BusinessLicenseIssuanceDate == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessLicenseIssuanceDate(childComplexity), true

	case "EnterpriseMinFields.business_license_photo":
		if e.complexity.EnterpriseMinFields.BusinessLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessLicensePhoto(childComplexity), true

	case "EnterpriseMinFields.business_photo":
		if e.complexity.EnterpriseMinFields.BusinessPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessPhoto(childComplexity), true

	case "EnterpriseMinFields.business_scope":
		if e.complexity.EnterpriseMinFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessScope(childComplexity), true

	case "EnterpriseMinFields.check_status":
		if e.complexity.EnterpriseMinFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CheckStatus(childComplexity), true

	case "EnterpriseMinFields.city_id":
		if e.complexity.EnterpriseMinFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CityID(childComplexity), true

	case "EnterpriseMinFields.create_at":
		if e.complexity.EnterpriseMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CreateAt(childComplexity), true

	case "EnterpriseMinFields.create_by":
		if e.complexity.EnterpriseMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CreateBy(childComplexity), true

	case "EnterpriseMinFields.delete_at":
		if e.complexity.EnterpriseMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DeleteAt(childComplexity), true

	case "EnterpriseMinFields.delete_by":
		if e.complexity.EnterpriseMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DeleteBy(childComplexity), true

	case "EnterpriseMinFields.display_number":
		if e.complexity.EnterpriseMinFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DisplayNumber(childComplexity), true

	case "EnterpriseMinFields.district_id":
		if e.complexity.EnterpriseMinFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DistrictID(childComplexity), true

	case "EnterpriseMinFields.enterprise_address":
		if e.complexity.EnterpriseMinFields.EnterpriseAddress == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseAddress(childComplexity), true

	case "EnterpriseMinFields.enterprise_code":
		if e.complexity.EnterpriseMinFields.EnterpriseCode == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseCode(childComplexity), true

	case "EnterpriseMinFields.enterprise_id":
		if e.complexity.EnterpriseMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseID(childComplexity), true

	case "EnterpriseMinFields.enterprise_level":
		if e.complexity.EnterpriseMinFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseMinFields.enterprise_name":
		if e.complexity.EnterpriseMinFields.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseName(childComplexity), true

	case "EnterpriseMinFields.enterprise_nature":
		if e.complexity.EnterpriseMinFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseNature(childComplexity), true

	case "EnterpriseMinFields.entrusted_agent":
		if e.complexity.EnterpriseMinFields.EntrustedAgent == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgent(childComplexity), true

	case "EnterpriseMinFields.entrusted_agent_id_card":
		if e.complexity.EnterpriseMinFields.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgentIDCard(childComplexity), true

	case "EnterpriseMinFields.entrusted_agent_id_card_photo":
		if e.complexity.EnterpriseMinFields.EntrustedAgentIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgentIDCardPhoto(childComplexity), true

	case "EnterpriseMinFields.entrusted_agent_phone":
		if e.complexity.EnterpriseMinFields.EntrustedAgentPhone == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgentPhone(childComplexity), true

	case "EnterpriseMinFields.fax_number":
		if e.complexity.EnterpriseMinFields.FaxNumber == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.FaxNumber(childComplexity), true

	case "EnterpriseMinFields.id":
		if e.complexity.EnterpriseMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.ID(childComplexity), true

	case "EnterpriseMinFields.institution_category":
		if e.complexity.EnterpriseMinFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.InstitutionCategory(childComplexity), true

	case "EnterpriseMinFields.legal_representative":
		if e.complexity.EnterpriseMinFields.LegalRepresentative == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentative(childComplexity), true

	case "EnterpriseMinFields.legal_representative_id_card":
		if e.complexity.EnterpriseMinFields.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentativeIDCard(childComplexity), true

	case "EnterpriseMinFields.legal_representative_id_card_photo":
		if e.complexity.EnterpriseMinFields.LegalRepresentativeIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentativeIDCardPhoto(childComplexity), true

	case "EnterpriseMinFields.legal_representative_phone":
		if e.complexity.EnterpriseMinFields.LegalRepresentativePhone == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentativePhone(childComplexity), true

	case "EnterpriseMinFields.operating_license_photo":
		if e.complexity.EnterpriseMinFields.OperatingLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.OperatingLicensePhoto(childComplexity), true

	case "EnterpriseMinFields.organization_code":
		if e.complexity.EnterpriseMinFields.OrganizationCode == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.OrganizationCode(childComplexity), true

	case "EnterpriseMinFields.organization_code_certificate_photo":
		if e.complexity.EnterpriseMinFields.OrganizationCodeCertificatePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.OrganizationCodeCertificatePhoto(childComplexity), true

	case "EnterpriseMinFields.police_station_id":
		if e.complexity.EnterpriseMinFields.PoliceStationID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.PoliceStationID(childComplexity), true

	case "EnterpriseMinFields.province_id":
		if e.complexity.EnterpriseMinFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.ProvinceID(childComplexity), true

	case "EnterpriseMinFields.record_at":
		if e.complexity.EnterpriseMinFields.RecordAt == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.RecordAt(childComplexity), true

	case "EnterpriseMinFields.record_by":
		if e.complexity.EnterpriseMinFields.RecordBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.RecordBy(childComplexity), true

	case "EnterpriseMinFields.remarks":
		if e.complexity.EnterpriseMinFields.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.Remarks(childComplexity), true

	case "EnterpriseMinFields.score":
		if e.complexity.EnterpriseMinFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.Score(childComplexity), true

	case "EnterpriseMinFields.superior_enterprise_id":
		if e.complexity.EnterpriseMinFields.SuperiorEnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.SuperiorEnterpriseID(childComplexity), true

	case "EnterpriseMinFields.update_at":
		if e.complexity.EnterpriseMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.UpdateAt(childComplexity), true

	case "EnterpriseMinFields.update_by":
		if e.complexity.EnterpriseMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.UpdateBy(childComplexity), true

	case "EnterpriseMinFields.update_time_in":
		if e.complexity.EnterpriseMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.UpdateTimeIn(childComplexity), true

	case "EnterpriseMutationResponse.affected_rows":
		if e.complexity.EnterpriseMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseMutationResponse.AffectedRows(childComplexity), true

	case "EnterpriseMutationResponse.returning":
		if e.complexity.EnterpriseMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseMutationResponse.Returning(childComplexity), true

	case "EnterpriseStddevFields.business_scope":
		if e.complexity.EnterpriseStddevFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.BusinessScope(childComplexity), true

	case "EnterpriseStddevFields.check_status":
		if e.complexity.EnterpriseStddevFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.CheckStatus(childComplexity), true

	case "EnterpriseStddevFields.city_id":
		if e.complexity.EnterpriseStddevFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.CityID(childComplexity), true

	case "EnterpriseStddevFields.display_number":
		if e.complexity.EnterpriseStddevFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.DisplayNumber(childComplexity), true

	case "EnterpriseStddevFields.district_id":
		if e.complexity.EnterpriseStddevFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.DistrictID(childComplexity), true

	case "EnterpriseStddevFields.enterprise_level":
		if e.complexity.EnterpriseStddevFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseStddevFields.enterprise_nature":
		if e.complexity.EnterpriseStddevFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.EnterpriseNature(childComplexity), true

	case "EnterpriseStddevFields.id":
		if e.complexity.EnterpriseStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.ID(childComplexity), true

	case "EnterpriseStddevFields.institution_category":
		if e.complexity.EnterpriseStddevFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.InstitutionCategory(childComplexity), true

	case "EnterpriseStddevFields.province_id":
		if e.complexity.EnterpriseStddevFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.ProvinceID(childComplexity), true

	case "EnterpriseStddevFields.score":
		if e.complexity.EnterpriseStddevFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.Score(childComplexity), true

	case "EnterpriseStddevPopFields.business_scope":
		if e.complexity.EnterpriseStddevPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.BusinessScope(childComplexity), true

	case "EnterpriseStddevPopFields.check_status":
		if e.complexity.EnterpriseStddevPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.CheckStatus(childComplexity), true

	case "EnterpriseStddevPopFields.city_id":
		if e.complexity.EnterpriseStddevPopFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.CityID(childComplexity), true

	case "EnterpriseStddevPopFields.display_number":
		if e.complexity.EnterpriseStddevPopFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.DisplayNumber(childComplexity), true

	case "EnterpriseStddevPopFields.district_id":
		if e.complexity.EnterpriseStddevPopFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.DistrictID(childComplexity), true

	case "EnterpriseStddevPopFields.enterprise_level":
		if e.complexity.EnterpriseStddevPopFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseStddevPopFields.enterprise_nature":
		if e.complexity.EnterpriseStddevPopFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.EnterpriseNature(childComplexity), true

	case "EnterpriseStddevPopFields.id":
		if e.complexity.EnterpriseStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.ID(childComplexity), true

	case "EnterpriseStddevPopFields.institution_category":
		if e.complexity.EnterpriseStddevPopFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.InstitutionCategory(childComplexity), true

	case "EnterpriseStddevPopFields.province_id":
		if e.complexity.EnterpriseStddevPopFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.ProvinceID(childComplexity), true

	case "EnterpriseStddevPopFields.score":
		if e.complexity.EnterpriseStddevPopFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.Score(childComplexity), true

	case "EnterpriseStddevSampFields.business_scope":
		if e.complexity.EnterpriseStddevSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.BusinessScope(childComplexity), true

	case "EnterpriseStddevSampFields.check_status":
		if e.complexity.EnterpriseStddevSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.CheckStatus(childComplexity), true

	case "EnterpriseStddevSampFields.city_id":
		if e.complexity.EnterpriseStddevSampFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.CityID(childComplexity), true

	case "EnterpriseStddevSampFields.display_number":
		if e.complexity.EnterpriseStddevSampFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.DisplayNumber(childComplexity), true

	case "EnterpriseStddevSampFields.district_id":
		if e.complexity.EnterpriseStddevSampFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.DistrictID(childComplexity), true

	case "EnterpriseStddevSampFields.enterprise_level":
		if e.complexity.EnterpriseStddevSampFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseStddevSampFields.enterprise_nature":
		if e.complexity.EnterpriseStddevSampFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.EnterpriseNature(childComplexity), true

	case "EnterpriseStddevSampFields.id":
		if e.complexity.EnterpriseStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.ID(childComplexity), true

	case "EnterpriseStddevSampFields.institution_category":
		if e.complexity.EnterpriseStddevSampFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.InstitutionCategory(childComplexity), true

	case "EnterpriseStddevSampFields.province_id":
		if e.complexity.EnterpriseStddevSampFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.ProvinceID(childComplexity), true

	case "EnterpriseStddevSampFields.score":
		if e.complexity.EnterpriseStddevSampFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.Score(childComplexity), true

	case "EnterpriseSumFields.business_scope":
		if e.complexity.EnterpriseSumFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.BusinessScope(childComplexity), true

	case "EnterpriseSumFields.check_status":
		if e.complexity.EnterpriseSumFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.CheckStatus(childComplexity), true

	case "EnterpriseSumFields.city_id":
		if e.complexity.EnterpriseSumFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.CityID(childComplexity), true

	case "EnterpriseSumFields.display_number":
		if e.complexity.EnterpriseSumFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.DisplayNumber(childComplexity), true

	case "EnterpriseSumFields.district_id":
		if e.complexity.EnterpriseSumFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.DistrictID(childComplexity), true

	case "EnterpriseSumFields.enterprise_level":
		if e.complexity.EnterpriseSumFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseSumFields.enterprise_nature":
		if e.complexity.EnterpriseSumFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.EnterpriseNature(childComplexity), true

	case "EnterpriseSumFields.id":
		if e.complexity.EnterpriseSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.ID(childComplexity), true

	case "EnterpriseSumFields.institution_category":
		if e.complexity.EnterpriseSumFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.InstitutionCategory(childComplexity), true

	case "EnterpriseSumFields.province_id":
		if e.complexity.EnterpriseSumFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.ProvinceID(childComplexity), true

	case "EnterpriseSumFields.score":
		if e.complexity.EnterpriseSumFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.Score(childComplexity), true

	case "EnterpriseVarPopFields.business_scope":
		if e.complexity.EnterpriseVarPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.BusinessScope(childComplexity), true

	case "EnterpriseVarPopFields.check_status":
		if e.complexity.EnterpriseVarPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.CheckStatus(childComplexity), true

	case "EnterpriseVarPopFields.city_id":
		if e.complexity.EnterpriseVarPopFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.CityID(childComplexity), true

	case "EnterpriseVarPopFields.display_number":
		if e.complexity.EnterpriseVarPopFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.DisplayNumber(childComplexity), true

	case "EnterpriseVarPopFields.district_id":
		if e.complexity.EnterpriseVarPopFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.DistrictID(childComplexity), true

	case "EnterpriseVarPopFields.enterprise_level":
		if e.complexity.EnterpriseVarPopFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseVarPopFields.enterprise_nature":
		if e.complexity.EnterpriseVarPopFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.EnterpriseNature(childComplexity), true

	case "EnterpriseVarPopFields.id":
		if e.complexity.EnterpriseVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.ID(childComplexity), true

	case "EnterpriseVarPopFields.institution_category":
		if e.complexity.EnterpriseVarPopFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.InstitutionCategory(childComplexity), true

	case "EnterpriseVarPopFields.province_id":
		if e.complexity.EnterpriseVarPopFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.ProvinceID(childComplexity), true

	case "EnterpriseVarPopFields.score":
		if e.complexity.EnterpriseVarPopFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.Score(childComplexity), true

	case "EnterpriseVarSampFields.business_scope":
		if e.complexity.EnterpriseVarSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.BusinessScope(childComplexity), true

	case "EnterpriseVarSampFields.check_status":
		if e.complexity.EnterpriseVarSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.CheckStatus(childComplexity), true

	case "EnterpriseVarSampFields.city_id":
		if e.complexity.EnterpriseVarSampFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.CityID(childComplexity), true

	case "EnterpriseVarSampFields.display_number":
		if e.complexity.EnterpriseVarSampFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.DisplayNumber(childComplexity), true

	case "EnterpriseVarSampFields.district_id":
		if e.complexity.EnterpriseVarSampFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.DistrictID(childComplexity), true

	case "EnterpriseVarSampFields.enterprise_level":
		if e.complexity.EnterpriseVarSampFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseVarSampFields.enterprise_nature":
		if e.complexity.EnterpriseVarSampFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.EnterpriseNature(childComplexity), true

	case "EnterpriseVarSampFields.id":
		if e.complexity.EnterpriseVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.ID(childComplexity), true

	case "EnterpriseVarSampFields.institution_category":
		if e.complexity.EnterpriseVarSampFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.InstitutionCategory(childComplexity), true

	case "EnterpriseVarSampFields.province_id":
		if e.complexity.EnterpriseVarSampFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.ProvinceID(childComplexity), true

	case "EnterpriseVarSampFields.score":
		if e.complexity.EnterpriseVarSampFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.Score(childComplexity), true

	case "EnterpriseVarianceFields.business_scope":
		if e.complexity.EnterpriseVarianceFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.BusinessScope(childComplexity), true

	case "EnterpriseVarianceFields.check_status":
		if e.complexity.EnterpriseVarianceFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.CheckStatus(childComplexity), true

	case "EnterpriseVarianceFields.city_id":
		if e.complexity.EnterpriseVarianceFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.CityID(childComplexity), true

	case "EnterpriseVarianceFields.display_number":
		if e.complexity.EnterpriseVarianceFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.DisplayNumber(childComplexity), true

	case "EnterpriseVarianceFields.district_id":
		if e.complexity.EnterpriseVarianceFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.DistrictID(childComplexity), true

	case "EnterpriseVarianceFields.enterprise_level":
		if e.complexity.EnterpriseVarianceFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.EnterpriseLevel(childComplexity), true

	case "EnterpriseVarianceFields.enterprise_nature":
		if e.complexity.EnterpriseVarianceFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.EnterpriseNature(childComplexity), true

	case "EnterpriseVarianceFields.id":
		if e.complexity.EnterpriseVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.ID(childComplexity), true

	case "EnterpriseVarianceFields.institution_category":
		if e.complexity.EnterpriseVarianceFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.InstitutionCategory(childComplexity), true

	case "EnterpriseVarianceFields.province_id":
		if e.complexity.EnterpriseVarianceFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.ProvinceID(childComplexity), true

	case "EnterpriseVarianceFields.score":
		if e.complexity.EnterpriseVarianceFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.Score(childComplexity), true

	case "Mutation.delete_department":
		if e.complexity.Mutation.DeleteDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_delete_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDepartment(childComplexity, args["where"].(model.DepartmentBoolExp)), true

	case "Mutation.delete_department_by_pk":
		if e.complexity.Mutation.DeleteDepartmentByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_department_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDepartmentByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise":
		if e.complexity.Mutation.DeleteEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterprise(childComplexity, args["where"].(model.EnterpriseBoolExp)), true

	case "Mutation.delete_enterprise_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_system_user":
		if e.complexity.Mutation.DeleteSystemUser == nil {
			break
		}

		args, err := ec.field_Mutation_delete_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemUser(childComplexity, args["where"].(model.SystemUserBoolExp)), true

	case "Mutation.delete_system_user_by_pk":
		if e.complexity.Mutation.DeleteSystemUserByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_system_user_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemUserByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_department":
		if e.complexity.Mutation.InsertDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_insert_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDepartment(childComplexity, args["objects"].([]*model.DepartmentInsertInput), args["on_conflict"].(*model.DepartmentOnConflict)), true

	case "Mutation.insert_department_one":
		if e.complexity.Mutation.InsertDepartmentOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_department_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDepartmentOne(childComplexity, args["object"].(model.DepartmentInsertInput), args["on_conflict"].(*model.DepartmentOnConflict)), true

	case "Mutation.insert_enterprise":
		if e.complexity.Mutation.InsertEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterprise(childComplexity, args["objects"].([]*model.EnterpriseInsertInput), args["on_conflict"].(*model.EnterpriseOnConflict)), true

	case "Mutation.insert_enterprise_one":
		if e.complexity.Mutation.InsertEnterpriseOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseOne(childComplexity, args["object"].(model.EnterpriseInsertInput), args["on_conflict"].(*model.EnterpriseOnConflict)), true

	case "Mutation.insert_system_user":
		if e.complexity.Mutation.InsertSystemUser == nil {
			break
		}

		args, err := ec.field_Mutation_insert_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSystemUser(childComplexity, args["objects"].([]*model.SystemUserInsertInput), args["on_conflict"].(*model.SystemUserOnConflict)), true

	case "Mutation.insert_system_user_one":
		if e.complexity.Mutation.InsertSystemUserOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_system_user_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSystemUserOne(childComplexity, args["object"].(model.SystemUserInsertInput), args["on_conflict"].(*model.SystemUserOnConflict)), true

	case "Mutation.update_department":
		if e.complexity.Mutation.UpdateDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_update_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDepartment(childComplexity, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["where"].(model.DepartmentBoolExp)), true

	case "Mutation.update_department_by_pk":
		if e.complexity.Mutation.UpdateDepartmentByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_department_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDepartmentByPk(childComplexity, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["pk_columns"].(model.DepartmentPkColumnsInput)), true

	case "Mutation.update_enterprise":
		if e.complexity.Mutation.UpdateEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterprise(childComplexity, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["where"].(model.EnterpriseBoolExp)), true

	case "Mutation.update_enterprise_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseByPk(childComplexity, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["pk_columns"].(model.EnterprisePkColumnsInput)), true

	case "Mutation.update_system_user":
		if e.complexity.Mutation.UpdateSystemUser == nil {
			break
		}

		args, err := ec.field_Mutation_update_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemUser(childComplexity, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["where"].(model.SystemUserBoolExp)), true

	case "Mutation.update_system_user_by_pk":
		if e.complexity.Mutation.UpdateSystemUserByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_system_user_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemUserByPk(childComplexity, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["pk_columns"].(model.SystemUserPkColumnsInput)), true

	case "Query.department":
		if e.complexity.Query.Department == nil {
			break
		}

		args, err := ec.field_Query_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Department(childComplexity, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp)), true

	case "Query.department_aggregate":
		if e.complexity.Query.DepartmentAggregate == nil {
			break
		}

		args, err := ec.field_Query_department_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepartmentAggregate(childComplexity, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp)), true

	case "Query.department_by_pk":
		if e.complexity.Query.DepartmentByPk == nil {
			break
		}

		args, err := ec.field_Query_department_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepartmentByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise":
		if e.complexity.Query.Enterprise == nil {
			break
		}

		args, err := ec.field_Query_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Enterprise(childComplexity, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp)), true

	case "Query.enterprise_aggregate":
		if e.complexity.Query.EnterpriseAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp)), true

	case "Query.enterprise_by_pk":
		if e.complexity.Query.EnterpriseByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseByPk(childComplexity, args["id"].(int64)), true

	case "Query.system_user":
		if e.complexity.Query.SystemUser == nil {
			break
		}

		args, err := ec.field_Query_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUser(childComplexity, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp)), true

	case "Query.system_user_aggregate":
		if e.complexity.Query.SystemUserAggregate == nil {
			break
		}

		args, err := ec.field_Query_system_user_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUserAggregate(childComplexity, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp)), true

	case "Query.system_user_by_pk":
		if e.complexity.Query.SystemUserByPk == nil {
			break
		}

		args, err := ec.field_Query_system_user_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUserByPk(childComplexity, args["id"].(int64)), true

	case "SystemUser.app_version":
		if e.complexity.SystemUser.AppVersion == nil {
			break
		}

		return e.complexity.SystemUser.AppVersion(childComplexity), true

	case "SystemUser.audit_level":
		if e.complexity.SystemUser.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUser.AuditLevel(childComplexity), true

	case "SystemUser.create_by":
		if e.complexity.SystemUser.CreateBy == nil {
			break
		}

		return e.complexity.SystemUser.CreateBy(childComplexity), true

	case "SystemUser.created_at":
		if e.complexity.SystemUser.CreatedAt == nil {
			break
		}

		return e.complexity.SystemUser.CreatedAt(childComplexity), true

	case "SystemUser.delete_at":
		if e.complexity.SystemUser.DeleteAt == nil {
			break
		}

		return e.complexity.SystemUser.DeleteAt(childComplexity), true

	case "SystemUser.delete_by":
		if e.complexity.SystemUser.DeleteBy == nil {
			break
		}

		return e.complexity.SystemUser.DeleteBy(childComplexity), true

	case "SystemUser.department":
		if e.complexity.SystemUser.Department == nil {
			break
		}

		return e.complexity.SystemUser.Department(childComplexity), true

	case "SystemUser.email":
		if e.complexity.SystemUser.Email == nil {
			break
		}

		return e.complexity.SystemUser.Email(childComplexity), true

	case "SystemUser.enterprise":
		if e.complexity.SystemUser.Enterprise == nil {
			break
		}

		return e.complexity.SystemUser.Enterprise(childComplexity), true

	case "SystemUser.grade":
		if e.complexity.SystemUser.Grade == nil {
			break
		}

		return e.complexity.SystemUser.Grade(childComplexity), true

	case "SystemUser.id":
		if e.complexity.SystemUser.ID == nil {
			break
		}

		return e.complexity.SystemUser.ID(childComplexity), true

	case "SystemUser.ip_address":
		if e.complexity.SystemUser.IPAddress == nil {
			break
		}

		return e.complexity.SystemUser.IPAddress(childComplexity), true

	case "SystemUser.Is_bind_ip":
		if e.complexity.SystemUser.IsBindIP == nil {
			break
		}

		return e.complexity.SystemUser.IsBindIP(childComplexity), true

	case "SystemUser.is_delete":
		if e.complexity.SystemUser.IsDelete == nil {
			break
		}

		return e.complexity.SystemUser.IsDelete(childComplexity), true

	case "SystemUser.is_valid":
		if e.complexity.SystemUser.IsValid == nil {
			break
		}

		return e.complexity.SystemUser.IsValid(childComplexity), true

	case "SystemUser.mkey":
		if e.complexity.SystemUser.Mkey == nil {
			break
		}

		return e.complexity.SystemUser.Mkey(childComplexity), true

	case "SystemUser.mobile":
		if e.complexity.SystemUser.Mobile == nil {
			break
		}

		return e.complexity.SystemUser.Mobile(childComplexity), true

	case "SystemUser.password":
		if e.complexity.SystemUser.Password == nil {
			break
		}

		return e.complexity.SystemUser.Password(childComplexity), true

	case "SystemUser.proxy_user":
		if e.complexity.SystemUser.ProxyUser == nil {
			break
		}

		return e.complexity.SystemUser.ProxyUser(childComplexity), true

	case "SystemUser.remarks":
		if e.complexity.SystemUser.Remarks == nil {
			break
		}

		return e.complexity.SystemUser.Remarks(childComplexity), true

	case "SystemUser.telephone":
		if e.complexity.SystemUser.Telephone == nil {
			break
		}

		return e.complexity.SystemUser.Telephone(childComplexity), true

	case "SystemUser.ukey":
		if e.complexity.SystemUser.Ukey == nil {
			break
		}

		return e.complexity.SystemUser.Ukey(childComplexity), true

	case "SystemUser.update_at":
		if e.complexity.SystemUser.UpdateAt == nil {
			break
		}

		return e.complexity.SystemUser.UpdateAt(childComplexity), true

	case "SystemUser.update_by":
		if e.complexity.SystemUser.UpdateBy == nil {
			break
		}

		return e.complexity.SystemUser.UpdateBy(childComplexity), true

	case "SystemUser.user_id":
		if e.complexity.SystemUser.UserID == nil {
			break
		}

		return e.complexity.SystemUser.UserID(childComplexity), true

	case "SystemUser.user_state":
		if e.complexity.SystemUser.UserState == nil {
			break
		}

		return e.complexity.SystemUser.UserState(childComplexity), true

	case "SystemUser.user_type":
		if e.complexity.SystemUser.UserType == nil {
			break
		}

		return e.complexity.SystemUser.UserType(childComplexity), true

	case "SystemUser.username":
		if e.complexity.SystemUser.Username == nil {
			break
		}

		return e.complexity.SystemUser.Username(childComplexity), true

	case "SystemUserAggregate.aggregate":
		if e.complexity.SystemUserAggregate.Aggregate == nil {
			break
		}

		return e.complexity.SystemUserAggregate.Aggregate(childComplexity), true

	case "SystemUserAggregate.nodes":
		if e.complexity.SystemUserAggregate.Nodes == nil {
			break
		}

		return e.complexity.SystemUserAggregate.Nodes(childComplexity), true

	case "SystemUserAggregateFields.avg":
		if e.complexity.SystemUserAggregateFields.Avg == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Avg(childComplexity), true

	case "SystemUserAggregateFields.count":
		if e.complexity.SystemUserAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_SystemUserAggregateFields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SystemUserAggregateFields.Count(childComplexity, args["columns"].([]model.SystemUserSelectColumn), args["distinct"].(*bool)), true

	case "SystemUserAggregateFields.max":
		if e.complexity.SystemUserAggregateFields.Max == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Max(childComplexity), true

	case "SystemUserAggregateFields.min":
		if e.complexity.SystemUserAggregateFields.Min == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Min(childComplexity), true

	case "SystemUserAggregateFields.stddev":
		if e.complexity.SystemUserAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Stddev(childComplexity), true

	case "SystemUserAggregateFields.stddev_pop":
		if e.complexity.SystemUserAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.StddevPop(childComplexity), true

	case "SystemUserAggregateFields.stddev_samp":
		if e.complexity.SystemUserAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.StddevSamp(childComplexity), true

	case "SystemUserAggregateFields.sum":
		if e.complexity.SystemUserAggregateFields.Sum == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Sum(childComplexity), true

	case "SystemUserAggregateFields.var_pop":
		if e.complexity.SystemUserAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.VarPop(childComplexity), true

	case "SystemUserAggregateFields.var_samp":
		if e.complexity.SystemUserAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.VarSamp(childComplexity), true

	case "SystemUserAggregateFields.variance":
		if e.complexity.SystemUserAggregateFields.Variance == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Variance(childComplexity), true

	case "SystemUserAvgFields.audit_level":
		if e.complexity.SystemUserAvgFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.AuditLevel(childComplexity), true

	case "SystemUserAvgFields.grade":
		if e.complexity.SystemUserAvgFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.Grade(childComplexity), true

	case "SystemUserAvgFields.id":
		if e.complexity.SystemUserAvgFields.ID == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.ID(childComplexity), true

	case "SystemUserAvgFields.user_state":
		if e.complexity.SystemUserAvgFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.UserState(childComplexity), true

	case "SystemUserAvgFields.user_type":
		if e.complexity.SystemUserAvgFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.UserType(childComplexity), true

	case "SystemUserMaxFields.app_version":
		if e.complexity.SystemUserMaxFields.AppVersion == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.AppVersion(childComplexity), true

	case "SystemUserMaxFields.audit_level":
		if e.complexity.SystemUserMaxFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.AuditLevel(childComplexity), true

	case "SystemUserMaxFields.create_by":
		if e.complexity.SystemUserMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.CreateBy(childComplexity), true

	case "SystemUserMaxFields.created_at":
		if e.complexity.SystemUserMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.CreatedAt(childComplexity), true

	case "SystemUserMaxFields.delete_at":
		if e.complexity.SystemUserMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.DeleteAt(childComplexity), true

	case "SystemUserMaxFields.delete_by":
		if e.complexity.SystemUserMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.DeleteBy(childComplexity), true

	case "SystemUserMaxFields.department_id":
		if e.complexity.SystemUserMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.DepartmentID(childComplexity), true

	case "SystemUserMaxFields.email":
		if e.complexity.SystemUserMaxFields.Email == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Email(childComplexity), true

	case "SystemUserMaxFields.enterprise_id":
		if e.complexity.SystemUserMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.EnterpriseID(childComplexity), true

	case "SystemUserMaxFields.grade":
		if e.complexity.SystemUserMaxFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Grade(childComplexity), true

	case "SystemUserMaxFields.id":
		if e.complexity.SystemUserMaxFields.ID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.ID(childComplexity), true

	case "SystemUserMaxFields.ip_address":
		if e.complexity.SystemUserMaxFields.IPAddress == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.IPAddress(childComplexity), true

	case "SystemUserMaxFields.mkey":
		if e.complexity.SystemUserMaxFields.Mkey == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Mkey(childComplexity), true

	case "SystemUserMaxFields.mobile":
		if e.complexity.SystemUserMaxFields.Mobile == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Mobile(childComplexity), true

	case "SystemUserMaxFields.password":
		if e.complexity.SystemUserMaxFields.Password == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Password(childComplexity), true

	case "SystemUserMaxFields.proxy_user":
		if e.complexity.SystemUserMaxFields.ProxyUser == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.ProxyUser(childComplexity), true

	case "SystemUserMaxFields.remarks":
		if e.complexity.SystemUserMaxFields.Remarks == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Remarks(childComplexity), true

	case "SystemUserMaxFields.telephone":
		if e.complexity.SystemUserMaxFields.Telephone == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Telephone(childComplexity), true

	case "SystemUserMaxFields.ukey":
		if e.complexity.SystemUserMaxFields.Ukey == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Ukey(childComplexity), true

	case "SystemUserMaxFields.update_at":
		if e.complexity.SystemUserMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UpdateAt(childComplexity), true

	case "SystemUserMaxFields.update_by":
		if e.complexity.SystemUserMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UpdateBy(childComplexity), true

	case "SystemUserMaxFields.user_id":
		if e.complexity.SystemUserMaxFields.UserID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UserID(childComplexity), true

	case "SystemUserMaxFields.user_state":
		if e.complexity.SystemUserMaxFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UserState(childComplexity), true

	case "SystemUserMaxFields.user_type":
		if e.complexity.SystemUserMaxFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UserType(childComplexity), true

	case "SystemUserMaxFields.username":
		if e.complexity.SystemUserMaxFields.Username == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Username(childComplexity), true

	case "SystemUserMinFields.app_version":
		if e.complexity.SystemUserMinFields.AppVersion == nil {
			break
		}

		return e.complexity.SystemUserMinFields.AppVersion(childComplexity), true

	case "SystemUserMinFields.audit_level":
		if e.complexity.SystemUserMinFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserMinFields.AuditLevel(childComplexity), true

	case "SystemUserMinFields.create_by":
		if e.complexity.SystemUserMinFields.CreateBy == nil {
			break
		}

		return e.complexity.SystemUserMinFields.CreateBy(childComplexity), true

	case "SystemUserMinFields.created_at":
		if e.complexity.SystemUserMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.SystemUserMinFields.CreatedAt(childComplexity), true

	case "SystemUserMinFields.delete_at":
		if e.complexity.SystemUserMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.SystemUserMinFields.DeleteAt(childComplexity), true

	case "SystemUserMinFields.delete_by":
		if e.complexity.SystemUserMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.SystemUserMinFields.DeleteBy(childComplexity), true

	case "SystemUserMinFields.department_id":
		if e.complexity.SystemUserMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.DepartmentID(childComplexity), true

	case "SystemUserMinFields.email":
		if e.complexity.SystemUserMinFields.Email == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Email(childComplexity), true

	case "SystemUserMinFields.enterprise_id":
		if e.complexity.SystemUserMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.EnterpriseID(childComplexity), true

	case "SystemUserMinFields.grade":
		if e.complexity.SystemUserMinFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Grade(childComplexity), true

	case "SystemUserMinFields.id":
		if e.complexity.SystemUserMinFields.ID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.ID(childComplexity), true

	case "SystemUserMinFields.ip_address":
		if e.complexity.SystemUserMinFields.IPAddress == nil {
			break
		}

		return e.complexity.SystemUserMinFields.IPAddress(childComplexity), true

	case "SystemUserMinFields.mkey":
		if e.complexity.SystemUserMinFields.Mkey == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Mkey(childComplexity), true

	case "SystemUserMinFields.mobile":
		if e.complexity.SystemUserMinFields.Mobile == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Mobile(childComplexity), true

	case "SystemUserMinFields.password":
		if e.complexity.SystemUserMinFields.Password == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Password(childComplexity), true

	case "SystemUserMinFields.proxy_user":
		if e.complexity.SystemUserMinFields.ProxyUser == nil {
			break
		}

		return e.complexity.SystemUserMinFields.ProxyUser(childComplexity), true

	case "SystemUserMinFields.remarks":
		if e.complexity.SystemUserMinFields.Remarks == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Remarks(childComplexity), true

	case "SystemUserMinFields.telephone":
		if e.complexity.SystemUserMinFields.Telephone == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Telephone(childComplexity), true

	case "SystemUserMinFields.ukey":
		if e.complexity.SystemUserMinFields.Ukey == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Ukey(childComplexity), true

	case "SystemUserMinFields.update_at":
		if e.complexity.SystemUserMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UpdateAt(childComplexity), true

	case "SystemUserMinFields.update_by":
		if e.complexity.SystemUserMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UpdateBy(childComplexity), true

	case "SystemUserMinFields.user_id":
		if e.complexity.SystemUserMinFields.UserID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UserID(childComplexity), true

	case "SystemUserMinFields.user_state":
		if e.complexity.SystemUserMinFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UserState(childComplexity), true

	case "SystemUserMinFields.user_type":
		if e.complexity.SystemUserMinFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UserType(childComplexity), true

	case "SystemUserMinFields.username":
		if e.complexity.SystemUserMinFields.Username == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Username(childComplexity), true

	case "SystemUserMutationResponse.affected_rows":
		if e.complexity.SystemUserMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.SystemUserMutationResponse.AffectedRows(childComplexity), true

	case "SystemUserMutationResponse.returning":
		if e.complexity.SystemUserMutationResponse.Returning == nil {
			break
		}

		return e.complexity.SystemUserMutationResponse.Returning(childComplexity), true

	case "SystemUserStddevFields.audit_level":
		if e.complexity.SystemUserStddevFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.AuditLevel(childComplexity), true

	case "SystemUserStddevFields.grade":
		if e.complexity.SystemUserStddevFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.Grade(childComplexity), true

	case "SystemUserStddevFields.id":
		if e.complexity.SystemUserStddevFields.ID == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.ID(childComplexity), true

	case "SystemUserStddevFields.user_state":
		if e.complexity.SystemUserStddevFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.UserState(childComplexity), true

	case "SystemUserStddevFields.user_type":
		if e.complexity.SystemUserStddevFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.UserType(childComplexity), true

	case "SystemUserStddevPopFields.audit_level":
		if e.complexity.SystemUserStddevPopFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.AuditLevel(childComplexity), true

	case "SystemUserStddevPopFields.grade":
		if e.complexity.SystemUserStddevPopFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.Grade(childComplexity), true

	case "SystemUserStddevPopFields.id":
		if e.complexity.SystemUserStddevPopFields.ID == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.ID(childComplexity), true

	case "SystemUserStddevPopFields.user_state":
		if e.complexity.SystemUserStddevPopFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.UserState(childComplexity), true

	case "SystemUserStddevPopFields.user_type":
		if e.complexity.SystemUserStddevPopFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.UserType(childComplexity), true

	case "SystemUserStddevSampFields.audit_level":
		if e.complexity.SystemUserStddevSampFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.AuditLevel(childComplexity), true

	case "SystemUserStddevSampFields.grade":
		if e.complexity.SystemUserStddevSampFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.Grade(childComplexity), true

	case "SystemUserStddevSampFields.id":
		if e.complexity.SystemUserStddevSampFields.ID == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.ID(childComplexity), true

	case "SystemUserStddevSampFields.user_state":
		if e.complexity.SystemUserStddevSampFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.UserState(childComplexity), true

	case "SystemUserStddevSampFields.user_type":
		if e.complexity.SystemUserStddevSampFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.UserType(childComplexity), true

	case "SystemUserSumFields.audit_level":
		if e.complexity.SystemUserSumFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserSumFields.AuditLevel(childComplexity), true

	case "SystemUserSumFields.grade":
		if e.complexity.SystemUserSumFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserSumFields.Grade(childComplexity), true

	case "SystemUserSumFields.id":
		if e.complexity.SystemUserSumFields.ID == nil {
			break
		}

		return e.complexity.SystemUserSumFields.ID(childComplexity), true

	case "SystemUserSumFields.user_state":
		if e.complexity.SystemUserSumFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserSumFields.UserState(childComplexity), true

	case "SystemUserSumFields.user_type":
		if e.complexity.SystemUserSumFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserSumFields.UserType(childComplexity), true

	case "SystemUserVarPopFields.audit_level":
		if e.complexity.SystemUserVarPopFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.AuditLevel(childComplexity), true

	case "SystemUserVarPopFields.grade":
		if e.complexity.SystemUserVarPopFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.Grade(childComplexity), true

	case "SystemUserVarPopFields.id":
		if e.complexity.SystemUserVarPopFields.ID == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.ID(childComplexity), true

	case "SystemUserVarPopFields.user_state":
		if e.complexity.SystemUserVarPopFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.UserState(childComplexity), true

	case "SystemUserVarPopFields.user_type":
		if e.complexity.SystemUserVarPopFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.UserType(childComplexity), true

	case "SystemUserVarSampFields.audit_level":
		if e.complexity.SystemUserVarSampFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.AuditLevel(childComplexity), true

	case "SystemUserVarSampFields.grade":
		if e.complexity.SystemUserVarSampFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.Grade(childComplexity), true

	case "SystemUserVarSampFields.id":
		if e.complexity.SystemUserVarSampFields.ID == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.ID(childComplexity), true

	case "SystemUserVarSampFields.user_state":
		if e.complexity.SystemUserVarSampFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.UserState(childComplexity), true

	case "SystemUserVarSampFields.user_type":
		if e.complexity.SystemUserVarSampFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.UserType(childComplexity), true

	case "SystemUserVarianceFields.audit_level":
		if e.complexity.SystemUserVarianceFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.AuditLevel(childComplexity), true

	case "SystemUserVarianceFields.grade":
		if e.complexity.SystemUserVarianceFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.Grade(childComplexity), true

	case "SystemUserVarianceFields.id":
		if e.complexity.SystemUserVarianceFields.ID == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.ID(childComplexity), true

	case "SystemUserVarianceFields.user_state":
		if e.complexity.SystemUserVarianceFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.UserState(childComplexity), true

	case "SystemUserVarianceFields.user_type":
		if e.complexity.SystemUserVarianceFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.UserType(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric
`, BuiltIn: false},
	{Name: "graph/graphqls/department.graphqls", Input: `"""
部门


columns and relationships of "department"
"""
type Department {
	"""
	创建时间
	"""
	create_at: Timestamptz
	"""
	创建人
	"""
	create_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	部门类型
	"""
	department_category: Int
	"""
	部门编号
	"""
	department_code: String
	"""
	部门ID
	"""
	department_id: String!
	"""
	部门名称
	"""
	department_name: String
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	ID
	"""
	id: Bigint!
	"""
	排序
	"""
	internal_number: Int
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	备注
	"""
	remarks: String
	"""
	上级部门ID
	"""
	superior_department_id: String
	"""
	修改时间
	"""
	update_at: Timestamptz
	"""
	修改人
	"""
	update_by: String
}
"""
aggregated selection of "department"
"""
type DepartmentAggregate {
	aggregate: DepartmentAggregateFields
	nodes: [Department!]!
}
"""
aggregate fields of "department"
"""
type DepartmentAggregateFields {
	avg: DepartmentAvgFields
	count(columns: [DepartmentSelectColumn!], distinct: Boolean): Int
	max: DepartmentMaxFields
	min: DepartmentMinFields
	stddev: DepartmentStddevFields
	stddev_pop: DepartmentStddevPopFields
	stddev_samp: DepartmentStddevSampFields
	sum: DepartmentSumFields
	var_pop: DepartmentVarPopFields
	var_samp: DepartmentVarSampFields
	variance: DepartmentVarianceFields
}
"""
order by aggregate values of table "department"
"""
input DepartmentAggregateOrderBy {
	avg: DepartmentAvgOrderBy
	count: OrderBy
	max: DepartmentMaxOrderBy
	min: DepartmentMinOrderBy
	stddev: DepartmentStddevOrderBy
	stddev_pop: DepartmentStddevPopOrderBy
	stddev_samp: DepartmentStddevSampOrderBy
	sum: DepartmentSumOrderBy
	var_pop: DepartmentVarPopOrderBy
	var_samp: DepartmentVarSampOrderBy
	variance: DepartmentVarianceOrderBy
}
"""
input type for inserting array relation for remote table "department"
"""
input DepartmentArrRelInsertInput {
	data: [DepartmentInsertInput!]!
	on_conflict: DepartmentOnConflict
}
"""
aggregate avg on columns
"""
type DepartmentAvgFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by avg() on columns of table "department"
"""
input DepartmentAvgOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
Boolean expression to filter rows from the table "department". All fields are combined with a logical 'AND'.
"""
input DepartmentBoolExp {
	_and: [DepartmentBoolExp]
	_not: DepartmentBoolExp
	_or: [DepartmentBoolExp]
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	department_category: IntComparisonExp
	department_code: StringComparisonExp
	department_id: StringComparisonExp
	department_name: StringComparisonExp
	enterprise_id: StringComparisonExp
	id: BigintComparisonExp
	internal_number: IntComparisonExp
	is_delete: BooleanComparisonExp
	remarks: StringComparisonExp
	superior_department_id: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
}
"""
unique or primary key constraints on table "department"
"""
enum DepartmentConstraint {
	"""
	unique or primary key constraint
	"""
	department_pkey
}
"""
input type for incrementing integer column in table "department"
"""
input DepartmentIncInput {
	department_category: Int
	id: Bigint
	internal_number: Int
}
"""
input type for inserting data into table "department"
"""
input DepartmentInsertInput {
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	department_category: Int
	department_code: String
	department_id: String
	department_name: String
	enterprise_id: String
	id: Bigint
	internal_number: Int
	is_delete: Boolean
	remarks: String
	superior_department_id: String
	update_at: Timestamptz
	update_by: String
}
"""
aggregate max on columns
"""
type DepartmentMaxFields {
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	department_category: Int
	department_code: String
	department_id: String
	department_name: String
	enterprise_id: String
	id: Bigint
	internal_number: Int
	remarks: String
	superior_department_id: String
	update_at: Timestamptz
	update_by: String
}
"""
order by max() on columns of table "department"
"""
input DepartmentMaxOrderBy {
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	department_category: OrderBy
	department_code: OrderBy
	department_id: OrderBy
	department_name: OrderBy
	enterprise_id: OrderBy
	id: OrderBy
	internal_number: OrderBy
	remarks: OrderBy
	superior_department_id: OrderBy
	update_at: OrderBy
	update_by: OrderBy
}
"""
aggregate min on columns
"""
type DepartmentMinFields {
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	department_category: Int
	department_code: String
	department_id: String
	department_name: String
	enterprise_id: String
	id: Bigint
	internal_number: Int
	remarks: String
	superior_department_id: String
	update_at: Timestamptz
	update_by: String
}
"""
order by min() on columns of table "department"
"""
input DepartmentMinOrderBy {
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	department_category: OrderBy
	department_code: OrderBy
	department_id: OrderBy
	department_name: OrderBy
	enterprise_id: OrderBy
	id: OrderBy
	internal_number: OrderBy
	remarks: OrderBy
	superior_department_id: OrderBy
	update_at: OrderBy
	update_by: OrderBy
}
"""
response of any mutation on the table "department"
"""
type DepartmentMutationResponse {
	"""
	number of affected rows by the mutation
	"""
	affected_rows: Int!
	"""
	data of the affected rows by the mutation
	"""
	returning: [Department!]!
}
"""
input type for inserting object relation for remote table "department"
"""
input DepartmentObjRelInsertInput {
	data: DepartmentInsertInput!
	on_conflict: DepartmentOnConflict
}
"""
on conflict condition type for table "department"
"""
input DepartmentOnConflict {
	constraint: DepartmentConstraint!
	update_columns: [DepartmentUpdateColumn!]!
	where: DepartmentBoolExp
}
"""
ordering options when selecting data from "department"
"""
input DepartmentOrderBy {
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	department_category: OrderBy
	department_code: OrderBy
	department_id: OrderBy
	department_name: OrderBy
	enterprise_id: OrderBy
	id: OrderBy
	internal_number: OrderBy
	is_delete: OrderBy
	remarks: OrderBy
	superior_department_id: OrderBy
	update_at: OrderBy
	update_by: OrderBy
}
"""
primary key columns input for table: "department"
"""
input DepartmentPkColumnsInput {
	"""
	ID
	"""
	id: Bigint!
}
"""
select columns of table "department"
"""
enum DepartmentSelectColumn {
	"""
	column name
	"""
	create_at
	"""
	column name
	"""
	create_by
	"""
	column name
	"""
	delete_at
	"""
	column name
	"""
	delete_by
	"""
	column name
	"""
	department_category
	"""
	column name
	"""
	department_code
	"""
	column name
	"""
	department_id
	"""
	column name
	"""
	department_name
	"""
	column name
	"""
	enterprise_id
	"""
	column name
	"""
	id
	"""
	column name
	"""
	internal_number
	"""
	column name
	"""
	is_delete
	"""
	column name
	"""
	remarks
	"""
	column name
	"""
	superior_department_id
	"""
	column name
	"""
	update_at
	"""
	column name
	"""
	update_by
}
"""
input type for updating data in table "department"
"""
input DepartmentSetInput {
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	department_category: Int
	department_code: String
	department_id: String
	department_name: String
	enterprise_id: String
	id: Bigint
	internal_number: Int
	is_delete: Boolean
	remarks: String
	superior_department_id: String
	update_at: Timestamptz
	update_by: String
}
"""
aggregate stddev on columns
"""
type DepartmentStddevFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by stddev() on columns of table "department"
"""
input DepartmentStddevOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
aggregate stddev_pop on columns
"""
type DepartmentStddevPopFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by stddev_pop() on columns of table "department"
"""
input DepartmentStddevPopOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
aggregate stddev_samp on columns
"""
type DepartmentStddevSampFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by stddev_samp() on columns of table "department"
"""
input DepartmentStddevSampOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
aggregate sum on columns
"""
type DepartmentSumFields {
	department_category: Int
	id: Bigint
	internal_number: Int
}
"""
order by sum() on columns of table "department"
"""
input DepartmentSumOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
update columns of table "department"
"""
enum DepartmentUpdateColumn {
	"""
	column name
	"""
	create_at
	"""
	column name
	"""
	create_by
	"""
	column name
	"""
	delete_at
	"""
	column name
	"""
	delete_by
	"""
	column name
	"""
	department_category
	"""
	column name
	"""
	department_code
	"""
	column name
	"""
	department_id
	"""
	column name
	"""
	department_name
	"""
	column name
	"""
	enterprise_id
	"""
	column name
	"""
	id
	"""
	column name
	"""
	internal_number
	"""
	column name
	"""
	is_delete
	"""
	column name
	"""
	remarks
	"""
	column name
	"""
	superior_department_id
	"""
	column name
	"""
	update_at
	"""
	column name
	"""
	update_by
}
"""
aggregate var_pop on columns
"""
type DepartmentVarPopFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by var_pop() on columns of table "department"
"""
input DepartmentVarPopOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
aggregate var_samp on columns
"""
type DepartmentVarSampFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by var_samp() on columns of table "department"
"""
input DepartmentVarSampOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
aggregate variance on columns
"""
type DepartmentVarianceFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by variance() on columns of table "department"
"""
input DepartmentVarianceOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
extend type Mutation {
	"""
	delete data from the table: "department"
	"""
	delete_department("""
	filter the rows which have to be deleted
	"""
	where: DepartmentBoolExp!): DepartmentMutationResponse
	"""
	delete single row from the table: "department"
	"""
	delete_department_by_pk("""
	ID
	"""
	id: Bigint!): Department
	"""
	insert data into the table: "department"
	"""
	insert_department("""
	the rows to be inserted
	"""
	objects: [DepartmentInsertInput!]!, """
	on conflict condition
	"""
	on_conflict: DepartmentOnConflict): DepartmentMutationResponse
	"""
	insert a single row into the table: "department"
	"""
	insert_department_one("""
	the row to be inserted
	"""
	object: DepartmentInsertInput!, """
	on conflict condition
	"""
	on_conflict: DepartmentOnConflict): Department
	"""
	update data of the table: "department"
	"""
	update_department("""
	increments the integer columns with given value of the filtered values
	"""
	_inc: DepartmentIncInput, """
	sets the columns of the filtered rows to the given values
	"""
	_set: DepartmentSetInput, """
	filter the rows which have to be updated
	"""
	where: DepartmentBoolExp!): DepartmentMutationResponse
	"""
	update single row of the table: "department"
	"""
	update_department_by_pk("""
	increments the integer columns with given value of the filtered values
	"""
	_inc: DepartmentIncInput, """
	sets the columns of the filtered rows to the given values
	"""
	_set: DepartmentSetInput, pk_columns: DepartmentPkColumnsInput!): Department
}
extend type Query {
	"""
	fetch data from the table: "department"
	"""
	department("""
	distinct select on columns
	"""
	distinct_on: [DepartmentSelectColumn!], """
	limit the number of rows returned
	"""
	limit: Int, """
	skip the first n rows. Use only with order_by
	"""
	offset: Int, """
	sort the rows by one or more columns
	"""
	order_by: [DepartmentOrderBy!], """
	filter the rows returned
	"""
	where: DepartmentBoolExp): [Department!]!
	"""
	fetch aggregated fields from the table: "department"
	"""
	department_aggregate("""
	distinct select on columns
	"""
	distinct_on: [DepartmentSelectColumn!], """
	limit the number of rows returned
	"""
	limit: Int, """
	skip the first n rows. Use only with order_by
	"""
	offset: Int, """
	sort the rows by one or more columns
	"""
	order_by: [DepartmentOrderBy!], """
	filter the rows returned
	"""
	where: DepartmentBoolExp): DepartmentAggregate!
	"""
	fetch data from the table: "department" using primary key columns
	"""
	department_by_pk("""
	ID
	"""
	id: Bigint!): Department
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise.graphqls", Input: `"""
企业


columns and relationships of "enterprise"
"""
type Enterprise {
	"""
	协会审核时间
	"""
	association_review_by: Timestamptz
	"""
	协会审核意见
	"""
	association_review_opinion: String
	"""
	协会审核时间
	"""
	association_review_time: Timestamptz
	"""
	所属大队ID
	"""
	brigade_id: String
	"""
	大队审核人
	"""
	brigade_review_by: String
	"""
	大队审核意见
	"""
	brigade_review_opinion: String
	"""
	大队审核时间
	"""
	brigade_review_time: Timestamptz
	"""
	营业执照到期日期
	"""
	business_license_expiry_date: Timestamptz
	"""
	营业执照发证日期
	"""
	business_license_issuance_date: Timestamptz
	"""
	营业执照图片
	"""
	business_license_photo: String
	"""
	业务办理扫描件照片
	"""
	business_photo: String
	"""
	经营范围
	"""
	business_scope: Int
	"""
	审核状态
	"""
	check_status: Int
	"""
	城市ID
	"""
	city_id: Bigint
	"""
	联系人
	"""
	contact_persons: Jsonb
	"""
	创建时间
	"""
	create_at: Timestamptz
	"""
	创建人
	"""
	create_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	显示顺序
	"""
	display_number: Int
	"""
	区域ID
	"""
	district_id: Bigint
	"""
	企业地址
	"""
	enterprise_address: String
	"""
	企业码
	"""
	enterprise_code: String
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	企业级别
	"""
	enterprise_level: Int
	"""
	企业名称
	"""
	enterprise_name: String
	enterprise_nature: Int
	"""
	委托代理人
	"""
	entrusted_agent: String
	"""
	委托代理人-身份证号码
	"""
	entrusted_agent_id_card: String
	"""
	委托代理人身份证图片
	"""
	entrusted_agent_id_card_photo: String
	"""
	委托代理人-电话号码
	"""
	entrusted_agent_phone: String
	"""
	传真号码
	"""
	fax_number: String
	"""
	ID
	"""
	id: Bigint!
	"""
	机构类别
	"""
	institution_category: Bigint
	"""
	是否黑名单
	"""
	is_black: Boolean
	"""
	是否删除
	"""
	is_deleted: Boolean!
	"""
	是否录入完成
	"""
	is_input: Boolean
	"""
	是否安装
	"""
	is_install: Boolean
	"""
	是否上次省厅
	"""
	is_upload_province: Boolean
	"""
	企业法人代表
	"""
	legal_representative: String
	"""
	企业法人-身份证号码
	"""
	legal_representative_id_card: String
	"""
	企业法人代表身份证-图片
	"""
	legal_representative_id_card_photo: String
	"""
	企业法人代表联系电话
	"""
	legal_representative_phone: String
	"""
	经营许可证图片
	"""
	operating_license_photo: String
	"""
	组织机构代码(企业的营运证)
	"""
	organization_code: String
	"""
	组织机构代码证照片
	"""
	organization_code_certificate_photo: String
	"""
	所属派出所ID
	"""
	police_station_id: String
	"""
	省份ID
	"""
	province_id: Bigint
	"""
	登记时间
	"""
	record_at: Timestamptz
	"""
	登记人
	"""
	record_by: String
	"""
	备注
	"""
	remarks: String
	"""
	记分
	"""
	score: Int
	"""
	上级企业ID
	"""
	superior_enterprise_id: String
	"""
	修改时间
	"""
	update_at: Timestamptz
	"""
	修改人
	"""
	update_by: String
	"""
	内网更新时间
	"""
	update_time_in: Timestamptz
}
"""
aggregated selection of "enterprise"
"""
type EnterpriseAggregate {
	aggregate: EnterpriseAggregateFields
	nodes: [Enterprise!]!
}
"""
aggregate fields of "enterprise"
"""
type EnterpriseAggregateFields {
	avg: EnterpriseAvgFields
	count(columns: [EnterpriseSelectColumn!], distinct: Boolean): Int
	max: EnterpriseMaxFields
	min: EnterpriseMinFields
	stddev: EnterpriseStddevFields
	stddev_pop: EnterpriseStddevPopFields
	stddev_samp: EnterpriseStddevSampFields
	sum: EnterpriseSumFields
	var_pop: EnterpriseVarPopFields
	var_samp: EnterpriseVarSampFields
	variance: EnterpriseVarianceFields
}
"""
order by aggregate values of table "enterprise"
"""
input EnterpriseAggregateOrderBy {
	avg: EnterpriseAvgOrderBy
	count: OrderBy
	max: EnterpriseMaxOrderBy
	min: EnterpriseMinOrderBy
	stddev: EnterpriseStddevOrderBy
	stddev_pop: EnterpriseStddevPopOrderBy
	stddev_samp: EnterpriseStddevSampOrderBy
	sum: EnterpriseSumOrderBy
	var_pop: EnterpriseVarPopOrderBy
	var_samp: EnterpriseVarSampOrderBy
	variance: EnterpriseVarianceOrderBy
}
"""
input type for inserting array relation for remote table "enterprise"
"""
input EnterpriseArrRelInsertInput {
	data: [EnterpriseInsertInput!]!
	on_conflict: EnterpriseOnConflict
}
"""
aggregate avg on columns
"""
type EnterpriseAvgFields {
	business_scope: Float
	check_status: Float
	city_id: Float
	display_number: Float
	district_id: Float
	enterprise_level: Float
	enterprise_nature: Float
	id: Float
	institution_category: Float
	province_id: Float
	score: Float
}
"""
order by avg() on columns of table "enterprise"
"""
input EnterpriseAvgOrderBy {
	business_scope: OrderBy
	check_status: OrderBy
	city_id: OrderBy
	display_number: OrderBy
	district_id: OrderBy
	enterprise_level: OrderBy
	enterprise_nature: OrderBy
	id: OrderBy
	institution_category: OrderBy
	province_id: OrderBy
	score: OrderBy
}
"""
Boolean expression to filter rows from the table "enterprise". All fields are combined with a logical 'AND'.
"""
input EnterpriseBoolExp {
	_and: [EnterpriseBoolExp]
	_not: EnterpriseBoolExp
	_or: [EnterpriseBoolExp]
	association_review_by: TimestamptzComparisonExp
	association_review_opinion: StringComparisonExp
	association_review_time: TimestamptzComparisonExp
	brigade_id: StringComparisonExp
	brigade_review_by: StringComparisonExp
	brigade_review_opinion: StringComparisonExp
	brigade_review_time: TimestamptzComparisonExp
	business_license_expiry_date: TimestamptzComparisonExp
	business_license_issuance_date: TimestamptzComparisonExp
	business_license_photo: StringComparisonExp
	business_photo: StringComparisonExp
	business_scope: IntComparisonExp
	check_status: IntComparisonExp
	city_id: BigintComparisonExp
	contact_persons: JsonbComparisonExp
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	display_number: IntComparisonExp
	district_id: BigintComparisonExp
	enterprise_address: StringComparisonExp
	enterprise_code: StringComparisonExp
	enterprise_id: StringComparisonExp
	enterprise_level: IntComparisonExp
	enterprise_name: StringComparisonExp
	enterprise_nature: IntComparisonExp
	entrusted_agent: StringComparisonExp
	entrusted_agent_id_card: StringComparisonExp
	entrusted_agent_id_card_photo: StringComparisonExp
	entrusted_agent_phone: StringComparisonExp
	fax_number: StringComparisonExp
	id: BigintComparisonExp
	institution_category: BigintComparisonExp
	is_black: BooleanComparisonExp
	is_deleted: BooleanComparisonExp
	is_input: BooleanComparisonExp
	is_install: BooleanComparisonExp
	is_upload_province: BooleanComparisonExp
	legal_representative: StringComparisonExp
	legal_representative_id_card: StringComparisonExp
	legal_representative_id_card_photo: StringComparisonExp
	legal_representative_phone: StringComparisonExp
	operating_license_photo: StringComparisonExp
	organization_code: StringComparisonExp
	organization_code_certificate_photo: StringComparisonExp
	police_station_id: StringComparisonExp
	province_id: BigintComparisonExp
	record_at: TimestamptzComparisonExp
	record_by: StringComparisonExp
	remarks: StringComparisonExp
	score: IntComparisonExp
	superior_enterprise_id: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	update_time_in: TimestamptzComparisonExp
}
"""
unique or primary key constraints on table "enterprise"
"""
enum EnterpriseConstraint {
	"""
	unique or primary key constraint
	"""
	newtable_pk
}
"""
input type for incrementing integer column in table "enterprise"
"""
input EnterpriseIncInput {
	business_scope: Int
	check_status: Int
	city_id: Bigint
	display_number: Int
	district_id: Bigint
	enterprise_level: Int
	enterprise_nature: Int
	id: Bigint
	institution_category: Bigint
	province_id: Bigint
	score: Int
}
"""
input type for inserting data into table "enterprise"
"""
input EnterpriseInsertInput {
	association_review_by: Timestamptz
	association_review_opinion: String
	association_review_time: Timestamptz
	brigade_id: String
	brigade_review_by: String
	brigade_review_opinion: String
	brigade_review_time: Timestamptz
	business_license_expiry_date: Timestamptz
	business_license_issuance_date: Timestamptz
	business_license_photo: String
	business_photo: String
	business_scope: Int
	check_status: Int
	city_id: Bigint
	contact_persons: Jsonb
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	display_number: Int
	district_id: Bigint
	enterprise_address: String
	enterprise_code: String
	enterprise_id: String
	enterprise_level: Int
	enterprise_name: String
	enterprise_nature: Int
	entrusted_agent: String
	entrusted_agent_id_card: String
	entrusted_agent_id_card_photo: String
	entrusted_agent_phone: String
	fax_number: String
	id: Bigint
	institution_category: Bigint
	is_black: Boolean
	is_deleted: Boolean
	is_input: Boolean
	is_install: Boolean
	is_upload_province: Boolean
	legal_representative: String
	legal_representative_id_card: String
	legal_representative_id_card_photo: String
	legal_representative_phone: String
	operating_license_photo: String
	organization_code: String
	organization_code_certificate_photo: String
	police_station_id: String
	province_id: Bigint
	record_at: Timestamptz
	record_by: String
	remarks: String
	score: Int
	superior_enterprise_id: String
	update_at: Timestamptz
	update_by: String
	update_time_in: Timestamptz
}
"""
aggregate max on columns
"""
type EnterpriseMaxFields {
	association_review_by: Timestamptz
	association_review_opinion: String
	association_review_time: Timestamptz
	brigade_id: String
	brigade_review_by: String
	brigade_review_opinion: String
	brigade_review_time: Timestamptz
	business_license_expiry_date: Timestamptz
	business_license_issuance_date: Timestamptz
	business_license_photo: String
	business_photo: String
	business_scope: Int
	check_status: Int
	city_id: Bigint
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	display_number: Int
	district_id: Bigint
	enterprise_address: String
	enterprise_code: String
	enterprise_id: String
	enterprise_level: Int
	enterprise_name: String
	enterprise_nature: Int
	entrusted_agent: String
	entrusted_agent_id_card: String
	entrusted_agent_id_card_photo: String
	entrusted_agent_phone: String
	fax_number: String
	id: Bigint
	institution_category: Bigint
	legal_representative: String
	legal_representative_id_card: String
	legal_representative_id_card_photo: String
	legal_representative_phone: String
	operating_license_photo: String
	organization_code: String
	organization_code_certificate_photo: String
	police_station_id: String
	province_id: Bigint
	record_at: Timestamptz
	record_by: String
	remarks: String
	score: Int
	superior_enterprise_id: String
	update_at: Timestamptz
	update_by: String
	update_time_in: Timestamptz
}
"""
order by max() on columns of table "enterprise"
"""
input EnterpriseMaxOrderBy {
	association_review_by: OrderBy
	association_review_opinion: OrderBy
	association_review_time: OrderBy
	brigade_id: OrderBy
	brigade_review_by: OrderBy
	brigade_review_opinion: OrderBy
	brigade_review_time: OrderBy
	business_license_expiry_date: OrderBy
	business_license_issuance_date: OrderBy
	business_license_photo: OrderBy
	business_photo: OrderBy
	business_scope: OrderBy
	check_status: OrderBy
	city_id: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	display_number: OrderBy
	district_id: OrderBy
	enterprise_address: OrderBy
	enterprise_code: OrderBy
	enterprise_id: OrderBy
	enterprise_level: OrderBy
	enterprise_name: OrderBy
	enterprise_nature: OrderBy
	entrusted_agent: OrderBy
	entrusted_agent_id_card: OrderBy
	entrusted_agent_id_card_photo: OrderBy
	entrusted_agent_phone: OrderBy
	fax_number: OrderBy
	id: OrderBy
	institution_category: OrderBy
	legal_representative: OrderBy
	legal_representative_id_card: OrderBy
	legal_representative_id_card_photo: OrderBy
	legal_representative_phone: OrderBy
	operating_license_photo: OrderBy
	organization_code: OrderBy
	organization_code_certificate_photo: OrderBy
	police_station_id: OrderBy
	province_id: OrderBy
	record_at: OrderBy
	record_by: OrderBy
	remarks: OrderBy
	score: OrderBy
	superior_enterprise_id: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	update_time_in: OrderBy
}
"""
aggregate min on columns
"""
type EnterpriseMinFields {
	association_review_by: Timestamptz
	association_review_opinion: String
	association_review_time: Timestamptz
	brigade_id: String
	brigade_review_by: String
	brigade_review_opinion: String
	brigade_review_time: Timestamptz
	business_license_expiry_date: Timestamptz
	business_license_issuance_date: Timestamptz
	business_license_photo: String
	business_photo: String
	business_scope: Int
	check_status: Int
	city_id: Bigint
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	display_number: Int
	district_id: Bigint
	enterprise_address: String
	enterprise_code: String
	enterprise_id: String
	enterprise_level: Int
	enterprise_name: String
	enterprise_nature: Int
	entrusted_agent: String
	entrusted_agent_id_card: String
	entrusted_agent_id_card_photo: String
	entrusted_agent_phone: String
	fax_number: String
	id: Bigint
	institution_category: Bigint
	legal_representative: String
	legal_representative_id_card: String
	legal_representative_id_card_photo: String
	legal_representative_phone: String
	operating_license_photo: String
	organization_code: String
	organization_code_certificate_photo: String
	police_station_id: String
	province_id: Bigint
	record_at: Timestamptz
	record_by: String
	remarks: String
	score: Int
	superior_enterprise_id: String
	update_at: Timestamptz
	update_by: String
	update_time_in: Timestamptz
}
"""
order by min() on columns of table "enterprise"
"""
input EnterpriseMinOrderBy {
	association_review_by: OrderBy
	association_review_opinion: OrderBy
	association_review_time: OrderBy
	brigade_id: OrderBy
	brigade_review_by: OrderBy
	brigade_review_opinion: OrderBy
	brigade_review_time: OrderBy
	business_license_expiry_date: OrderBy
	business_license_issuance_date: OrderBy
	business_license_photo: OrderBy
	business_photo: OrderBy
	business_scope: OrderBy
	check_status: OrderBy
	city_id: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	display_number: OrderBy
	district_id: OrderBy
	enterprise_address: OrderBy
	enterprise_code: OrderBy
	enterprise_id: OrderBy
	enterprise_level: OrderBy
	enterprise_name: OrderBy
	enterprise_nature: OrderBy
	entrusted_agent: OrderBy
	entrusted_agent_id_card: OrderBy
	entrusted_agent_id_card_photo: OrderBy
	entrusted_agent_phone: OrderBy
	fax_number: OrderBy
	id: OrderBy
	institution_category: OrderBy
	legal_representative: OrderBy
	legal_representative_id_card: OrderBy
	legal_representative_id_card_photo: OrderBy
	legal_representative_phone: OrderBy
	operating_license_photo: OrderBy
	organization_code: OrderBy
	organization_code_certificate_photo: OrderBy
	police_station_id: OrderBy
	province_id: OrderBy
	record_at: OrderBy
	record_by: OrderBy
	remarks: OrderBy
	score: OrderBy
	superior_enterprise_id: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	update_time_in: OrderBy
}
"""
response of any mutation on the table "enterprise"
"""
type EnterpriseMutationResponse {
	"""
	number of affected rows by the mutation
	"""
	affected_rows: Int!
	"""
	data of the affected rows by the mutation
	"""
	returning: [Enterprise!]!
}
"""
input type for inserting object relation for remote table "enterprise"
"""
input EnterpriseObjRelInsertInput {
	data: EnterpriseInsertInput!
	on_conflict: EnterpriseOnConflict
}
"""
on conflict condition type for table "enterprise"
"""
input EnterpriseOnConflict {
	constraint: EnterpriseConstraint!
	update_columns: [EnterpriseUpdateColumn!]!
	where: EnterpriseBoolExp
}
"""
ordering options when selecting data from "enterprise"
"""
input EnterpriseOrderBy {
	association_review_by: OrderBy
	association_review_opinion: OrderBy
	association_review_time: OrderBy
	brigade_id: OrderBy
	brigade_review_by: OrderBy
	brigade_review_opinion: OrderBy
	brigade_review_time: OrderBy
	business_license_expiry_date: OrderBy
	business_license_issuance_date: OrderBy
	business_license_photo: OrderBy
	business_photo: OrderBy
	business_scope: OrderBy
	check_status: OrderBy
	city_id: OrderBy
	contact_persons: OrderBy
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	display_number: OrderBy
	district_id: OrderBy
	enterprise_address: OrderBy
	enterprise_code: OrderBy
	enterprise_id: OrderBy
	enterprise_level: OrderBy
	enterprise_name: OrderBy
	enterprise_nature: OrderBy
	entrusted_agent: OrderBy
	entrusted_agent_id_card: OrderBy
	entrusted_agent_id_card_photo: OrderBy
	entrusted_agent_phone: OrderBy
	fax_number: OrderBy
	id: OrderBy
	institution_category: OrderBy
	is_black: OrderBy
	is_deleted: OrderBy
	is_input: OrderBy
	is_install: OrderBy
	is_upload_province: OrderBy
	legal_representative: OrderBy
	legal_representative_id_card: OrderBy
	legal_representative_id_card_photo: OrderBy
	legal_representative_phone: OrderBy
	operating_license_photo: OrderBy
	organization_code: OrderBy
	organization_code_certificate_photo: OrderBy
	police_station_id: OrderBy
	province_id: OrderBy
	record_at: OrderBy
	record_by: OrderBy
	remarks: OrderBy
	score: OrderBy
	superior_enterprise_id: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	update_time_in: OrderBy
}
"""
primary key columns input for table: "enterprise"
"""
input EnterprisePkColumnsInput {
	"""
	ID
	"""
	id: Bigint!
}
"""
select columns of table "enterprise"
"""
enum EnterpriseSelectColumn {
	"""
	column name
	"""
	association_review_by
	"""
	column name
	"""
	association_review_opinion
	"""
	column name
	"""
	association_review_time
	"""
	column name
	"""
	brigade_id
	"""
	column name
	"""
	brigade_review_by
	"""
	column name
	"""
	brigade_review_opinion
	"""
	column name
	"""
	brigade_review_time
	"""
	column name
	"""
	business_license_expiry_date
	"""
	column name
	"""
	business_license_issuance_date
	"""
	column name
	"""
	business_license_photo
	"""
	column name
	"""
	business_photo
	"""
	column name
	"""
	business_scope
	"""
	column name
	"""
	check_status
	"""
	column name
	"""
	city_id
	"""
	column name
	"""
	contact_persons
	"""
	column name
	"""
	create_at
	"""
	column name
	"""
	create_by
	"""
	column name
	"""
	delete_at
	"""
	column name
	"""
	delete_by
	"""
	column name
	"""
	display_number
	"""
	column name
	"""
	district_id
	"""
	column name
	"""
	enterprise_address
	"""
	column name
	"""
	enterprise_code
	"""
	column name
	"""
	enterprise_id
	"""
	column name
	"""
	enterprise_level
	"""
	column name
	"""
	enterprise_name
	"""
	column name
	"""
	enterprise_nature
	"""
	column name
	"""
	entrusted_agent
	"""
	column name
	"""
	entrusted_agent_id_card
	"""
	column name
	"""
	entrusted_agent_id_card_photo
	"""
	column name
	"""
	entrusted_agent_phone
	"""
	column name
	"""
	fax_number
	"""
	column name
	"""
	id
	"""
	column name
	"""
	institution_category
	"""
	column name
	"""
	is_black
	"""
	column name
	"""
	is_deleted
	"""
	column name
	"""
	is_input
	"""
	column name
	"""
	is_install
	"""
	column name
	"""
	is_upload_province
	"""
	column name
	"""
	legal_representative
	"""
	column name
	"""
	legal_representative_id_card
	"""
	column name
	"""
	legal_representative_id_card_photo
	"""
	column name
	"""
	legal_representative_phone
	"""
	column name
	"""
	operating_license_photo
	"""
	column name
	"""
	organization_code
	"""
	column name
	"""
	organization_code_certificate_photo
	"""
	column name
	"""
	police_station_id
	"""
	column name
	"""
	province_id
	"""
	column name
	"""
	record_at
	"""
	column name
	"""
	record_by
	"""
	column name
	"""
	remarks
	"""
	column name
	"""
	score
	"""
	column name
	"""
	superior_enterprise_id
	"""
	column name
	"""
	update_at
	"""
	column name
	"""
	update_by
	"""
	column name
	"""
	update_time_in
}
"""
input type for updating data in table "enterprise"
"""
input EnterpriseSetInput {
	association_review_by: Timestamptz
	association_review_opinion: String
	association_review_time: Timestamptz
	brigade_id: String
	brigade_review_by: String
	brigade_review_opinion: String
	brigade_review_time: Timestamptz
	business_license_expiry_date: Timestamptz
	business_license_issuance_date: Timestamptz
	business_license_photo: String
	business_photo: String
	business_scope: Int
	check_status: Int
	city_id: Bigint
	contact_persons: Jsonb
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	display_number: Int
	district_id: Bigint
	enterprise_address: String
	enterprise_code: String
	enterprise_id: String
	enterprise_level: Int
	enterprise_name: String
	enterprise_nature: Int
	entrusted_agent: String
	entrusted_agent_id_card: String
	entrusted_agent_id_card_photo: String
	entrusted_agent_phone: String
	fax_number: String
	id: Bigint
	institution_category: Bigint
	is_black: Boolean
	is_deleted: Boolean
	is_input: Boolean
	is_install: Boolean
	is_upload_province: Boolean
	legal_representative: String
	legal_representative_id_card: String
	legal_representative_id_card_photo: String
	legal_representative_phone: String
	operating_license_photo: String
	organization_code: String
	organization_code_certificate_photo: String
	police_station_id: String
	province_id: Bigint
	record_at: Timestamptz
	record_by: String
	remarks: String
	score: Int
	superior_enterprise_id: String
	update_at: Timestamptz
	update_by: String
	update_time_in: Timestamptz
}
"""
aggregate stddev on columns
"""
type EnterpriseStddevFields {
	business_scope: Float
	check_status: Float
	city_id: Float
	display_number: Float
	district_id: Float
	enterprise_level: Float
	enterprise_nature: Float
	id: Float
	institution_category: Float
	province_id: Float
	score: Float
}
"""
order by stddev() on columns of table "enterprise"
"""
input EnterpriseStddevOrderBy {
	business_scope: OrderBy
	check_status: OrderBy
	city_id: OrderBy
	display_number: OrderBy
	district_id: OrderBy
	enterprise_level: OrderBy
	enterprise_nature: OrderBy
	id: OrderBy
	institution_category: OrderBy
	province_id: OrderBy
	score: OrderBy
}
"""
aggregate stddev_pop on columns
"""
type EnterpriseStddevPopFields {
	business_scope: Float
	check_status: Float
	city_id: Float
	display_number: Float
	district_id: Float
	enterprise_level: Float
	enterprise_nature: Float
	id: Float
	institution_category: Float
	province_id: Float
	score: Float
}
"""
order by stddev_pop() on columns of table "enterprise"
"""
input EnterpriseStddevPopOrderBy {
	business_scope: OrderBy
	check_status: OrderBy
	city_id: OrderBy
	display_number: OrderBy
	district_id: OrderBy
	enterprise_level: OrderBy
	enterprise_nature: OrderBy
	id: OrderBy
	institution_category: OrderBy
	province_id: OrderBy
	score: OrderBy
}
"""
aggregate stddev_samp on columns
"""
type EnterpriseStddevSampFields {
	business_scope: Float
	check_status: Float
	city_id: Float
	display_number: Float
	district_id: Float
	enterprise_level: Float
	enterprise_nature: Float
	id: Float
	institution_category: Float
	province_id: Float
	score: Float
}
"""
order by stddev_samp() on columns of table "enterprise"
"""
input EnterpriseStddevSampOrderBy {
	business_scope: OrderBy
	check_status: OrderBy
	city_id: OrderBy
	display_number: OrderBy
	district_id: OrderBy
	enterprise_level: OrderBy
	enterprise_nature: OrderBy
	id: OrderBy
	institution_category: OrderBy
	province_id: OrderBy
	score: OrderBy
}
"""
aggregate sum on columns
"""
type EnterpriseSumFields {
	business_scope: Int
	check_status: Int
	city_id: Bigint
	display_number: Int
	district_id: Bigint
	enterprise_level: Int
	enterprise_nature: Int
	id: Bigint
	institution_category: Bigint
	province_id: Bigint
	score: Int
}
"""
order by sum() on columns of table "enterprise"
"""
input EnterpriseSumOrderBy {
	business_scope: OrderBy
	check_status: OrderBy
	city_id: OrderBy
	display_number: OrderBy
	district_id: OrderBy
	enterprise_level: OrderBy
	enterprise_nature: OrderBy
	id: OrderBy
	institution_category: OrderBy
	province_id: OrderBy
	score: OrderBy
}
"""
update columns of table "enterprise"
"""
enum EnterpriseUpdateColumn {
	"""
	column name
	"""
	association_review_by
	"""
	column name
	"""
	association_review_opinion
	"""
	column name
	"""
	association_review_time
	"""
	column name
	"""
	brigade_id
	"""
	column name
	"""
	brigade_review_by
	"""
	column name
	"""
	brigade_review_opinion
	"""
	column name
	"""
	brigade_review_time
	"""
	column name
	"""
	business_license_expiry_date
	"""
	column name
	"""
	business_license_issuance_date
	"""
	column name
	"""
	business_license_photo
	"""
	column name
	"""
	business_photo
	"""
	column name
	"""
	business_scope
	"""
	column name
	"""
	check_status
	"""
	column name
	"""
	city_id
	"""
	column name
	"""
	contact_persons
	"""
	column name
	"""
	create_at
	"""
	column name
	"""
	create_by
	"""
	column name
	"""
	delete_at
	"""
	column name
	"""
	delete_by
	"""
	column name
	"""
	display_number
	"""
	column name
	"""
	district_id
	"""
	column name
	"""
	enterprise_address
	"""
	column name
	"""
	enterprise_code
	"""
	column name
	"""
	enterprise_id
	"""
	column name
	"""
	enterprise_level
	"""
	column name
	"""
	enterprise_name
	"""
	column name
	"""
	enterprise_nature
	"""
	column name
	"""
	entrusted_agent
	"""
	column name
	"""
	entrusted_agent_id_card
	"""
	column name
	"""
	entrusted_agent_id_card_photo
	"""
	column name
	"""
	entrusted_agent_phone
	"""
	column name
	"""
	fax_number
	"""
	column name
	"""
	id
	"""
	column name
	"""
	institution_category
	"""
	column name
	"""
	is_black
	"""
	column name
	"""
	is_deleted
	"""
	column name
	"""
	is_input
	"""
	column name
	"""
	is_install
	"""
	column name
	"""
	is_upload_province
	"""
	column name
	"""
	legal_representative
	"""
	column name
	"""
	legal_representative_id_card
	"""
	column name
	"""
	legal_representative_id_card_photo
	"""
	column name
	"""
	legal_representative_phone
	"""
	column name
	"""
	operating_license_photo
	"""
	column name
	"""
	organization_code
	"""
	column name
	"""
	organization_code_certificate_photo
	"""
	column name
	"""
	police_station_id
	"""
	column name
	"""
	province_id
	"""
	column name
	"""
	record_at
	"""
	column name
	"""
	record_by
	"""
	column name
	"""
	remarks
	"""
	column name
	"""
	score
	"""
	column name
	"""
	superior_enterprise_id
	"""
	column name
	"""
	update_at
	"""
	column name
	"""
	update_by
	"""
	column name
	"""
	update_time_in
}
"""
aggregate var_pop on columns
"""
type EnterpriseVarPopFields {
	business_scope: Float
	check_status: Float
	city_id: Float
	display_number: Float
	district_id: Float
	enterprise_level: Float
	enterprise_nature: Float
	id: Float
	institution_category: Float
	province_id: Float
	score: Float
}
"""
order by var_pop() on columns of table "enterprise"
"""
input EnterpriseVarPopOrderBy {
	business_scope: OrderBy
	check_status: OrderBy
	city_id: OrderBy
	display_number: OrderBy
	district_id: OrderBy
	enterprise_level: OrderBy
	enterprise_nature: OrderBy
	id: OrderBy
	institution_category: OrderBy
	province_id: OrderBy
	score: OrderBy
}
"""
aggregate var_samp on columns
"""
type EnterpriseVarSampFields {
	business_scope: Float
	check_status: Float
	city_id: Float
	display_number: Float
	district_id: Float
	enterprise_level: Float
	enterprise_nature: Float
	id: Float
	institution_category: Float
	province_id: Float
	score: Float
}
"""
order by var_samp() on columns of table "enterprise"
"""
input EnterpriseVarSampOrderBy {
	business_scope: OrderBy
	check_status: OrderBy
	city_id: OrderBy
	display_number: OrderBy
	district_id: OrderBy
	enterprise_level: OrderBy
	enterprise_nature: OrderBy
	id: OrderBy
	institution_category: OrderBy
	province_id: OrderBy
	score: OrderBy
}
"""
aggregate variance on columns
"""
type EnterpriseVarianceFields {
	business_scope: Float
	check_status: Float
	city_id: Float
	display_number: Float
	district_id: Float
	enterprise_level: Float
	enterprise_nature: Float
	id: Float
	institution_category: Float
	province_id: Float
	score: Float
}
"""
order by variance() on columns of table "enterprise"
"""
input EnterpriseVarianceOrderBy {
	business_scope: OrderBy
	check_status: OrderBy
	city_id: OrderBy
	display_number: OrderBy
	district_id: OrderBy
	enterprise_level: OrderBy
	enterprise_nature: OrderBy
	id: OrderBy
	institution_category: OrderBy
	province_id: OrderBy
	score: OrderBy
}
extend type Mutation {
	"""
	delete data from the table: "enterprise"
	"""
	delete_enterprise("""
	filter the rows which have to be deleted
	"""
	where: EnterpriseBoolExp!): EnterpriseMutationResponse
	"""
	delete single row from the table: "enterprise"
	"""
	delete_enterprise_by_pk("""
	ID
	"""
	id: Bigint!): Enterprise
	"""
	insert data into the table: "enterprise"
	"""
	insert_enterprise("""
	the rows to be inserted
	"""
	objects: [EnterpriseInsertInput!]!, """
	on conflict condition
	"""
	on_conflict: EnterpriseOnConflict): EnterpriseMutationResponse
	"""
	insert a single row into the table: "enterprise"
	"""
	insert_enterprise_one("""
	the row to be inserted
	"""
	object: EnterpriseInsertInput!, """
	on conflict condition
	"""
	on_conflict: EnterpriseOnConflict): Enterprise
	"""
	update data of the table: "enterprise"
	"""
	update_enterprise("""
	increments the integer columns with given value of the filtered values
	"""
	_inc: EnterpriseIncInput, """
	sets the columns of the filtered rows to the given values
	"""
	_set: EnterpriseSetInput, """
	filter the rows which have to be updated
	"""
	where: EnterpriseBoolExp!): EnterpriseMutationResponse
	"""
	update single row of the table: "enterprise"
	"""
	update_enterprise_by_pk("""
	increments the integer columns with given value of the filtered values
	"""
	_inc: EnterpriseIncInput, """
	sets the columns of the filtered rows to the given values
	"""
	_set: EnterpriseSetInput, pk_columns: EnterprisePkColumnsInput!): Enterprise
}
extend type Query {
	"""
	fetch data from the table: "enterprise"
	"""
	enterprise("""
	distinct select on columns
	"""
	distinct_on: [EnterpriseSelectColumn!], """
	limit the number of rows returned
	"""
	limit: Int, """
	skip the first n rows. Use only with order_by
	"""
	offset: Int, """
	sort the rows by one or more columns
	"""
	order_by: [EnterpriseOrderBy!], """
	filter the rows returned
	"""
	where: EnterpriseBoolExp): [Enterprise!]!
	"""
	fetch aggregated fields from the table: "enterprise"
	"""
	enterprise_aggregate("""
	distinct select on columns
	"""
	distinct_on: [EnterpriseSelectColumn!], """
	limit the number of rows returned
	"""
	limit: Int, """
	skip the first n rows. Use only with order_by
	"""
	offset: Int, """
	sort the rows by one or more columns
	"""
	order_by: [EnterpriseOrderBy!], """
	filter the rows returned
	"""
	where: EnterpriseBoolExp): EnterpriseAggregate!
	"""
	fetch data from the table: "enterprise" using primary key columns
	"""
	enterprise_by_pk("""
	ID
	"""
	id: Bigint!): Enterprise
}
`, BuiltIn: false},
	{Name: "graph/graphqls/system_user.graphqls", Input: `"""
系统用户


columns and relationships of "system_user"
"""
type SystemUser {
	"""
	是否绑定IP
	"""
	Is_bind_ip: Boolean
	"""
	客户端版本号
	"""
	app_version: String
	"""
	审核等级
	"""
	audit_level: Int
	"""
	创建人
	"""
	create_by: String
	"""
	创建时间
	"""
	created_at: Timestamptz
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	部门
	"""
	department: Department
	"""
	邮箱
	"""
	email: String
	"""
	企业ID
	"""
	enterprise: Enterprise
	"""
	级别
	"""
	grade: Int
	"""
	ID
	"""
	id: Bigint!
	"""
	ip地址
	"""
	ip_address: String
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	是否有效
	"""
	is_valid: Boolean
	"""
	手机串号
	"""
	mkey: String
	"""
	手机号码
	"""
	mobile: String
	"""
	密码
	"""
	password: String!
	proxy_user: String
	"""
	备注
	"""
	remarks: String
	"""
	电话号码
	"""
	telephone: String
	"""
	用户名
	"""
	username: String!
	"""
	加密串码
	"""
	ukey: String
	"""
	修改时间
	"""
	update_at: Timestamptz
	"""
	修改人
	"""
	update_by: String
	"""
	用户ID
	"""
	user_id: String!
	"""
	状态
	"""
	user_state: Int
	"""
	用户类型
	"""
	user_type: Int
}
"""
aggregated selection of "system_user"
"""
type SystemUserAggregate {
	aggregate: SystemUserAggregateFields
	nodes: [SystemUser!]!
}
"""
aggregate fields of "system_user"
"""
type SystemUserAggregateFields {
	avg: SystemUserAvgFields
	count(columns: [SystemUserSelectColumn!], distinct: Boolean): Int
	max: SystemUserMaxFields
	min: SystemUserMinFields
	stddev: SystemUserStddevFields
	stddev_pop: SystemUserStddevPopFields
	stddev_samp: SystemUserStddevSampFields
	sum: SystemUserSumFields
	var_pop: SystemUserVarPopFields
	var_samp: SystemUserVarSampFields
	variance: SystemUserVarianceFields
}
"""
order by aggregate values of table "system_user"
"""
input SystemUserAggregateOrderBy {
	avg: SystemUserAvgOrderBy
	count: OrderBy
	max: SystemUserMaxOrderBy
	min: SystemUserMinOrderBy
	stddev: SystemUserStddevOrderBy
	stddev_pop: SystemUserStddevPopOrderBy
	stddev_samp: SystemUserStddevSampOrderBy
	sum: SystemUserSumOrderBy
	var_pop: SystemUserVarPopOrderBy
	var_samp: SystemUserVarSampOrderBy
	variance: SystemUserVarianceOrderBy
}
"""
input type for inserting array relation for remote table "system_user"
"""
input SystemUserArrRelInsertInput {
	data: [SystemUserInsertInput!]!
	on_conflict: SystemUserOnConflict
}
"""
aggregate avg on columns
"""
type SystemUserAvgFields {
	audit_level: Float
	grade: Float
	id: Float
	user_state: Float
	user_type: Float
}
"""
order by avg() on columns of table "system_user"
"""
input SystemUserAvgOrderBy {
	audit_level: OrderBy
	grade: OrderBy
	id: OrderBy
	user_state: OrderBy
	user_type: OrderBy
}
"""
Boolean expression to filter rows from the table "system_user". All fields are combined with a logical 'AND'.
"""
input SystemUserBoolExp {
	Is_bind_ip: BooleanComparisonExp
	_and: [SystemUserBoolExp]
	_not: SystemUserBoolExp
	_or: [SystemUserBoolExp]
	app_version: StringComparisonExp
	audit_level: IntComparisonExp
	create_by: StringComparisonExp
	created_at: TimestamptzComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	department_id: StringComparisonExp
	email: StringComparisonExp
	enterprise_id: StringComparisonExp
	grade: IntComparisonExp
	id: BigintComparisonExp
	ip_address: StringComparisonExp
	is_delete: BooleanComparisonExp
	is_valid: BooleanComparisonExp
	mkey: StringComparisonExp
	mobile: StringComparisonExp
	password: StringComparisonExp
	proxy_user: StringComparisonExp
	remarks: StringComparisonExp
	telephone: StringComparisonExp
	username: StringComparisonExp
	ukey: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
	user_id: StringComparisonExp
	user_state: IntComparisonExp
	user_type: IntComparisonExp
}
"""
unique or primary key constraints on table "system_user"
"""
enum SystemUserConstraint {
	"""
	unique or primary key constraint
	"""
	system_user_pkey
}
"""
input type for incrementing integer column in table "system_user"
"""
input SystemUserIncInput {
	audit_level: Int
	grade: Int
	id: Bigint
	user_state: Int
	user_type: Int
}
"""
input type for inserting data into table "system_user"
"""
input SystemUserInsertInput {
	Is_bind_ip: Boolean
	app_version: String
	audit_level: Int
	create_by: String
	created_at: Timestamptz
	delete_at: Timestamptz
	delete_by: String
	department_id: String
	email: String
	enterprise_id: String
	grade: Int
	id: Bigint
	ip_address: String
	is_delete: Boolean
	is_valid: Boolean
	mkey: String
	mobile: String
	password: String
	proxy_user: String
	remarks: String
	telephone: String
	username: String
	ukey: String
	update_at: Timestamptz
	update_by: String
	user_id: String
	user_state: Int
	user_type: Int
}
"""
aggregate max on columns
"""
type SystemUserMaxFields {
	app_version: String
	audit_level: Int
	create_by: String
	created_at: Timestamptz
	delete_at: Timestamptz
	delete_by: String
	department_id: String
	email: String
	enterprise_id: String
	grade: Int
	id: Bigint
	ip_address: String
	mkey: String
	mobile: String
	password: String
	proxy_user: String
	remarks: String
	telephone: String
	username: String
	ukey: String
	update_at: Timestamptz
	update_by: String
	user_id: String
	user_state: Int
	user_type: Int
}
"""
order by max() on columns of table "system_user"
"""
input SystemUserMaxOrderBy {
	app_version: OrderBy
	audit_level: OrderBy
	create_by: OrderBy
	created_at: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	department_id: OrderBy
	email: OrderBy
	enterprise_id: OrderBy
	grade: OrderBy
	id: OrderBy
	ip_address: OrderBy
	mkey: OrderBy
	mobile: OrderBy
	password: OrderBy
	proxy_user: OrderBy
	remarks: OrderBy
	telephone: OrderBy
	username: OrderBy
	ukey: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	user_id: OrderBy
	user_state: OrderBy
	user_type: OrderBy
}
"""
aggregate min on columns
"""
type SystemUserMinFields {
	app_version: String
	audit_level: Int
	create_by: String
	created_at: Timestamptz
	delete_at: Timestamptz
	delete_by: String
	department_id: String
	email: String
	enterprise_id: String
	grade: Int
	id: Bigint
	ip_address: String
	mkey: String
	mobile: String
	password: String
	proxy_user: String
	remarks: String
	telephone: String
	username: String
	ukey: String
	update_at: Timestamptz
	update_by: String
	user_id: String
	user_state: Int
	user_type: Int
}
"""
order by min() on columns of table "system_user"
"""
input SystemUserMinOrderBy {
	app_version: OrderBy
	audit_level: OrderBy
	create_by: OrderBy
	created_at: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	department_id: OrderBy
	email: OrderBy
	enterprise_id: OrderBy
	grade: OrderBy
	id: OrderBy
	ip_address: OrderBy
	mkey: OrderBy
	mobile: OrderBy
	password: OrderBy
	proxy_user: OrderBy
	remarks: OrderBy
	telephone: OrderBy
	username: OrderBy
	ukey: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	user_id: OrderBy
	user_state: OrderBy
	user_type: OrderBy
}
"""
response of any mutation on the table "system_user"
"""
type SystemUserMutationResponse {
	"""
	number of affected rows by the mutation
	"""
	affected_rows: Int!
	"""
	data of the affected rows by the mutation
	"""
	returning: [SystemUser!]!
}
"""
input type for inserting object relation for remote table "system_user"
"""
input SystemUserObjRelInsertInput {
	data: SystemUserInsertInput!
	on_conflict: SystemUserOnConflict
}
"""
on conflict condition type for table "system_user"
"""
input SystemUserOnConflict {
	constraint: SystemUserConstraint!
	update_columns: [SystemUserUpdateColumn!]!
	where: SystemUserBoolExp
}
"""
ordering options when selecting data from "system_user"
"""
input SystemUserOrderBy {
	Is_bind_ip: OrderBy
	app_version: OrderBy
	audit_level: OrderBy
	create_by: OrderBy
	created_at: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	department_id: OrderBy
	email: OrderBy
	enterprise_id: OrderBy
	grade: OrderBy
	id: OrderBy
	ip_address: OrderBy
	is_delete: OrderBy
	is_valid: OrderBy
	mkey: OrderBy
	mobile: OrderBy
	password: OrderBy
	proxy_user: OrderBy
	remarks: OrderBy
	telephone: OrderBy
	username: OrderBy
	ukey: OrderBy
	update_at: OrderBy
	update_by: OrderBy
	user_id: OrderBy
	user_state: OrderBy
	user_type: OrderBy
}
"""
primary key columns input for table: "system_user"
"""
input SystemUserPkColumnsInput {
	"""
	ID
	"""
	id: Bigint!
}
"""
select columns of table "system_user"
"""
enum SystemUserSelectColumn {
	"""
	column name
	"""
	Is_bind_ip
	"""
	column name
	"""
	app_version
	"""
	column name
	"""
	audit_level
	"""
	column name
	"""
	create_by
	"""
	column name
	"""
	created_at
	"""
	column name
	"""
	delete_at
	"""
	column name
	"""
	delete_by
	"""
	column name
	"""
	department_id
	"""
	column name
	"""
	email
	"""
	column name
	"""
	enterprise_id
	"""
	column name
	"""
	grade
	"""
	column name
	"""
	id
	"""
	column name
	"""
	ip_address
	"""
	column name
	"""
	is_delete
	"""
	column name
	"""
	is_valid
	"""
	column name
	"""
	mkey
	"""
	column name
	"""
	mobile
	"""
	column name
	"""
	password
	"""
	column name
	"""
	proxy_user
	"""
	column name
	"""
	remarks
	"""
	column name
	"""
	telephone
	"""
	column name
	"""
	username
	"""
	column name
	"""
	ukey
	"""
	column name
	"""
	update_at
	"""
	column name
	"""
	update_by
	"""
	column name
	"""
	user_id
	"""
	column name
	"""
	user_state
	"""
	column name
	"""
	user_type
}
"""
input type for updating data in table "system_user"
"""
input SystemUserSetInput {
	Is_bind_ip: Boolean
	app_version: String
	audit_level: Int
	create_by: String
	created_at: Timestamptz
	delete_at: Timestamptz
	delete_by: String
	department_id: String
	email: String
	enterprise_id: String
	grade: Int
	id: Bigint
	ip_address: String
	is_delete: Boolean
	is_valid: Boolean
	mkey: String
	mobile: String
	password: String
	proxy_user: String
	remarks: String
	telephone: String
	username: String
	ukey: String
	update_at: Timestamptz
	update_by: String
	user_id: String
	user_state: Int
	user_type: Int
}
"""
aggregate stddev on columns
"""
type SystemUserStddevFields {
	audit_level: Float
	grade: Float
	id: Float
	user_state: Float
	user_type: Float
}
"""
order by stddev() on columns of table "system_user"
"""
input SystemUserStddevOrderBy {
	audit_level: OrderBy
	grade: OrderBy
	id: OrderBy
	user_state: OrderBy
	user_type: OrderBy
}
"""
aggregate stddev_pop on columns
"""
type SystemUserStddevPopFields {
	audit_level: Float
	grade: Float
	id: Float
	user_state: Float
	user_type: Float
}
"""
order by stddev_pop() on columns of table "system_user"
"""
input SystemUserStddevPopOrderBy {
	audit_level: OrderBy
	grade: OrderBy
	id: OrderBy
	user_state: OrderBy
	user_type: OrderBy
}
"""
aggregate stddev_samp on columns
"""
type SystemUserStddevSampFields {
	audit_level: Float
	grade: Float
	id: Float
	user_state: Float
	user_type: Float
}
"""
order by stddev_samp() on columns of table "system_user"
"""
input SystemUserStddevSampOrderBy {
	audit_level: OrderBy
	grade: OrderBy
	id: OrderBy
	user_state: OrderBy
	user_type: OrderBy
}
"""
aggregate sum on columns
"""
type SystemUserSumFields {
	audit_level: Int
	grade: Int
	id: Bigint
	user_state: Int
	user_type: Int
}
"""
order by sum() on columns of table "system_user"
"""
input SystemUserSumOrderBy {
	audit_level: OrderBy
	grade: OrderBy
	id: OrderBy
	user_state: OrderBy
	user_type: OrderBy
}
"""
update columns of table "system_user"
"""
enum SystemUserUpdateColumn {
	"""
	column name
	"""
	Is_bind_ip
	"""
	column name
	"""
	app_version
	"""
	column name
	"""
	audit_level
	"""
	column name
	"""
	create_by
	"""
	column name
	"""
	created_at
	"""
	column name
	"""
	delete_at
	"""
	column name
	"""
	delete_by
	"""
	column name
	"""
	department_id
	"""
	column name
	"""
	email
	"""
	column name
	"""
	enterprise_id
	"""
	column name
	"""
	grade
	"""
	column name
	"""
	id
	"""
	column name
	"""
	ip_address
	"""
	column name
	"""
	is_delete
	"""
	column name
	"""
	is_valid
	"""
	column name
	"""
	mkey
	"""
	column name
	"""
	mobile
	"""
	column name
	"""
	password
	"""
	column name
	"""
	proxy_user
	"""
	column name
	"""
	remarks
	"""
	column name
	"""
	telephone
	"""
	column name
	"""
	username
	"""
	column name
	"""
	ukey
	"""
	column name
	"""
	update_at
	"""
	column name
	"""
	update_by
	"""
	column name
	"""
	user_id
	"""
	column name
	"""
	user_state
	"""
	column name
	"""
	user_type
}
"""
aggregate var_pop on columns
"""
type SystemUserVarPopFields {
	audit_level: Float
	grade: Float
	id: Float
	user_state: Float
	user_type: Float
}
"""
order by var_pop() on columns of table "system_user"
"""
input SystemUserVarPopOrderBy {
	audit_level: OrderBy
	grade: OrderBy
	id: OrderBy
	user_state: OrderBy
	user_type: OrderBy
}
"""
aggregate var_samp on columns
"""
type SystemUserVarSampFields {
	audit_level: Float
	grade: Float
	id: Float
	user_state: Float
	user_type: Float
}
"""
order by var_samp() on columns of table "system_user"
"""
input SystemUserVarSampOrderBy {
	audit_level: OrderBy
	grade: OrderBy
	id: OrderBy
	user_state: OrderBy
	user_type: OrderBy
}
"""
aggregate variance on columns
"""
type SystemUserVarianceFields {
	audit_level: Float
	grade: Float
	id: Float
	user_state: Float
	user_type: Float
}
"""
order by variance() on columns of table "system_user"
"""
input SystemUserVarianceOrderBy {
	audit_level: OrderBy
	grade: OrderBy
	id: OrderBy
	user_state: OrderBy
	user_type: OrderBy
}
extend type Mutation {
	"""
	delete data from the table: "system_user"
	"""
	delete_system_user("""
	filter the rows which have to be deleted
	"""
	where: SystemUserBoolExp!): SystemUserMutationResponse
	"""
	delete single row from the table: "system_user"
	"""
	delete_system_user_by_pk("""
	ID
	"""
	id: Bigint!): SystemUser
	"""
	insert data into the table: "system_user"
	"""
	insert_system_user("""
	the rows to be inserted
	"""
	objects: [SystemUserInsertInput!]!, """
	on conflict condition
	"""
	on_conflict: SystemUserOnConflict): SystemUserMutationResponse
	"""
	insert a single row into the table: "system_user"
	"""
	insert_system_user_one("""
	the row to be inserted
	"""
	object: SystemUserInsertInput!, """
	on conflict condition
	"""
	on_conflict: SystemUserOnConflict): SystemUser
	"""
	update data of the table: "system_user"
	"""
	update_system_user("""
	increments the integer columns with given value of the filtered values
	"""
	_inc: SystemUserIncInput, """
	sets the columns of the filtered rows to the given values
	"""
	_set: SystemUserSetInput, """
	filter the rows which have to be updated
	"""
	where: SystemUserBoolExp!): SystemUserMutationResponse
	"""
	update single row of the table: "system_user"
	"""
	update_system_user_by_pk("""
	increments the integer columns with given value of the filtered values
	"""
	_inc: SystemUserIncInput, """
	sets the columns of the filtered rows to the given values
	"""
	_set: SystemUserSetInput, pk_columns: SystemUserPkColumnsInput!): SystemUser
}
extend type Query {
	"""
	fetch data from the table: "system_user"
	"""
	system_user("""
	distinct select on columns
	"""
	distinct_on: [SystemUserSelectColumn!], """
	limit the number of rows returned
	"""
	limit: Int, """
	skip the first n rows. Use only with order_by
	"""
	offset: Int, """
	sort the rows by one or more columns
	"""
	order_by: [SystemUserOrderBy!], """
	filter the rows returned
	"""
	where: SystemUserBoolExp): [SystemUser!]!
	"""
	fetch aggregated fields from the table: "system_user"
	"""
	system_user_aggregate("""
	distinct select on columns
	"""
	distinct_on: [SystemUserSelectColumn!], """
	limit the number of rows returned
	"""
	limit: Int, """
	skip the first n rows. Use only with order_by
	"""
	offset: Int, """
	sort the rows by one or more columns
	"""
	order_by: [SystemUserOrderBy!], """
	filter the rows returned
	"""
	where: SystemUserBoolExp): SystemUserAggregate!
	"""
	fetch data from the table: "system_user" using primary key columns
	"""
	system_user_by_pk("""
	ID
	"""
	id: Bigint!): SystemUser
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_DepartmentAggregateFields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DepartmentSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalODepartmentSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_EnterpriseAggregateFields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOEnterpriseSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDepartmentBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_department_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNEnterpriseBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNSystemUserBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_system_user_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DepartmentInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDepartmentInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DepartmentOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalODepartmentOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_department_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DepartmentInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNDepartmentInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DepartmentOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalODepartmentOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNEnterpriseInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.EnterpriseOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOEnterpriseOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNEnterpriseInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.EnterpriseOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOEnterpriseOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.SystemUserInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNSystemUserInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.SystemUserOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOSystemUserOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_system_user_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SystemUserInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNSystemUserInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.SystemUserOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOSystemUserOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DepartmentIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODepartmentIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DepartmentSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODepartmentSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDepartmentBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_department_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DepartmentIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODepartmentIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DepartmentSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODepartmentSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DepartmentPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNDepartmentPkColumnsInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNEnterpriseBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOEnterpriseIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOEnterpriseSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterprisePkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNEnterprisePkColumnsInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterprisePkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SystemUserIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSystemUserIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SystemUserSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSystemUserSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNSystemUserBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_system_user_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SystemUserIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOSystemUserIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SystemUserSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOSystemUserSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.SystemUserPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNSystemUserPkColumnsInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_department_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DepartmentSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODepartmentSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DepartmentOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODepartmentOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODepartmentBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DepartmentSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODepartmentSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DepartmentOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODepartmentOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODepartmentBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_department_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOEnterpriseSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOEnterpriseOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOEnterpriseBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_system_user_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SystemUserSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSystemUserSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SystemUserOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSystemUserOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSystemUserBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SystemUserSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOSystemUserSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SystemUserOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOSystemUserOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOSystemUserBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_system_user_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_SystemUserAggregateFields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SystemUserSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOSystemUserSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Department_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_category(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_code(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_id(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_name(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_id(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_internal_number(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_superior_department_id(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorDepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentAggregateFields)
	fc.Result = res
	return ec.marshalODepartmentAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentAvgFields)
	fc.Result = res
	return ec.marshalODepartmentAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_DepartmentAggregateFields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMaxFields)
	fc.Result = res
	return ec.marshalODepartmentMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMinFields)
	fc.Result = res
	return ec.marshalODepartmentMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentStddevFields)
	fc.Result = res
	return ec.marshalODepartmentStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentStddevPopFields)
	fc.Result = res
	return ec.marshalODepartmentStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentStddevSampFields)
	fc.Result = res
	return ec.marshalODepartmentStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentSumFields)
	fc.Result = res
	return ec.marshalODepartmentSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentVarPopFields)
	fc.Result = res
	return ec.marshalODepartmentVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentVarSampFields)
	fc.Result = res
	return ec.marshalODepartmentVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentVarianceFields)
	fc.Result = res
	return ec.marshalODepartmentVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAvgFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentAvgFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_department_code(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_department_name(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_superior_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorDepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_department_code(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_department_name(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_superior_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorDepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevPopFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevPopFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevSampFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentStddevSampFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentSumFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentSumFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarPopFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarPopFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarSampFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarSampFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarianceFields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentVarianceFields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_association_review_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_association_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_association_review_time(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade_review_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade_review_time(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_license_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_license_issuance_date(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseIssuanceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_license_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_scope(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_check_status(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_city_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_contact_persons(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPersons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOJsonb2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_display_number(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_address(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_code(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_entrusted_agent(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_entrusted_agent_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_entrusted_agent_phone(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_fax_number(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FaxNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_institution_category(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_black(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_input(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_install(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstall, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_upload_province(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUploadProvince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_representative(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_representative_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_representative_phone(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_operating_license_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_organization_code(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_organization_code_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCodeCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_police_station_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliceStationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_province_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_record_at(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_record_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_score(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_superior_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAggregateFields)
	fc.Result = res
	return ec.marshalOEnterpriseAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAvgFields)
	fc.Result = res
	return ec.marshalOEnterpriseAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_EnterpriseAggregateFields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMaxFields)
	fc.Result = res
	return ec.marshalOEnterpriseMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMinFields)
	fc.Result = res
	return ec.marshalOEnterpriseMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStddevFields)
	fc.Result = res
	return ec.marshalOEnterpriseStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStddevPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStddevSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseSumFields)
	fc.Result = res
	return ec.marshalOEnterpriseSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseVarPopFields)
	fc.Result = res
	return ec.marshalOEnterpriseVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseVarSampFields)
	fc.Result = res
	return ec.marshalOEnterpriseVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseVarianceFields)
	fc.Result = res
	return ec.marshalOEnterpriseVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseAvgFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_association_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_association_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_association_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_brigade_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_brigade_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_brigade_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_brigade_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_business_license_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_business_license_issuance_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseIssuanceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_business_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_business_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_address(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_entrusted_agent(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_entrusted_agent_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_entrusted_agent_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_fax_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FaxNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_legal_representative(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_legal_representative_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_legal_representative_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_operating_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_organization_code_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCodeCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_police_station_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliceStationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_record_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_record_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_superior_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMaxFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_association_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_association_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_association_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_brigade_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_brigade_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_brigade_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_brigade_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_business_license_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_business_license_issuance_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseIssuanceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_business_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_business_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_address(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_entrusted_agent(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_entrusted_agent_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_entrusted_agent_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_fax_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FaxNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_legal_representative(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_legal_representative_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_legal_representative_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_operating_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_organization_code_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCodeCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_police_station_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliceStationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_record_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_record_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_superior_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMinFields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevPopFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseStddevSampFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseSumFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarPopFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarSampFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseVarianceFields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDepartment(rctx, args["where"].(model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMutationResponse)
	fc.Result = res
	return ec.marshalODepartmentMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_department_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_department_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDepartmentByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDepartment(rctx, args["objects"].([]*model.DepartmentInsertInput), args["on_conflict"].(*model.DepartmentOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMutationResponse)
	fc.Result = res
	return ec.marshalODepartmentMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_department_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_department_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDepartmentOne(rctx, args["object"].(model.DepartmentInsertInput), args["on_conflict"].(*model.DepartmentOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDepartment(rctx, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["where"].(model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMutationResponse)
	fc.Result = res
	return ec.marshalODepartmentMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_department_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_department_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDepartmentByPk(rctx, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["pk_columns"].(model.DepartmentPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterprise(rctx, args["where"].(model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterprise(rctx, args["objects"].([]*model.EnterpriseInsertInput), args["on_conflict"].(*model.EnterpriseOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseOne(rctx, args["object"].(model.EnterpriseInsertInput), args["on_conflict"].(*model.EnterpriseOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterprise(rctx, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["where"].(model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMutationResponse)
	fc.Result = res
	return ec.marshalOEnterpriseMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseByPk(rctx, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["pk_columns"].(model.EnterprisePkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemUser(rctx, args["where"].(model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMutationResponse)
	fc.Result = res
	return ec.marshalOSystemUserMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_system_user_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_system_user_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemUserByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSystemUser(rctx, args["objects"].([]*model.SystemUserInsertInput), args["on_conflict"].(*model.SystemUserOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMutationResponse)
	fc.Result = res
	return ec.marshalOSystemUserMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_system_user_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_system_user_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSystemUserOne(rctx, args["object"].(model.SystemUserInsertInput), args["on_conflict"].(*model.SystemUserOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemUser(rctx, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["where"].(model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMutationResponse)
	fc.Result = res
	return ec.marshalOSystemUserMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_system_user_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_system_user_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemUserByPk(rctx, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["pk_columns"].(model.SystemUserPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Department(rctx, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_department_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_department_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepartmentAggregate(rctx, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentAggregate)
	fc.Result = res
	return ec.marshalNDepartmentAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_department_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_department_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepartmentByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Enterprise(rctx, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseAggregate(rctx, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAggregate)
	fc.Result = res
	return ec.marshalNEnterpriseAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUser(rctx, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SystemUser)
	fc.Result = res
	return ec.marshalNSystemUser2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_system_user_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_system_user_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUserAggregate(rctx, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserAggregate)
	fc.Result = res
	return ec.marshalNSystemUserAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_system_user_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_system_user_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUserByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_Is_bind_ip(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBindIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_app_version(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_audit_level(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_department(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemUser().Department(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_email(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_enterprise(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemUser().Enterprise(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_grade(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_id(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_ip_address(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_is_valid(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_mkey(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mkey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_mobile(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_password(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_proxy_user(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxyUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_telephone(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_username(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_ukey(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ukey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_user_state(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_user_type(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserAggregateFields)
	fc.Result = res
	return ec.marshalOSystemUserAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SystemUser)
	fc.Result = res
	return ec.marshalNSystemUser2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserAvgFields)
	fc.Result = res
	return ec.marshalOSystemUserAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_SystemUserAggregateFields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMaxFields)
	fc.Result = res
	return ec.marshalOSystemUserMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMinFields)
	fc.Result = res
	return ec.marshalOSystemUserMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserStddevFields)
	fc.Result = res
	return ec.marshalOSystemUserStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserStddevPopFields)
	fc.Result = res
	return ec.marshalOSystemUserStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserStddevSampFields)
	fc.Result = res
	return ec.marshalOSystemUserStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserSumFields)
	fc.Result = res
	return ec.marshalOSystemUserSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserVarPopFields)
	fc.Result = res
	return ec.marshalOSystemUserVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserVarSampFields)
	fc.Result = res
	return ec.marshalOSystemUserVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserVarianceFields)
	fc.Result = res
	return ec.marshalOSystemUserVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAvgFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAvgFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAvgFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserAvgFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_app_version(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_email(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_ip_address(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_mkey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mkey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_mobile(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_password(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_proxy_user(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxyUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_username(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_ukey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ukey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMaxFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_app_version(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_email(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_ip_address(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_mkey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mkey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_mobile(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_password(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_proxy_user(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxyUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_username(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_ukey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ukey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMinFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SystemUser)
	fc.Result = res
	return ec.marshalNSystemUser2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevPopFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevPopFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevPopFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevPopFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevSampFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevSampFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevSampFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserStddevSampFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserSumFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserSumFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserSumFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserSumFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarPopFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarPopFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarPopFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarPopFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarSampFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarSampFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarSampFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarSampFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarianceFields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarianceFields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarianceFields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserVarianceFields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentAggregateOrderBy(ctx context.Context, obj interface{}) (model.DepartmentAggregateOrderBy, error) {
	var it model.DepartmentAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalODepartmentAvgOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalODepartmentMaxOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalODepartmentMinOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalODepartmentStddevOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalODepartmentStddevPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalODepartmentStddevSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalODepartmentSumOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalODepartmentVarPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalODepartmentVarSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalODepartmentVarianceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentArrRelInsertInput(ctx context.Context, obj interface{}) (model.DepartmentArrRelInsertInput, error) {
	var it model.DepartmentArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNDepartmentInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalODepartmentOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentAvgOrderBy(ctx context.Context, obj interface{}) (model.DepartmentAvgOrderBy, error) {
	var it model.DepartmentAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentBoolExp(ctx context.Context, obj interface{}) (model.DepartmentBoolExp, error) {
	var it model.DepartmentBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODepartmentBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODepartmentBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODepartmentBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentIncInput(ctx context.Context, obj interface{}) (model.DepartmentIncInput, error) {
	var it model.DepartmentIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentInsertInput(ctx context.Context, obj interface{}) (model.DepartmentInsertInput, error) {
	var it model.DepartmentInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentMaxOrderBy(ctx context.Context, obj interface{}) (model.DepartmentMaxOrderBy, error) {
	var it model.DepartmentMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentMinOrderBy(ctx context.Context, obj interface{}) (model.DepartmentMinOrderBy, error) {
	var it model.DepartmentMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentObjRelInsertInput(ctx context.Context, obj interface{}) (model.DepartmentObjRelInsertInput, error) {
	var it model.DepartmentObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNDepartmentInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalODepartmentOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentOnConflict(ctx context.Context, obj interface{}) (model.DepartmentOnConflict, error) {
	var it model.DepartmentOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNDepartmentConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNDepartmentUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalODepartmentBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentOrderBy(ctx context.Context, obj interface{}) (model.DepartmentOrderBy, error) {
	var it model.DepartmentOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentPkColumnsInput(ctx context.Context, obj interface{}) (model.DepartmentPkColumnsInput, error) {
	var it model.DepartmentPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNBigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentSetInput(ctx context.Context, obj interface{}) (model.DepartmentSetInput, error) {
	var it model.DepartmentSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentStddevOrderBy(ctx context.Context, obj interface{}) (model.DepartmentStddevOrderBy, error) {
	var it model.DepartmentStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentStddevPopOrderBy(ctx context.Context, obj interface{}) (model.DepartmentStddevPopOrderBy, error) {
	var it model.DepartmentStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentStddevSampOrderBy(ctx context.Context, obj interface{}) (model.DepartmentStddevSampOrderBy, error) {
	var it model.DepartmentStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentSumOrderBy(ctx context.Context, obj interface{}) (model.DepartmentSumOrderBy, error) {
	var it model.DepartmentSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentVarPopOrderBy(ctx context.Context, obj interface{}) (model.DepartmentVarPopOrderBy, error) {
	var it model.DepartmentVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentVarSampOrderBy(ctx context.Context, obj interface{}) (model.DepartmentVarSampOrderBy, error) {
	var it model.DepartmentVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentVarianceOrderBy(ctx context.Context, obj interface{}) (model.DepartmentVarianceOrderBy, error) {
	var it model.DepartmentVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAggregateOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseAggregateOrderBy, error) {
	var it model.EnterpriseAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOEnterpriseAvgOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOEnterpriseMaxOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOEnterpriseMinOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOEnterpriseStddevOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOEnterpriseStddevPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOEnterpriseStddevSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOEnterpriseSumOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOEnterpriseVarPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOEnterpriseVarSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOEnterpriseVarianceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseArrRelInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseArrRelInsertInput, error) {
	var it model.EnterpriseArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNEnterpriseInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOEnterpriseOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseAvgOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseAvgOrderBy, error) {
	var it model.EnterpriseAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseBoolExp(ctx context.Context, obj interface{}) (model.EnterpriseBoolExp, error) {
	var it model.EnterpriseBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOEnterpriseBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOEnterpriseBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOEnterpriseBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_persons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_persons"))
			it.ContactPersons, err = ec.unmarshalOJsonbComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐJsonbComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseIncInput(ctx context.Context, obj interface{}) (model.EnterpriseIncInput, error) {
	var it model.EnterpriseIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseInsertInput, error) {
	var it model.EnterpriseInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_persons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_persons"))
			it.ContactPersons, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseMaxOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseMaxOrderBy, error) {
	var it model.EnterpriseMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseMinOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseMinOrderBy, error) {
	var it model.EnterpriseMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseObjRelInsertInput(ctx context.Context, obj interface{}) (model.EnterpriseObjRelInsertInput, error) {
	var it model.EnterpriseObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNEnterpriseInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOEnterpriseOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseOnConflict(ctx context.Context, obj interface{}) (model.EnterpriseOnConflict, error) {
	var it model.EnterpriseOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNEnterpriseConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNEnterpriseUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOEnterpriseBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseOrderBy, error) {
	var it model.EnterpriseOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_persons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_persons"))
			it.ContactPersons, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterprisePkColumnsInput(ctx context.Context, obj interface{}) (model.EnterprisePkColumnsInput, error) {
	var it model.EnterprisePkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNBigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseSetInput(ctx context.Context, obj interface{}) (model.EnterpriseSetInput, error) {
	var it model.EnterpriseSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_persons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_persons"))
			it.ContactPersons, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseStddevOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseStddevOrderBy, error) {
	var it model.EnterpriseStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseStddevPopOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseStddevPopOrderBy, error) {
	var it model.EnterpriseStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseStddevSampOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseStddevSampOrderBy, error) {
	var it model.EnterpriseStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseSumOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseSumOrderBy, error) {
	var it model.EnterpriseSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseVarPopOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseVarPopOrderBy, error) {
	var it model.EnterpriseVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseVarSampOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseVarSampOrderBy, error) {
	var it model.EnterpriseVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseVarianceOrderBy(ctx context.Context, obj interface{}) (model.EnterpriseVarianceOrderBy, error) {
	var it model.EnterpriseVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserAggregateOrderBy(ctx context.Context, obj interface{}) (model.SystemUserAggregateOrderBy, error) {
	var it model.SystemUserAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOSystemUserAvgOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOSystemUserMaxOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOSystemUserMinOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOSystemUserStddevOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOSystemUserStddevPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOSystemUserStddevSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOSystemUserSumOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOSystemUserVarPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOSystemUserVarSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOSystemUserVarianceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserArrRelInsertInput(ctx context.Context, obj interface{}) (model.SystemUserArrRelInsertInput, error) {
	var it model.SystemUserArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNSystemUserInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOSystemUserOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserAvgOrderBy(ctx context.Context, obj interface{}) (model.SystemUserAvgOrderBy, error) {
	var it model.SystemUserAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserBoolExp(ctx context.Context, obj interface{}) (model.SystemUserBoolExp, error) {
	var it model.SystemUserBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOSystemUserBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOSystemUserBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOSystemUserBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserIncInput(ctx context.Context, obj interface{}) (model.SystemUserIncInput, error) {
	var it model.SystemUserIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserInsertInput(ctx context.Context, obj interface{}) (model.SystemUserInsertInput, error) {
	var it model.SystemUserInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserMaxOrderBy(ctx context.Context, obj interface{}) (model.SystemUserMaxOrderBy, error) {
	var it model.SystemUserMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserMinOrderBy(ctx context.Context, obj interface{}) (model.SystemUserMinOrderBy, error) {
	var it model.SystemUserMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserObjRelInsertInput(ctx context.Context, obj interface{}) (model.SystemUserObjRelInsertInput, error) {
	var it model.SystemUserObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNSystemUserInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOSystemUserOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserOnConflict(ctx context.Context, obj interface{}) (model.SystemUserOnConflict, error) {
	var it model.SystemUserOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNSystemUserConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNSystemUserUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOSystemUserBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserOrderBy(ctx context.Context, obj interface{}) (model.SystemUserOrderBy, error) {
	var it model.SystemUserOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserPkColumnsInput(ctx context.Context, obj interface{}) (model.SystemUserPkColumnsInput, error) {
	var it model.SystemUserPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNBigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserSetInput(ctx context.Context, obj interface{}) (model.SystemUserSetInput, error) {
	var it model.SystemUserSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserStddevOrderBy(ctx context.Context, obj interface{}) (model.SystemUserStddevOrderBy, error) {
	var it model.SystemUserStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserStddevPopOrderBy(ctx context.Context, obj interface{}) (model.SystemUserStddevPopOrderBy, error) {
	var it model.SystemUserStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserStddevSampOrderBy(ctx context.Context, obj interface{}) (model.SystemUserStddevSampOrderBy, error) {
	var it model.SystemUserStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserSumOrderBy(ctx context.Context, obj interface{}) (model.SystemUserSumOrderBy, error) {
	var it model.SystemUserSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserVarPopOrderBy(ctx context.Context, obj interface{}) (model.SystemUserVarPopOrderBy, error) {
	var it model.SystemUserVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserVarSampOrderBy(ctx context.Context, obj interface{}) (model.SystemUserVarSampOrderBy, error) {
	var it model.SystemUserVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUserVarianceOrderBy(ctx context.Context, obj interface{}) (model.SystemUserVarianceOrderBy, error) {
	var it model.SystemUserVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var departmentImplementors = []string{"Department"}

func (ec *executionContext) _Department(ctx context.Context, sel ast.SelectionSet, obj *model1.Department) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Department")
		case "create_at":
			out.Values[i] = ec._Department_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._Department_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._Department_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._Department_delete_by(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._Department_department_category(ctx, field, obj)
		case "department_code":
			out.Values[i] = ec._Department_department_code(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._Department_department_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "department_name":
			out.Values[i] = ec._Department_department_name(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._Department_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._Department_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "internal_number":
			out.Values[i] = ec._Department_internal_number(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._Department_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._Department_remarks(ctx, field, obj)
		case "superior_department_id":
			out.Values[i] = ec._Department_superior_department_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._Department_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._Department_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentAggregateImplementors = []string{"DepartmentAggregate"}

func (ec *executionContext) _DepartmentAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentAggregate")
		case "aggregate":
			out.Values[i] = ec._DepartmentAggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._DepartmentAggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentAggregateFieldsImplementors = []string{"DepartmentAggregateFields"}

func (ec *executionContext) _DepartmentAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentAggregateFields")
		case "avg":
			out.Values[i] = ec._DepartmentAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DepartmentAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DepartmentAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DepartmentAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DepartmentAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DepartmentAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DepartmentAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DepartmentAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DepartmentAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DepartmentAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DepartmentAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentAvgFieldsImplementors = []string{"DepartmentAvgFields"}

func (ec *executionContext) _DepartmentAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentAvgFields")
		case "department_category":
			out.Values[i] = ec._DepartmentAvgFields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._DepartmentAvgFields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentAvgFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentMaxFieldsImplementors = []string{"DepartmentMaxFields"}

func (ec *executionContext) _DepartmentMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentMaxFields")
		case "create_at":
			out.Values[i] = ec._DepartmentMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._DepartmentMaxFields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._DepartmentMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._DepartmentMaxFields_delete_by(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentMaxFields_department_category(ctx, field, obj)
		case "department_code":
			out.Values[i] = ec._DepartmentMaxFields_department_code(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._DepartmentMaxFields_department_id(ctx, field, obj)
		case "department_name":
			out.Values[i] = ec._DepartmentMaxFields_department_name(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DepartmentMaxFields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._DepartmentMaxFields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentMaxFields_internal_number(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DepartmentMaxFields_remarks(ctx, field, obj)
		case "superior_department_id":
			out.Values[i] = ec._DepartmentMaxFields_superior_department_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._DepartmentMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._DepartmentMaxFields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentMinFieldsImplementors = []string{"DepartmentMinFields"}

func (ec *executionContext) _DepartmentMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentMinFields")
		case "create_at":
			out.Values[i] = ec._DepartmentMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._DepartmentMinFields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._DepartmentMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._DepartmentMinFields_delete_by(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._DepartmentMinFields_department_category(ctx, field, obj)
		case "department_code":
			out.Values[i] = ec._DepartmentMinFields_department_code(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._DepartmentMinFields_department_id(ctx, field, obj)
		case "department_name":
			out.Values[i] = ec._DepartmentMinFields_department_name(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DepartmentMinFields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._DepartmentMinFields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentMinFields_internal_number(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DepartmentMinFields_remarks(ctx, field, obj)
		case "superior_department_id":
			out.Values[i] = ec._DepartmentMinFields_superior_department_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._DepartmentMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._DepartmentMinFields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentMutationResponseImplementors = []string{"DepartmentMutationResponse"}

func (ec *executionContext) _DepartmentMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DepartmentMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DepartmentMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentStddevFieldsImplementors = []string{"DepartmentStddevFields"}

func (ec *executionContext) _DepartmentStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentStddevFields")
		case "department_category":
			out.Values[i] = ec._DepartmentStddevFields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._DepartmentStddevFields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentStddevFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentStddevPopFieldsImplementors = []string{"DepartmentStddevPopFields"}

func (ec *executionContext) _DepartmentStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentStddevPopFields")
		case "department_category":
			out.Values[i] = ec._DepartmentStddevPopFields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._DepartmentStddevPopFields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentStddevPopFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentStddevSampFieldsImplementors = []string{"DepartmentStddevSampFields"}

func (ec *executionContext) _DepartmentStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentStddevSampFields")
		case "department_category":
			out.Values[i] = ec._DepartmentStddevSampFields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._DepartmentStddevSampFields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentStddevSampFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentSumFieldsImplementors = []string{"DepartmentSumFields"}

func (ec *executionContext) _DepartmentSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentSumFields")
		case "department_category":
			out.Values[i] = ec._DepartmentSumFields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._DepartmentSumFields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentSumFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentVarPopFieldsImplementors = []string{"DepartmentVarPopFields"}

func (ec *executionContext) _DepartmentVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentVarPopFields")
		case "department_category":
			out.Values[i] = ec._DepartmentVarPopFields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._DepartmentVarPopFields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentVarPopFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentVarSampFieldsImplementors = []string{"DepartmentVarSampFields"}

func (ec *executionContext) _DepartmentVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentVarSampFields")
		case "department_category":
			out.Values[i] = ec._DepartmentVarSampFields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._DepartmentVarSampFields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentVarSampFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentVarianceFieldsImplementors = []string{"DepartmentVarianceFields"}

func (ec *executionContext) _DepartmentVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentVarianceFields")
		case "department_category":
			out.Values[i] = ec._DepartmentVarianceFields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._DepartmentVarianceFields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._DepartmentVarianceFields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseImplementors = []string{"Enterprise"}

func (ec *executionContext) _Enterprise(ctx context.Context, sel ast.SelectionSet, obj *model1.Enterprise) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Enterprise")
		case "association_review_by":
			out.Values[i] = ec._Enterprise_association_review_by(ctx, field, obj)
		case "association_review_opinion":
			out.Values[i] = ec._Enterprise_association_review_opinion(ctx, field, obj)
		case "association_review_time":
			out.Values[i] = ec._Enterprise_association_review_time(ctx, field, obj)
		case "brigade_id":
			out.Values[i] = ec._Enterprise_brigade_id(ctx, field, obj)
		case "brigade_review_by":
			out.Values[i] = ec._Enterprise_brigade_review_by(ctx, field, obj)
		case "brigade_review_opinion":
			out.Values[i] = ec._Enterprise_brigade_review_opinion(ctx, field, obj)
		case "brigade_review_time":
			out.Values[i] = ec._Enterprise_brigade_review_time(ctx, field, obj)
		case "business_license_expiry_date":
			out.Values[i] = ec._Enterprise_business_license_expiry_date(ctx, field, obj)
		case "business_license_issuance_date":
			out.Values[i] = ec._Enterprise_business_license_issuance_date(ctx, field, obj)
		case "business_license_photo":
			out.Values[i] = ec._Enterprise_business_license_photo(ctx, field, obj)
		case "business_photo":
			out.Values[i] = ec._Enterprise_business_photo(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._Enterprise_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._Enterprise_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._Enterprise_city_id(ctx, field, obj)
		case "contact_persons":
			out.Values[i] = ec._Enterprise_contact_persons(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._Enterprise_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._Enterprise_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._Enterprise_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._Enterprise_delete_by(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._Enterprise_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._Enterprise_district_id(ctx, field, obj)
		case "enterprise_address":
			out.Values[i] = ec._Enterprise_enterprise_address(ctx, field, obj)
		case "enterprise_code":
			out.Values[i] = ec._Enterprise_enterprise_code(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._Enterprise_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_level":
			out.Values[i] = ec._Enterprise_enterprise_level(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._Enterprise_enterprise_name(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._Enterprise_enterprise_nature(ctx, field, obj)
		case "entrusted_agent":
			out.Values[i] = ec._Enterprise_entrusted_agent(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._Enterprise_entrusted_agent_id_card(ctx, field, obj)
		case "entrusted_agent_id_card_photo":
			out.Values[i] = ec._Enterprise_entrusted_agent_id_card_photo(ctx, field, obj)
		case "entrusted_agent_phone":
			out.Values[i] = ec._Enterprise_entrusted_agent_phone(ctx, field, obj)
		case "fax_number":
			out.Values[i] = ec._Enterprise_fax_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "institution_category":
			out.Values[i] = ec._Enterprise_institution_category(ctx, field, obj)
		case "is_black":
			out.Values[i] = ec._Enterprise_is_black(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._Enterprise_is_deleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_input":
			out.Values[i] = ec._Enterprise_is_input(ctx, field, obj)
		case "is_install":
			out.Values[i] = ec._Enterprise_is_install(ctx, field, obj)
		case "is_upload_province":
			out.Values[i] = ec._Enterprise_is_upload_province(ctx, field, obj)
		case "legal_representative":
			out.Values[i] = ec._Enterprise_legal_representative(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._Enterprise_legal_representative_id_card(ctx, field, obj)
		case "legal_representative_id_card_photo":
			out.Values[i] = ec._Enterprise_legal_representative_id_card_photo(ctx, field, obj)
		case "legal_representative_phone":
			out.Values[i] = ec._Enterprise_legal_representative_phone(ctx, field, obj)
		case "operating_license_photo":
			out.Values[i] = ec._Enterprise_operating_license_photo(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._Enterprise_organization_code(ctx, field, obj)
		case "organization_code_certificate_photo":
			out.Values[i] = ec._Enterprise_organization_code_certificate_photo(ctx, field, obj)
		case "police_station_id":
			out.Values[i] = ec._Enterprise_police_station_id(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._Enterprise_province_id(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._Enterprise_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._Enterprise_record_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._Enterprise_remarks(ctx, field, obj)
		case "score":
			out.Values[i] = ec._Enterprise_score(ctx, field, obj)
		case "superior_enterprise_id":
			out.Values[i] = ec._Enterprise_superior_enterprise_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._Enterprise_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._Enterprise_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._Enterprise_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAggregateImplementors = []string{"EnterpriseAggregate"}

func (ec *executionContext) _EnterpriseAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAggregate")
		case "aggregate":
			out.Values[i] = ec._EnterpriseAggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._EnterpriseAggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAggregateFieldsImplementors = []string{"EnterpriseAggregateFields"}

func (ec *executionContext) _EnterpriseAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAggregateFields")
		case "avg":
			out.Values[i] = ec._EnterpriseAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._EnterpriseAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._EnterpriseAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._EnterpriseAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._EnterpriseAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._EnterpriseAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._EnterpriseAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._EnterpriseAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._EnterpriseAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._EnterpriseAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._EnterpriseAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseAvgFieldsImplementors = []string{"EnterpriseAvgFields"}

func (ec *executionContext) _EnterpriseAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseAvgFields")
		case "business_scope":
			out.Values[i] = ec._EnterpriseAvgFields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseAvgFields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseAvgFields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseAvgFields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseAvgFields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseAvgFields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseAvgFields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._EnterpriseAvgFields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseAvgFields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseAvgFields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseAvgFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMaxFieldsImplementors = []string{"EnterpriseMaxFields"}

func (ec *executionContext) _EnterpriseMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMaxFields")
		case "association_review_by":
			out.Values[i] = ec._EnterpriseMaxFields_association_review_by(ctx, field, obj)
		case "association_review_opinion":
			out.Values[i] = ec._EnterpriseMaxFields_association_review_opinion(ctx, field, obj)
		case "association_review_time":
			out.Values[i] = ec._EnterpriseMaxFields_association_review_time(ctx, field, obj)
		case "brigade_id":
			out.Values[i] = ec._EnterpriseMaxFields_brigade_id(ctx, field, obj)
		case "brigade_review_by":
			out.Values[i] = ec._EnterpriseMaxFields_brigade_review_by(ctx, field, obj)
		case "brigade_review_opinion":
			out.Values[i] = ec._EnterpriseMaxFields_brigade_review_opinion(ctx, field, obj)
		case "brigade_review_time":
			out.Values[i] = ec._EnterpriseMaxFields_brigade_review_time(ctx, field, obj)
		case "business_license_expiry_date":
			out.Values[i] = ec._EnterpriseMaxFields_business_license_expiry_date(ctx, field, obj)
		case "business_license_issuance_date":
			out.Values[i] = ec._EnterpriseMaxFields_business_license_issuance_date(ctx, field, obj)
		case "business_license_photo":
			out.Values[i] = ec._EnterpriseMaxFields_business_license_photo(ctx, field, obj)
		case "business_photo":
			out.Values[i] = ec._EnterpriseMaxFields_business_photo(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseMaxFields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseMaxFields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseMaxFields_city_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseMaxFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseMaxFields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseMaxFields_delete_by(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseMaxFields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseMaxFields_district_id(ctx, field, obj)
		case "enterprise_address":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_address(ctx, field, obj)
		case "enterprise_code":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_code(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_level(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_name(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseMaxFields_enterprise_nature(ctx, field, obj)
		case "entrusted_agent":
			out.Values[i] = ec._EnterpriseMaxFields_entrusted_agent(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._EnterpriseMaxFields_entrusted_agent_id_card(ctx, field, obj)
		case "entrusted_agent_id_card_photo":
			out.Values[i] = ec._EnterpriseMaxFields_entrusted_agent_id_card_photo(ctx, field, obj)
		case "entrusted_agent_phone":
			out.Values[i] = ec._EnterpriseMaxFields_entrusted_agent_phone(ctx, field, obj)
		case "fax_number":
			out.Values[i] = ec._EnterpriseMaxFields_fax_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._EnterpriseMaxFields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseMaxFields_institution_category(ctx, field, obj)
		case "legal_representative":
			out.Values[i] = ec._EnterpriseMaxFields_legal_representative(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._EnterpriseMaxFields_legal_representative_id_card(ctx, field, obj)
		case "legal_representative_id_card_photo":
			out.Values[i] = ec._EnterpriseMaxFields_legal_representative_id_card_photo(ctx, field, obj)
		case "legal_representative_phone":
			out.Values[i] = ec._EnterpriseMaxFields_legal_representative_phone(ctx, field, obj)
		case "operating_license_photo":
			out.Values[i] = ec._EnterpriseMaxFields_operating_license_photo(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._EnterpriseMaxFields_organization_code(ctx, field, obj)
		case "organization_code_certificate_photo":
			out.Values[i] = ec._EnterpriseMaxFields_organization_code_certificate_photo(ctx, field, obj)
		case "police_station_id":
			out.Values[i] = ec._EnterpriseMaxFields_police_station_id(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseMaxFields_province_id(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._EnterpriseMaxFields_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._EnterpriseMaxFields_record_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._EnterpriseMaxFields_remarks(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseMaxFields_score(ctx, field, obj)
		case "superior_enterprise_id":
			out.Values[i] = ec._EnterpriseMaxFields_superior_enterprise_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseMaxFields_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._EnterpriseMaxFields_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMinFieldsImplementors = []string{"EnterpriseMinFields"}

func (ec *executionContext) _EnterpriseMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMinFields")
		case "association_review_by":
			out.Values[i] = ec._EnterpriseMinFields_association_review_by(ctx, field, obj)
		case "association_review_opinion":
			out.Values[i] = ec._EnterpriseMinFields_association_review_opinion(ctx, field, obj)
		case "association_review_time":
			out.Values[i] = ec._EnterpriseMinFields_association_review_time(ctx, field, obj)
		case "brigade_id":
			out.Values[i] = ec._EnterpriseMinFields_brigade_id(ctx, field, obj)
		case "brigade_review_by":
			out.Values[i] = ec._EnterpriseMinFields_brigade_review_by(ctx, field, obj)
		case "brigade_review_opinion":
			out.Values[i] = ec._EnterpriseMinFields_brigade_review_opinion(ctx, field, obj)
		case "brigade_review_time":
			out.Values[i] = ec._EnterpriseMinFields_brigade_review_time(ctx, field, obj)
		case "business_license_expiry_date":
			out.Values[i] = ec._EnterpriseMinFields_business_license_expiry_date(ctx, field, obj)
		case "business_license_issuance_date":
			out.Values[i] = ec._EnterpriseMinFields_business_license_issuance_date(ctx, field, obj)
		case "business_license_photo":
			out.Values[i] = ec._EnterpriseMinFields_business_license_photo(ctx, field, obj)
		case "business_photo":
			out.Values[i] = ec._EnterpriseMinFields_business_photo(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._EnterpriseMinFields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseMinFields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseMinFields_city_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._EnterpriseMinFields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._EnterpriseMinFields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._EnterpriseMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._EnterpriseMinFields_delete_by(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseMinFields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseMinFields_district_id(ctx, field, obj)
		case "enterprise_address":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_address(ctx, field, obj)
		case "enterprise_code":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_code(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_level(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_name(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseMinFields_enterprise_nature(ctx, field, obj)
		case "entrusted_agent":
			out.Values[i] = ec._EnterpriseMinFields_entrusted_agent(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._EnterpriseMinFields_entrusted_agent_id_card(ctx, field, obj)
		case "entrusted_agent_id_card_photo":
			out.Values[i] = ec._EnterpriseMinFields_entrusted_agent_id_card_photo(ctx, field, obj)
		case "entrusted_agent_phone":
			out.Values[i] = ec._EnterpriseMinFields_entrusted_agent_phone(ctx, field, obj)
		case "fax_number":
			out.Values[i] = ec._EnterpriseMinFields_fax_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._EnterpriseMinFields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseMinFields_institution_category(ctx, field, obj)
		case "legal_representative":
			out.Values[i] = ec._EnterpriseMinFields_legal_representative(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._EnterpriseMinFields_legal_representative_id_card(ctx, field, obj)
		case "legal_representative_id_card_photo":
			out.Values[i] = ec._EnterpriseMinFields_legal_representative_id_card_photo(ctx, field, obj)
		case "legal_representative_phone":
			out.Values[i] = ec._EnterpriseMinFields_legal_representative_phone(ctx, field, obj)
		case "operating_license_photo":
			out.Values[i] = ec._EnterpriseMinFields_operating_license_photo(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._EnterpriseMinFields_organization_code(ctx, field, obj)
		case "organization_code_certificate_photo":
			out.Values[i] = ec._EnterpriseMinFields_organization_code_certificate_photo(ctx, field, obj)
		case "police_station_id":
			out.Values[i] = ec._EnterpriseMinFields_police_station_id(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseMinFields_province_id(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._EnterpriseMinFields_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._EnterpriseMinFields_record_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._EnterpriseMinFields_remarks(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseMinFields_score(ctx, field, obj)
		case "superior_enterprise_id":
			out.Values[i] = ec._EnterpriseMinFields_superior_enterprise_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._EnterpriseMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._EnterpriseMinFields_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._EnterpriseMinFields_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseMutationResponseImplementors = []string{"EnterpriseMutationResponse"}

func (ec *executionContext) _EnterpriseMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._EnterpriseMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._EnterpriseMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStddevFieldsImplementors = []string{"EnterpriseStddevFields"}

func (ec *executionContext) _EnterpriseStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStddevFields")
		case "business_scope":
			out.Values[i] = ec._EnterpriseStddevFields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseStddevFields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseStddevFields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseStddevFields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseStddevFields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseStddevFields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseStddevFields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._EnterpriseStddevFields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseStddevFields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseStddevFields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseStddevFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStddevPopFieldsImplementors = []string{"EnterpriseStddevPopFields"}

func (ec *executionContext) _EnterpriseStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStddevPopFields")
		case "business_scope":
			out.Values[i] = ec._EnterpriseStddevPopFields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseStddevPopFields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseStddevPopFields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseStddevPopFields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseStddevPopFields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseStddevPopFields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseStddevPopFields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._EnterpriseStddevPopFields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseStddevPopFields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseStddevPopFields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseStddevPopFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseStddevSampFieldsImplementors = []string{"EnterpriseStddevSampFields"}

func (ec *executionContext) _EnterpriseStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseStddevSampFields")
		case "business_scope":
			out.Values[i] = ec._EnterpriseStddevSampFields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseStddevSampFields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseStddevSampFields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseStddevSampFields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseStddevSampFields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseStddevSampFields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseStddevSampFields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._EnterpriseStddevSampFields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseStddevSampFields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseStddevSampFields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseStddevSampFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseSumFieldsImplementors = []string{"EnterpriseSumFields"}

func (ec *executionContext) _EnterpriseSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseSumFields")
		case "business_scope":
			out.Values[i] = ec._EnterpriseSumFields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseSumFields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseSumFields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseSumFields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseSumFields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseSumFields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseSumFields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._EnterpriseSumFields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseSumFields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseSumFields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseSumFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseVarPopFieldsImplementors = []string{"EnterpriseVarPopFields"}

func (ec *executionContext) _EnterpriseVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseVarPopFields")
		case "business_scope":
			out.Values[i] = ec._EnterpriseVarPopFields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseVarPopFields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseVarPopFields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseVarPopFields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseVarPopFields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseVarPopFields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseVarPopFields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._EnterpriseVarPopFields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseVarPopFields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseVarPopFields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseVarPopFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseVarSampFieldsImplementors = []string{"EnterpriseVarSampFields"}

func (ec *executionContext) _EnterpriseVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseVarSampFields")
		case "business_scope":
			out.Values[i] = ec._EnterpriseVarSampFields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseVarSampFields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseVarSampFields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseVarSampFields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseVarSampFields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseVarSampFields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseVarSampFields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._EnterpriseVarSampFields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseVarSampFields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseVarSampFields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseVarSampFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseVarianceFieldsImplementors = []string{"EnterpriseVarianceFields"}

func (ec *executionContext) _EnterpriseVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseVarianceFields")
		case "business_scope":
			out.Values[i] = ec._EnterpriseVarianceFields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._EnterpriseVarianceFields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._EnterpriseVarianceFields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._EnterpriseVarianceFields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._EnterpriseVarianceFields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._EnterpriseVarianceFields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._EnterpriseVarianceFields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._EnterpriseVarianceFields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._EnterpriseVarianceFields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._EnterpriseVarianceFields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._EnterpriseVarianceFields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_department":
			out.Values[i] = ec._Mutation_delete_department(ctx, field)
		case "delete_department_by_pk":
			out.Values[i] = ec._Mutation_delete_department_by_pk(ctx, field)
		case "insert_department":
			out.Values[i] = ec._Mutation_insert_department(ctx, field)
		case "insert_department_one":
			out.Values[i] = ec._Mutation_insert_department_one(ctx, field)
		case "update_department":
			out.Values[i] = ec._Mutation_update_department(ctx, field)
		case "update_department_by_pk":
			out.Values[i] = ec._Mutation_update_department_by_pk(ctx, field)
		case "delete_enterprise":
			out.Values[i] = ec._Mutation_delete_enterprise(ctx, field)
		case "delete_enterprise_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_by_pk(ctx, field)
		case "insert_enterprise":
			out.Values[i] = ec._Mutation_insert_enterprise(ctx, field)
		case "insert_enterprise_one":
			out.Values[i] = ec._Mutation_insert_enterprise_one(ctx, field)
		case "update_enterprise":
			out.Values[i] = ec._Mutation_update_enterprise(ctx, field)
		case "update_enterprise_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_by_pk(ctx, field)
		case "delete_system_user":
			out.Values[i] = ec._Mutation_delete_system_user(ctx, field)
		case "delete_system_user_by_pk":
			out.Values[i] = ec._Mutation_delete_system_user_by_pk(ctx, field)
		case "insert_system_user":
			out.Values[i] = ec._Mutation_insert_system_user(ctx, field)
		case "insert_system_user_one":
			out.Values[i] = ec._Mutation_insert_system_user_one(ctx, field)
		case "update_system_user":
			out.Values[i] = ec._Mutation_update_system_user(ctx, field)
		case "update_system_user_by_pk":
			out.Values[i] = ec._Mutation_update_system_user_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "department":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "department_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "department_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department_by_pk(ctx, field)
				return res
			})
		case "enterprise":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_by_pk(ctx, field)
				return res
			})
		case "system_user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_system_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "system_user_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_system_user_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "system_user_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_system_user_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserImplementors = []string{"SystemUser"}

func (ec *executionContext) _SystemUser(ctx context.Context, sel ast.SelectionSet, obj *model1.SystemUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUser")
		case "Is_bind_ip":
			out.Values[i] = ec._SystemUser_Is_bind_ip(ctx, field, obj)
		case "app_version":
			out.Values[i] = ec._SystemUser_app_version(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUser_audit_level(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._SystemUser_create_by(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SystemUser_created_at(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._SystemUser_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._SystemUser_delete_by(ctx, field, obj)
		case "department":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemUser_department(ctx, field, obj)
				return res
			})
		case "email":
			out.Values[i] = ec._SystemUser_email(ctx, field, obj)
		case "enterprise":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemUser_enterprise(ctx, field, obj)
				return res
			})
		case "grade":
			out.Values[i] = ec._SystemUser_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SystemUser_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ip_address":
			out.Values[i] = ec._SystemUser_ip_address(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._SystemUser_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "is_valid":
			out.Values[i] = ec._SystemUser_is_valid(ctx, field, obj)
		case "mkey":
			out.Values[i] = ec._SystemUser_mkey(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._SystemUser_mobile(ctx, field, obj)
		case "password":
			out.Values[i] = ec._SystemUser_password(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "proxy_user":
			out.Values[i] = ec._SystemUser_proxy_user(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SystemUser_remarks(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._SystemUser_telephone(ctx, field, obj)
		case "username":
			out.Values[i] = ec._SystemUser_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ukey":
			out.Values[i] = ec._SystemUser_ukey(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._SystemUser_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._SystemUser_update_by(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._SystemUser_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user_state":
			out.Values[i] = ec._SystemUser_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUser_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserAggregateImplementors = []string{"SystemUserAggregate"}

func (ec *executionContext) _SystemUserAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserAggregate")
		case "aggregate":
			out.Values[i] = ec._SystemUserAggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._SystemUserAggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserAggregateFieldsImplementors = []string{"SystemUserAggregateFields"}

func (ec *executionContext) _SystemUserAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserAggregateFields")
		case "avg":
			out.Values[i] = ec._SystemUserAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._SystemUserAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._SystemUserAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._SystemUserAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._SystemUserAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._SystemUserAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._SystemUserAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._SystemUserAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._SystemUserAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._SystemUserAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._SystemUserAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserAvgFieldsImplementors = []string{"SystemUserAvgFields"}

func (ec *executionContext) _SystemUserAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserAvgFields")
		case "audit_level":
			out.Values[i] = ec._SystemUserAvgFields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserAvgFields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SystemUserAvgFields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserAvgFields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserAvgFields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserMaxFieldsImplementors = []string{"SystemUserMaxFields"}

func (ec *executionContext) _SystemUserMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserMaxFields")
		case "app_version":
			out.Values[i] = ec._SystemUserMaxFields_app_version(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserMaxFields_audit_level(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._SystemUserMaxFields_create_by(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SystemUserMaxFields_created_at(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._SystemUserMaxFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._SystemUserMaxFields_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._SystemUserMaxFields_department_id(ctx, field, obj)
		case "email":
			out.Values[i] = ec._SystemUserMaxFields_email(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._SystemUserMaxFields_enterprise_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserMaxFields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SystemUserMaxFields_id(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._SystemUserMaxFields_ip_address(ctx, field, obj)
		case "mkey":
			out.Values[i] = ec._SystemUserMaxFields_mkey(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._SystemUserMaxFields_mobile(ctx, field, obj)
		case "password":
			out.Values[i] = ec._SystemUserMaxFields_password(ctx, field, obj)
		case "proxy_user":
			out.Values[i] = ec._SystemUserMaxFields_proxy_user(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SystemUserMaxFields_remarks(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._SystemUserMaxFields_telephone(ctx, field, obj)
		case "username":
			out.Values[i] = ec._SystemUserMaxFields_username(ctx, field, obj)
		case "ukey":
			out.Values[i] = ec._SystemUserMaxFields_ukey(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._SystemUserMaxFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._SystemUserMaxFields_update_by(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._SystemUserMaxFields_user_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserMaxFields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserMaxFields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserMinFieldsImplementors = []string{"SystemUserMinFields"}

func (ec *executionContext) _SystemUserMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserMinFields")
		case "app_version":
			out.Values[i] = ec._SystemUserMinFields_app_version(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUserMinFields_audit_level(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._SystemUserMinFields_create_by(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._SystemUserMinFields_created_at(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._SystemUserMinFields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._SystemUserMinFields_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._SystemUserMinFields_department_id(ctx, field, obj)
		case "email":
			out.Values[i] = ec._SystemUserMinFields_email(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._SystemUserMinFields_enterprise_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserMinFields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SystemUserMinFields_id(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._SystemUserMinFields_ip_address(ctx, field, obj)
		case "mkey":
			out.Values[i] = ec._SystemUserMinFields_mkey(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._SystemUserMinFields_mobile(ctx, field, obj)
		case "password":
			out.Values[i] = ec._SystemUserMinFields_password(ctx, field, obj)
		case "proxy_user":
			out.Values[i] = ec._SystemUserMinFields_proxy_user(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SystemUserMinFields_remarks(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._SystemUserMinFields_telephone(ctx, field, obj)
		case "username":
			out.Values[i] = ec._SystemUserMinFields_username(ctx, field, obj)
		case "ukey":
			out.Values[i] = ec._SystemUserMinFields_ukey(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._SystemUserMinFields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._SystemUserMinFields_update_by(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._SystemUserMinFields_user_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserMinFields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserMinFields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserMutationResponseImplementors = []string{"SystemUserMutationResponse"}

func (ec *executionContext) _SystemUserMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._SystemUserMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._SystemUserMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserStddevFieldsImplementors = []string{"SystemUserStddevFields"}

func (ec *executionContext) _SystemUserStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserStddevFields")
		case "audit_level":
			out.Values[i] = ec._SystemUserStddevFields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserStddevFields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SystemUserStddevFields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserStddevFields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserStddevFields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserStddevPopFieldsImplementors = []string{"SystemUserStddevPopFields"}

func (ec *executionContext) _SystemUserStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserStddevPopFields")
		case "audit_level":
			out.Values[i] = ec._SystemUserStddevPopFields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserStddevPopFields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SystemUserStddevPopFields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserStddevPopFields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserStddevPopFields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserStddevSampFieldsImplementors = []string{"SystemUserStddevSampFields"}

func (ec *executionContext) _SystemUserStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserStddevSampFields")
		case "audit_level":
			out.Values[i] = ec._SystemUserStddevSampFields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserStddevSampFields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SystemUserStddevSampFields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserStddevSampFields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserStddevSampFields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserSumFieldsImplementors = []string{"SystemUserSumFields"}

func (ec *executionContext) _SystemUserSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserSumFields")
		case "audit_level":
			out.Values[i] = ec._SystemUserSumFields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserSumFields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SystemUserSumFields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserSumFields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserSumFields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserVarPopFieldsImplementors = []string{"SystemUserVarPopFields"}

func (ec *executionContext) _SystemUserVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserVarPopFields")
		case "audit_level":
			out.Values[i] = ec._SystemUserVarPopFields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserVarPopFields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SystemUserVarPopFields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserVarPopFields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserVarPopFields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserVarSampFieldsImplementors = []string{"SystemUserVarSampFields"}

func (ec *executionContext) _SystemUserVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserVarSampFields")
		case "audit_level":
			out.Values[i] = ec._SystemUserVarSampFields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserVarSampFields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SystemUserVarSampFields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserVarSampFields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserVarSampFields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserVarianceFieldsImplementors = []string{"SystemUserVarianceFields"}

func (ec *executionContext) _SystemUserVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserVarianceFields")
		case "audit_level":
			out.Values[i] = ec._SystemUserVarianceFields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUserVarianceFields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._SystemUserVarianceFields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._SystemUserVarianceFields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUserVarianceFields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDepartment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.Department) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *model1.Department) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartmentAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregate(ctx context.Context, sel ast.SelectionSet, v model.DepartmentAggregate) graphql.Marshaler {
	return ec._DepartmentAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartmentAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DepartmentAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDepartmentBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx context.Context, v interface{}) (model.DepartmentBoolExp, error) {
	res, err := ec.unmarshalInputDepartmentBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepartmentConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentConstraint(ctx context.Context, v interface{}) (model.DepartmentConstraint, error) {
	var res model.DepartmentConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDepartmentConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentConstraint(ctx context.Context, sel ast.SelectionSet, v model.DepartmentConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDepartmentInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx context.Context, v interface{}) (model.DepartmentInsertInput, error) {
	res, err := ec.unmarshalInputDepartmentInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepartmentInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DepartmentInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DepartmentInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDepartmentInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDepartmentInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx context.Context, v interface{}) (*model.DepartmentInsertInput, error) {
	res, err := ec.unmarshalInputDepartmentInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepartmentOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderBy(ctx context.Context, v interface{}) (*model.DepartmentOrderBy, error) {
	res, err := ec.unmarshalInputDepartmentOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepartmentPkColumnsInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentPkColumnsInput(ctx context.Context, v interface{}) (model.DepartmentPkColumnsInput, error) {
	res, err := ec.unmarshalInputDepartmentPkColumnsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepartmentSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx context.Context, v interface{}) (model.DepartmentSelectColumn, error) {
	var res model.DepartmentSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDepartmentSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DepartmentSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDepartmentUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumn(ctx context.Context, v interface{}) (model.DepartmentUpdateColumn, error) {
	var res model.DepartmentUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDepartmentUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DepartmentUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDepartmentUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DepartmentUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DepartmentUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDepartmentUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNDepartmentUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DepartmentUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartmentUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterprise2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.Enterprise) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v *model1.Enterprise) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Enterprise(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseAggregate) graphql.Marshaler {
	return ec._EnterpriseAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx context.Context, v interface{}) (model.EnterpriseBoolExp, error) {
	res, err := ec.unmarshalInputEnterpriseBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseConstraint(ctx context.Context, v interface{}) (model.EnterpriseConstraint, error) {
	var res model.EnterpriseConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseConstraint(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEnterpriseInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx context.Context, v interface{}) (model.EnterpriseInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEnterpriseInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseInsertInput, error) {
	res, err := ec.unmarshalInputEnterpriseInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseOrderBy, error) {
	res, err := ec.unmarshalInputEnterpriseOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterprisePkColumnsInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterprisePkColumnsInput(ctx context.Context, v interface{}) (model.EnterprisePkColumnsInput, error) {
	res, err := ec.unmarshalInputEnterprisePkColumnsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEnterpriseSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseSelectColumn, error) {
	var res model.EnterpriseSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEnterpriseUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumn(ctx context.Context, v interface{}) (model.EnterpriseUpdateColumn, error) {
	var res model.EnterpriseUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEnterpriseUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNEnterpriseUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNSystemUser2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.SystemUser) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx context.Context, sel ast.SelectionSet, v *model1.SystemUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SystemUser(ctx, sel, v)
}

func (ec *executionContext) marshalNSystemUserAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregate(ctx context.Context, sel ast.SelectionSet, v model.SystemUserAggregate) graphql.Marshaler {
	return ec._SystemUserAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemUserAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregate(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SystemUserAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemUserBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx context.Context, v interface{}) (model.SystemUserBoolExp, error) {
	res, err := ec.unmarshalInputSystemUserBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemUserConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserConstraint(ctx context.Context, v interface{}) (model.SystemUserConstraint, error) {
	var res model.SystemUserConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemUserConstraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserConstraint(ctx context.Context, sel ast.SelectionSet, v model.SystemUserConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSystemUserInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx context.Context, v interface{}) (model.SystemUserInsertInput, error) {
	res, err := ec.unmarshalInputSystemUserInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemUserInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.SystemUserInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SystemUserInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSystemUserInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSystemUserInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx context.Context, v interface{}) (*model.SystemUserInsertInput, error) {
	res, err := ec.unmarshalInputSystemUserInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemUserOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderBy(ctx context.Context, v interface{}) (*model.SystemUserOrderBy, error) {
	res, err := ec.unmarshalInputSystemUserOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemUserPkColumnsInput2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserPkColumnsInput(ctx context.Context, v interface{}) (model.SystemUserPkColumnsInput, error) {
	res, err := ec.unmarshalInputSystemUserPkColumnsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemUserSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx context.Context, v interface{}) (model.SystemUserSelectColumn, error) {
	var res model.SystemUserSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemUserSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.SystemUserSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSystemUserUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumn(ctx context.Context, v interface{}) (model.SystemUserUpdateColumn, error) {
	var res model.SystemUserUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemUserUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.SystemUserUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSystemUserUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.SystemUserUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.SystemUserUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSystemUserUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNSystemUserUpdateColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SystemUserUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemUserUpdateColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *model1.Department) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODepartmentAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentAvgOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAvgOrderBy(ctx context.Context, v interface{}) (*model.DepartmentAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentAvgOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODepartmentBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx context.Context, v interface{}) ([]*model.DepartmentBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DepartmentBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODepartmentBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODepartmentBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx context.Context, v interface{}) (*model.DepartmentBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODepartmentIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentIncInput(ctx context.Context, v interface{}) (*model.DepartmentIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentMaxFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentMaxOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMaxOrderBy(ctx context.Context, v interface{}) (*model.DepartmentMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentMaxOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentMinFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentMinOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMinOrderBy(ctx context.Context, v interface{}) (*model.DepartmentMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentMinOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOnConflict(ctx context.Context, v interface{}) (*model.DepartmentOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentOnConflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODepartmentOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DepartmentOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DepartmentOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDepartmentOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODepartmentSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DepartmentSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DepartmentSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDepartmentSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODepartmentSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DepartmentSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartmentSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODepartmentSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSetInput(ctx context.Context, v interface{}) (*model.DepartmentSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentStddevFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentStddevOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevOrderBy(ctx context.Context, v interface{}) (*model.DepartmentStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentStddevOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentStddevPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DepartmentStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentStddevPopOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentStddevSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DepartmentStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentStddevSampOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentSumFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentSumOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSumOrderBy(ctx context.Context, v interface{}) (*model.DepartmentSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentSumOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentVarPopFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentVarPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarPopOrderBy(ctx context.Context, v interface{}) (*model.DepartmentVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentVarPopOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentVarSampFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentVarSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarSampOrderBy(ctx context.Context, v interface{}) (*model.DepartmentVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentVarSampOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DepartmentVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentVarianceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarianceOrderBy(ctx context.Context, v interface{}) (*model.DepartmentVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentVarianceOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v *model1.Enterprise) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Enterprise(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseAvgOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAvgOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseAvgOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEnterpriseBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseIncInput(ctx context.Context, v interface{}) (*model.EnterpriseIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMaxFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseMaxOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMaxOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseMaxOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMinFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseMinOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMinOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseMinOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOnConflict(ctx context.Context, v interface{}) (*model.EnterpriseOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseOnConflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEnterpriseSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEnterpriseSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOEnterpriseSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSetInput(ctx context.Context, v interface{}) (*model.EnterpriseSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStddevFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseStddevOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseStddevOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseStddevPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevPopOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseStddevPopOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseStddevSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevSampOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseStddevSampOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseSumFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseSumOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSumOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseSumOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseVarPopFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseVarPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarPopOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseVarPopOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseVarSampFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseVarSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarSampOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseVarSampOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EnterpriseVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEnterpriseVarianceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarianceOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseVarianceOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOJsonbComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐJsonbComparisonExp(ctx context.Context, v interface{}) (*model2.JsonbComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJsonbComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUser2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx context.Context, sel ast.SelectionSet, v *model1.SystemUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUser(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemUserAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserAvgOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAvgOrderBy(ctx context.Context, v interface{}) (*model.SystemUserAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserAvgOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSystemUserBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx context.Context, v interface{}) ([]*model.SystemUserBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SystemUserBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSystemUserBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSystemUserBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx context.Context, v interface{}) (*model.SystemUserBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSystemUserIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserIncInput(ctx context.Context, v interface{}) (*model.SystemUserIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserMaxFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserMaxOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMaxOrderBy(ctx context.Context, v interface{}) (*model.SystemUserMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserMaxOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMinFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserMinFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserMinOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMinOrderBy(ctx context.Context, v interface{}) (*model.SystemUserMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserMinOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserOnConflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOnConflict(ctx context.Context, v interface{}) (*model.SystemUserOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserOnConflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSystemUserOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderByᚄ(ctx context.Context, v interface{}) ([]*model.SystemUserOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SystemUserOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSystemUserOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSystemUserSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.SystemUserSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.SystemUserSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSystemUserSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSystemUserSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SystemUserSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemUserSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOSystemUserSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSetInput(ctx context.Context, v interface{}) (*model.SystemUserSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserStddevFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserStddevOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevOrderBy(ctx context.Context, v interface{}) (*model.SystemUserStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserStddevOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserStddevPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevPopOrderBy(ctx context.Context, v interface{}) (*model.SystemUserStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserStddevPopOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserStddevSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevSampOrderBy(ctx context.Context, v interface{}) (*model.SystemUserStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserStddevSampOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSumFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserSumFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserSumOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSumOrderBy(ctx context.Context, v interface{}) (*model.SystemUserSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserSumOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserVarPopFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserVarPopOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarPopOrderBy(ctx context.Context, v interface{}) (*model.SystemUserVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserVarPopOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserVarSampFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserVarSampOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarSampOrderBy(ctx context.Context, v interface{}) (*model.SystemUserVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserVarSampOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUserVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUserVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUserVarianceOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarianceOrderBy(ctx context.Context, v interface{}) (*model.SystemUserVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUserVarianceOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
