// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/admin/graph/model"
	model1 "VehicleSupervision/internal/modules/admin/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteDepartment     func(childComplexity int, where model.DepartmentBoolExp) int
		DeleteDepartmentByPk func(childComplexity int, id int64) int
		DeleteEnterprise     func(childComplexity int, where model.EnterpriseBoolExp) int
		DeleteEnterpriseByPk func(childComplexity int, id int64) int
		DeleteSystemUser     func(childComplexity int, where model.SystemUserBoolExp) int
		DeleteSystemUserByPk func(childComplexity int, id int64) int
		InsertDepartment     func(childComplexity int, objects []*model.DepartmentInsertInput, onConflict *model.DepartmentOnConflict) int
		InsertDepartmentOne  func(childComplexity int, object model.DepartmentInsertInput, onConflict *model.DepartmentOnConflict) int
		InsertEnterprise     func(childComplexity int, objects []*model.EnterpriseInsertInput, onConflict *model.EnterpriseOnConflict) int
		InsertEnterpriseOne  func(childComplexity int, object model.EnterpriseInsertInput, onConflict *model.EnterpriseOnConflict) int
		InsertSystemUser     func(childComplexity int, objects []*model.SystemUserInsertInput, onConflict *model.SystemUserOnConflict) int
		InsertSystemUserOne  func(childComplexity int, object model.SystemUserInsertInput, onConflict *model.SystemUserOnConflict) int
		UpdateDepartment     func(childComplexity int, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, where model.DepartmentBoolExp) int
		UpdateDepartmentByPk func(childComplexity int, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, pkColumns model.DepartmentPkColumnsInput) int
		UpdateEnterprise     func(childComplexity int, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, where model.EnterpriseBoolExp) int
		UpdateEnterpriseByPk func(childComplexity int, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, pkColumns model.EnterprisePkColumnsInput) int
		UpdateSystemUser     func(childComplexity int, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, where model.SystemUserBoolExp) int
		UpdateSystemUserByPk func(childComplexity int, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, pkColumns model.SystemUserPkColumnsInput) int
	}

	Query struct {
		Department          func(childComplexity int, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) int
		DepartmentAggregate func(childComplexity int, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) int
		DepartmentByPk      func(childComplexity int, id int64) int
		Enterprise          func(childComplexity int, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) int
		EnterpriseAggregate func(childComplexity int, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) int
		EnterpriseByPk      func(childComplexity int, id int64) int
		SystemUser          func(childComplexity int, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) int
		SystemUserAggregate func(childComplexity int, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) int
		SystemUserByPk      func(childComplexity int, id int64) int
	}

	Department struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DepartmentCategory   func(childComplexity int) int
		DepartmentCode       func(childComplexity int) int
		DepartmentID         func(childComplexity int) int
		DepartmentName       func(childComplexity int) int
		EnterpriseID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalNumber       func(childComplexity int) int
		IsDelete             func(childComplexity int) int
		Remarks              func(childComplexity int) int
		SuperiorDepartmentID func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	DepartmentAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DepartmentAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DepartmentSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DepartmentAvgFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentMaxFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DepartmentCategory   func(childComplexity int) int
		DepartmentCode       func(childComplexity int) int
		DepartmentID         func(childComplexity int) int
		DepartmentName       func(childComplexity int) int
		EnterpriseID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalNumber       func(childComplexity int) int
		Remarks              func(childComplexity int) int
		SuperiorDepartmentID func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	DepartmentMinFields struct {
		CreateAt             func(childComplexity int) int
		CreateBy             func(childComplexity int) int
		DeleteAt             func(childComplexity int) int
		DeleteBy             func(childComplexity int) int
		DepartmentCategory   func(childComplexity int) int
		DepartmentCode       func(childComplexity int) int
		DepartmentID         func(childComplexity int) int
		DepartmentName       func(childComplexity int) int
		EnterpriseID         func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalNumber       func(childComplexity int) int
		Remarks              func(childComplexity int) int
		SuperiorDepartmentID func(childComplexity int) int
		UpdateAt             func(childComplexity int) int
		UpdateBy             func(childComplexity int) int
	}

	DepartmentMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DepartmentStddevFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentStddevPopFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentStddevSampFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentSumFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentVarPopFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentVarSampFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	DepartmentVarianceFields struct {
		DepartmentCategory func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
	}

	Enterprise struct {
		AssociationReviewBy              func(childComplexity int) int
		AssociationReviewOpinion         func(childComplexity int) int
		AssociationReviewTime            func(childComplexity int) int
		BrigadeID                        func(childComplexity int) int
		BrigadeReviewBy                  func(childComplexity int) int
		BrigadeReviewOpinion             func(childComplexity int) int
		BrigadeReviewTime                func(childComplexity int) int
		BusinessLicenseExpiryDate        func(childComplexity int) int
		BusinessLicenseIssuanceDate      func(childComplexity int) int
		BusinessLicensePhoto             func(childComplexity int) int
		BusinessPhoto                    func(childComplexity int) int
		BusinessScope                    func(childComplexity int) int
		CheckStatus                      func(childComplexity int) int
		CityID                           func(childComplexity int) int
		ContactPersons                   func(childComplexity int) int
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DisplayNumber                    func(childComplexity int) int
		DistrictID                       func(childComplexity int) int
		EnterpriseAddress                func(childComplexity int) int
		EnterpriseCode                   func(childComplexity int) int
		EnterpriseID                     func(childComplexity int) int
		EnterpriseLevel                  func(childComplexity int) int
		EnterpriseName                   func(childComplexity int) int
		EnterpriseNature                 func(childComplexity int) int
		EntrustedAgent                   func(childComplexity int) int
		EntrustedAgentIDCard             func(childComplexity int) int
		EntrustedAgentIDCardPhoto        func(childComplexity int) int
		EntrustedAgentPhone              func(childComplexity int) int
		FaxNumber                        func(childComplexity int) int
		ID                               func(childComplexity int) int
		InstitutionCategory              func(childComplexity int) int
		IsBlack                          func(childComplexity int) int
		IsDeleted                        func(childComplexity int) int
		IsInput                          func(childComplexity int) int
		IsInstall                        func(childComplexity int) int
		IsUploadProvince                 func(childComplexity int) int
		LegalRepresentative              func(childComplexity int) int
		LegalRepresentativeIDCard        func(childComplexity int) int
		LegalRepresentativeIDCardPhoto   func(childComplexity int) int
		LegalRepresentativePhone         func(childComplexity int) int
		OperatingLicensePhoto            func(childComplexity int) int
		OrganizationCode                 func(childComplexity int) int
		OrganizationCodeCertificatePhoto func(childComplexity int) int
		PoliceStationID                  func(childComplexity int) int
		ProvinceID                       func(childComplexity int) int
		RecordAt                         func(childComplexity int) int
		RecordBy                         func(childComplexity int) int
		Remarks                          func(childComplexity int) int
		Score                            func(childComplexity int) int
		SuperiorEnterpriseID             func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		UpdateTimeIn                     func(childComplexity int) int
	}

	EnterpriseAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	EnterpriseAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.EnterpriseSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	EnterpriseAvgFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseMaxFields struct {
		AssociationReviewBy              func(childComplexity int) int
		AssociationReviewOpinion         func(childComplexity int) int
		AssociationReviewTime            func(childComplexity int) int
		BrigadeID                        func(childComplexity int) int
		BrigadeReviewBy                  func(childComplexity int) int
		BrigadeReviewOpinion             func(childComplexity int) int
		BrigadeReviewTime                func(childComplexity int) int
		BusinessLicenseExpiryDate        func(childComplexity int) int
		BusinessLicenseIssuanceDate      func(childComplexity int) int
		BusinessLicensePhoto             func(childComplexity int) int
		BusinessPhoto                    func(childComplexity int) int
		BusinessScope                    func(childComplexity int) int
		CheckStatus                      func(childComplexity int) int
		CityID                           func(childComplexity int) int
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DisplayNumber                    func(childComplexity int) int
		DistrictID                       func(childComplexity int) int
		EnterpriseAddress                func(childComplexity int) int
		EnterpriseCode                   func(childComplexity int) int
		EnterpriseID                     func(childComplexity int) int
		EnterpriseLevel                  func(childComplexity int) int
		EnterpriseName                   func(childComplexity int) int
		EnterpriseNature                 func(childComplexity int) int
		EntrustedAgent                   func(childComplexity int) int
		EntrustedAgentIDCard             func(childComplexity int) int
		EntrustedAgentIDCardPhoto        func(childComplexity int) int
		EntrustedAgentPhone              func(childComplexity int) int
		FaxNumber                        func(childComplexity int) int
		ID                               func(childComplexity int) int
		InstitutionCategory              func(childComplexity int) int
		LegalRepresentative              func(childComplexity int) int
		LegalRepresentativeIDCard        func(childComplexity int) int
		LegalRepresentativeIDCardPhoto   func(childComplexity int) int
		LegalRepresentativePhone         func(childComplexity int) int
		OperatingLicensePhoto            func(childComplexity int) int
		OrganizationCode                 func(childComplexity int) int
		OrganizationCodeCertificatePhoto func(childComplexity int) int
		PoliceStationID                  func(childComplexity int) int
		ProvinceID                       func(childComplexity int) int
		RecordAt                         func(childComplexity int) int
		RecordBy                         func(childComplexity int) int
		Remarks                          func(childComplexity int) int
		Score                            func(childComplexity int) int
		SuperiorEnterpriseID             func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		UpdateTimeIn                     func(childComplexity int) int
	}

	EnterpriseMinFields struct {
		AssociationReviewBy              func(childComplexity int) int
		AssociationReviewOpinion         func(childComplexity int) int
		AssociationReviewTime            func(childComplexity int) int
		BrigadeID                        func(childComplexity int) int
		BrigadeReviewBy                  func(childComplexity int) int
		BrigadeReviewOpinion             func(childComplexity int) int
		BrigadeReviewTime                func(childComplexity int) int
		BusinessLicenseExpiryDate        func(childComplexity int) int
		BusinessLicenseIssuanceDate      func(childComplexity int) int
		BusinessLicensePhoto             func(childComplexity int) int
		BusinessPhoto                    func(childComplexity int) int
		BusinessScope                    func(childComplexity int) int
		CheckStatus                      func(childComplexity int) int
		CityID                           func(childComplexity int) int
		CreateAt                         func(childComplexity int) int
		CreateBy                         func(childComplexity int) int
		DeleteAt                         func(childComplexity int) int
		DeleteBy                         func(childComplexity int) int
		DisplayNumber                    func(childComplexity int) int
		DistrictID                       func(childComplexity int) int
		EnterpriseAddress                func(childComplexity int) int
		EnterpriseCode                   func(childComplexity int) int
		EnterpriseID                     func(childComplexity int) int
		EnterpriseLevel                  func(childComplexity int) int
		EnterpriseName                   func(childComplexity int) int
		EnterpriseNature                 func(childComplexity int) int
		EntrustedAgent                   func(childComplexity int) int
		EntrustedAgentIDCard             func(childComplexity int) int
		EntrustedAgentIDCardPhoto        func(childComplexity int) int
		EntrustedAgentPhone              func(childComplexity int) int
		FaxNumber                        func(childComplexity int) int
		ID                               func(childComplexity int) int
		InstitutionCategory              func(childComplexity int) int
		LegalRepresentative              func(childComplexity int) int
		LegalRepresentativeIDCard        func(childComplexity int) int
		LegalRepresentativeIDCardPhoto   func(childComplexity int) int
		LegalRepresentativePhone         func(childComplexity int) int
		OperatingLicensePhoto            func(childComplexity int) int
		OrganizationCode                 func(childComplexity int) int
		OrganizationCodeCertificatePhoto func(childComplexity int) int
		PoliceStationID                  func(childComplexity int) int
		ProvinceID                       func(childComplexity int) int
		RecordAt                         func(childComplexity int) int
		RecordBy                         func(childComplexity int) int
		Remarks                          func(childComplexity int) int
		Score                            func(childComplexity int) int
		SuperiorEnterpriseID             func(childComplexity int) int
		UpdateAt                         func(childComplexity int) int
		UpdateBy                         func(childComplexity int) int
		UpdateTimeIn                     func(childComplexity int) int
	}

	EnterpriseMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	EnterpriseStddevFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseStddevPopFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseStddevSampFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseSumFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseVarPopFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseVarSampFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	EnterpriseVarianceFields struct {
		BusinessScope       func(childComplexity int) int
		CheckStatus         func(childComplexity int) int
		CityID              func(childComplexity int) int
		DisplayNumber       func(childComplexity int) int
		DistrictID          func(childComplexity int) int
		EnterpriseLevel     func(childComplexity int) int
		EnterpriseNature    func(childComplexity int) int
		ID                  func(childComplexity int) int
		InstitutionCategory func(childComplexity int) int
		ProvinceID          func(childComplexity int) int
		Score               func(childComplexity int) int
	}

	SystemUser struct {
		AppVersion   func(childComplexity int) int
		AuditLevel   func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		Email        func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		Grade        func(childComplexity int) int
		ID           func(childComplexity int) int
		IPAddress    func(childComplexity int) int
		IsBindIP     func(childComplexity int) int
		IsDelete     func(childComplexity int) int
		IsValid      func(childComplexity int) int
		Mkey         func(childComplexity int) int
		Mobile       func(childComplexity int) int
		Password     func(childComplexity int) int
		ProxyUser    func(childComplexity int) int
		Remarks      func(childComplexity int) int
		Telephone    func(childComplexity int) int
		Ukey         func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserState    func(childComplexity int) int
		UserType     func(childComplexity int) int
		Username     func(childComplexity int) int
	}

	SystemUserAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	SystemUserAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.SystemUserSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	SystemUserAvgFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserMaxFields struct {
		AppVersion   func(childComplexity int) int
		AuditLevel   func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		Email        func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		Grade        func(childComplexity int) int
		ID           func(childComplexity int) int
		IPAddress    func(childComplexity int) int
		Mkey         func(childComplexity int) int
		Mobile       func(childComplexity int) int
		Password     func(childComplexity int) int
		ProxyUser    func(childComplexity int) int
		Remarks      func(childComplexity int) int
		Telephone    func(childComplexity int) int
		Ukey         func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserState    func(childComplexity int) int
		UserType     func(childComplexity int) int
		Username     func(childComplexity int) int
	}

	SystemUserMinFields struct {
		AppVersion   func(childComplexity int) int
		AuditLevel   func(childComplexity int) int
		CreateBy     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeleteAt     func(childComplexity int) int
		DeleteBy     func(childComplexity int) int
		DepartmentID func(childComplexity int) int
		Email        func(childComplexity int) int
		EnterpriseID func(childComplexity int) int
		Grade        func(childComplexity int) int
		ID           func(childComplexity int) int
		IPAddress    func(childComplexity int) int
		Mkey         func(childComplexity int) int
		Mobile       func(childComplexity int) int
		Password     func(childComplexity int) int
		ProxyUser    func(childComplexity int) int
		Remarks      func(childComplexity int) int
		Telephone    func(childComplexity int) int
		Ukey         func(childComplexity int) int
		UpdateAt     func(childComplexity int) int
		UpdateBy     func(childComplexity int) int
		UserID       func(childComplexity int) int
		UserState    func(childComplexity int) int
		UserType     func(childComplexity int) int
		Username     func(childComplexity int) int
	}

	SystemUserMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	SystemUserStddevFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserStddevPopFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserStddevSampFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserSumFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserVarPopFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserVarSampFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}

	SystemUserVarianceFields struct {
		AuditLevel func(childComplexity int) int
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		UserState  func(childComplexity int) int
		UserType   func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteDepartment(ctx context.Context, where model.DepartmentBoolExp) (*model.DepartmentMutationResponse, error)
	DeleteDepartmentByPk(ctx context.Context, id int64) (*model1.Department, error)
	InsertDepartment(ctx context.Context, objects []*model.DepartmentInsertInput, onConflict *model.DepartmentOnConflict) (*model.DepartmentMutationResponse, error)
	InsertDepartmentOne(ctx context.Context, object model.DepartmentInsertInput, onConflict *model.DepartmentOnConflict) (*model1.Department, error)
	UpdateDepartment(ctx context.Context, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, where model.DepartmentBoolExp) (*model.DepartmentMutationResponse, error)
	UpdateDepartmentByPk(ctx context.Context, inc *model.DepartmentIncInput, set *model.DepartmentSetInput, pkColumns model.DepartmentPkColumnsInput) (*model1.Department, error)
	DeleteEnterprise(ctx context.Context, where model.EnterpriseBoolExp) (*model.EnterpriseMutationResponse, error)
	DeleteEnterpriseByPk(ctx context.Context, id int64) (*model1.Enterprise, error)
	InsertEnterprise(ctx context.Context, objects []*model.EnterpriseInsertInput, onConflict *model.EnterpriseOnConflict) (*model.EnterpriseMutationResponse, error)
	InsertEnterpriseOne(ctx context.Context, object model.EnterpriseInsertInput, onConflict *model.EnterpriseOnConflict) (*model1.Enterprise, error)
	UpdateEnterprise(ctx context.Context, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, where model.EnterpriseBoolExp) (*model.EnterpriseMutationResponse, error)
	UpdateEnterpriseByPk(ctx context.Context, inc *model.EnterpriseIncInput, set *model.EnterpriseSetInput, pkColumns model.EnterprisePkColumnsInput) (*model1.Enterprise, error)
	DeleteSystemUser(ctx context.Context, where model.SystemUserBoolExp) (*model.SystemUserMutationResponse, error)
	DeleteSystemUserByPk(ctx context.Context, id int64) (*model1.SystemUser, error)
	InsertSystemUser(ctx context.Context, objects []*model.SystemUserInsertInput, onConflict *model.SystemUserOnConflict) (*model.SystemUserMutationResponse, error)
	InsertSystemUserOne(ctx context.Context, object model.SystemUserInsertInput, onConflict *model.SystemUserOnConflict) (*model1.SystemUser, error)
	UpdateSystemUser(ctx context.Context, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, where model.SystemUserBoolExp) (*model.SystemUserMutationResponse, error)
	UpdateSystemUserByPk(ctx context.Context, inc *model.SystemUserIncInput, set *model.SystemUserSetInput, pkColumns model.SystemUserPkColumnsInput) (*model1.SystemUser, error)
}
type QueryResolver interface {
	Department(ctx context.Context, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) ([]*model1.Department, error)
	DepartmentAggregate(ctx context.Context, distinctOn []model.DepartmentSelectColumn, limit *int, offset *int, orderBy []*model.DepartmentOrderBy, where *model.DepartmentBoolExp) (*model.DepartmentAggregate, error)
	DepartmentByPk(ctx context.Context, id int64) (*model1.Department, error)
	Enterprise(ctx context.Context, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) ([]*model1.Enterprise, error)
	EnterpriseAggregate(ctx context.Context, distinctOn []model.EnterpriseSelectColumn, limit *int, offset *int, orderBy []*model.EnterpriseOrderBy, where *model.EnterpriseBoolExp) (*model.EnterpriseAggregate, error)
	EnterpriseByPk(ctx context.Context, id int64) (*model1.Enterprise, error)
	SystemUser(ctx context.Context, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) ([]*model1.SystemUser, error)
	SystemUserAggregate(ctx context.Context, distinctOn []model.SystemUserSelectColumn, limit *int, offset *int, orderBy []*model.SystemUserOrderBy, where *model.SystemUserBoolExp) (*model.SystemUserAggregate, error)
	SystemUserByPk(ctx context.Context, id int64) (*model1.SystemUser, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_department":
		if e.complexity.Mutation.DeleteDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_delete_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDepartment(childComplexity, args["where"].(model.DepartmentBoolExp)), true

	case "Mutation.delete_department_by_pk":
		if e.complexity.Mutation.DeleteDepartmentByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_department_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDepartmentByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_enterprise":
		if e.complexity.Mutation.DeleteEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterprise(childComplexity, args["where"].(model.EnterpriseBoolExp)), true

	case "Mutation.delete_enterprise_by_pk":
		if e.complexity.Mutation.DeleteEnterpriseByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_enterprise_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEnterpriseByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_system_user":
		if e.complexity.Mutation.DeleteSystemUser == nil {
			break
		}

		args, err := ec.field_Mutation_delete_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemUser(childComplexity, args["where"].(model.SystemUserBoolExp)), true

	case "Mutation.delete_system_user_by_pk":
		if e.complexity.Mutation.DeleteSystemUserByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_system_user_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemUserByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_department":
		if e.complexity.Mutation.InsertDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_insert_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDepartment(childComplexity, args["objects"].([]*model.DepartmentInsertInput), args["on_conflict"].(*model.DepartmentOnConflict)), true

	case "Mutation.insert_department_one":
		if e.complexity.Mutation.InsertDepartmentOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_department_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDepartmentOne(childComplexity, args["object"].(model.DepartmentInsertInput), args["on_conflict"].(*model.DepartmentOnConflict)), true

	case "Mutation.insert_enterprise":
		if e.complexity.Mutation.InsertEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterprise(childComplexity, args["objects"].([]*model.EnterpriseInsertInput), args["on_conflict"].(*model.EnterpriseOnConflict)), true

	case "Mutation.insert_enterprise_one":
		if e.complexity.Mutation.InsertEnterpriseOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_enterprise_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertEnterpriseOne(childComplexity, args["object"].(model.EnterpriseInsertInput), args["on_conflict"].(*model.EnterpriseOnConflict)), true

	case "Mutation.insert_system_user":
		if e.complexity.Mutation.InsertSystemUser == nil {
			break
		}

		args, err := ec.field_Mutation_insert_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSystemUser(childComplexity, args["objects"].([]*model.SystemUserInsertInput), args["on_conflict"].(*model.SystemUserOnConflict)), true

	case "Mutation.insert_system_user_one":
		if e.complexity.Mutation.InsertSystemUserOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_system_user_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertSystemUserOne(childComplexity, args["object"].(model.SystemUserInsertInput), args["on_conflict"].(*model.SystemUserOnConflict)), true

	case "Mutation.update_department":
		if e.complexity.Mutation.UpdateDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_update_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDepartment(childComplexity, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["where"].(model.DepartmentBoolExp)), true

	case "Mutation.update_department_by_pk":
		if e.complexity.Mutation.UpdateDepartmentByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_department_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDepartmentByPk(childComplexity, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["pk_columns"].(model.DepartmentPkColumnsInput)), true

	case "Mutation.update_enterprise":
		if e.complexity.Mutation.UpdateEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterprise(childComplexity, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["where"].(model.EnterpriseBoolExp)), true

	case "Mutation.update_enterprise_by_pk":
		if e.complexity.Mutation.UpdateEnterpriseByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_enterprise_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterpriseByPk(childComplexity, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["pk_columns"].(model.EnterprisePkColumnsInput)), true

	case "Mutation.update_system_user":
		if e.complexity.Mutation.UpdateSystemUser == nil {
			break
		}

		args, err := ec.field_Mutation_update_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemUser(childComplexity, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["where"].(model.SystemUserBoolExp)), true

	case "Mutation.update_system_user_by_pk":
		if e.complexity.Mutation.UpdateSystemUserByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_system_user_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemUserByPk(childComplexity, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["pk_columns"].(model.SystemUserPkColumnsInput)), true

	case "Query.department":
		if e.complexity.Query.Department == nil {
			break
		}

		args, err := ec.field_Query_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Department(childComplexity, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp)), true

	case "Query.department_aggregate":
		if e.complexity.Query.DepartmentAggregate == nil {
			break
		}

		args, err := ec.field_Query_department_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepartmentAggregate(childComplexity, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp)), true

	case "Query.department_by_pk":
		if e.complexity.Query.DepartmentByPk == nil {
			break
		}

		args, err := ec.field_Query_department_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepartmentByPk(childComplexity, args["id"].(int64)), true

	case "Query.enterprise":
		if e.complexity.Query.Enterprise == nil {
			break
		}

		args, err := ec.field_Query_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Enterprise(childComplexity, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp)), true

	case "Query.enterprise_aggregate":
		if e.complexity.Query.EnterpriseAggregate == nil {
			break
		}

		args, err := ec.field_Query_enterprise_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseAggregate(childComplexity, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp)), true

	case "Query.enterprise_by_pk":
		if e.complexity.Query.EnterpriseByPk == nil {
			break
		}

		args, err := ec.field_Query_enterprise_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseByPk(childComplexity, args["id"].(int64)), true

	case "Query.system_user":
		if e.complexity.Query.SystemUser == nil {
			break
		}

		args, err := ec.field_Query_system_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUser(childComplexity, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp)), true

	case "Query.system_user_aggregate":
		if e.complexity.Query.SystemUserAggregate == nil {
			break
		}

		args, err := ec.field_Query_system_user_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUserAggregate(childComplexity, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp)), true

	case "Query.system_user_by_pk":
		if e.complexity.Query.SystemUserByPk == nil {
			break
		}

		args, err := ec.field_Query_system_user_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUserByPk(childComplexity, args["id"].(int64)), true

	case "department.create_at":
		if e.complexity.Department.CreateAt == nil {
			break
		}

		return e.complexity.Department.CreateAt(childComplexity), true

	case "department.create_by":
		if e.complexity.Department.CreateBy == nil {
			break
		}

		return e.complexity.Department.CreateBy(childComplexity), true

	case "department.delete_at":
		if e.complexity.Department.DeleteAt == nil {
			break
		}

		return e.complexity.Department.DeleteAt(childComplexity), true

	case "department.delete_by":
		if e.complexity.Department.DeleteBy == nil {
			break
		}

		return e.complexity.Department.DeleteBy(childComplexity), true

	case "department.department_category":
		if e.complexity.Department.DepartmentCategory == nil {
			break
		}

		return e.complexity.Department.DepartmentCategory(childComplexity), true

	case "department.department_code":
		if e.complexity.Department.DepartmentCode == nil {
			break
		}

		return e.complexity.Department.DepartmentCode(childComplexity), true

	case "department.department_id":
		if e.complexity.Department.DepartmentID == nil {
			break
		}

		return e.complexity.Department.DepartmentID(childComplexity), true

	case "department.department_name":
		if e.complexity.Department.DepartmentName == nil {
			break
		}

		return e.complexity.Department.DepartmentName(childComplexity), true

	case "department.enterprise_id":
		if e.complexity.Department.EnterpriseID == nil {
			break
		}

		return e.complexity.Department.EnterpriseID(childComplexity), true

	case "department.id":
		if e.complexity.Department.ID == nil {
			break
		}

		return e.complexity.Department.ID(childComplexity), true

	case "department.internal_number":
		if e.complexity.Department.InternalNumber == nil {
			break
		}

		return e.complexity.Department.InternalNumber(childComplexity), true

	case "department.is_delete":
		if e.complexity.Department.IsDelete == nil {
			break
		}

		return e.complexity.Department.IsDelete(childComplexity), true

	case "department.remarks":
		if e.complexity.Department.Remarks == nil {
			break
		}

		return e.complexity.Department.Remarks(childComplexity), true

	case "department.superior_department_id":
		if e.complexity.Department.SuperiorDepartmentID == nil {
			break
		}

		return e.complexity.Department.SuperiorDepartmentID(childComplexity), true

	case "department.update_at":
		if e.complexity.Department.UpdateAt == nil {
			break
		}

		return e.complexity.Department.UpdateAt(childComplexity), true

	case "department.update_by":
		if e.complexity.Department.UpdateBy == nil {
			break
		}

		return e.complexity.Department.UpdateBy(childComplexity), true

	case "department_aggregate.aggregate":
		if e.complexity.DepartmentAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DepartmentAggregate.Aggregate(childComplexity), true

	case "department_aggregate.nodes":
		if e.complexity.DepartmentAggregate.Nodes == nil {
			break
		}

		return e.complexity.DepartmentAggregate.Nodes(childComplexity), true

	case "department_aggregate_fields.avg":
		if e.complexity.DepartmentAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Avg(childComplexity), true

	case "department_aggregate_fields.count":
		if e.complexity.DepartmentAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_department_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DepartmentAggregateFields.Count(childComplexity, args["columns"].([]model.DepartmentSelectColumn), args["distinct"].(*bool)), true

	case "department_aggregate_fields.max":
		if e.complexity.DepartmentAggregateFields.Max == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Max(childComplexity), true

	case "department_aggregate_fields.min":
		if e.complexity.DepartmentAggregateFields.Min == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Min(childComplexity), true

	case "department_aggregate_fields.stddev":
		if e.complexity.DepartmentAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Stddev(childComplexity), true

	case "department_aggregate_fields.stddev_pop":
		if e.complexity.DepartmentAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.StddevPop(childComplexity), true

	case "department_aggregate_fields.stddev_samp":
		if e.complexity.DepartmentAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.StddevSamp(childComplexity), true

	case "department_aggregate_fields.sum":
		if e.complexity.DepartmentAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Sum(childComplexity), true

	case "department_aggregate_fields.var_pop":
		if e.complexity.DepartmentAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.VarPop(childComplexity), true

	case "department_aggregate_fields.var_samp":
		if e.complexity.DepartmentAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.VarSamp(childComplexity), true

	case "department_aggregate_fields.variance":
		if e.complexity.DepartmentAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DepartmentAggregateFields.Variance(childComplexity), true

	case "department_avg_fields.department_category":
		if e.complexity.DepartmentAvgFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentAvgFields.DepartmentCategory(childComplexity), true

	case "department_avg_fields.id":
		if e.complexity.DepartmentAvgFields.ID == nil {
			break
		}

		return e.complexity.DepartmentAvgFields.ID(childComplexity), true

	case "department_avg_fields.internal_number":
		if e.complexity.DepartmentAvgFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentAvgFields.InternalNumber(childComplexity), true

	case "department_max_fields.create_at":
		if e.complexity.DepartmentMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.CreateAt(childComplexity), true

	case "department_max_fields.create_by":
		if e.complexity.DepartmentMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.CreateBy(childComplexity), true

	case "department_max_fields.delete_at":
		if e.complexity.DepartmentMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DeleteAt(childComplexity), true

	case "department_max_fields.delete_by":
		if e.complexity.DepartmentMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DeleteBy(childComplexity), true

	case "department_max_fields.department_category":
		if e.complexity.DepartmentMaxFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentCategory(childComplexity), true

	case "department_max_fields.department_code":
		if e.complexity.DepartmentMaxFields.DepartmentCode == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentCode(childComplexity), true

	case "department_max_fields.department_id":
		if e.complexity.DepartmentMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentID(childComplexity), true

	case "department_max_fields.department_name":
		if e.complexity.DepartmentMaxFields.DepartmentName == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.DepartmentName(childComplexity), true

	case "department_max_fields.enterprise_id":
		if e.complexity.DepartmentMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.EnterpriseID(childComplexity), true

	case "department_max_fields.id":
		if e.complexity.DepartmentMaxFields.ID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.ID(childComplexity), true

	case "department_max_fields.internal_number":
		if e.complexity.DepartmentMaxFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.InternalNumber(childComplexity), true

	case "department_max_fields.remarks":
		if e.complexity.DepartmentMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.Remarks(childComplexity), true

	case "department_max_fields.superior_department_id":
		if e.complexity.DepartmentMaxFields.SuperiorDepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.SuperiorDepartmentID(childComplexity), true

	case "department_max_fields.update_at":
		if e.complexity.DepartmentMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.UpdateAt(childComplexity), true

	case "department_max_fields.update_by":
		if e.complexity.DepartmentMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.DepartmentMaxFields.UpdateBy(childComplexity), true

	case "department_min_fields.create_at":
		if e.complexity.DepartmentMinFields.CreateAt == nil {
			break
		}

		return e.complexity.DepartmentMinFields.CreateAt(childComplexity), true

	case "department_min_fields.create_by":
		if e.complexity.DepartmentMinFields.CreateBy == nil {
			break
		}

		return e.complexity.DepartmentMinFields.CreateBy(childComplexity), true

	case "department_min_fields.delete_at":
		if e.complexity.DepartmentMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DeleteAt(childComplexity), true

	case "department_min_fields.delete_by":
		if e.complexity.DepartmentMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DeleteBy(childComplexity), true

	case "department_min_fields.department_category":
		if e.complexity.DepartmentMinFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentCategory(childComplexity), true

	case "department_min_fields.department_code":
		if e.complexity.DepartmentMinFields.DepartmentCode == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentCode(childComplexity), true

	case "department_min_fields.department_id":
		if e.complexity.DepartmentMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentID(childComplexity), true

	case "department_min_fields.department_name":
		if e.complexity.DepartmentMinFields.DepartmentName == nil {
			break
		}

		return e.complexity.DepartmentMinFields.DepartmentName(childComplexity), true

	case "department_min_fields.enterprise_id":
		if e.complexity.DepartmentMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.EnterpriseID(childComplexity), true

	case "department_min_fields.id":
		if e.complexity.DepartmentMinFields.ID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.ID(childComplexity), true

	case "department_min_fields.internal_number":
		if e.complexity.DepartmentMinFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentMinFields.InternalNumber(childComplexity), true

	case "department_min_fields.remarks":
		if e.complexity.DepartmentMinFields.Remarks == nil {
			break
		}

		return e.complexity.DepartmentMinFields.Remarks(childComplexity), true

	case "department_min_fields.superior_department_id":
		if e.complexity.DepartmentMinFields.SuperiorDepartmentID == nil {
			break
		}

		return e.complexity.DepartmentMinFields.SuperiorDepartmentID(childComplexity), true

	case "department_min_fields.update_at":
		if e.complexity.DepartmentMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.DepartmentMinFields.UpdateAt(childComplexity), true

	case "department_min_fields.update_by":
		if e.complexity.DepartmentMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.DepartmentMinFields.UpdateBy(childComplexity), true

	case "department_mutation_response.affected_rows":
		if e.complexity.DepartmentMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DepartmentMutationResponse.AffectedRows(childComplexity), true

	case "department_mutation_response.returning":
		if e.complexity.DepartmentMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DepartmentMutationResponse.Returning(childComplexity), true

	case "department_stddev_fields.department_category":
		if e.complexity.DepartmentStddevFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentStddevFields.DepartmentCategory(childComplexity), true

	case "department_stddev_fields.id":
		if e.complexity.DepartmentStddevFields.ID == nil {
			break
		}

		return e.complexity.DepartmentStddevFields.ID(childComplexity), true

	case "department_stddev_fields.internal_number":
		if e.complexity.DepartmentStddevFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentStddevFields.InternalNumber(childComplexity), true

	case "department_stddev_pop_fields.department_category":
		if e.complexity.DepartmentStddevPopFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentStddevPopFields.DepartmentCategory(childComplexity), true

	case "department_stddev_pop_fields.id":
		if e.complexity.DepartmentStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DepartmentStddevPopFields.ID(childComplexity), true

	case "department_stddev_pop_fields.internal_number":
		if e.complexity.DepartmentStddevPopFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentStddevPopFields.InternalNumber(childComplexity), true

	case "department_stddev_samp_fields.department_category":
		if e.complexity.DepartmentStddevSampFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentStddevSampFields.DepartmentCategory(childComplexity), true

	case "department_stddev_samp_fields.id":
		if e.complexity.DepartmentStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DepartmentStddevSampFields.ID(childComplexity), true

	case "department_stddev_samp_fields.internal_number":
		if e.complexity.DepartmentStddevSampFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentStddevSampFields.InternalNumber(childComplexity), true

	case "department_sum_fields.department_category":
		if e.complexity.DepartmentSumFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentSumFields.DepartmentCategory(childComplexity), true

	case "department_sum_fields.id":
		if e.complexity.DepartmentSumFields.ID == nil {
			break
		}

		return e.complexity.DepartmentSumFields.ID(childComplexity), true

	case "department_sum_fields.internal_number":
		if e.complexity.DepartmentSumFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentSumFields.InternalNumber(childComplexity), true

	case "department_var_pop_fields.department_category":
		if e.complexity.DepartmentVarPopFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentVarPopFields.DepartmentCategory(childComplexity), true

	case "department_var_pop_fields.id":
		if e.complexity.DepartmentVarPopFields.ID == nil {
			break
		}

		return e.complexity.DepartmentVarPopFields.ID(childComplexity), true

	case "department_var_pop_fields.internal_number":
		if e.complexity.DepartmentVarPopFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentVarPopFields.InternalNumber(childComplexity), true

	case "department_var_samp_fields.department_category":
		if e.complexity.DepartmentVarSampFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentVarSampFields.DepartmentCategory(childComplexity), true

	case "department_var_samp_fields.id":
		if e.complexity.DepartmentVarSampFields.ID == nil {
			break
		}

		return e.complexity.DepartmentVarSampFields.ID(childComplexity), true

	case "department_var_samp_fields.internal_number":
		if e.complexity.DepartmentVarSampFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentVarSampFields.InternalNumber(childComplexity), true

	case "department_variance_fields.department_category":
		if e.complexity.DepartmentVarianceFields.DepartmentCategory == nil {
			break
		}

		return e.complexity.DepartmentVarianceFields.DepartmentCategory(childComplexity), true

	case "department_variance_fields.id":
		if e.complexity.DepartmentVarianceFields.ID == nil {
			break
		}

		return e.complexity.DepartmentVarianceFields.ID(childComplexity), true

	case "department_variance_fields.internal_number":
		if e.complexity.DepartmentVarianceFields.InternalNumber == nil {
			break
		}

		return e.complexity.DepartmentVarianceFields.InternalNumber(childComplexity), true

	case "enterprise.association_review_by":
		if e.complexity.Enterprise.AssociationReviewBy == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewBy(childComplexity), true

	case "enterprise.association_review_opinion":
		if e.complexity.Enterprise.AssociationReviewOpinion == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewOpinion(childComplexity), true

	case "enterprise.association_review_time":
		if e.complexity.Enterprise.AssociationReviewTime == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewTime(childComplexity), true

	case "enterprise.brigade_id":
		if e.complexity.Enterprise.BrigadeID == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeID(childComplexity), true

	case "enterprise.brigade_review_by":
		if e.complexity.Enterprise.BrigadeReviewBy == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewBy(childComplexity), true

	case "enterprise.brigade_review_opinion":
		if e.complexity.Enterprise.BrigadeReviewOpinion == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewOpinion(childComplexity), true

	case "enterprise.brigade_review_time":
		if e.complexity.Enterprise.BrigadeReviewTime == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewTime(childComplexity), true

	case "enterprise.business_license_expiry_date":
		if e.complexity.Enterprise.BusinessLicenseExpiryDate == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicenseExpiryDate(childComplexity), true

	case "enterprise.business_license_issuance_date":
		if e.complexity.Enterprise.BusinessLicenseIssuanceDate == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicenseIssuanceDate(childComplexity), true

	case "enterprise.business_license_photo":
		if e.complexity.Enterprise.BusinessLicensePhoto == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicensePhoto(childComplexity), true

	case "enterprise.business_photo":
		if e.complexity.Enterprise.BusinessPhoto == nil {
			break
		}

		return e.complexity.Enterprise.BusinessPhoto(childComplexity), true

	case "enterprise.business_scope":
		if e.complexity.Enterprise.BusinessScope == nil {
			break
		}

		return e.complexity.Enterprise.BusinessScope(childComplexity), true

	case "enterprise.check_status":
		if e.complexity.Enterprise.CheckStatus == nil {
			break
		}

		return e.complexity.Enterprise.CheckStatus(childComplexity), true

	case "enterprise.city_id":
		if e.complexity.Enterprise.CityID == nil {
			break
		}

		return e.complexity.Enterprise.CityID(childComplexity), true

	case "enterprise.contact_persons":
		if e.complexity.Enterprise.ContactPersons == nil {
			break
		}

		return e.complexity.Enterprise.ContactPersons(childComplexity), true

	case "enterprise.create_at":
		if e.complexity.Enterprise.CreateAt == nil {
			break
		}

		return e.complexity.Enterprise.CreateAt(childComplexity), true

	case "enterprise.create_by":
		if e.complexity.Enterprise.CreateBy == nil {
			break
		}

		return e.complexity.Enterprise.CreateBy(childComplexity), true

	case "enterprise.delete_at":
		if e.complexity.Enterprise.DeleteAt == nil {
			break
		}

		return e.complexity.Enterprise.DeleteAt(childComplexity), true

	case "enterprise.delete_by":
		if e.complexity.Enterprise.DeleteBy == nil {
			break
		}

		return e.complexity.Enterprise.DeleteBy(childComplexity), true

	case "enterprise.display_number":
		if e.complexity.Enterprise.DisplayNumber == nil {
			break
		}

		return e.complexity.Enterprise.DisplayNumber(childComplexity), true

	case "enterprise.district_id":
		if e.complexity.Enterprise.DistrictID == nil {
			break
		}

		return e.complexity.Enterprise.DistrictID(childComplexity), true

	case "enterprise.enterprise_address":
		if e.complexity.Enterprise.EnterpriseAddress == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseAddress(childComplexity), true

	case "enterprise.enterprise_code":
		if e.complexity.Enterprise.EnterpriseCode == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseCode(childComplexity), true

	case "enterprise.enterprise_id":
		if e.complexity.Enterprise.EnterpriseID == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseID(childComplexity), true

	case "enterprise.enterprise_level":
		if e.complexity.Enterprise.EnterpriseLevel == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseLevel(childComplexity), true

	case "enterprise.enterprise_name":
		if e.complexity.Enterprise.EnterpriseName == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseName(childComplexity), true

	case "enterprise.enterprise_nature":
		if e.complexity.Enterprise.EnterpriseNature == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseNature(childComplexity), true

	case "enterprise.entrusted_agent":
		if e.complexity.Enterprise.EntrustedAgent == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgent(childComplexity), true

	case "enterprise.entrusted_agent_id_card":
		if e.complexity.Enterprise.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgentIDCard(childComplexity), true

	case "enterprise.entrusted_agent_id_card_photo":
		if e.complexity.Enterprise.EntrustedAgentIDCardPhoto == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgentIDCardPhoto(childComplexity), true

	case "enterprise.entrusted_agent_phone":
		if e.complexity.Enterprise.EntrustedAgentPhone == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgentPhone(childComplexity), true

	case "enterprise.fax_number":
		if e.complexity.Enterprise.FaxNumber == nil {
			break
		}

		return e.complexity.Enterprise.FaxNumber(childComplexity), true

	case "enterprise.id":
		if e.complexity.Enterprise.ID == nil {
			break
		}

		return e.complexity.Enterprise.ID(childComplexity), true

	case "enterprise.institution_category":
		if e.complexity.Enterprise.InstitutionCategory == nil {
			break
		}

		return e.complexity.Enterprise.InstitutionCategory(childComplexity), true

	case "enterprise.is_black":
		if e.complexity.Enterprise.IsBlack == nil {
			break
		}

		return e.complexity.Enterprise.IsBlack(childComplexity), true

	case "enterprise.is_deleted":
		if e.complexity.Enterprise.IsDeleted == nil {
			break
		}

		return e.complexity.Enterprise.IsDeleted(childComplexity), true

	case "enterprise.is_input":
		if e.complexity.Enterprise.IsInput == nil {
			break
		}

		return e.complexity.Enterprise.IsInput(childComplexity), true

	case "enterprise.is_install":
		if e.complexity.Enterprise.IsInstall == nil {
			break
		}

		return e.complexity.Enterprise.IsInstall(childComplexity), true

	case "enterprise.is_upload_province":
		if e.complexity.Enterprise.IsUploadProvince == nil {
			break
		}

		return e.complexity.Enterprise.IsUploadProvince(childComplexity), true

	case "enterprise.legal_representative":
		if e.complexity.Enterprise.LegalRepresentative == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentative(childComplexity), true

	case "enterprise.legal_representative_id_card":
		if e.complexity.Enterprise.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentativeIDCard(childComplexity), true

	case "enterprise.legal_representative_id_card_photo":
		if e.complexity.Enterprise.LegalRepresentativeIDCardPhoto == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentativeIDCardPhoto(childComplexity), true

	case "enterprise.legal_representative_phone":
		if e.complexity.Enterprise.LegalRepresentativePhone == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentativePhone(childComplexity), true

	case "enterprise.operating_license_photo":
		if e.complexity.Enterprise.OperatingLicensePhoto == nil {
			break
		}

		return e.complexity.Enterprise.OperatingLicensePhoto(childComplexity), true

	case "enterprise.organization_code":
		if e.complexity.Enterprise.OrganizationCode == nil {
			break
		}

		return e.complexity.Enterprise.OrganizationCode(childComplexity), true

	case "enterprise.organization_code_certificate_photo":
		if e.complexity.Enterprise.OrganizationCodeCertificatePhoto == nil {
			break
		}

		return e.complexity.Enterprise.OrganizationCodeCertificatePhoto(childComplexity), true

	case "enterprise.police_station_id":
		if e.complexity.Enterprise.PoliceStationID == nil {
			break
		}

		return e.complexity.Enterprise.PoliceStationID(childComplexity), true

	case "enterprise.province_id":
		if e.complexity.Enterprise.ProvinceID == nil {
			break
		}

		return e.complexity.Enterprise.ProvinceID(childComplexity), true

	case "enterprise.record_at":
		if e.complexity.Enterprise.RecordAt == nil {
			break
		}

		return e.complexity.Enterprise.RecordAt(childComplexity), true

	case "enterprise.record_by":
		if e.complexity.Enterprise.RecordBy == nil {
			break
		}

		return e.complexity.Enterprise.RecordBy(childComplexity), true

	case "enterprise.remarks":
		if e.complexity.Enterprise.Remarks == nil {
			break
		}

		return e.complexity.Enterprise.Remarks(childComplexity), true

	case "enterprise.score":
		if e.complexity.Enterprise.Score == nil {
			break
		}

		return e.complexity.Enterprise.Score(childComplexity), true

	case "enterprise.superior_enterprise_id":
		if e.complexity.Enterprise.SuperiorEnterpriseID == nil {
			break
		}

		return e.complexity.Enterprise.SuperiorEnterpriseID(childComplexity), true

	case "enterprise.update_at":
		if e.complexity.Enterprise.UpdateAt == nil {
			break
		}

		return e.complexity.Enterprise.UpdateAt(childComplexity), true

	case "enterprise.update_by":
		if e.complexity.Enterprise.UpdateBy == nil {
			break
		}

		return e.complexity.Enterprise.UpdateBy(childComplexity), true

	case "enterprise.update_time_in":
		if e.complexity.Enterprise.UpdateTimeIn == nil {
			break
		}

		return e.complexity.Enterprise.UpdateTimeIn(childComplexity), true

	case "enterprise_aggregate.aggregate":
		if e.complexity.EnterpriseAggregate.Aggregate == nil {
			break
		}

		return e.complexity.EnterpriseAggregate.Aggregate(childComplexity), true

	case "enterprise_aggregate.nodes":
		if e.complexity.EnterpriseAggregate.Nodes == nil {
			break
		}

		return e.complexity.EnterpriseAggregate.Nodes(childComplexity), true

	case "enterprise_aggregate_fields.avg":
		if e.complexity.EnterpriseAggregateFields.Avg == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Avg(childComplexity), true

	case "enterprise_aggregate_fields.count":
		if e.complexity.EnterpriseAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_enterprise_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.EnterpriseAggregateFields.Count(childComplexity, args["columns"].([]model.EnterpriseSelectColumn), args["distinct"].(*bool)), true

	case "enterprise_aggregate_fields.max":
		if e.complexity.EnterpriseAggregateFields.Max == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Max(childComplexity), true

	case "enterprise_aggregate_fields.min":
		if e.complexity.EnterpriseAggregateFields.Min == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Min(childComplexity), true

	case "enterprise_aggregate_fields.stddev":
		if e.complexity.EnterpriseAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Stddev(childComplexity), true

	case "enterprise_aggregate_fields.stddev_pop":
		if e.complexity.EnterpriseAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.StddevPop(childComplexity), true

	case "enterprise_aggregate_fields.stddev_samp":
		if e.complexity.EnterpriseAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.StddevSamp(childComplexity), true

	case "enterprise_aggregate_fields.sum":
		if e.complexity.EnterpriseAggregateFields.Sum == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Sum(childComplexity), true

	case "enterprise_aggregate_fields.var_pop":
		if e.complexity.EnterpriseAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.VarPop(childComplexity), true

	case "enterprise_aggregate_fields.var_samp":
		if e.complexity.EnterpriseAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.VarSamp(childComplexity), true

	case "enterprise_aggregate_fields.variance":
		if e.complexity.EnterpriseAggregateFields.Variance == nil {
			break
		}

		return e.complexity.EnterpriseAggregateFields.Variance(childComplexity), true

	case "enterprise_avg_fields.business_scope":
		if e.complexity.EnterpriseAvgFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.BusinessScope(childComplexity), true

	case "enterprise_avg_fields.check_status":
		if e.complexity.EnterpriseAvgFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.CheckStatus(childComplexity), true

	case "enterprise_avg_fields.city_id":
		if e.complexity.EnterpriseAvgFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.CityID(childComplexity), true

	case "enterprise_avg_fields.display_number":
		if e.complexity.EnterpriseAvgFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.DisplayNumber(childComplexity), true

	case "enterprise_avg_fields.district_id":
		if e.complexity.EnterpriseAvgFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.DistrictID(childComplexity), true

	case "enterprise_avg_fields.enterprise_level":
		if e.complexity.EnterpriseAvgFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.EnterpriseLevel(childComplexity), true

	case "enterprise_avg_fields.enterprise_nature":
		if e.complexity.EnterpriseAvgFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.EnterpriseNature(childComplexity), true

	case "enterprise_avg_fields.id":
		if e.complexity.EnterpriseAvgFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.ID(childComplexity), true

	case "enterprise_avg_fields.institution_category":
		if e.complexity.EnterpriseAvgFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.InstitutionCategory(childComplexity), true

	case "enterprise_avg_fields.province_id":
		if e.complexity.EnterpriseAvgFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.ProvinceID(childComplexity), true

	case "enterprise_avg_fields.score":
		if e.complexity.EnterpriseAvgFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseAvgFields.Score(childComplexity), true

	case "enterprise_max_fields.association_review_by":
		if e.complexity.EnterpriseMaxFields.AssociationReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.AssociationReviewBy(childComplexity), true

	case "enterprise_max_fields.association_review_opinion":
		if e.complexity.EnterpriseMaxFields.AssociationReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.AssociationReviewOpinion(childComplexity), true

	case "enterprise_max_fields.association_review_time":
		if e.complexity.EnterpriseMaxFields.AssociationReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.AssociationReviewTime(childComplexity), true

	case "enterprise_max_fields.brigade_id":
		if e.complexity.EnterpriseMaxFields.BrigadeID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeID(childComplexity), true

	case "enterprise_max_fields.brigade_review_by":
		if e.complexity.EnterpriseMaxFields.BrigadeReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeReviewBy(childComplexity), true

	case "enterprise_max_fields.brigade_review_opinion":
		if e.complexity.EnterpriseMaxFields.BrigadeReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeReviewOpinion(childComplexity), true

	case "enterprise_max_fields.brigade_review_time":
		if e.complexity.EnterpriseMaxFields.BrigadeReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BrigadeReviewTime(childComplexity), true

	case "enterprise_max_fields.business_license_expiry_date":
		if e.complexity.EnterpriseMaxFields.BusinessLicenseExpiryDate == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessLicenseExpiryDate(childComplexity), true

	case "enterprise_max_fields.business_license_issuance_date":
		if e.complexity.EnterpriseMaxFields.BusinessLicenseIssuanceDate == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessLicenseIssuanceDate(childComplexity), true

	case "enterprise_max_fields.business_license_photo":
		if e.complexity.EnterpriseMaxFields.BusinessLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessLicensePhoto(childComplexity), true

	case "enterprise_max_fields.business_photo":
		if e.complexity.EnterpriseMaxFields.BusinessPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessPhoto(childComplexity), true

	case "enterprise_max_fields.business_scope":
		if e.complexity.EnterpriseMaxFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.BusinessScope(childComplexity), true

	case "enterprise_max_fields.check_status":
		if e.complexity.EnterpriseMaxFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CheckStatus(childComplexity), true

	case "enterprise_max_fields.city_id":
		if e.complexity.EnterpriseMaxFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CityID(childComplexity), true

	case "enterprise_max_fields.create_at":
		if e.complexity.EnterpriseMaxFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CreateAt(childComplexity), true

	case "enterprise_max_fields.create_by":
		if e.complexity.EnterpriseMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.CreateBy(childComplexity), true

	case "enterprise_max_fields.delete_at":
		if e.complexity.EnterpriseMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DeleteAt(childComplexity), true

	case "enterprise_max_fields.delete_by":
		if e.complexity.EnterpriseMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DeleteBy(childComplexity), true

	case "enterprise_max_fields.display_number":
		if e.complexity.EnterpriseMaxFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DisplayNumber(childComplexity), true

	case "enterprise_max_fields.district_id":
		if e.complexity.EnterpriseMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.DistrictID(childComplexity), true

	case "enterprise_max_fields.enterprise_address":
		if e.complexity.EnterpriseMaxFields.EnterpriseAddress == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseAddress(childComplexity), true

	case "enterprise_max_fields.enterprise_code":
		if e.complexity.EnterpriseMaxFields.EnterpriseCode == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseCode(childComplexity), true

	case "enterprise_max_fields.enterprise_id":
		if e.complexity.EnterpriseMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseID(childComplexity), true

	case "enterprise_max_fields.enterprise_level":
		if e.complexity.EnterpriseMaxFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseLevel(childComplexity), true

	case "enterprise_max_fields.enterprise_name":
		if e.complexity.EnterpriseMaxFields.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseName(childComplexity), true

	case "enterprise_max_fields.enterprise_nature":
		if e.complexity.EnterpriseMaxFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EnterpriseNature(childComplexity), true

	case "enterprise_max_fields.entrusted_agent":
		if e.complexity.EnterpriseMaxFields.EntrustedAgent == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgent(childComplexity), true

	case "enterprise_max_fields.entrusted_agent_id_card":
		if e.complexity.EnterpriseMaxFields.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgentIDCard(childComplexity), true

	case "enterprise_max_fields.entrusted_agent_id_card_photo":
		if e.complexity.EnterpriseMaxFields.EntrustedAgentIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgentIDCardPhoto(childComplexity), true

	case "enterprise_max_fields.entrusted_agent_phone":
		if e.complexity.EnterpriseMaxFields.EntrustedAgentPhone == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.EntrustedAgentPhone(childComplexity), true

	case "enterprise_max_fields.fax_number":
		if e.complexity.EnterpriseMaxFields.FaxNumber == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.FaxNumber(childComplexity), true

	case "enterprise_max_fields.id":
		if e.complexity.EnterpriseMaxFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.ID(childComplexity), true

	case "enterprise_max_fields.institution_category":
		if e.complexity.EnterpriseMaxFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.InstitutionCategory(childComplexity), true

	case "enterprise_max_fields.legal_representative":
		if e.complexity.EnterpriseMaxFields.LegalRepresentative == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentative(childComplexity), true

	case "enterprise_max_fields.legal_representative_id_card":
		if e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCard(childComplexity), true

	case "enterprise_max_fields.legal_representative_id_card_photo":
		if e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentativeIDCardPhoto(childComplexity), true

	case "enterprise_max_fields.legal_representative_phone":
		if e.complexity.EnterpriseMaxFields.LegalRepresentativePhone == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.LegalRepresentativePhone(childComplexity), true

	case "enterprise_max_fields.operating_license_photo":
		if e.complexity.EnterpriseMaxFields.OperatingLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.OperatingLicensePhoto(childComplexity), true

	case "enterprise_max_fields.organization_code":
		if e.complexity.EnterpriseMaxFields.OrganizationCode == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.OrganizationCode(childComplexity), true

	case "enterprise_max_fields.organization_code_certificate_photo":
		if e.complexity.EnterpriseMaxFields.OrganizationCodeCertificatePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.OrganizationCodeCertificatePhoto(childComplexity), true

	case "enterprise_max_fields.police_station_id":
		if e.complexity.EnterpriseMaxFields.PoliceStationID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.PoliceStationID(childComplexity), true

	case "enterprise_max_fields.province_id":
		if e.complexity.EnterpriseMaxFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.ProvinceID(childComplexity), true

	case "enterprise_max_fields.record_at":
		if e.complexity.EnterpriseMaxFields.RecordAt == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.RecordAt(childComplexity), true

	case "enterprise_max_fields.record_by":
		if e.complexity.EnterpriseMaxFields.RecordBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.RecordBy(childComplexity), true

	case "enterprise_max_fields.remarks":
		if e.complexity.EnterpriseMaxFields.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.Remarks(childComplexity), true

	case "enterprise_max_fields.score":
		if e.complexity.EnterpriseMaxFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.Score(childComplexity), true

	case "enterprise_max_fields.superior_enterprise_id":
		if e.complexity.EnterpriseMaxFields.SuperiorEnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.SuperiorEnterpriseID(childComplexity), true

	case "enterprise_max_fields.update_at":
		if e.complexity.EnterpriseMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.UpdateAt(childComplexity), true

	case "enterprise_max_fields.update_by":
		if e.complexity.EnterpriseMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.UpdateBy(childComplexity), true

	case "enterprise_max_fields.update_time_in":
		if e.complexity.EnterpriseMaxFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.EnterpriseMaxFields.UpdateTimeIn(childComplexity), true

	case "enterprise_min_fields.association_review_by":
		if e.complexity.EnterpriseMinFields.AssociationReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.AssociationReviewBy(childComplexity), true

	case "enterprise_min_fields.association_review_opinion":
		if e.complexity.EnterpriseMinFields.AssociationReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.AssociationReviewOpinion(childComplexity), true

	case "enterprise_min_fields.association_review_time":
		if e.complexity.EnterpriseMinFields.AssociationReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.AssociationReviewTime(childComplexity), true

	case "enterprise_min_fields.brigade_id":
		if e.complexity.EnterpriseMinFields.BrigadeID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeID(childComplexity), true

	case "enterprise_min_fields.brigade_review_by":
		if e.complexity.EnterpriseMinFields.BrigadeReviewBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeReviewBy(childComplexity), true

	case "enterprise_min_fields.brigade_review_opinion":
		if e.complexity.EnterpriseMinFields.BrigadeReviewOpinion == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeReviewOpinion(childComplexity), true

	case "enterprise_min_fields.brigade_review_time":
		if e.complexity.EnterpriseMinFields.BrigadeReviewTime == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BrigadeReviewTime(childComplexity), true

	case "enterprise_min_fields.business_license_expiry_date":
		if e.complexity.EnterpriseMinFields.BusinessLicenseExpiryDate == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessLicenseExpiryDate(childComplexity), true

	case "enterprise_min_fields.business_license_issuance_date":
		if e.complexity.EnterpriseMinFields.BusinessLicenseIssuanceDate == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessLicenseIssuanceDate(childComplexity), true

	case "enterprise_min_fields.business_license_photo":
		if e.complexity.EnterpriseMinFields.BusinessLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessLicensePhoto(childComplexity), true

	case "enterprise_min_fields.business_photo":
		if e.complexity.EnterpriseMinFields.BusinessPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessPhoto(childComplexity), true

	case "enterprise_min_fields.business_scope":
		if e.complexity.EnterpriseMinFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.BusinessScope(childComplexity), true

	case "enterprise_min_fields.check_status":
		if e.complexity.EnterpriseMinFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CheckStatus(childComplexity), true

	case "enterprise_min_fields.city_id":
		if e.complexity.EnterpriseMinFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CityID(childComplexity), true

	case "enterprise_min_fields.create_at":
		if e.complexity.EnterpriseMinFields.CreateAt == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CreateAt(childComplexity), true

	case "enterprise_min_fields.create_by":
		if e.complexity.EnterpriseMinFields.CreateBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.CreateBy(childComplexity), true

	case "enterprise_min_fields.delete_at":
		if e.complexity.EnterpriseMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DeleteAt(childComplexity), true

	case "enterprise_min_fields.delete_by":
		if e.complexity.EnterpriseMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DeleteBy(childComplexity), true

	case "enterprise_min_fields.display_number":
		if e.complexity.EnterpriseMinFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DisplayNumber(childComplexity), true

	case "enterprise_min_fields.district_id":
		if e.complexity.EnterpriseMinFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.DistrictID(childComplexity), true

	case "enterprise_min_fields.enterprise_address":
		if e.complexity.EnterpriseMinFields.EnterpriseAddress == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseAddress(childComplexity), true

	case "enterprise_min_fields.enterprise_code":
		if e.complexity.EnterpriseMinFields.EnterpriseCode == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseCode(childComplexity), true

	case "enterprise_min_fields.enterprise_id":
		if e.complexity.EnterpriseMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseID(childComplexity), true

	case "enterprise_min_fields.enterprise_level":
		if e.complexity.EnterpriseMinFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseLevel(childComplexity), true

	case "enterprise_min_fields.enterprise_name":
		if e.complexity.EnterpriseMinFields.EnterpriseName == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseName(childComplexity), true

	case "enterprise_min_fields.enterprise_nature":
		if e.complexity.EnterpriseMinFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EnterpriseNature(childComplexity), true

	case "enterprise_min_fields.entrusted_agent":
		if e.complexity.EnterpriseMinFields.EntrustedAgent == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgent(childComplexity), true

	case "enterprise_min_fields.entrusted_agent_id_card":
		if e.complexity.EnterpriseMinFields.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgentIDCard(childComplexity), true

	case "enterprise_min_fields.entrusted_agent_id_card_photo":
		if e.complexity.EnterpriseMinFields.EntrustedAgentIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgentIDCardPhoto(childComplexity), true

	case "enterprise_min_fields.entrusted_agent_phone":
		if e.complexity.EnterpriseMinFields.EntrustedAgentPhone == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.EntrustedAgentPhone(childComplexity), true

	case "enterprise_min_fields.fax_number":
		if e.complexity.EnterpriseMinFields.FaxNumber == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.FaxNumber(childComplexity), true

	case "enterprise_min_fields.id":
		if e.complexity.EnterpriseMinFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.ID(childComplexity), true

	case "enterprise_min_fields.institution_category":
		if e.complexity.EnterpriseMinFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.InstitutionCategory(childComplexity), true

	case "enterprise_min_fields.legal_representative":
		if e.complexity.EnterpriseMinFields.LegalRepresentative == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentative(childComplexity), true

	case "enterprise_min_fields.legal_representative_id_card":
		if e.complexity.EnterpriseMinFields.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentativeIDCard(childComplexity), true

	case "enterprise_min_fields.legal_representative_id_card_photo":
		if e.complexity.EnterpriseMinFields.LegalRepresentativeIDCardPhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentativeIDCardPhoto(childComplexity), true

	case "enterprise_min_fields.legal_representative_phone":
		if e.complexity.EnterpriseMinFields.LegalRepresentativePhone == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.LegalRepresentativePhone(childComplexity), true

	case "enterprise_min_fields.operating_license_photo":
		if e.complexity.EnterpriseMinFields.OperatingLicensePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.OperatingLicensePhoto(childComplexity), true

	case "enterprise_min_fields.organization_code":
		if e.complexity.EnterpriseMinFields.OrganizationCode == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.OrganizationCode(childComplexity), true

	case "enterprise_min_fields.organization_code_certificate_photo":
		if e.complexity.EnterpriseMinFields.OrganizationCodeCertificatePhoto == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.OrganizationCodeCertificatePhoto(childComplexity), true

	case "enterprise_min_fields.police_station_id":
		if e.complexity.EnterpriseMinFields.PoliceStationID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.PoliceStationID(childComplexity), true

	case "enterprise_min_fields.province_id":
		if e.complexity.EnterpriseMinFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.ProvinceID(childComplexity), true

	case "enterprise_min_fields.record_at":
		if e.complexity.EnterpriseMinFields.RecordAt == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.RecordAt(childComplexity), true

	case "enterprise_min_fields.record_by":
		if e.complexity.EnterpriseMinFields.RecordBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.RecordBy(childComplexity), true

	case "enterprise_min_fields.remarks":
		if e.complexity.EnterpriseMinFields.Remarks == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.Remarks(childComplexity), true

	case "enterprise_min_fields.score":
		if e.complexity.EnterpriseMinFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.Score(childComplexity), true

	case "enterprise_min_fields.superior_enterprise_id":
		if e.complexity.EnterpriseMinFields.SuperiorEnterpriseID == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.SuperiorEnterpriseID(childComplexity), true

	case "enterprise_min_fields.update_at":
		if e.complexity.EnterpriseMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.UpdateAt(childComplexity), true

	case "enterprise_min_fields.update_by":
		if e.complexity.EnterpriseMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.UpdateBy(childComplexity), true

	case "enterprise_min_fields.update_time_in":
		if e.complexity.EnterpriseMinFields.UpdateTimeIn == nil {
			break
		}

		return e.complexity.EnterpriseMinFields.UpdateTimeIn(childComplexity), true

	case "enterprise_mutation_response.affected_rows":
		if e.complexity.EnterpriseMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.EnterpriseMutationResponse.AffectedRows(childComplexity), true

	case "enterprise_mutation_response.returning":
		if e.complexity.EnterpriseMutationResponse.Returning == nil {
			break
		}

		return e.complexity.EnterpriseMutationResponse.Returning(childComplexity), true

	case "enterprise_stddev_fields.business_scope":
		if e.complexity.EnterpriseStddevFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.BusinessScope(childComplexity), true

	case "enterprise_stddev_fields.check_status":
		if e.complexity.EnterpriseStddevFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.CheckStatus(childComplexity), true

	case "enterprise_stddev_fields.city_id":
		if e.complexity.EnterpriseStddevFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.CityID(childComplexity), true

	case "enterprise_stddev_fields.display_number":
		if e.complexity.EnterpriseStddevFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.DisplayNumber(childComplexity), true

	case "enterprise_stddev_fields.district_id":
		if e.complexity.EnterpriseStddevFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.DistrictID(childComplexity), true

	case "enterprise_stddev_fields.enterprise_level":
		if e.complexity.EnterpriseStddevFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.EnterpriseLevel(childComplexity), true

	case "enterprise_stddev_fields.enterprise_nature":
		if e.complexity.EnterpriseStddevFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.EnterpriseNature(childComplexity), true

	case "enterprise_stddev_fields.id":
		if e.complexity.EnterpriseStddevFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.ID(childComplexity), true

	case "enterprise_stddev_fields.institution_category":
		if e.complexity.EnterpriseStddevFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.InstitutionCategory(childComplexity), true

	case "enterprise_stddev_fields.province_id":
		if e.complexity.EnterpriseStddevFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.ProvinceID(childComplexity), true

	case "enterprise_stddev_fields.score":
		if e.complexity.EnterpriseStddevFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseStddevFields.Score(childComplexity), true

	case "enterprise_stddev_pop_fields.business_scope":
		if e.complexity.EnterpriseStddevPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.BusinessScope(childComplexity), true

	case "enterprise_stddev_pop_fields.check_status":
		if e.complexity.EnterpriseStddevPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.CheckStatus(childComplexity), true

	case "enterprise_stddev_pop_fields.city_id":
		if e.complexity.EnterpriseStddevPopFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.CityID(childComplexity), true

	case "enterprise_stddev_pop_fields.display_number":
		if e.complexity.EnterpriseStddevPopFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.DisplayNumber(childComplexity), true

	case "enterprise_stddev_pop_fields.district_id":
		if e.complexity.EnterpriseStddevPopFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.DistrictID(childComplexity), true

	case "enterprise_stddev_pop_fields.enterprise_level":
		if e.complexity.EnterpriseStddevPopFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.EnterpriseLevel(childComplexity), true

	case "enterprise_stddev_pop_fields.enterprise_nature":
		if e.complexity.EnterpriseStddevPopFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.EnterpriseNature(childComplexity), true

	case "enterprise_stddev_pop_fields.id":
		if e.complexity.EnterpriseStddevPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.ID(childComplexity), true

	case "enterprise_stddev_pop_fields.institution_category":
		if e.complexity.EnterpriseStddevPopFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.InstitutionCategory(childComplexity), true

	case "enterprise_stddev_pop_fields.province_id":
		if e.complexity.EnterpriseStddevPopFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.ProvinceID(childComplexity), true

	case "enterprise_stddev_pop_fields.score":
		if e.complexity.EnterpriseStddevPopFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseStddevPopFields.Score(childComplexity), true

	case "enterprise_stddev_samp_fields.business_scope":
		if e.complexity.EnterpriseStddevSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.BusinessScope(childComplexity), true

	case "enterprise_stddev_samp_fields.check_status":
		if e.complexity.EnterpriseStddevSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.CheckStatus(childComplexity), true

	case "enterprise_stddev_samp_fields.city_id":
		if e.complexity.EnterpriseStddevSampFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.CityID(childComplexity), true

	case "enterprise_stddev_samp_fields.display_number":
		if e.complexity.EnterpriseStddevSampFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.DisplayNumber(childComplexity), true

	case "enterprise_stddev_samp_fields.district_id":
		if e.complexity.EnterpriseStddevSampFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.DistrictID(childComplexity), true

	case "enterprise_stddev_samp_fields.enterprise_level":
		if e.complexity.EnterpriseStddevSampFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.EnterpriseLevel(childComplexity), true

	case "enterprise_stddev_samp_fields.enterprise_nature":
		if e.complexity.EnterpriseStddevSampFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.EnterpriseNature(childComplexity), true

	case "enterprise_stddev_samp_fields.id":
		if e.complexity.EnterpriseStddevSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.ID(childComplexity), true

	case "enterprise_stddev_samp_fields.institution_category":
		if e.complexity.EnterpriseStddevSampFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.InstitutionCategory(childComplexity), true

	case "enterprise_stddev_samp_fields.province_id":
		if e.complexity.EnterpriseStddevSampFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.ProvinceID(childComplexity), true

	case "enterprise_stddev_samp_fields.score":
		if e.complexity.EnterpriseStddevSampFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseStddevSampFields.Score(childComplexity), true

	case "enterprise_sum_fields.business_scope":
		if e.complexity.EnterpriseSumFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.BusinessScope(childComplexity), true

	case "enterprise_sum_fields.check_status":
		if e.complexity.EnterpriseSumFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.CheckStatus(childComplexity), true

	case "enterprise_sum_fields.city_id":
		if e.complexity.EnterpriseSumFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.CityID(childComplexity), true

	case "enterprise_sum_fields.display_number":
		if e.complexity.EnterpriseSumFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.DisplayNumber(childComplexity), true

	case "enterprise_sum_fields.district_id":
		if e.complexity.EnterpriseSumFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.DistrictID(childComplexity), true

	case "enterprise_sum_fields.enterprise_level":
		if e.complexity.EnterpriseSumFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.EnterpriseLevel(childComplexity), true

	case "enterprise_sum_fields.enterprise_nature":
		if e.complexity.EnterpriseSumFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.EnterpriseNature(childComplexity), true

	case "enterprise_sum_fields.id":
		if e.complexity.EnterpriseSumFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.ID(childComplexity), true

	case "enterprise_sum_fields.institution_category":
		if e.complexity.EnterpriseSumFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.InstitutionCategory(childComplexity), true

	case "enterprise_sum_fields.province_id":
		if e.complexity.EnterpriseSumFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.ProvinceID(childComplexity), true

	case "enterprise_sum_fields.score":
		if e.complexity.EnterpriseSumFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseSumFields.Score(childComplexity), true

	case "enterprise_var_pop_fields.business_scope":
		if e.complexity.EnterpriseVarPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.BusinessScope(childComplexity), true

	case "enterprise_var_pop_fields.check_status":
		if e.complexity.EnterpriseVarPopFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.CheckStatus(childComplexity), true

	case "enterprise_var_pop_fields.city_id":
		if e.complexity.EnterpriseVarPopFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.CityID(childComplexity), true

	case "enterprise_var_pop_fields.display_number":
		if e.complexity.EnterpriseVarPopFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.DisplayNumber(childComplexity), true

	case "enterprise_var_pop_fields.district_id":
		if e.complexity.EnterpriseVarPopFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.DistrictID(childComplexity), true

	case "enterprise_var_pop_fields.enterprise_level":
		if e.complexity.EnterpriseVarPopFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.EnterpriseLevel(childComplexity), true

	case "enterprise_var_pop_fields.enterprise_nature":
		if e.complexity.EnterpriseVarPopFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.EnterpriseNature(childComplexity), true

	case "enterprise_var_pop_fields.id":
		if e.complexity.EnterpriseVarPopFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.ID(childComplexity), true

	case "enterprise_var_pop_fields.institution_category":
		if e.complexity.EnterpriseVarPopFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.InstitutionCategory(childComplexity), true

	case "enterprise_var_pop_fields.province_id":
		if e.complexity.EnterpriseVarPopFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.ProvinceID(childComplexity), true

	case "enterprise_var_pop_fields.score":
		if e.complexity.EnterpriseVarPopFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseVarPopFields.Score(childComplexity), true

	case "enterprise_var_samp_fields.business_scope":
		if e.complexity.EnterpriseVarSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.BusinessScope(childComplexity), true

	case "enterprise_var_samp_fields.check_status":
		if e.complexity.EnterpriseVarSampFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.CheckStatus(childComplexity), true

	case "enterprise_var_samp_fields.city_id":
		if e.complexity.EnterpriseVarSampFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.CityID(childComplexity), true

	case "enterprise_var_samp_fields.display_number":
		if e.complexity.EnterpriseVarSampFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.DisplayNumber(childComplexity), true

	case "enterprise_var_samp_fields.district_id":
		if e.complexity.EnterpriseVarSampFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.DistrictID(childComplexity), true

	case "enterprise_var_samp_fields.enterprise_level":
		if e.complexity.EnterpriseVarSampFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.EnterpriseLevel(childComplexity), true

	case "enterprise_var_samp_fields.enterprise_nature":
		if e.complexity.EnterpriseVarSampFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.EnterpriseNature(childComplexity), true

	case "enterprise_var_samp_fields.id":
		if e.complexity.EnterpriseVarSampFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.ID(childComplexity), true

	case "enterprise_var_samp_fields.institution_category":
		if e.complexity.EnterpriseVarSampFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.InstitutionCategory(childComplexity), true

	case "enterprise_var_samp_fields.province_id":
		if e.complexity.EnterpriseVarSampFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.ProvinceID(childComplexity), true

	case "enterprise_var_samp_fields.score":
		if e.complexity.EnterpriseVarSampFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseVarSampFields.Score(childComplexity), true

	case "enterprise_variance_fields.business_scope":
		if e.complexity.EnterpriseVarianceFields.BusinessScope == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.BusinessScope(childComplexity), true

	case "enterprise_variance_fields.check_status":
		if e.complexity.EnterpriseVarianceFields.CheckStatus == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.CheckStatus(childComplexity), true

	case "enterprise_variance_fields.city_id":
		if e.complexity.EnterpriseVarianceFields.CityID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.CityID(childComplexity), true

	case "enterprise_variance_fields.display_number":
		if e.complexity.EnterpriseVarianceFields.DisplayNumber == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.DisplayNumber(childComplexity), true

	case "enterprise_variance_fields.district_id":
		if e.complexity.EnterpriseVarianceFields.DistrictID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.DistrictID(childComplexity), true

	case "enterprise_variance_fields.enterprise_level":
		if e.complexity.EnterpriseVarianceFields.EnterpriseLevel == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.EnterpriseLevel(childComplexity), true

	case "enterprise_variance_fields.enterprise_nature":
		if e.complexity.EnterpriseVarianceFields.EnterpriseNature == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.EnterpriseNature(childComplexity), true

	case "enterprise_variance_fields.id":
		if e.complexity.EnterpriseVarianceFields.ID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.ID(childComplexity), true

	case "enterprise_variance_fields.institution_category":
		if e.complexity.EnterpriseVarianceFields.InstitutionCategory == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.InstitutionCategory(childComplexity), true

	case "enterprise_variance_fields.province_id":
		if e.complexity.EnterpriseVarianceFields.ProvinceID == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.ProvinceID(childComplexity), true

	case "enterprise_variance_fields.score":
		if e.complexity.EnterpriseVarianceFields.Score == nil {
			break
		}

		return e.complexity.EnterpriseVarianceFields.Score(childComplexity), true

	case "system_user.app_version":
		if e.complexity.SystemUser.AppVersion == nil {
			break
		}

		return e.complexity.SystemUser.AppVersion(childComplexity), true

	case "system_user.audit_level":
		if e.complexity.SystemUser.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUser.AuditLevel(childComplexity), true

	case "system_user.create_by":
		if e.complexity.SystemUser.CreateBy == nil {
			break
		}

		return e.complexity.SystemUser.CreateBy(childComplexity), true

	case "system_user.created_at":
		if e.complexity.SystemUser.CreatedAt == nil {
			break
		}

		return e.complexity.SystemUser.CreatedAt(childComplexity), true

	case "system_user.delete_at":
		if e.complexity.SystemUser.DeleteAt == nil {
			break
		}

		return e.complexity.SystemUser.DeleteAt(childComplexity), true

	case "system_user.delete_by":
		if e.complexity.SystemUser.DeleteBy == nil {
			break
		}

		return e.complexity.SystemUser.DeleteBy(childComplexity), true

	case "system_user.department_id":
		if e.complexity.SystemUser.DepartmentID == nil {
			break
		}

		return e.complexity.SystemUser.DepartmentID(childComplexity), true

	case "system_user.email":
		if e.complexity.SystemUser.Email == nil {
			break
		}

		return e.complexity.SystemUser.Email(childComplexity), true

	case "system_user.enterprise_id":
		if e.complexity.SystemUser.EnterpriseID == nil {
			break
		}

		return e.complexity.SystemUser.EnterpriseID(childComplexity), true

	case "system_user.grade":
		if e.complexity.SystemUser.Grade == nil {
			break
		}

		return e.complexity.SystemUser.Grade(childComplexity), true

	case "system_user.id":
		if e.complexity.SystemUser.ID == nil {
			break
		}

		return e.complexity.SystemUser.ID(childComplexity), true

	case "system_user.ip_address":
		if e.complexity.SystemUser.IPAddress == nil {
			break
		}

		return e.complexity.SystemUser.IPAddress(childComplexity), true

	case "system_user.Is_bind_ip":
		if e.complexity.SystemUser.IsBindIP == nil {
			break
		}

		return e.complexity.SystemUser.IsBindIP(childComplexity), true

	case "system_user.is_delete":
		if e.complexity.SystemUser.IsDelete == nil {
			break
		}

		return e.complexity.SystemUser.IsDelete(childComplexity), true

	case "system_user.is_valid":
		if e.complexity.SystemUser.IsValid == nil {
			break
		}

		return e.complexity.SystemUser.IsValid(childComplexity), true

	case "system_user.mkey":
		if e.complexity.SystemUser.Mkey == nil {
			break
		}

		return e.complexity.SystemUser.Mkey(childComplexity), true

	case "system_user.mobile":
		if e.complexity.SystemUser.Mobile == nil {
			break
		}

		return e.complexity.SystemUser.Mobile(childComplexity), true

	case "system_user.password":
		if e.complexity.SystemUser.Password == nil {
			break
		}

		return e.complexity.SystemUser.Password(childComplexity), true

	case "system_user.proxy_user":
		if e.complexity.SystemUser.ProxyUser == nil {
			break
		}

		return e.complexity.SystemUser.ProxyUser(childComplexity), true

	case "system_user.remarks":
		if e.complexity.SystemUser.Remarks == nil {
			break
		}

		return e.complexity.SystemUser.Remarks(childComplexity), true

	case "system_user.telephone":
		if e.complexity.SystemUser.Telephone == nil {
			break
		}

		return e.complexity.SystemUser.Telephone(childComplexity), true

	case "system_user.ukey":
		if e.complexity.SystemUser.Ukey == nil {
			break
		}

		return e.complexity.SystemUser.Ukey(childComplexity), true

	case "system_user.update_at":
		if e.complexity.SystemUser.UpdateAt == nil {
			break
		}

		return e.complexity.SystemUser.UpdateAt(childComplexity), true

	case "system_user.update_by":
		if e.complexity.SystemUser.UpdateBy == nil {
			break
		}

		return e.complexity.SystemUser.UpdateBy(childComplexity), true

	case "system_user.user_id":
		if e.complexity.SystemUser.UserID == nil {
			break
		}

		return e.complexity.SystemUser.UserID(childComplexity), true

	case "system_user.user_state":
		if e.complexity.SystemUser.UserState == nil {
			break
		}

		return e.complexity.SystemUser.UserState(childComplexity), true

	case "system_user.user_type":
		if e.complexity.SystemUser.UserType == nil {
			break
		}

		return e.complexity.SystemUser.UserType(childComplexity), true

	case "system_user.username":
		if e.complexity.SystemUser.Username == nil {
			break
		}

		return e.complexity.SystemUser.Username(childComplexity), true

	case "system_user_aggregate.aggregate":
		if e.complexity.SystemUserAggregate.Aggregate == nil {
			break
		}

		return e.complexity.SystemUserAggregate.Aggregate(childComplexity), true

	case "system_user_aggregate.nodes":
		if e.complexity.SystemUserAggregate.Nodes == nil {
			break
		}

		return e.complexity.SystemUserAggregate.Nodes(childComplexity), true

	case "system_user_aggregate_fields.avg":
		if e.complexity.SystemUserAggregateFields.Avg == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Avg(childComplexity), true

	case "system_user_aggregate_fields.count":
		if e.complexity.SystemUserAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_system_user_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.SystemUserAggregateFields.Count(childComplexity, args["columns"].([]model.SystemUserSelectColumn), args["distinct"].(*bool)), true

	case "system_user_aggregate_fields.max":
		if e.complexity.SystemUserAggregateFields.Max == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Max(childComplexity), true

	case "system_user_aggregate_fields.min":
		if e.complexity.SystemUserAggregateFields.Min == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Min(childComplexity), true

	case "system_user_aggregate_fields.stddev":
		if e.complexity.SystemUserAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Stddev(childComplexity), true

	case "system_user_aggregate_fields.stddev_pop":
		if e.complexity.SystemUserAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.StddevPop(childComplexity), true

	case "system_user_aggregate_fields.stddev_samp":
		if e.complexity.SystemUserAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.StddevSamp(childComplexity), true

	case "system_user_aggregate_fields.sum":
		if e.complexity.SystemUserAggregateFields.Sum == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Sum(childComplexity), true

	case "system_user_aggregate_fields.var_pop":
		if e.complexity.SystemUserAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.VarPop(childComplexity), true

	case "system_user_aggregate_fields.var_samp":
		if e.complexity.SystemUserAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.VarSamp(childComplexity), true

	case "system_user_aggregate_fields.variance":
		if e.complexity.SystemUserAggregateFields.Variance == nil {
			break
		}

		return e.complexity.SystemUserAggregateFields.Variance(childComplexity), true

	case "system_user_avg_fields.audit_level":
		if e.complexity.SystemUserAvgFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.AuditLevel(childComplexity), true

	case "system_user_avg_fields.grade":
		if e.complexity.SystemUserAvgFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.Grade(childComplexity), true

	case "system_user_avg_fields.id":
		if e.complexity.SystemUserAvgFields.ID == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.ID(childComplexity), true

	case "system_user_avg_fields.user_state":
		if e.complexity.SystemUserAvgFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.UserState(childComplexity), true

	case "system_user_avg_fields.user_type":
		if e.complexity.SystemUserAvgFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserAvgFields.UserType(childComplexity), true

	case "system_user_max_fields.app_version":
		if e.complexity.SystemUserMaxFields.AppVersion == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.AppVersion(childComplexity), true

	case "system_user_max_fields.audit_level":
		if e.complexity.SystemUserMaxFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.AuditLevel(childComplexity), true

	case "system_user_max_fields.create_by":
		if e.complexity.SystemUserMaxFields.CreateBy == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.CreateBy(childComplexity), true

	case "system_user_max_fields.created_at":
		if e.complexity.SystemUserMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.CreatedAt(childComplexity), true

	case "system_user_max_fields.delete_at":
		if e.complexity.SystemUserMaxFields.DeleteAt == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.DeleteAt(childComplexity), true

	case "system_user_max_fields.delete_by":
		if e.complexity.SystemUserMaxFields.DeleteBy == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.DeleteBy(childComplexity), true

	case "system_user_max_fields.department_id":
		if e.complexity.SystemUserMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.DepartmentID(childComplexity), true

	case "system_user_max_fields.email":
		if e.complexity.SystemUserMaxFields.Email == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Email(childComplexity), true

	case "system_user_max_fields.enterprise_id":
		if e.complexity.SystemUserMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.EnterpriseID(childComplexity), true

	case "system_user_max_fields.grade":
		if e.complexity.SystemUserMaxFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Grade(childComplexity), true

	case "system_user_max_fields.id":
		if e.complexity.SystemUserMaxFields.ID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.ID(childComplexity), true

	case "system_user_max_fields.ip_address":
		if e.complexity.SystemUserMaxFields.IPAddress == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.IPAddress(childComplexity), true

	case "system_user_max_fields.mkey":
		if e.complexity.SystemUserMaxFields.Mkey == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Mkey(childComplexity), true

	case "system_user_max_fields.mobile":
		if e.complexity.SystemUserMaxFields.Mobile == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Mobile(childComplexity), true

	case "system_user_max_fields.password":
		if e.complexity.SystemUserMaxFields.Password == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Password(childComplexity), true

	case "system_user_max_fields.proxy_user":
		if e.complexity.SystemUserMaxFields.ProxyUser == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.ProxyUser(childComplexity), true

	case "system_user_max_fields.remarks":
		if e.complexity.SystemUserMaxFields.Remarks == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Remarks(childComplexity), true

	case "system_user_max_fields.telephone":
		if e.complexity.SystemUserMaxFields.Telephone == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Telephone(childComplexity), true

	case "system_user_max_fields.ukey":
		if e.complexity.SystemUserMaxFields.Ukey == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Ukey(childComplexity), true

	case "system_user_max_fields.update_at":
		if e.complexity.SystemUserMaxFields.UpdateAt == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UpdateAt(childComplexity), true

	case "system_user_max_fields.update_by":
		if e.complexity.SystemUserMaxFields.UpdateBy == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UpdateBy(childComplexity), true

	case "system_user_max_fields.user_id":
		if e.complexity.SystemUserMaxFields.UserID == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UserID(childComplexity), true

	case "system_user_max_fields.user_state":
		if e.complexity.SystemUserMaxFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UserState(childComplexity), true

	case "system_user_max_fields.user_type":
		if e.complexity.SystemUserMaxFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.UserType(childComplexity), true

	case "system_user_max_fields.username":
		if e.complexity.SystemUserMaxFields.Username == nil {
			break
		}

		return e.complexity.SystemUserMaxFields.Username(childComplexity), true

	case "system_user_min_fields.app_version":
		if e.complexity.SystemUserMinFields.AppVersion == nil {
			break
		}

		return e.complexity.SystemUserMinFields.AppVersion(childComplexity), true

	case "system_user_min_fields.audit_level":
		if e.complexity.SystemUserMinFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserMinFields.AuditLevel(childComplexity), true

	case "system_user_min_fields.create_by":
		if e.complexity.SystemUserMinFields.CreateBy == nil {
			break
		}

		return e.complexity.SystemUserMinFields.CreateBy(childComplexity), true

	case "system_user_min_fields.created_at":
		if e.complexity.SystemUserMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.SystemUserMinFields.CreatedAt(childComplexity), true

	case "system_user_min_fields.delete_at":
		if e.complexity.SystemUserMinFields.DeleteAt == nil {
			break
		}

		return e.complexity.SystemUserMinFields.DeleteAt(childComplexity), true

	case "system_user_min_fields.delete_by":
		if e.complexity.SystemUserMinFields.DeleteBy == nil {
			break
		}

		return e.complexity.SystemUserMinFields.DeleteBy(childComplexity), true

	case "system_user_min_fields.department_id":
		if e.complexity.SystemUserMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.DepartmentID(childComplexity), true

	case "system_user_min_fields.email":
		if e.complexity.SystemUserMinFields.Email == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Email(childComplexity), true

	case "system_user_min_fields.enterprise_id":
		if e.complexity.SystemUserMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.EnterpriseID(childComplexity), true

	case "system_user_min_fields.grade":
		if e.complexity.SystemUserMinFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Grade(childComplexity), true

	case "system_user_min_fields.id":
		if e.complexity.SystemUserMinFields.ID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.ID(childComplexity), true

	case "system_user_min_fields.ip_address":
		if e.complexity.SystemUserMinFields.IPAddress == nil {
			break
		}

		return e.complexity.SystemUserMinFields.IPAddress(childComplexity), true

	case "system_user_min_fields.mkey":
		if e.complexity.SystemUserMinFields.Mkey == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Mkey(childComplexity), true

	case "system_user_min_fields.mobile":
		if e.complexity.SystemUserMinFields.Mobile == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Mobile(childComplexity), true

	case "system_user_min_fields.password":
		if e.complexity.SystemUserMinFields.Password == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Password(childComplexity), true

	case "system_user_min_fields.proxy_user":
		if e.complexity.SystemUserMinFields.ProxyUser == nil {
			break
		}

		return e.complexity.SystemUserMinFields.ProxyUser(childComplexity), true

	case "system_user_min_fields.remarks":
		if e.complexity.SystemUserMinFields.Remarks == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Remarks(childComplexity), true

	case "system_user_min_fields.telephone":
		if e.complexity.SystemUserMinFields.Telephone == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Telephone(childComplexity), true

	case "system_user_min_fields.ukey":
		if e.complexity.SystemUserMinFields.Ukey == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Ukey(childComplexity), true

	case "system_user_min_fields.update_at":
		if e.complexity.SystemUserMinFields.UpdateAt == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UpdateAt(childComplexity), true

	case "system_user_min_fields.update_by":
		if e.complexity.SystemUserMinFields.UpdateBy == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UpdateBy(childComplexity), true

	case "system_user_min_fields.user_id":
		if e.complexity.SystemUserMinFields.UserID == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UserID(childComplexity), true

	case "system_user_min_fields.user_state":
		if e.complexity.SystemUserMinFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UserState(childComplexity), true

	case "system_user_min_fields.user_type":
		if e.complexity.SystemUserMinFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserMinFields.UserType(childComplexity), true

	case "system_user_min_fields.username":
		if e.complexity.SystemUserMinFields.Username == nil {
			break
		}

		return e.complexity.SystemUserMinFields.Username(childComplexity), true

	case "system_user_mutation_response.affected_rows":
		if e.complexity.SystemUserMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.SystemUserMutationResponse.AffectedRows(childComplexity), true

	case "system_user_mutation_response.returning":
		if e.complexity.SystemUserMutationResponse.Returning == nil {
			break
		}

		return e.complexity.SystemUserMutationResponse.Returning(childComplexity), true

	case "system_user_stddev_fields.audit_level":
		if e.complexity.SystemUserStddevFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.AuditLevel(childComplexity), true

	case "system_user_stddev_fields.grade":
		if e.complexity.SystemUserStddevFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.Grade(childComplexity), true

	case "system_user_stddev_fields.id":
		if e.complexity.SystemUserStddevFields.ID == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.ID(childComplexity), true

	case "system_user_stddev_fields.user_state":
		if e.complexity.SystemUserStddevFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.UserState(childComplexity), true

	case "system_user_stddev_fields.user_type":
		if e.complexity.SystemUserStddevFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserStddevFields.UserType(childComplexity), true

	case "system_user_stddev_pop_fields.audit_level":
		if e.complexity.SystemUserStddevPopFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.AuditLevel(childComplexity), true

	case "system_user_stddev_pop_fields.grade":
		if e.complexity.SystemUserStddevPopFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.Grade(childComplexity), true

	case "system_user_stddev_pop_fields.id":
		if e.complexity.SystemUserStddevPopFields.ID == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.ID(childComplexity), true

	case "system_user_stddev_pop_fields.user_state":
		if e.complexity.SystemUserStddevPopFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.UserState(childComplexity), true

	case "system_user_stddev_pop_fields.user_type":
		if e.complexity.SystemUserStddevPopFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserStddevPopFields.UserType(childComplexity), true

	case "system_user_stddev_samp_fields.audit_level":
		if e.complexity.SystemUserStddevSampFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.AuditLevel(childComplexity), true

	case "system_user_stddev_samp_fields.grade":
		if e.complexity.SystemUserStddevSampFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.Grade(childComplexity), true

	case "system_user_stddev_samp_fields.id":
		if e.complexity.SystemUserStddevSampFields.ID == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.ID(childComplexity), true

	case "system_user_stddev_samp_fields.user_state":
		if e.complexity.SystemUserStddevSampFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.UserState(childComplexity), true

	case "system_user_stddev_samp_fields.user_type":
		if e.complexity.SystemUserStddevSampFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserStddevSampFields.UserType(childComplexity), true

	case "system_user_sum_fields.audit_level":
		if e.complexity.SystemUserSumFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserSumFields.AuditLevel(childComplexity), true

	case "system_user_sum_fields.grade":
		if e.complexity.SystemUserSumFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserSumFields.Grade(childComplexity), true

	case "system_user_sum_fields.id":
		if e.complexity.SystemUserSumFields.ID == nil {
			break
		}

		return e.complexity.SystemUserSumFields.ID(childComplexity), true

	case "system_user_sum_fields.user_state":
		if e.complexity.SystemUserSumFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserSumFields.UserState(childComplexity), true

	case "system_user_sum_fields.user_type":
		if e.complexity.SystemUserSumFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserSumFields.UserType(childComplexity), true

	case "system_user_var_pop_fields.audit_level":
		if e.complexity.SystemUserVarPopFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.AuditLevel(childComplexity), true

	case "system_user_var_pop_fields.grade":
		if e.complexity.SystemUserVarPopFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.Grade(childComplexity), true

	case "system_user_var_pop_fields.id":
		if e.complexity.SystemUserVarPopFields.ID == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.ID(childComplexity), true

	case "system_user_var_pop_fields.user_state":
		if e.complexity.SystemUserVarPopFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.UserState(childComplexity), true

	case "system_user_var_pop_fields.user_type":
		if e.complexity.SystemUserVarPopFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserVarPopFields.UserType(childComplexity), true

	case "system_user_var_samp_fields.audit_level":
		if e.complexity.SystemUserVarSampFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.AuditLevel(childComplexity), true

	case "system_user_var_samp_fields.grade":
		if e.complexity.SystemUserVarSampFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.Grade(childComplexity), true

	case "system_user_var_samp_fields.id":
		if e.complexity.SystemUserVarSampFields.ID == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.ID(childComplexity), true

	case "system_user_var_samp_fields.user_state":
		if e.complexity.SystemUserVarSampFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.UserState(childComplexity), true

	case "system_user_var_samp_fields.user_type":
		if e.complexity.SystemUserVarSampFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserVarSampFields.UserType(childComplexity), true

	case "system_user_variance_fields.audit_level":
		if e.complexity.SystemUserVarianceFields.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.AuditLevel(childComplexity), true

	case "system_user_variance_fields.grade":
		if e.complexity.SystemUserVarianceFields.Grade == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.Grade(childComplexity), true

	case "system_user_variance_fields.id":
		if e.complexity.SystemUserVarianceFields.ID == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.ID(childComplexity), true

	case "system_user_variance_fields.user_state":
		if e.complexity.SystemUserVarianceFields.UserState == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.UserState(childComplexity), true

	case "system_user_variance_fields.user_type":
		if e.complexity.SystemUserVarianceFields.UserType == nil {
			break
		}

		return e.complexity.SystemUserVarianceFields.UserType(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input _jsonb_comparison_exp {
    _eq: _jsonb
    _gt: _jsonb
    _gte: _jsonb
    _in: [_jsonb!]
    _is_null: Boolean
    _lt: _jsonb
    _lte: _jsonb
    _neq: _jsonb
    _nin: [_jsonb!]
}

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}


"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}


"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}



"""column ordering options"""
enum order_by {
    """in the ascending order, nulls last"""
    asc

    """in the ascending order, nulls first"""
    asc_nulls_first

    """in the ascending order, nulls last"""
    asc_nulls_last

    """in the descending order, nulls first"""
    desc

    """in the descending order, nulls first"""
    desc_nulls_first

    """in the descending order, nulls last"""
    desc_nulls_last
}


"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}


"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input point_comparison_exp {
    _eq: point
    _gt: point
    _gte: point
    _in: [point!]
    _is_null: Boolean
    _lt: point
    _lte: point
    _neq: point
    _nin: [point!]
}

scalar _jsonb
scalar bigint
scalar timestamptz
scalar point
scalar numeric`, BuiltIn: false},
	{Name: "graph/graphqls/department.graphqls", Input: `
"""
部门


columns and relationships of "department"

"""
type department {
  """创建时间"""
  create_at: timestamptz

  """创建人"""
  create_by: String

  """删除时间"""
  delete_at: timestamptz

  """删除人"""
  delete_by: String

  """部门类型"""
  department_category: Int

  """部门编号"""
  department_code: String

  """部门ID"""
  department_id: String!

  """部门名称"""
  department_name: String

  """企业ID"""
  enterprise_id: String!

  """ID"""
  id: bigint!

  """排序"""
  internal_number: Int

  """是否删除"""
  is_delete: Boolean!

  """备注"""
  remarks: String

  """上级部门ID"""
  superior_department_id: String

  """修改时间"""
  update_at: timestamptz

  """修改人"""
  update_by: String
}

"""
aggregated selection of "department"
"""
type department_aggregate {
  aggregate: department_aggregate_fields
  nodes: [department!]!
}

"""
aggregate fields of "department"
"""
type department_aggregate_fields {
  avg: department_avg_fields
  count(columns: [department_select_column!], distinct: Boolean): Int
  max: department_max_fields
  min: department_min_fields
  stddev: department_stddev_fields
  stddev_pop: department_stddev_pop_fields
  stddev_samp: department_stddev_samp_fields
  sum: department_sum_fields
  var_pop: department_var_pop_fields
  var_samp: department_var_samp_fields
  variance: department_variance_fields
}

"""
order by aggregate values of table "department"
"""
input department_aggregate_order_by {
  avg: department_avg_order_by
  count: order_by
  max: department_max_order_by
  min: department_min_order_by
  stddev: department_stddev_order_by
  stddev_pop: department_stddev_pop_order_by
  stddev_samp: department_stddev_samp_order_by
  sum: department_sum_order_by
  var_pop: department_var_pop_order_by
  var_samp: department_var_samp_order_by
  variance: department_variance_order_by
}

"""
input type for inserting array relation for remote table "department"
"""
input department_arr_rel_insert_input {
  data: [department_insert_input!]!
  on_conflict: department_on_conflict
}

"""aggregate avg on columns"""
type department_avg_fields {
  department_category: Float
  id: Float
  internal_number: Float
}

"""
order by avg() on columns of table "department"
"""
input department_avg_order_by {
  department_category: order_by
  id: order_by
  internal_number: order_by
}

"""
Boolean expression to filter rows from the table "department". All fields are combined with a logical 'AND'.
"""
input department_bool_exp {
  _and: [department_bool_exp]
  _not: department_bool_exp
  _or: [department_bool_exp]
  create_at: timestamptz_comparison_exp
  create_by: String_comparison_exp
  delete_at: timestamptz_comparison_exp
  delete_by: String_comparison_exp
  department_category: Int_comparison_exp
  department_code: String_comparison_exp
  department_id: String_comparison_exp
  department_name: String_comparison_exp
  enterprise_id: String_comparison_exp
  id: bigint_comparison_exp
  internal_number: Int_comparison_exp
  is_delete: Boolean_comparison_exp
  remarks: String_comparison_exp
  superior_department_id: String_comparison_exp
  update_at: timestamptz_comparison_exp
  update_by: String_comparison_exp
}

"""
unique or primary key constraints on table "department"
"""
enum department_constraint {
  """unique or primary key constraint"""
  department_pkey
}

"""
input type for incrementing integer column in table "department"
"""
input department_inc_input {
  department_category: Int
  id: bigint
  internal_number: Int
}

"""
input type for inserting data into table "department"
"""
input department_insert_input {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  department_category: Int
  department_code: String
  department_id: String
  department_name: String
  enterprise_id: String
  id: bigint
  internal_number: Int
  is_delete: Boolean
  remarks: String
  superior_department_id: String
  update_at: timestamptz
  update_by: String
}

"""aggregate max on columns"""
type department_max_fields {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  department_category: Int
  department_code: String
  department_id: String
  department_name: String
  enterprise_id: String
  id: bigint
  internal_number: Int
  remarks: String
  superior_department_id: String
  update_at: timestamptz
  update_by: String
}

"""
order by max() on columns of table "department"
"""
input department_max_order_by {
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  department_category: order_by
  department_code: order_by
  department_id: order_by
  department_name: order_by
  enterprise_id: order_by
  id: order_by
  internal_number: order_by
  remarks: order_by
  superior_department_id: order_by
  update_at: order_by
  update_by: order_by
}

"""aggregate min on columns"""
type department_min_fields {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  department_category: Int
  department_code: String
  department_id: String
  department_name: String
  enterprise_id: String
  id: bigint
  internal_number: Int
  remarks: String
  superior_department_id: String
  update_at: timestamptz
  update_by: String
}

"""
order by min() on columns of table "department"
"""
input department_min_order_by {
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  department_category: order_by
  department_code: order_by
  department_id: order_by
  department_name: order_by
  enterprise_id: order_by
  id: order_by
  internal_number: order_by
  remarks: order_by
  superior_department_id: order_by
  update_at: order_by
  update_by: order_by
}

"""
response of any mutation on the table "department"
"""
type department_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [department!]!
}

"""
input type for inserting object relation for remote table "department"
"""
input department_obj_rel_insert_input {
  data: department_insert_input!
  on_conflict: department_on_conflict
}

"""
on conflict condition type for table "department"
"""
input department_on_conflict {
  constraint: department_constraint!
  update_columns: [department_update_column!]!
  where: department_bool_exp
}

"""
ordering options when selecting data from "department"
"""
input department_order_by {
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  department_category: order_by
  department_code: order_by
  department_id: order_by
  department_name: order_by
  enterprise_id: order_by
  id: order_by
  internal_number: order_by
  is_delete: order_by
  remarks: order_by
  superior_department_id: order_by
  update_at: order_by
  update_by: order_by
}

"""
primary key columns input for table: "department"
"""
input department_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "department"
"""
enum department_select_column {
  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  department_category

  """column name"""
  department_code

  """column name"""
  department_id

  """column name"""
  department_name

  """column name"""
  enterprise_id

  """column name"""
  id

  """column name"""
  internal_number

  """column name"""
  is_delete

  """column name"""
  remarks

  """column name"""
  superior_department_id

  """column name"""
  update_at

  """column name"""
  update_by
}

"""
input type for updating data in table "department"
"""
input department_set_input {
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  department_category: Int
  department_code: String
  department_id: String
  department_name: String
  enterprise_id: String
  id: bigint
  internal_number: Int
  is_delete: Boolean
  remarks: String
  superior_department_id: String
  update_at: timestamptz
  update_by: String
}

"""aggregate stddev on columns"""
type department_stddev_fields {
  department_category: Float
  id: Float
  internal_number: Float
}

"""
order by stddev() on columns of table "department"
"""
input department_stddev_order_by {
  department_category: order_by
  id: order_by
  internal_number: order_by
}

"""aggregate stddev_pop on columns"""
type department_stddev_pop_fields {
  department_category: Float
  id: Float
  internal_number: Float
}

"""
order by stddev_pop() on columns of table "department"
"""
input department_stddev_pop_order_by {
  department_category: order_by
  id: order_by
  internal_number: order_by
}

"""aggregate stddev_samp on columns"""
type department_stddev_samp_fields {
  department_category: Float
  id: Float
  internal_number: Float
}

"""
order by stddev_samp() on columns of table "department"
"""
input department_stddev_samp_order_by {
  department_category: order_by
  id: order_by
  internal_number: order_by
}

"""aggregate sum on columns"""
type department_sum_fields {
  department_category: Int
  id: bigint
  internal_number: Int
}

"""
order by sum() on columns of table "department"
"""
input department_sum_order_by {
  department_category: order_by
  id: order_by
  internal_number: order_by
}

"""
update columns of table "department"
"""
enum department_update_column {
  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  department_category

  """column name"""
  department_code

  """column name"""
  department_id

  """column name"""
  department_name

  """column name"""
  enterprise_id

  """column name"""
  id

  """column name"""
  internal_number

  """column name"""
  is_delete

  """column name"""
  remarks

  """column name"""
  superior_department_id

  """column name"""
  update_at

  """column name"""
  update_by
}

"""aggregate var_pop on columns"""
type department_var_pop_fields {
  department_category: Float
  id: Float
  internal_number: Float
}

"""
order by var_pop() on columns of table "department"
"""
input department_var_pop_order_by {
  department_category: order_by
  id: order_by
  internal_number: order_by
}

"""aggregate var_samp on columns"""
type department_var_samp_fields {
  department_category: Float
  id: Float
  internal_number: Float
}

"""
order by var_samp() on columns of table "department"
"""
input department_var_samp_order_by {
  department_category: order_by
  id: order_by
  internal_number: order_by
}

"""aggregate variance on columns"""
type department_variance_fields {
  department_category: Float
  id: Float
  internal_number: Float
}

"""
order by variance() on columns of table "department"
"""
input department_variance_order_by {
  department_category: order_by
  id: order_by
  internal_number: order_by
}

extend type Mutation {
  """
  delete data from the table: "department"
  """
  delete_department(
    """filter the rows which have to be deleted"""
    where: department_bool_exp!
  ): department_mutation_response

  """
  delete single row from the table: "department"
  """
  delete_department_by_pk(
    """ID"""
    id: bigint!
  ): department

  """
  insert data into the table: "department"
  """
  insert_department(
    """the rows to be inserted"""
    objects: [department_insert_input!]!

    """on conflict condition"""
    on_conflict: department_on_conflict
  ): department_mutation_response

  """
  insert a single row into the table: "department"
  """
  insert_department_one(
    """the row to be inserted"""
    object: department_insert_input!

    """on conflict condition"""
    on_conflict: department_on_conflict
  ): department

  """
  update data of the table: "department"
  """
  update_department(
    """increments the integer columns with given value of the filtered values"""
    _inc: department_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: department_set_input

    """filter the rows which have to be updated"""
    where: department_bool_exp!
  ): department_mutation_response

  """
  update single row of the table: "department"
  """
  update_department_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: department_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: department_set_input
    pk_columns: department_pk_columns_input!
  ): department
}

extend type Query {
  """
  fetch data from the table: "department"
  """
  department(
    """distinct select on columns"""
    distinct_on: [department_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_order_by!]

    """filter the rows returned"""
    where: department_bool_exp
  ): [department!]!

  """
  fetch aggregated fields from the table: "department"
  """
  department_aggregate(
    """distinct select on columns"""
    distinct_on: [department_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [department_order_by!]

    """filter the rows returned"""
    where: department_bool_exp
  ): department_aggregate!

  """fetch data from the table: "department" using primary key columns"""
  department_by_pk(
    """ID"""
    id: bigint!
  ): department
}
`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise.graphqls", Input: `
"""
企业


columns and relationships of "enterprise"

"""
type enterprise {
  """协会审核时间"""
  association_review_by: timestamptz

  """协会审核意见"""
  association_review_opinion: String

  """协会审核时间"""
  association_review_time: timestamptz

  """所属大队ID"""
  brigade_id: String

  """大队审核人"""
  brigade_review_by: String

  """大队审核意见"""
  brigade_review_opinion: String

  """大队审核时间"""
  brigade_review_time: timestamptz

  """营业执照到期日期"""
  business_license_expiry_date: timestamptz

  """营业执照发证日期"""
  business_license_issuance_date: timestamptz

  """营业执照图片"""
  business_license_photo: String

  """业务办理扫描件照片"""
  business_photo: String

  """经营范围"""
  business_scope: Int

  """审核状态"""
  check_status: Int

  """城市ID"""
  city_id: bigint

  """联系人"""
  contact_persons: _jsonb

  """创建时间"""
  create_at: timestamptz

  """创建人"""
  create_by: String

  """删除时间"""
  delete_at: timestamptz

  """删除人"""
  delete_by: String

  """显示顺序"""
  display_number: Int

  """区域ID"""
  district_id: bigint

  """企业地址"""
  enterprise_address: String

  """企业码"""
  enterprise_code: String

  """企业ID"""
  enterprise_id: String!

  """企业级别"""
  enterprise_level: Int

  """企业名称"""
  enterprise_name: String
  enterprise_nature: Int

  """委托代理人"""
  entrusted_agent: String

  """委托代理人-身份证号码"""
  entrusted_agent_id_card: String

  """委托代理人身份证图片"""
  entrusted_agent_id_card_photo: String

  """委托代理人-电话号码"""
  entrusted_agent_phone: String

  """传真号码"""
  fax_number: String

  """ID"""
  id: bigint!

  """机构类别"""
  institution_category: bigint

  """是否黑名单"""
  is_black: Boolean

  """是否删除"""
  is_deleted: Boolean!

  """是否录入完成"""
  is_input: Boolean

  """是否安装"""
  is_install: Boolean

  """是否上次省厅"""
  is_upload_province: Boolean

  """企业法人代表"""
  legal_representative: String

  """企业法人-身份证号码"""
  legal_representative_id_card: String

  """企业法人代表身份证-图片"""
  legal_representative_id_card_photo: String

  """企业法人代表联系电话"""
  legal_representative_phone: String

  """经营许可证图片"""
  operating_license_photo: String

  """组织机构代码(企业的营运证)"""
  organization_code: String

  """组织机构代码证照片"""
  organization_code_certificate_photo: String

  """所属派出所ID"""
  police_station_id: String

  """省份ID"""
  province_id: bigint

  """登记时间"""
  record_at: timestamptz

  """登记人"""
  record_by: String

  """备注"""
  remarks: String

  """记分"""
  score: Int

  """上级企业ID"""
  superior_enterprise_id: String

  """修改时间"""
  update_at: timestamptz

  """修改人"""
  update_by: String

  """内网更新时间"""
  update_time_in: timestamptz
}

"""
aggregated selection of "enterprise"
"""
type enterprise_aggregate {
  aggregate: enterprise_aggregate_fields
  nodes: [enterprise!]!
}

"""
aggregate fields of "enterprise"
"""
type enterprise_aggregate_fields {
  avg: enterprise_avg_fields
  count(columns: [enterprise_select_column!], distinct: Boolean): Int
  max: enterprise_max_fields
  min: enterprise_min_fields
  stddev: enterprise_stddev_fields
  stddev_pop: enterprise_stddev_pop_fields
  stddev_samp: enterprise_stddev_samp_fields
  sum: enterprise_sum_fields
  var_pop: enterprise_var_pop_fields
  var_samp: enterprise_var_samp_fields
  variance: enterprise_variance_fields
}

"""
order by aggregate values of table "enterprise"
"""
input enterprise_aggregate_order_by {
  avg: enterprise_avg_order_by
  count: order_by
  max: enterprise_max_order_by
  min: enterprise_min_order_by
  stddev: enterprise_stddev_order_by
  stddev_pop: enterprise_stddev_pop_order_by
  stddev_samp: enterprise_stddev_samp_order_by
  sum: enterprise_sum_order_by
  var_pop: enterprise_var_pop_order_by
  var_samp: enterprise_var_samp_order_by
  variance: enterprise_variance_order_by
}

"""
input type for inserting array relation for remote table "enterprise"
"""
input enterprise_arr_rel_insert_input {
  data: [enterprise_insert_input!]!
  on_conflict: enterprise_on_conflict
}

"""aggregate avg on columns"""
type enterprise_avg_fields {
  business_scope: Float
  check_status: Float
  city_id: Float
  display_number: Float
  district_id: Float
  enterprise_level: Float
  enterprise_nature: Float
  id: Float
  institution_category: Float
  province_id: Float
  score: Float
}

"""
order by avg() on columns of table "enterprise"
"""
input enterprise_avg_order_by {
  business_scope: order_by
  check_status: order_by
  city_id: order_by
  display_number: order_by
  district_id: order_by
  enterprise_level: order_by
  enterprise_nature: order_by
  id: order_by
  institution_category: order_by
  province_id: order_by
  score: order_by
}

"""
Boolean expression to filter rows from the table "enterprise". All fields are combined with a logical 'AND'.
"""
input enterprise_bool_exp {
  _and: [enterprise_bool_exp]
  _not: enterprise_bool_exp
  _or: [enterprise_bool_exp]
  association_review_by: timestamptz_comparison_exp
  association_review_opinion: String_comparison_exp
  association_review_time: timestamptz_comparison_exp
  brigade_id: String_comparison_exp
  brigade_review_by: String_comparison_exp
  brigade_review_opinion: String_comparison_exp
  brigade_review_time: timestamptz_comparison_exp
  business_license_expiry_date: timestamptz_comparison_exp
  business_license_issuance_date: timestamptz_comparison_exp
  business_license_photo: String_comparison_exp
  business_photo: String_comparison_exp
  business_scope: Int_comparison_exp
  check_status: Int_comparison_exp
  city_id: bigint_comparison_exp
  contact_persons: _jsonb_comparison_exp
  create_at: timestamptz_comparison_exp
  create_by: String_comparison_exp
  delete_at: timestamptz_comparison_exp
  delete_by: String_comparison_exp
  display_number: Int_comparison_exp
  district_id: bigint_comparison_exp
  enterprise_address: String_comparison_exp
  enterprise_code: String_comparison_exp
  enterprise_id: String_comparison_exp
  enterprise_level: Int_comparison_exp
  enterprise_name: String_comparison_exp
  enterprise_nature: Int_comparison_exp
  entrusted_agent: String_comparison_exp
  entrusted_agent_id_card: String_comparison_exp
  entrusted_agent_id_card_photo: String_comparison_exp
  entrusted_agent_phone: String_comparison_exp
  fax_number: String_comparison_exp
  id: bigint_comparison_exp
  institution_category: bigint_comparison_exp
  is_black: Boolean_comparison_exp
  is_deleted: Boolean_comparison_exp
  is_input: Boolean_comparison_exp
  is_install: Boolean_comparison_exp
  is_upload_province: Boolean_comparison_exp
  legal_representative: String_comparison_exp
  legal_representative_id_card: String_comparison_exp
  legal_representative_id_card_photo: String_comparison_exp
  legal_representative_phone: String_comparison_exp
  operating_license_photo: String_comparison_exp
  organization_code: String_comparison_exp
  organization_code_certificate_photo: String_comparison_exp
  police_station_id: String_comparison_exp
  province_id: bigint_comparison_exp
  record_at: timestamptz_comparison_exp
  record_by: String_comparison_exp
  remarks: String_comparison_exp
  score: Int_comparison_exp
  superior_enterprise_id: String_comparison_exp
  update_at: timestamptz_comparison_exp
  update_by: String_comparison_exp
  update_time_in: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "enterprise"
"""
enum enterprise_constraint {
  """unique or primary key constraint"""
  newtable_pk
}

"""
input type for incrementing integer column in table "enterprise"
"""
input enterprise_inc_input {
  business_scope: Int
  check_status: Int
  city_id: bigint
  display_number: Int
  district_id: bigint
  enterprise_level: Int
  enterprise_nature: Int
  id: bigint
  institution_category: bigint
  province_id: bigint
  score: Int
}

"""
input type for inserting data into table "enterprise"
"""
input enterprise_insert_input {
  association_review_by: timestamptz
  association_review_opinion: String
  association_review_time: timestamptz
  brigade_id: String
  brigade_review_by: String
  brigade_review_opinion: String
  brigade_review_time: timestamptz
  business_license_expiry_date: timestamptz
  business_license_issuance_date: timestamptz
  business_license_photo: String
  business_photo: String
  business_scope: Int
  check_status: Int
  city_id: bigint
  contact_persons: _jsonb
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  display_number: Int
  district_id: bigint
  enterprise_address: String
  enterprise_code: String
  enterprise_id: String
  enterprise_level: Int
  enterprise_name: String
  enterprise_nature: Int
  entrusted_agent: String
  entrusted_agent_id_card: String
  entrusted_agent_id_card_photo: String
  entrusted_agent_phone: String
  fax_number: String
  id: bigint
  institution_category: bigint
  is_black: Boolean
  is_deleted: Boolean
  is_input: Boolean
  is_install: Boolean
  is_upload_province: Boolean
  legal_representative: String
  legal_representative_id_card: String
  legal_representative_id_card_photo: String
  legal_representative_phone: String
  operating_license_photo: String
  organization_code: String
  organization_code_certificate_photo: String
  police_station_id: String
  province_id: bigint
  record_at: timestamptz
  record_by: String
  remarks: String
  score: Int
  superior_enterprise_id: String
  update_at: timestamptz
  update_by: String
  update_time_in: timestamptz
}

"""aggregate max on columns"""
type enterprise_max_fields {
  association_review_by: timestamptz
  association_review_opinion: String
  association_review_time: timestamptz
  brigade_id: String
  brigade_review_by: String
  brigade_review_opinion: String
  brigade_review_time: timestamptz
  business_license_expiry_date: timestamptz
  business_license_issuance_date: timestamptz
  business_license_photo: String
  business_photo: String
  business_scope: Int
  check_status: Int
  city_id: bigint
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  display_number: Int
  district_id: bigint
  enterprise_address: String
  enterprise_code: String
  enterprise_id: String
  enterprise_level: Int
  enterprise_name: String
  enterprise_nature: Int
  entrusted_agent: String
  entrusted_agent_id_card: String
  entrusted_agent_id_card_photo: String
  entrusted_agent_phone: String
  fax_number: String
  id: bigint
  institution_category: bigint
  legal_representative: String
  legal_representative_id_card: String
  legal_representative_id_card_photo: String
  legal_representative_phone: String
  operating_license_photo: String
  organization_code: String
  organization_code_certificate_photo: String
  police_station_id: String
  province_id: bigint
  record_at: timestamptz
  record_by: String
  remarks: String
  score: Int
  superior_enterprise_id: String
  update_at: timestamptz
  update_by: String
  update_time_in: timestamptz
}

"""
order by max() on columns of table "enterprise"
"""
input enterprise_max_order_by {
  association_review_by: order_by
  association_review_opinion: order_by
  association_review_time: order_by
  brigade_id: order_by
  brigade_review_by: order_by
  brigade_review_opinion: order_by
  brigade_review_time: order_by
  business_license_expiry_date: order_by
  business_license_issuance_date: order_by
  business_license_photo: order_by
  business_photo: order_by
  business_scope: order_by
  check_status: order_by
  city_id: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  display_number: order_by
  district_id: order_by
  enterprise_address: order_by
  enterprise_code: order_by
  enterprise_id: order_by
  enterprise_level: order_by
  enterprise_name: order_by
  enterprise_nature: order_by
  entrusted_agent: order_by
  entrusted_agent_id_card: order_by
  entrusted_agent_id_card_photo: order_by
  entrusted_agent_phone: order_by
  fax_number: order_by
  id: order_by
  institution_category: order_by
  legal_representative: order_by
  legal_representative_id_card: order_by
  legal_representative_id_card_photo: order_by
  legal_representative_phone: order_by
  operating_license_photo: order_by
  organization_code: order_by
  organization_code_certificate_photo: order_by
  police_station_id: order_by
  province_id: order_by
  record_at: order_by
  record_by: order_by
  remarks: order_by
  score: order_by
  superior_enterprise_id: order_by
  update_at: order_by
  update_by: order_by
  update_time_in: order_by
}

"""aggregate min on columns"""
type enterprise_min_fields {
  association_review_by: timestamptz
  association_review_opinion: String
  association_review_time: timestamptz
  brigade_id: String
  brigade_review_by: String
  brigade_review_opinion: String
  brigade_review_time: timestamptz
  business_license_expiry_date: timestamptz
  business_license_issuance_date: timestamptz
  business_license_photo: String
  business_photo: String
  business_scope: Int
  check_status: Int
  city_id: bigint
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  display_number: Int
  district_id: bigint
  enterprise_address: String
  enterprise_code: String
  enterprise_id: String
  enterprise_level: Int
  enterprise_name: String
  enterprise_nature: Int
  entrusted_agent: String
  entrusted_agent_id_card: String
  entrusted_agent_id_card_photo: String
  entrusted_agent_phone: String
  fax_number: String
  id: bigint
  institution_category: bigint
  legal_representative: String
  legal_representative_id_card: String
  legal_representative_id_card_photo: String
  legal_representative_phone: String
  operating_license_photo: String
  organization_code: String
  organization_code_certificate_photo: String
  police_station_id: String
  province_id: bigint
  record_at: timestamptz
  record_by: String
  remarks: String
  score: Int
  superior_enterprise_id: String
  update_at: timestamptz
  update_by: String
  update_time_in: timestamptz
}

"""
order by min() on columns of table "enterprise"
"""
input enterprise_min_order_by {
  association_review_by: order_by
  association_review_opinion: order_by
  association_review_time: order_by
  brigade_id: order_by
  brigade_review_by: order_by
  brigade_review_opinion: order_by
  brigade_review_time: order_by
  business_license_expiry_date: order_by
  business_license_issuance_date: order_by
  business_license_photo: order_by
  business_photo: order_by
  business_scope: order_by
  check_status: order_by
  city_id: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  display_number: order_by
  district_id: order_by
  enterprise_address: order_by
  enterprise_code: order_by
  enterprise_id: order_by
  enterprise_level: order_by
  enterprise_name: order_by
  enterprise_nature: order_by
  entrusted_agent: order_by
  entrusted_agent_id_card: order_by
  entrusted_agent_id_card_photo: order_by
  entrusted_agent_phone: order_by
  fax_number: order_by
  id: order_by
  institution_category: order_by
  legal_representative: order_by
  legal_representative_id_card: order_by
  legal_representative_id_card_photo: order_by
  legal_representative_phone: order_by
  operating_license_photo: order_by
  organization_code: order_by
  organization_code_certificate_photo: order_by
  police_station_id: order_by
  province_id: order_by
  record_at: order_by
  record_by: order_by
  remarks: order_by
  score: order_by
  superior_enterprise_id: order_by
  update_at: order_by
  update_by: order_by
  update_time_in: order_by
}

"""
response of any mutation on the table "enterprise"
"""
type enterprise_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [enterprise!]!
}

"""
input type for inserting object relation for remote table "enterprise"
"""
input enterprise_obj_rel_insert_input {
  data: enterprise_insert_input!
  on_conflict: enterprise_on_conflict
}

"""
on conflict condition type for table "enterprise"
"""
input enterprise_on_conflict {
  constraint: enterprise_constraint!
  update_columns: [enterprise_update_column!]!
  where: enterprise_bool_exp
}

"""
ordering options when selecting data from "enterprise"
"""
input enterprise_order_by {
  association_review_by: order_by
  association_review_opinion: order_by
  association_review_time: order_by
  brigade_id: order_by
  brigade_review_by: order_by
  brigade_review_opinion: order_by
  brigade_review_time: order_by
  business_license_expiry_date: order_by
  business_license_issuance_date: order_by
  business_license_photo: order_by
  business_photo: order_by
  business_scope: order_by
  check_status: order_by
  city_id: order_by
  contact_persons: order_by
  create_at: order_by
  create_by: order_by
  delete_at: order_by
  delete_by: order_by
  display_number: order_by
  district_id: order_by
  enterprise_address: order_by
  enterprise_code: order_by
  enterprise_id: order_by
  enterprise_level: order_by
  enterprise_name: order_by
  enterprise_nature: order_by
  entrusted_agent: order_by
  entrusted_agent_id_card: order_by
  entrusted_agent_id_card_photo: order_by
  entrusted_agent_phone: order_by
  fax_number: order_by
  id: order_by
  institution_category: order_by
  is_black: order_by
  is_deleted: order_by
  is_input: order_by
  is_install: order_by
  is_upload_province: order_by
  legal_representative: order_by
  legal_representative_id_card: order_by
  legal_representative_id_card_photo: order_by
  legal_representative_phone: order_by
  operating_license_photo: order_by
  organization_code: order_by
  organization_code_certificate_photo: order_by
  police_station_id: order_by
  province_id: order_by
  record_at: order_by
  record_by: order_by
  remarks: order_by
  score: order_by
  superior_enterprise_id: order_by
  update_at: order_by
  update_by: order_by
  update_time_in: order_by
}

"""
primary key columns input for table: "enterprise"
"""
input enterprise_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "enterprise"
"""
enum enterprise_select_column {
  """column name"""
  association_review_by

  """column name"""
  association_review_opinion

  """column name"""
  association_review_time

  """column name"""
  brigade_id

  """column name"""
  brigade_review_by

  """column name"""
  brigade_review_opinion

  """column name"""
  brigade_review_time

  """column name"""
  business_license_expiry_date

  """column name"""
  business_license_issuance_date

  """column name"""
  business_license_photo

  """column name"""
  business_photo

  """column name"""
  business_scope

  """column name"""
  check_status

  """column name"""
  city_id

  """column name"""
  contact_persons

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  display_number

  """column name"""
  district_id

  """column name"""
  enterprise_address

  """column name"""
  enterprise_code

  """column name"""
  enterprise_id

  """column name"""
  enterprise_level

  """column name"""
  enterprise_name

  """column name"""
  enterprise_nature

  """column name"""
  entrusted_agent

  """column name"""
  entrusted_agent_id_card

  """column name"""
  entrusted_agent_id_card_photo

  """column name"""
  entrusted_agent_phone

  """column name"""
  fax_number

  """column name"""
  id

  """column name"""
  institution_category

  """column name"""
  is_black

  """column name"""
  is_deleted

  """column name"""
  is_input

  """column name"""
  is_install

  """column name"""
  is_upload_province

  """column name"""
  legal_representative

  """column name"""
  legal_representative_id_card

  """column name"""
  legal_representative_id_card_photo

  """column name"""
  legal_representative_phone

  """column name"""
  operating_license_photo

  """column name"""
  organization_code

  """column name"""
  organization_code_certificate_photo

  """column name"""
  police_station_id

  """column name"""
  province_id

  """column name"""
  record_at

  """column name"""
  record_by

  """column name"""
  remarks

  """column name"""
  score

  """column name"""
  superior_enterprise_id

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  update_time_in
}

"""
input type for updating data in table "enterprise"
"""
input enterprise_set_input {
  association_review_by: timestamptz
  association_review_opinion: String
  association_review_time: timestamptz
  brigade_id: String
  brigade_review_by: String
  brigade_review_opinion: String
  brigade_review_time: timestamptz
  business_license_expiry_date: timestamptz
  business_license_issuance_date: timestamptz
  business_license_photo: String
  business_photo: String
  business_scope: Int
  check_status: Int
  city_id: bigint
  contact_persons: _jsonb
  create_at: timestamptz
  create_by: String
  delete_at: timestamptz
  delete_by: String
  display_number: Int
  district_id: bigint
  enterprise_address: String
  enterprise_code: String
  enterprise_id: String
  enterprise_level: Int
  enterprise_name: String
  enterprise_nature: Int
  entrusted_agent: String
  entrusted_agent_id_card: String
  entrusted_agent_id_card_photo: String
  entrusted_agent_phone: String
  fax_number: String
  id: bigint
  institution_category: bigint
  is_black: Boolean
  is_deleted: Boolean
  is_input: Boolean
  is_install: Boolean
  is_upload_province: Boolean
  legal_representative: String
  legal_representative_id_card: String
  legal_representative_id_card_photo: String
  legal_representative_phone: String
  operating_license_photo: String
  organization_code: String
  organization_code_certificate_photo: String
  police_station_id: String
  province_id: bigint
  record_at: timestamptz
  record_by: String
  remarks: String
  score: Int
  superior_enterprise_id: String
  update_at: timestamptz
  update_by: String
  update_time_in: timestamptz
}

"""aggregate stddev on columns"""
type enterprise_stddev_fields {
  business_scope: Float
  check_status: Float
  city_id: Float
  display_number: Float
  district_id: Float
  enterprise_level: Float
  enterprise_nature: Float
  id: Float
  institution_category: Float
  province_id: Float
  score: Float
}

"""
order by stddev() on columns of table "enterprise"
"""
input enterprise_stddev_order_by {
  business_scope: order_by
  check_status: order_by
  city_id: order_by
  display_number: order_by
  district_id: order_by
  enterprise_level: order_by
  enterprise_nature: order_by
  id: order_by
  institution_category: order_by
  province_id: order_by
  score: order_by
}

"""aggregate stddev_pop on columns"""
type enterprise_stddev_pop_fields {
  business_scope: Float
  check_status: Float
  city_id: Float
  display_number: Float
  district_id: Float
  enterprise_level: Float
  enterprise_nature: Float
  id: Float
  institution_category: Float
  province_id: Float
  score: Float
}

"""
order by stddev_pop() on columns of table "enterprise"
"""
input enterprise_stddev_pop_order_by {
  business_scope: order_by
  check_status: order_by
  city_id: order_by
  display_number: order_by
  district_id: order_by
  enterprise_level: order_by
  enterprise_nature: order_by
  id: order_by
  institution_category: order_by
  province_id: order_by
  score: order_by
}

"""aggregate stddev_samp on columns"""
type enterprise_stddev_samp_fields {
  business_scope: Float
  check_status: Float
  city_id: Float
  display_number: Float
  district_id: Float
  enterprise_level: Float
  enterprise_nature: Float
  id: Float
  institution_category: Float
  province_id: Float
  score: Float
}

"""
order by stddev_samp() on columns of table "enterprise"
"""
input enterprise_stddev_samp_order_by {
  business_scope: order_by
  check_status: order_by
  city_id: order_by
  display_number: order_by
  district_id: order_by
  enterprise_level: order_by
  enterprise_nature: order_by
  id: order_by
  institution_category: order_by
  province_id: order_by
  score: order_by
}

"""aggregate sum on columns"""
type enterprise_sum_fields {
  business_scope: Int
  check_status: Int
  city_id: bigint
  display_number: Int
  district_id: bigint
  enterprise_level: Int
  enterprise_nature: Int
  id: bigint
  institution_category: bigint
  province_id: bigint
  score: Int
}

"""
order by sum() on columns of table "enterprise"
"""
input enterprise_sum_order_by {
  business_scope: order_by
  check_status: order_by
  city_id: order_by
  display_number: order_by
  district_id: order_by
  enterprise_level: order_by
  enterprise_nature: order_by
  id: order_by
  institution_category: order_by
  province_id: order_by
  score: order_by
}

"""
update columns of table "enterprise"
"""
enum enterprise_update_column {
  """column name"""
  association_review_by

  """column name"""
  association_review_opinion

  """column name"""
  association_review_time

  """column name"""
  brigade_id

  """column name"""
  brigade_review_by

  """column name"""
  brigade_review_opinion

  """column name"""
  brigade_review_time

  """column name"""
  business_license_expiry_date

  """column name"""
  business_license_issuance_date

  """column name"""
  business_license_photo

  """column name"""
  business_photo

  """column name"""
  business_scope

  """column name"""
  check_status

  """column name"""
  city_id

  """column name"""
  contact_persons

  """column name"""
  create_at

  """column name"""
  create_by

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  display_number

  """column name"""
  district_id

  """column name"""
  enterprise_address

  """column name"""
  enterprise_code

  """column name"""
  enterprise_id

  """column name"""
  enterprise_level

  """column name"""
  enterprise_name

  """column name"""
  enterprise_nature

  """column name"""
  entrusted_agent

  """column name"""
  entrusted_agent_id_card

  """column name"""
  entrusted_agent_id_card_photo

  """column name"""
  entrusted_agent_phone

  """column name"""
  fax_number

  """column name"""
  id

  """column name"""
  institution_category

  """column name"""
  is_black

  """column name"""
  is_deleted

  """column name"""
  is_input

  """column name"""
  is_install

  """column name"""
  is_upload_province

  """column name"""
  legal_representative

  """column name"""
  legal_representative_id_card

  """column name"""
  legal_representative_id_card_photo

  """column name"""
  legal_representative_phone

  """column name"""
  operating_license_photo

  """column name"""
  organization_code

  """column name"""
  organization_code_certificate_photo

  """column name"""
  police_station_id

  """column name"""
  province_id

  """column name"""
  record_at

  """column name"""
  record_by

  """column name"""
  remarks

  """column name"""
  score

  """column name"""
  superior_enterprise_id

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  update_time_in
}

"""aggregate var_pop on columns"""
type enterprise_var_pop_fields {
  business_scope: Float
  check_status: Float
  city_id: Float
  display_number: Float
  district_id: Float
  enterprise_level: Float
  enterprise_nature: Float
  id: Float
  institution_category: Float
  province_id: Float
  score: Float
}

"""
order by var_pop() on columns of table "enterprise"
"""
input enterprise_var_pop_order_by {
  business_scope: order_by
  check_status: order_by
  city_id: order_by
  display_number: order_by
  district_id: order_by
  enterprise_level: order_by
  enterprise_nature: order_by
  id: order_by
  institution_category: order_by
  province_id: order_by
  score: order_by
}

"""aggregate var_samp on columns"""
type enterprise_var_samp_fields {
  business_scope: Float
  check_status: Float
  city_id: Float
  display_number: Float
  district_id: Float
  enterprise_level: Float
  enterprise_nature: Float
  id: Float
  institution_category: Float
  province_id: Float
  score: Float
}

"""
order by var_samp() on columns of table "enterprise"
"""
input enterprise_var_samp_order_by {
  business_scope: order_by
  check_status: order_by
  city_id: order_by
  display_number: order_by
  district_id: order_by
  enterprise_level: order_by
  enterprise_nature: order_by
  id: order_by
  institution_category: order_by
  province_id: order_by
  score: order_by
}

"""aggregate variance on columns"""
type enterprise_variance_fields {
  business_scope: Float
  check_status: Float
  city_id: Float
  display_number: Float
  district_id: Float
  enterprise_level: Float
  enterprise_nature: Float
  id: Float
  institution_category: Float
  province_id: Float
  score: Float
}

"""
order by variance() on columns of table "enterprise"
"""
input enterprise_variance_order_by {
  business_scope: order_by
  check_status: order_by
  city_id: order_by
  display_number: order_by
  district_id: order_by
  enterprise_level: order_by
  enterprise_nature: order_by
  id: order_by
  institution_category: order_by
  province_id: order_by
  score: order_by
}


extend type Mutation {
  """
  delete data from the table: "enterprise"
  """
  delete_enterprise(
    """filter the rows which have to be deleted"""
    where: enterprise_bool_exp!
  ): enterprise_mutation_response

  """
  delete single row from the table: "enterprise"
  """
  delete_enterprise_by_pk(
    """ID"""
    id: bigint!
  ): enterprise

  """
  insert data into the table: "enterprise"
  """
  insert_enterprise(
    """the rows to be inserted"""
    objects: [enterprise_insert_input!]!

    """on conflict condition"""
    on_conflict: enterprise_on_conflict
  ): enterprise_mutation_response

  """
  insert a single row into the table: "enterprise"
  """
  insert_enterprise_one(
    """the row to be inserted"""
    object: enterprise_insert_input!

    """on conflict condition"""
    on_conflict: enterprise_on_conflict
  ): enterprise

  """
  update data of the table: "enterprise"
  """
  update_enterprise(
    """increments the integer columns with given value of the filtered values"""
    _inc: enterprise_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: enterprise_set_input

    """filter the rows which have to be updated"""
    where: enterprise_bool_exp!
  ): enterprise_mutation_response

  """
  update single row of the table: "enterprise"
  """
  update_enterprise_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: enterprise_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: enterprise_set_input
    pk_columns: enterprise_pk_columns_input!
  ): enterprise
}

extend type Query {
  """
  fetch data from the table: "enterprise"
  """
  enterprise(
    """distinct select on columns"""
    distinct_on: [enterprise_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enterprise_order_by!]

    """filter the rows returned"""
    where: enterprise_bool_exp
  ): [enterprise!]!

  """
  fetch aggregated fields from the table: "enterprise"
  """
  enterprise_aggregate(
    """distinct select on columns"""
    distinct_on: [enterprise_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [enterprise_order_by!]

    """filter the rows returned"""
    where: enterprise_bool_exp
  ): enterprise_aggregate!

  """fetch data from the table: "enterprise" using primary key columns"""
  enterprise_by_pk(
    """ID"""
    id: bigint!
  ): enterprise
}
`, BuiltIn: false},
	{Name: "graph/graphqls/system_user.graphqls", Input: `
extend type Mutation {
  """
  delete data from the table: "system_user"
  """
  delete_system_user(
    """filter the rows which have to be deleted"""
    where: system_user_bool_exp!
  ): system_user_mutation_response

  """
  delete single row from the table: "system_user"
  """
  delete_system_user_by_pk(
    """ID"""
    id: bigint!
  ): system_user

  """
  insert data into the table: "system_user"
  """
  insert_system_user(
    """the rows to be inserted"""
    objects: [system_user_insert_input!]!

    """on conflict condition"""
    on_conflict: system_user_on_conflict
  ): system_user_mutation_response

  """
  insert a single row into the table: "system_user"
  """
  insert_system_user_one(
    """the row to be inserted"""
    object: system_user_insert_input!

    """on conflict condition"""
    on_conflict: system_user_on_conflict
  ): system_user

  """
  update data of the table: "system_user"
  """
  update_system_user(
    """increments the integer columns with given value of the filtered values"""
    _inc: system_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: system_user_set_input

    """filter the rows which have to be updated"""
    where: system_user_bool_exp!
  ): system_user_mutation_response

  """
  update single row of the table: "system_user"
  """
  update_system_user_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: system_user_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: system_user_set_input
    pk_columns: system_user_pk_columns_input!
  ): system_user
}

extend type Query {
  """
  fetch data from the table: "system_user"
  """
  system_user(
    """distinct select on columns"""
    distinct_on: [system_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_user_order_by!]

    """filter the rows returned"""
    where: system_user_bool_exp
  ): [system_user!]!

  """
  fetch aggregated fields from the table: "system_user"
  """
  system_user_aggregate(
    """distinct select on columns"""
    distinct_on: [system_user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_user_order_by!]

    """filter the rows returned"""
    where: system_user_bool_exp
  ): system_user_aggregate!

  """fetch data from the table: "system_user" using primary key columns"""
  system_user_by_pk(
    """ID"""
    id: bigint!
  ): system_user
}

"""
系统用户


columns and relationships of "system_user"

"""
type system_user {
  """是否绑定IP"""
  Is_bind_ip: Boolean

  """客户端版本号"""
  app_version: String

  """审核等级"""
  audit_level: Int

  """创建人"""
  create_by: String

  """创建时间"""
  created_at: timestamptz

  """删除时间"""
  delete_at: timestamptz

  """删除人"""
  delete_by: String

  """部门ID"""
  department_id: String

  """邮箱"""
  email: String

  """企业ID"""
  enterprise_id: String

  """级别"""
  grade: Int

  """ID"""
  id: bigint!

  """ip地址"""
  ip_address: String

  """是否删除"""
  is_delete: Boolean!

  """是否有效"""
  is_valid: Boolean

  """手机串号"""
  mkey: String

  """手机号码"""
  mobile: String

  """密码"""
  password: String!
  proxy_user: String

  """备注"""
  remarks: String

  """电话号码"""
  telephone: String

  """用户名"""
  username: String!

  """加密串码"""
  ukey: String

  """修改时间"""
  update_at: timestamptz

  """修改人"""
  update_by: String

  """用户ID"""
  user_id: String!

  """状态"""
  user_state: Int

  """用户类型"""
  user_type: Int
}

"""
aggregated selection of "system_user"
"""
type system_user_aggregate {
  aggregate: system_user_aggregate_fields
  nodes: [system_user!]!
}

"""
aggregate fields of "system_user"
"""
type system_user_aggregate_fields {
  avg: system_user_avg_fields
  count(columns: [system_user_select_column!], distinct: Boolean): Int
  max: system_user_max_fields
  min: system_user_min_fields
  stddev: system_user_stddev_fields
  stddev_pop: system_user_stddev_pop_fields
  stddev_samp: system_user_stddev_samp_fields
  sum: system_user_sum_fields
  var_pop: system_user_var_pop_fields
  var_samp: system_user_var_samp_fields
  variance: system_user_variance_fields
}

"""
order by aggregate values of table "system_user"
"""
input system_user_aggregate_order_by {
  avg: system_user_avg_order_by
  count: order_by
  max: system_user_max_order_by
  min: system_user_min_order_by
  stddev: system_user_stddev_order_by
  stddev_pop: system_user_stddev_pop_order_by
  stddev_samp: system_user_stddev_samp_order_by
  sum: system_user_sum_order_by
  var_pop: system_user_var_pop_order_by
  var_samp: system_user_var_samp_order_by
  variance: system_user_variance_order_by
}

"""
input type for inserting array relation for remote table "system_user"
"""
input system_user_arr_rel_insert_input {
  data: [system_user_insert_input!]!
  on_conflict: system_user_on_conflict
}

"""aggregate avg on columns"""
type system_user_avg_fields {
  audit_level: Float
  grade: Float
  id: Float
  user_state: Float
  user_type: Float
}

"""
order by avg() on columns of table "system_user"
"""
input system_user_avg_order_by {
  audit_level: order_by
  grade: order_by
  id: order_by
  user_state: order_by
  user_type: order_by
}

"""
Boolean expression to filter rows from the table "system_user". All fields are combined with a logical 'AND'.
"""
input system_user_bool_exp {
  Is_bind_ip: Boolean_comparison_exp
  _and: [system_user_bool_exp]
  _not: system_user_bool_exp
  _or: [system_user_bool_exp]
  app_version: String_comparison_exp
  audit_level: Int_comparison_exp
  create_by: String_comparison_exp
  created_at: timestamptz_comparison_exp
  delete_at: timestamptz_comparison_exp
  delete_by: String_comparison_exp
  department_id: String_comparison_exp
  email: String_comparison_exp
  enterprise_id: String_comparison_exp
  grade: Int_comparison_exp
  id: bigint_comparison_exp
  ip_address: String_comparison_exp
  is_delete: Boolean_comparison_exp
  is_valid: Boolean_comparison_exp
  mkey: String_comparison_exp
  mobile: String_comparison_exp
  password: String_comparison_exp
  proxy_user: String_comparison_exp
  remarks: String_comparison_exp
  telephone: String_comparison_exp
  username: String_comparison_exp
  ukey: String_comparison_exp
  update_at: timestamptz_comparison_exp
  update_by: String_comparison_exp
  user_id: String_comparison_exp
  user_state: Int_comparison_exp
  user_type: Int_comparison_exp
}

"""
unique or primary key constraints on table "system_user"
"""
enum system_user_constraint {
  """unique or primary key constraint"""
  system_user_pkey
}

"""
input type for incrementing integer column in table "system_user"
"""
input system_user_inc_input {
  audit_level: Int
  grade: Int
  id: bigint
  user_state: Int
  user_type: Int
}

"""
input type for inserting data into table "system_user"
"""
input system_user_insert_input {
  Is_bind_ip: Boolean
  app_version: String
  audit_level: Int
  create_by: String
  created_at: timestamptz
  delete_at: timestamptz
  delete_by: String
  department_id: String
  email: String
  enterprise_id: String
  grade: Int
  id: bigint
  ip_address: String
  is_delete: Boolean
  is_valid: Boolean
  mkey: String
  mobile: String
  password: String
  proxy_user: String
  remarks: String
  telephone: String
  username: String
  ukey: String
  update_at: timestamptz
  update_by: String
  user_id: String
  user_state: Int
  user_type: Int
}

"""aggregate max on columns"""
type system_user_max_fields {
  app_version: String
  audit_level: Int
  create_by: String
  created_at: timestamptz
  delete_at: timestamptz
  delete_by: String
  department_id: String
  email: String
  enterprise_id: String
  grade: Int
  id: bigint
  ip_address: String
  mkey: String
  mobile: String
  password: String
  proxy_user: String
  remarks: String
  telephone: String
  username: String
  ukey: String
  update_at: timestamptz
  update_by: String
  user_id: String
  user_state: Int
  user_type: Int
}

"""
order by max() on columns of table "system_user"
"""
input system_user_max_order_by {
  app_version: order_by
  audit_level: order_by
  create_by: order_by
  created_at: order_by
  delete_at: order_by
  delete_by: order_by
  department_id: order_by
  email: order_by
  enterprise_id: order_by
  grade: order_by
  id: order_by
  ip_address: order_by
  mkey: order_by
  mobile: order_by
  password: order_by
  proxy_user: order_by
  remarks: order_by
  telephone: order_by
  username: order_by
  ukey: order_by
  update_at: order_by
  update_by: order_by
  user_id: order_by
  user_state: order_by
  user_type: order_by
}

"""aggregate min on columns"""
type system_user_min_fields {
  app_version: String
  audit_level: Int
  create_by: String
  created_at: timestamptz
  delete_at: timestamptz
  delete_by: String
  department_id: String
  email: String
  enterprise_id: String
  grade: Int
  id: bigint
  ip_address: String
  mkey: String
  mobile: String
  password: String
  proxy_user: String
  remarks: String
  telephone: String
  username: String
  ukey: String
  update_at: timestamptz
  update_by: String
  user_id: String
  user_state: Int
  user_type: Int
}

"""
order by min() on columns of table "system_user"
"""
input system_user_min_order_by {
  app_version: order_by
  audit_level: order_by
  create_by: order_by
  created_at: order_by
  delete_at: order_by
  delete_by: order_by
  department_id: order_by
  email: order_by
  enterprise_id: order_by
  grade: order_by
  id: order_by
  ip_address: order_by
  mkey: order_by
  mobile: order_by
  password: order_by
  proxy_user: order_by
  remarks: order_by
  telephone: order_by
  username: order_by
  ukey: order_by
  update_at: order_by
  update_by: order_by
  user_id: order_by
  user_state: order_by
  user_type: order_by
}

"""
response of any mutation on the table "system_user"
"""
type system_user_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [system_user!]!
}

"""
input type for inserting object relation for remote table "system_user"
"""
input system_user_obj_rel_insert_input {
  data: system_user_insert_input!
  on_conflict: system_user_on_conflict
}

"""
on conflict condition type for table "system_user"
"""
input system_user_on_conflict {
  constraint: system_user_constraint!
  update_columns: [system_user_update_column!]!
  where: system_user_bool_exp
}

"""
ordering options when selecting data from "system_user"
"""
input system_user_order_by {
  Is_bind_ip: order_by
  app_version: order_by
  audit_level: order_by
  create_by: order_by
  created_at: order_by
  delete_at: order_by
  delete_by: order_by
  department_id: order_by
  email: order_by
  enterprise_id: order_by
  grade: order_by
  id: order_by
  ip_address: order_by
  is_delete: order_by
  is_valid: order_by
  mkey: order_by
  mobile: order_by
  password: order_by
  proxy_user: order_by
  remarks: order_by
  telephone: order_by
  username: order_by
  ukey: order_by
  update_at: order_by
  update_by: order_by
  user_id: order_by
  user_state: order_by
  user_type: order_by
}

"""
primary key columns input for table: "system_user"
"""
input system_user_pk_columns_input {
  """ID"""
  id: bigint!
}

"""
select columns of table "system_user"
"""
enum system_user_select_column {
  """column name"""
  Is_bind_ip

  """column name"""
  app_version

  """column name"""
  audit_level

  """column name"""
  create_by

  """column name"""
  created_at

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  department_id

  """column name"""
  email

  """column name"""
  enterprise_id

  """column name"""
  grade

  """column name"""
  id

  """column name"""
  ip_address

  """column name"""
  is_delete

  """column name"""
  is_valid

  """column name"""
  mkey

  """column name"""
  mobile

  """column name"""
  password

  """column name"""
  proxy_user

  """column name"""
  remarks

  """column name"""
  telephone

  """column name"""
  username

  """column name"""
  ukey

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  user_id

  """column name"""
  user_state

  """column name"""
  user_type
}

"""
input type for updating data in table "system_user"
"""
input system_user_set_input {
  Is_bind_ip: Boolean
  app_version: String
  audit_level: Int
  create_by: String
  created_at: timestamptz
  delete_at: timestamptz
  delete_by: String
  department_id: String
  email: String
  enterprise_id: String
  grade: Int
  id: bigint
  ip_address: String
  is_delete: Boolean
  is_valid: Boolean
  mkey: String
  mobile: String
  password: String
  proxy_user: String
  remarks: String
  telephone: String
  username: String
  ukey: String
  update_at: timestamptz
  update_by: String
  user_id: String
  user_state: Int
  user_type: Int
}

"""aggregate stddev on columns"""
type system_user_stddev_fields {
  audit_level: Float
  grade: Float
  id: Float
  user_state: Float
  user_type: Float
}

"""
order by stddev() on columns of table "system_user"
"""
input system_user_stddev_order_by {
  audit_level: order_by
  grade: order_by
  id: order_by
  user_state: order_by
  user_type: order_by
}

"""aggregate stddev_pop on columns"""
type system_user_stddev_pop_fields {
  audit_level: Float
  grade: Float
  id: Float
  user_state: Float
  user_type: Float
}

"""
order by stddev_pop() on columns of table "system_user"
"""
input system_user_stddev_pop_order_by {
  audit_level: order_by
  grade: order_by
  id: order_by
  user_state: order_by
  user_type: order_by
}

"""aggregate stddev_samp on columns"""
type system_user_stddev_samp_fields {
  audit_level: Float
  grade: Float
  id: Float
  user_state: Float
  user_type: Float
}

"""
order by stddev_samp() on columns of table "system_user"
"""
input system_user_stddev_samp_order_by {
  audit_level: order_by
  grade: order_by
  id: order_by
  user_state: order_by
  user_type: order_by
}

"""aggregate sum on columns"""
type system_user_sum_fields {
  audit_level: Int
  grade: Int
  id: bigint
  user_state: Int
  user_type: Int
}

"""
order by sum() on columns of table "system_user"
"""
input system_user_sum_order_by {
  audit_level: order_by
  grade: order_by
  id: order_by
  user_state: order_by
  user_type: order_by
}

"""
update columns of table "system_user"
"""
enum system_user_update_column {
  """column name"""
  Is_bind_ip

  """column name"""
  app_version

  """column name"""
  audit_level

  """column name"""
  create_by

  """column name"""
  created_at

  """column name"""
  delete_at

  """column name"""
  delete_by

  """column name"""
  department_id

  """column name"""
  email

  """column name"""
  enterprise_id

  """column name"""
  grade

  """column name"""
  id

  """column name"""
  ip_address

  """column name"""
  is_delete

  """column name"""
  is_valid

  """column name"""
  mkey

  """column name"""
  mobile

  """column name"""
  password

  """column name"""
  proxy_user

  """column name"""
  remarks

  """column name"""
  telephone

  """column name"""
  username

  """column name"""
  ukey

  """column name"""
  update_at

  """column name"""
  update_by

  """column name"""
  user_id

  """column name"""
  user_state

  """column name"""
  user_type
}

"""aggregate var_pop on columns"""
type system_user_var_pop_fields {
  audit_level: Float
  grade: Float
  id: Float
  user_state: Float
  user_type: Float
}

"""
order by var_pop() on columns of table "system_user"
"""
input system_user_var_pop_order_by {
  audit_level: order_by
  grade: order_by
  id: order_by
  user_state: order_by
  user_type: order_by
}

"""aggregate var_samp on columns"""
type system_user_var_samp_fields {
  audit_level: Float
  grade: Float
  id: Float
  user_state: Float
  user_type: Float
}

"""
order by var_samp() on columns of table "system_user"
"""
input system_user_var_samp_order_by {
  audit_level: order_by
  grade: order_by
  id: order_by
  user_state: order_by
  user_type: order_by
}

"""aggregate variance on columns"""
type system_user_variance_fields {
  audit_level: Float
  grade: Float
  id: Float
  user_state: Float
  user_type: Float
}

"""
order by variance() on columns of table "system_user"
"""
input system_user_variance_order_by {
  audit_level: order_by
  grade: order_by
  id: order_by
  user_state: order_by
  user_type: order_by
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdepartment_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_department_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNenterprise_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_enterprise_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNsystem_user_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_system_user_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DepartmentInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdepartment_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DepartmentOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdepartment_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_department_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DepartmentInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdepartment_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DepartmentOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdepartment_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.EnterpriseInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNenterprise_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.EnterpriseOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOenterprise_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_enterprise_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNenterprise_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.EnterpriseOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOenterprise_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.SystemUserInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNsystem_user_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.SystemUserOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOsystem_user_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_system_user_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SystemUserInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNsystem_user_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.SystemUserOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOsystem_user_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DepartmentIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdepartment_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DepartmentSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdepartment_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdepartment_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_department_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DepartmentIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdepartment_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DepartmentSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdepartment_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DepartmentPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdepartment_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOenterprise_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOenterprise_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNenterprise_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_enterprise_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOenterprise_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.EnterpriseSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOenterprise_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.EnterprisePkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNenterprise_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterprisePkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SystemUserIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOsystem_user_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SystemUserSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOsystem_user_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNsystem_user_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_system_user_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SystemUserIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOsystem_user_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.SystemUserSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOsystem_user_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.SystemUserPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNsystem_user_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_department_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DepartmentSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdepartment_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DepartmentOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdepartment_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdepartment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DepartmentSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdepartment_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DepartmentOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdepartment_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DepartmentBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdepartment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_department_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOenterprise_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.EnterpriseOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOenterprise_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.EnterpriseBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOenterprise_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_system_user_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SystemUserSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOsystem_user_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SystemUserOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOsystem_user_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOsystem_user_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_system_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SystemUserSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOsystem_user_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.SystemUserOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOsystem_user_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.SystemUserBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOsystem_user_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_system_user_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_department_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DepartmentSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdepartment_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_enterprise_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.EnterpriseSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOenterprise_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_system_user_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.SystemUserSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOsystem_user_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDepartment(rctx, args["where"].(model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMutationResponse)
	fc.Result = res
	return ec.marshalOdepartment_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_department_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_department_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDepartmentByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalOdepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDepartment(rctx, args["objects"].([]*model.DepartmentInsertInput), args["on_conflict"].(*model.DepartmentOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMutationResponse)
	fc.Result = res
	return ec.marshalOdepartment_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_department_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_department_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDepartmentOne(rctx, args["object"].(model.DepartmentInsertInput), args["on_conflict"].(*model.DepartmentOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalOdepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDepartment(rctx, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["where"].(model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMutationResponse)
	fc.Result = res
	return ec.marshalOdepartment_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_department_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_department_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDepartmentByPk(rctx, args["_inc"].(*model.DepartmentIncInput), args["_set"].(*model.DepartmentSetInput), args["pk_columns"].(model.DepartmentPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalOdepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterprise(rctx, args["where"].(model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMutationResponse)
	fc.Result = res
	return ec.marshalOenterprise_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_enterprise_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_enterprise_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEnterpriseByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOenterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterprise(rctx, args["objects"].([]*model.EnterpriseInsertInput), args["on_conflict"].(*model.EnterpriseOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMutationResponse)
	fc.Result = res
	return ec.marshalOenterprise_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_enterprise_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_enterprise_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertEnterpriseOne(rctx, args["object"].(model.EnterpriseInsertInput), args["on_conflict"].(*model.EnterpriseOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOenterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterprise(rctx, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["where"].(model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMutationResponse)
	fc.Result = res
	return ec.marshalOenterprise_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_enterprise_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_enterprise_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterpriseByPk(rctx, args["_inc"].(*model.EnterpriseIncInput), args["_set"].(*model.EnterpriseSetInput), args["pk_columns"].(model.EnterprisePkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOenterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemUser(rctx, args["where"].(model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMutationResponse)
	fc.Result = res
	return ec.marshalOsystem_user_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_system_user_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_system_user_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemUserByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOsystem_user2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSystemUser(rctx, args["objects"].([]*model.SystemUserInsertInput), args["on_conflict"].(*model.SystemUserOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMutationResponse)
	fc.Result = res
	return ec.marshalOsystem_user_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_system_user_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_system_user_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertSystemUserOne(rctx, args["object"].(model.SystemUserInsertInput), args["on_conflict"].(*model.SystemUserOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOsystem_user2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemUser(rctx, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["where"].(model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMutationResponse)
	fc.Result = res
	return ec.marshalOsystem_user_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_system_user_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_system_user_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemUserByPk(rctx, args["_inc"].(*model.SystemUserIncInput), args["_set"].(*model.SystemUserSetInput), args["pk_columns"].(model.SystemUserPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOsystem_user2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Department(rctx, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Department)
	fc.Result = res
	return ec.marshalNdepartment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_department_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_department_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepartmentAggregate(rctx, args["distinct_on"].([]model.DepartmentSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DepartmentOrderBy), args["where"].(*model.DepartmentBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentAggregate)
	fc.Result = res
	return ec.marshalNdepartment_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_department_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_department_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepartmentByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Department)
	fc.Result = res
	return ec.marshalOdepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Enterprise(rctx, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Enterprise)
	fc.Result = res
	return ec.marshalNenterprise2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseAggregate(rctx, args["distinct_on"].([]model.EnterpriseSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.EnterpriseOrderBy), args["where"].(*model.EnterpriseBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAggregate)
	fc.Result = res
	return ec.marshalNenterprise_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.Enterprise)
	fc.Result = res
	return ec.marshalOenterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_system_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_system_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUser(rctx, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SystemUser)
	fc.Result = res
	return ec.marshalNsystem_user2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_system_user_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_system_user_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUserAggregate(rctx, args["distinct_on"].([]model.SystemUserSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.SystemUserOrderBy), args["where"].(*model.SystemUserBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserAggregate)
	fc.Result = res
	return ec.marshalNsystem_user_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_system_user_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_system_user_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUserByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.SystemUser)
	fc.Result = res
	return ec.marshalOsystem_user2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _department_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _department_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _department_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_department_category(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _department_department_code(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_department_id(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _department_department_name(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _department_id(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_internal_number(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _department_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _department_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_superior_department_id(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorDepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _department_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentAggregateFields)
	fc.Result = res
	return ec.marshalOdepartment_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Department)
	fc.Result = res
	return ec.marshalNdepartment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentAvgFields)
	fc.Result = res
	return ec.marshalOdepartment_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_department_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMaxFields)
	fc.Result = res
	return ec.marshalOdepartment_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentMinFields)
	fc.Result = res
	return ec.marshalOdepartment_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentStddevFields)
	fc.Result = res
	return ec.marshalOdepartment_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentStddevPopFields)
	fc.Result = res
	return ec.marshalOdepartment_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentStddevSampFields)
	fc.Result = res
	return ec.marshalOdepartment_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentSumFields)
	fc.Result = res
	return ec.marshalOdepartment_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentVarPopFields)
	fc.Result = res
	return ec.marshalOdepartment_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentVarSampFields)
	fc.Result = res
	return ec.marshalOdepartment_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _department_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentVarianceFields)
	fc.Result = res
	return ec.marshalOdepartment_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _department_avg_fields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_avg_fields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_department_code(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_department_name(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_superior_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorDepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _department_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_department_code(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_department_name(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_superior_department_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorDepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _department_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _department_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _department_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Department)
	fc.Result = res
	return ec.marshalNdepartment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _department_stddev_fields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_stddev_fields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_stddev_pop_fields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_stddev_pop_fields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_stddev_samp_fields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_stddev_samp_fields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_sum_fields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _department_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_sum_fields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _department_var_pop_fields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_var_pop_fields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_var_samp_fields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_var_samp_fields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_variance_fields_department_category(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _department_variance_fields_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "department_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_association_review_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_association_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_association_review_time(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_brigade_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_brigade_review_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_brigade_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_brigade_review_time(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_business_license_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_business_license_issuance_date(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseIssuanceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_business_license_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_business_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_business_scope(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_check_status(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_city_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_contact_persons(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPersons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalO_jsonb2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_create_at(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_display_number(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_enterprise_address(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_enterprise_code(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_entrusted_agent(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_entrusted_agent_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_entrusted_agent_phone(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_fax_number(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FaxNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_institution_category(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_is_black(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_is_input(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_is_install(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstall, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_is_upload_province(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUploadProvince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_legal_representative(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_legal_representative_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_legal_representative_phone(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_operating_license_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_organization_code(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_organization_code_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCodeCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_police_station_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliceStationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_province_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_record_at(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_record_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_score(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_superior_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model1.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAggregateFields)
	fc.Result = res
	return ec.marshalOenterprise_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Enterprise)
	fc.Result = res
	return ec.marshalNenterprise2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseAvgFields)
	fc.Result = res
	return ec.marshalOenterprise_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_enterprise_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMaxFields)
	fc.Result = res
	return ec.marshalOenterprise_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseMinFields)
	fc.Result = res
	return ec.marshalOenterprise_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStddevFields)
	fc.Result = res
	return ec.marshalOenterprise_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStddevPopFields)
	fc.Result = res
	return ec.marshalOenterprise_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseStddevSampFields)
	fc.Result = res
	return ec.marshalOenterprise_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseSumFields)
	fc.Result = res
	return ec.marshalOenterprise_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseVarPopFields)
	fc.Result = res
	return ec.marshalOenterprise_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseVarSampFields)
	fc.Result = res
	return ec.marshalOenterprise_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseVarianceFields)
	fc.Result = res
	return ec.marshalOenterprise_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_avg_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_avg_fields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_avg_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_avg_fields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_avg_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_avg_fields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_avg_fields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_avg_fields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_avg_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_avg_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_association_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_association_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_association_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_brigade_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_brigade_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_brigade_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_brigade_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_business_license_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_business_license_issuance_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseIssuanceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_business_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_business_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_enterprise_address(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_enterprise_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_entrusted_agent(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_entrusted_agent_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_entrusted_agent_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_fax_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FaxNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_legal_representative(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_legal_representative_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_legal_representative_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_operating_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_organization_code_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCodeCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_police_station_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliceStationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_record_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_record_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_superior_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_max_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_association_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_association_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_association_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_brigade_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_brigade_review_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_brigade_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_brigade_review_time(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_business_license_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_business_license_issuance_date(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseIssuanceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_business_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_business_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_create_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_enterprise_address(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_enterprise_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_entrusted_agent(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_entrusted_agent_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_entrusted_agent_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_fax_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FaxNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_legal_representative(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_legal_representative_id_card_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCardPhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_legal_representative_phone(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_operating_license_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingLicensePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_organization_code_certificate_photo(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCodeCertificatePhoto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_police_station_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliceStationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_record_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_record_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_superior_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorEnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_min_fields_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.Enterprise)
	fc.Result = res
	return ec.marshalNenterprise2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_fields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_fields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_fields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_fields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_fields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_pop_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_pop_fields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_pop_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_pop_fields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_pop_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_pop_fields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_pop_fields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_pop_fields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_pop_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_pop_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_samp_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_samp_fields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_samp_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_samp_fields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_samp_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_samp_fields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_samp_fields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_samp_fields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_samp_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_stddev_samp_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_sum_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_sum_fields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_sum_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_sum_fields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_sum_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_sum_fields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_sum_fields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_sum_fields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_sum_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_sum_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_pop_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_pop_fields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_pop_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_pop_fields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_pop_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_pop_fields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_pop_fields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_pop_fields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_pop_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_pop_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_samp_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_samp_fields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_samp_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_samp_fields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_samp_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_samp_fields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_samp_fields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_samp_fields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_samp_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_var_samp_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_variance_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_variance_fields_check_status(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_variance_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_variance_fields_display_number(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_variance_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_variance_fields_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_variance_fields_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_variance_fields_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_variance_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _enterprise_variance_fields_score(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "enterprise_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_Is_bind_ip(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBindIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_app_version(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_audit_level(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_create_by(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_delete_at(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_delete_by(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_department_id(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_email(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_grade(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_ip_address(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_is_delete(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_is_valid(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_mkey(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mkey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_mobile(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_password(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_proxy_user(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxyUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_telephone(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_username(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_ukey(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ukey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_update_at(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_update_by(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_user_state(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_user_type(ctx context.Context, field graphql.CollectedField, obj *model1.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserAggregateFields)
	fc.Result = res
	return ec.marshalOsystem_user_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SystemUser)
	fc.Result = res
	return ec.marshalNsystem_user2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserAvgFields)
	fc.Result = res
	return ec.marshalOsystem_user_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_system_user_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMaxFields)
	fc.Result = res
	return ec.marshalOsystem_user_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserMinFields)
	fc.Result = res
	return ec.marshalOsystem_user_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserStddevFields)
	fc.Result = res
	return ec.marshalOsystem_user_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserStddevPopFields)
	fc.Result = res
	return ec.marshalOsystem_user_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserStddevSampFields)
	fc.Result = res
	return ec.marshalOsystem_user_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserSumFields)
	fc.Result = res
	return ec.marshalOsystem_user_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserVarPopFields)
	fc.Result = res
	return ec.marshalOsystem_user_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserVarSampFields)
	fc.Result = res
	return ec.marshalOsystem_user_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserVarianceFields)
	fc.Result = res
	return ec.marshalOsystem_user_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_avg_fields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_avg_fields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_avg_fields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_avg_fields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_app_version(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_email(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_ip_address(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_mkey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mkey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_mobile(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_password(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_proxy_user(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxyUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_username(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_ukey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ukey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_max_fields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_app_version(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_create_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_email(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_ip_address(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_mkey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mkey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_mobile(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_password(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_proxy_user(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxyUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_username(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_ukey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ukey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_update_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_update_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_min_fields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.SystemUser)
	fc.Result = res
	return ec.marshalNsystem_user2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_fields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_fields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_fields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_fields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_pop_fields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_pop_fields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_pop_fields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_pop_fields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_samp_fields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_samp_fields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_samp_fields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_stddev_samp_fields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_sum_fields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_sum_fields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_sum_fields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_sum_fields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_var_pop_fields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_var_pop_fields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_var_pop_fields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_var_pop_fields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_var_samp_fields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_var_samp_fields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_var_samp_fields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_var_samp_fields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_variance_fields_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_variance_fields_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_variance_fields_user_state(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _system_user_variance_fields_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "system_user_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_jsonb_comparison_exp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_aggregate_order_by(ctx context.Context, obj interface{}) (model.DepartmentAggregateOrderBy, error) {
	var it model.DepartmentAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdepartment_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdepartment_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdepartment_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdepartment_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdepartment_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdepartment_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdepartment_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdepartment_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdepartment_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdepartment_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DepartmentArrRelInsertInput, error) {
	var it model.DepartmentArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdepartment_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdepartment_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_avg_order_by(ctx context.Context, obj interface{}) (model.DepartmentAvgOrderBy, error) {
	var it model.DepartmentAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_bool_exp(ctx context.Context, obj interface{}) (model.DepartmentBoolExp, error) {
	var it model.DepartmentBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdepartment_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdepartment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdepartment_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_inc_input(ctx context.Context, obj interface{}) (model.DepartmentIncInput, error) {
	var it model.DepartmentIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_insert_input(ctx context.Context, obj interface{}) (model.DepartmentInsertInput, error) {
	var it model.DepartmentInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_max_order_by(ctx context.Context, obj interface{}) (model.DepartmentMaxOrderBy, error) {
	var it model.DepartmentMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_min_order_by(ctx context.Context, obj interface{}) (model.DepartmentMinOrderBy, error) {
	var it model.DepartmentMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DepartmentObjRelInsertInput, error) {
	var it model.DepartmentObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdepartment_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdepartment_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_on_conflict(ctx context.Context, obj interface{}) (model.DepartmentOnConflict, error) {
	var it model.DepartmentOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdepartment_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdepartment_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdepartment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_order_by(ctx context.Context, obj interface{}) (model.DepartmentOrderBy, error) {
	var it model.DepartmentOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_pk_columns_input(ctx context.Context, obj interface{}) (model.DepartmentPkColumnsInput, error) {
	var it model.DepartmentPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_set_input(ctx context.Context, obj interface{}) (model.DepartmentSetInput, error) {
	var it model.DepartmentSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_stddev_order_by(ctx context.Context, obj interface{}) (model.DepartmentStddevOrderBy, error) {
	var it model.DepartmentStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DepartmentStddevPopOrderBy, error) {
	var it model.DepartmentStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DepartmentStddevSampOrderBy, error) {
	var it model.DepartmentStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_sum_order_by(ctx context.Context, obj interface{}) (model.DepartmentSumOrderBy, error) {
	var it model.DepartmentSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_var_pop_order_by(ctx context.Context, obj interface{}) (model.DepartmentVarPopOrderBy, error) {
	var it model.DepartmentVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_var_samp_order_by(ctx context.Context, obj interface{}) (model.DepartmentVarSampOrderBy, error) {
	var it model.DepartmentVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdepartment_variance_order_by(ctx context.Context, obj interface{}) (model.DepartmentVarianceOrderBy, error) {
	var it model.DepartmentVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_aggregate_order_by(ctx context.Context, obj interface{}) (model.EnterpriseAggregateOrderBy, error) {
	var it model.EnterpriseAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOenterprise_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOenterprise_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOenterprise_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOenterprise_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOenterprise_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOenterprise_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOenterprise_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOenterprise_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOenterprise_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOenterprise_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseArrRelInsertInput, error) {
	var it model.EnterpriseArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNenterprise_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOenterprise_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_avg_order_by(ctx context.Context, obj interface{}) (model.EnterpriseAvgOrderBy, error) {
	var it model.EnterpriseAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_bool_exp(ctx context.Context, obj interface{}) (model.EnterpriseBoolExp, error) {
	var it model.EnterpriseBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOenterprise_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOenterprise_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOenterprise_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_persons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_persons"))
			it.ContactPersons, err = ec.unmarshalO_jsonb_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐJsonbComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_inc_input(ctx context.Context, obj interface{}) (model.EnterpriseIncInput, error) {
	var it model.EnterpriseIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseInsertInput, error) {
	var it model.EnterpriseInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_persons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_persons"))
			it.ContactPersons, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_max_order_by(ctx context.Context, obj interface{}) (model.EnterpriseMaxOrderBy, error) {
	var it model.EnterpriseMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_min_order_by(ctx context.Context, obj interface{}) (model.EnterpriseMinOrderBy, error) {
	var it model.EnterpriseMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.EnterpriseObjRelInsertInput, error) {
	var it model.EnterpriseObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNenterprise_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOenterprise_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_on_conflict(ctx context.Context, obj interface{}) (model.EnterpriseOnConflict, error) {
	var it model.EnterpriseOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNenterprise_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNenterprise_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOenterprise_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_order_by(ctx context.Context, obj interface{}) (model.EnterpriseOrderBy, error) {
	var it model.EnterpriseOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_persons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_persons"))
			it.ContactPersons, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_pk_columns_input(ctx context.Context, obj interface{}) (model.EnterprisePkColumnsInput, error) {
	var it model.EnterprisePkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_set_input(ctx context.Context, obj interface{}) (model.EnterpriseSetInput, error) {
	var it model.EnterpriseSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "association_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_by"))
			it.AssociationReviewBy, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_opinion"))
			it.AssociationReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "association_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("association_review_time"))
			it.AssociationReviewTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_id"))
			it.BrigadeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_by"))
			it.BrigadeReviewBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_opinion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_opinion"))
			it.BrigadeReviewOpinion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "brigade_review_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("brigade_review_time"))
			it.BrigadeReviewTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_photo"))
			it.BusinessLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_photo"))
			it.BusinessPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_persons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_persons"))
			it.ContactPersons, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_at"))
			it.CreateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card_photo"))
			it.EntrustedAgentIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_input":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_input"))
			it.IsInput, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_upload_province":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_upload_province"))
			it.IsUploadProvince, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card_photo"))
			it.LegalRepresentativeIDCardPhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license_photo"))
			it.OperatingLicensePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate_photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate_photo"))
			it.OrganizationCodeCertificatePhoto, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "police_station_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("police_station_id"))
			it.PoliceStationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_at"))
			it.RecordAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_by"))
			it.RecordBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_time_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_time_in"))
			it.UpdateTimeIn, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_stddev_order_by(ctx context.Context, obj interface{}) (model.EnterpriseStddevOrderBy, error) {
	var it model.EnterpriseStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.EnterpriseStddevPopOrderBy, error) {
	var it model.EnterpriseStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.EnterpriseStddevSampOrderBy, error) {
	var it model.EnterpriseStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_sum_order_by(ctx context.Context, obj interface{}) (model.EnterpriseSumOrderBy, error) {
	var it model.EnterpriseSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_var_pop_order_by(ctx context.Context, obj interface{}) (model.EnterpriseVarPopOrderBy, error) {
	var it model.EnterpriseVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_var_samp_order_by(ctx context.Context, obj interface{}) (model.EnterpriseVarSampOrderBy, error) {
	var it model.EnterpriseVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputenterprise_variance_order_by(ctx context.Context, obj interface{}) (model.EnterpriseVarianceOrderBy, error) {
	var it model.EnterpriseVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_status"))
			it.CheckStatus, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpoint_comparison_exp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_aggregate_order_by(ctx context.Context, obj interface{}) (model.SystemUserAggregateOrderBy, error) {
	var it model.SystemUserAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOsystem_user_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOsystem_user_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOsystem_user_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOsystem_user_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOsystem_user_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOsystem_user_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOsystem_user_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOsystem_user_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOsystem_user_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOsystem_user_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.SystemUserArrRelInsertInput, error) {
	var it model.SystemUserArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNsystem_user_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOsystem_user_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_avg_order_by(ctx context.Context, obj interface{}) (model.SystemUserAvgOrderBy, error) {
	var it model.SystemUserAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_bool_exp(ctx context.Context, obj interface{}) (model.SystemUserBoolExp, error) {
	var it model.SystemUserBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOsystem_user_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOsystem_user_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOsystem_user_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_inc_input(ctx context.Context, obj interface{}) (model.SystemUserIncInput, error) {
	var it model.SystemUserIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_insert_input(ctx context.Context, obj interface{}) (model.SystemUserInsertInput, error) {
	var it model.SystemUserInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_max_order_by(ctx context.Context, obj interface{}) (model.SystemUserMaxOrderBy, error) {
	var it model.SystemUserMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_min_order_by(ctx context.Context, obj interface{}) (model.SystemUserMinOrderBy, error) {
	var it model.SystemUserMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.SystemUserObjRelInsertInput, error) {
	var it model.SystemUserObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNsystem_user_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOsystem_user_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_on_conflict(ctx context.Context, obj interface{}) (model.SystemUserOnConflict, error) {
	var it model.SystemUserOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNsystem_user_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNsystem_user_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOsystem_user_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_order_by(ctx context.Context, obj interface{}) (model.SystemUserOrderBy, error) {
	var it model.SystemUserOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_pk_columns_input(ctx context.Context, obj interface{}) (model.SystemUserPkColumnsInput, error) {
	var it model.SystemUserPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_set_input(ctx context.Context, obj interface{}) (model.SystemUserSetInput, error) {
	var it model.SystemUserSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Is_bind_ip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Is_bind_ip"))
			it.IsBindIP, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_version"))
			it.AppVersion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "create_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create_by"))
			it.CreateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_at"))
			it.DeleteAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "delete_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("delete_by"))
			it.DeleteBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "ip_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip_address"))
			it.IPAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_valid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_valid"))
			it.IsValid, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mkey"))
			it.Mkey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mobile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mobile"))
			it.Mobile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "proxy_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proxy_user"))
			it.ProxyUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ukey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ukey"))
			it.Ukey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_at"))
			it.UpdateAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_by"))
			it.UpdateBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_stddev_order_by(ctx context.Context, obj interface{}) (model.SystemUserStddevOrderBy, error) {
	var it model.SystemUserStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.SystemUserStddevPopOrderBy, error) {
	var it model.SystemUserStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.SystemUserStddevSampOrderBy, error) {
	var it model.SystemUserStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_sum_order_by(ctx context.Context, obj interface{}) (model.SystemUserSumOrderBy, error) {
	var it model.SystemUserSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_var_pop_order_by(ctx context.Context, obj interface{}) (model.SystemUserVarPopOrderBy, error) {
	var it model.SystemUserVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_var_samp_order_by(ctx context.Context, obj interface{}) (model.SystemUserVarSampOrderBy, error) {
	var it model.SystemUserVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputsystem_user_variance_order_by(ctx context.Context, obj interface{}) (model.SystemUserVarianceOrderBy, error) {
	var it model.SystemUserVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "audit_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("audit_level"))
			it.AuditLevel, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_state"))
			it.UserState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_type"))
			it.UserType, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_department":
			out.Values[i] = ec._Mutation_delete_department(ctx, field)
		case "delete_department_by_pk":
			out.Values[i] = ec._Mutation_delete_department_by_pk(ctx, field)
		case "insert_department":
			out.Values[i] = ec._Mutation_insert_department(ctx, field)
		case "insert_department_one":
			out.Values[i] = ec._Mutation_insert_department_one(ctx, field)
		case "update_department":
			out.Values[i] = ec._Mutation_update_department(ctx, field)
		case "update_department_by_pk":
			out.Values[i] = ec._Mutation_update_department_by_pk(ctx, field)
		case "delete_enterprise":
			out.Values[i] = ec._Mutation_delete_enterprise(ctx, field)
		case "delete_enterprise_by_pk":
			out.Values[i] = ec._Mutation_delete_enterprise_by_pk(ctx, field)
		case "insert_enterprise":
			out.Values[i] = ec._Mutation_insert_enterprise(ctx, field)
		case "insert_enterprise_one":
			out.Values[i] = ec._Mutation_insert_enterprise_one(ctx, field)
		case "update_enterprise":
			out.Values[i] = ec._Mutation_update_enterprise(ctx, field)
		case "update_enterprise_by_pk":
			out.Values[i] = ec._Mutation_update_enterprise_by_pk(ctx, field)
		case "delete_system_user":
			out.Values[i] = ec._Mutation_delete_system_user(ctx, field)
		case "delete_system_user_by_pk":
			out.Values[i] = ec._Mutation_delete_system_user_by_pk(ctx, field)
		case "insert_system_user":
			out.Values[i] = ec._Mutation_insert_system_user(ctx, field)
		case "insert_system_user_one":
			out.Values[i] = ec._Mutation_insert_system_user_one(ctx, field)
		case "update_system_user":
			out.Values[i] = ec._Mutation_update_system_user(ctx, field)
		case "update_system_user_by_pk":
			out.Values[i] = ec._Mutation_update_system_user_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "department":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "department_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "department_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department_by_pk(ctx, field)
				return res
			})
		case "enterprise":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterprise_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise_by_pk(ctx, field)
				return res
			})
		case "system_user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_system_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "system_user_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_system_user_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "system_user_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_system_user_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentImplementors = []string{"department"}

func (ec *executionContext) _department(ctx context.Context, sel ast.SelectionSet, obj *model1.Department) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department")
		case "create_at":
			out.Values[i] = ec._department_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._department_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._department_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._department_delete_by(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._department_department_category(ctx, field, obj)
		case "department_code":
			out.Values[i] = ec._department_department_code(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._department_department_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "department_name":
			out.Values[i] = ec._department_department_name(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._department_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":
			out.Values[i] = ec._department_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "internal_number":
			out.Values[i] = ec._department_internal_number(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._department_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remarks":
			out.Values[i] = ec._department_remarks(ctx, field, obj)
		case "superior_department_id":
			out.Values[i] = ec._department_superior_department_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._department_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._department_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_aggregateImplementors = []string{"department_aggregate"}

func (ec *executionContext) _department_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_aggregate")
		case "aggregate":
			out.Values[i] = ec._department_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._department_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_aggregate_fieldsImplementors = []string{"department_aggregate_fields"}

func (ec *executionContext) _department_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_aggregate_fields")
		case "avg":
			out.Values[i] = ec._department_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._department_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._department_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._department_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._department_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._department_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._department_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._department_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._department_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._department_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._department_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_avg_fieldsImplementors = []string{"department_avg_fields"}

func (ec *executionContext) _department_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_avg_fields")
		case "department_category":
			out.Values[i] = ec._department_avg_fields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._department_avg_fields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._department_avg_fields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_max_fieldsImplementors = []string{"department_max_fields"}

func (ec *executionContext) _department_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_max_fields")
		case "create_at":
			out.Values[i] = ec._department_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._department_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._department_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._department_max_fields_delete_by(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._department_max_fields_department_category(ctx, field, obj)
		case "department_code":
			out.Values[i] = ec._department_max_fields_department_code(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._department_max_fields_department_id(ctx, field, obj)
		case "department_name":
			out.Values[i] = ec._department_max_fields_department_name(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._department_max_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._department_max_fields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._department_max_fields_internal_number(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._department_max_fields_remarks(ctx, field, obj)
		case "superior_department_id":
			out.Values[i] = ec._department_max_fields_superior_department_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._department_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._department_max_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_min_fieldsImplementors = []string{"department_min_fields"}

func (ec *executionContext) _department_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_min_fields")
		case "create_at":
			out.Values[i] = ec._department_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._department_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._department_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._department_min_fields_delete_by(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._department_min_fields_department_category(ctx, field, obj)
		case "department_code":
			out.Values[i] = ec._department_min_fields_department_code(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._department_min_fields_department_id(ctx, field, obj)
		case "department_name":
			out.Values[i] = ec._department_min_fields_department_name(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._department_min_fields_enterprise_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._department_min_fields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._department_min_fields_internal_number(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._department_min_fields_remarks(ctx, field, obj)
		case "superior_department_id":
			out.Values[i] = ec._department_min_fields_superior_department_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._department_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._department_min_fields_update_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_mutation_responseImplementors = []string{"department_mutation_response"}

func (ec *executionContext) _department_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._department_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._department_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_stddev_fieldsImplementors = []string{"department_stddev_fields"}

func (ec *executionContext) _department_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_stddev_fields")
		case "department_category":
			out.Values[i] = ec._department_stddev_fields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._department_stddev_fields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._department_stddev_fields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_stddev_pop_fieldsImplementors = []string{"department_stddev_pop_fields"}

func (ec *executionContext) _department_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_stddev_pop_fields")
		case "department_category":
			out.Values[i] = ec._department_stddev_pop_fields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._department_stddev_pop_fields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._department_stddev_pop_fields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_stddev_samp_fieldsImplementors = []string{"department_stddev_samp_fields"}

func (ec *executionContext) _department_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_stddev_samp_fields")
		case "department_category":
			out.Values[i] = ec._department_stddev_samp_fields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._department_stddev_samp_fields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._department_stddev_samp_fields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_sum_fieldsImplementors = []string{"department_sum_fields"}

func (ec *executionContext) _department_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_sum_fields")
		case "department_category":
			out.Values[i] = ec._department_sum_fields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._department_sum_fields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._department_sum_fields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_var_pop_fieldsImplementors = []string{"department_var_pop_fields"}

func (ec *executionContext) _department_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_var_pop_fields")
		case "department_category":
			out.Values[i] = ec._department_var_pop_fields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._department_var_pop_fields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._department_var_pop_fields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_var_samp_fieldsImplementors = []string{"department_var_samp_fields"}

func (ec *executionContext) _department_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_var_samp_fields")
		case "department_category":
			out.Values[i] = ec._department_var_samp_fields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._department_var_samp_fields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._department_var_samp_fields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var department_variance_fieldsImplementors = []string{"department_variance_fields"}

func (ec *executionContext) _department_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, department_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("department_variance_fields")
		case "department_category":
			out.Values[i] = ec._department_variance_fields_department_category(ctx, field, obj)
		case "id":
			out.Values[i] = ec._department_variance_fields_id(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._department_variance_fields_internal_number(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseImplementors = []string{"enterprise"}

func (ec *executionContext) _enterprise(ctx context.Context, sel ast.SelectionSet, obj *model1.Enterprise) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise")
		case "association_review_by":
			out.Values[i] = ec._enterprise_association_review_by(ctx, field, obj)
		case "association_review_opinion":
			out.Values[i] = ec._enterprise_association_review_opinion(ctx, field, obj)
		case "association_review_time":
			out.Values[i] = ec._enterprise_association_review_time(ctx, field, obj)
		case "brigade_id":
			out.Values[i] = ec._enterprise_brigade_id(ctx, field, obj)
		case "brigade_review_by":
			out.Values[i] = ec._enterprise_brigade_review_by(ctx, field, obj)
		case "brigade_review_opinion":
			out.Values[i] = ec._enterprise_brigade_review_opinion(ctx, field, obj)
		case "brigade_review_time":
			out.Values[i] = ec._enterprise_brigade_review_time(ctx, field, obj)
		case "business_license_expiry_date":
			out.Values[i] = ec._enterprise_business_license_expiry_date(ctx, field, obj)
		case "business_license_issuance_date":
			out.Values[i] = ec._enterprise_business_license_issuance_date(ctx, field, obj)
		case "business_license_photo":
			out.Values[i] = ec._enterprise_business_license_photo(ctx, field, obj)
		case "business_photo":
			out.Values[i] = ec._enterprise_business_photo(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._enterprise_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._enterprise_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._enterprise_city_id(ctx, field, obj)
		case "contact_persons":
			out.Values[i] = ec._enterprise_contact_persons(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._enterprise_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._enterprise_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._enterprise_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._enterprise_delete_by(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._enterprise_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._enterprise_district_id(ctx, field, obj)
		case "enterprise_address":
			out.Values[i] = ec._enterprise_enterprise_address(ctx, field, obj)
		case "enterprise_code":
			out.Values[i] = ec._enterprise_enterprise_code(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._enterprise_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_level":
			out.Values[i] = ec._enterprise_enterprise_level(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._enterprise_enterprise_name(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._enterprise_enterprise_nature(ctx, field, obj)
		case "entrusted_agent":
			out.Values[i] = ec._enterprise_entrusted_agent(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._enterprise_entrusted_agent_id_card(ctx, field, obj)
		case "entrusted_agent_id_card_photo":
			out.Values[i] = ec._enterprise_entrusted_agent_id_card_photo(ctx, field, obj)
		case "entrusted_agent_phone":
			out.Values[i] = ec._enterprise_entrusted_agent_phone(ctx, field, obj)
		case "fax_number":
			out.Values[i] = ec._enterprise_fax_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "institution_category":
			out.Values[i] = ec._enterprise_institution_category(ctx, field, obj)
		case "is_black":
			out.Values[i] = ec._enterprise_is_black(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._enterprise_is_deleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_input":
			out.Values[i] = ec._enterprise_is_input(ctx, field, obj)
		case "is_install":
			out.Values[i] = ec._enterprise_is_install(ctx, field, obj)
		case "is_upload_province":
			out.Values[i] = ec._enterprise_is_upload_province(ctx, field, obj)
		case "legal_representative":
			out.Values[i] = ec._enterprise_legal_representative(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._enterprise_legal_representative_id_card(ctx, field, obj)
		case "legal_representative_id_card_photo":
			out.Values[i] = ec._enterprise_legal_representative_id_card_photo(ctx, field, obj)
		case "legal_representative_phone":
			out.Values[i] = ec._enterprise_legal_representative_phone(ctx, field, obj)
		case "operating_license_photo":
			out.Values[i] = ec._enterprise_operating_license_photo(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._enterprise_organization_code(ctx, field, obj)
		case "organization_code_certificate_photo":
			out.Values[i] = ec._enterprise_organization_code_certificate_photo(ctx, field, obj)
		case "police_station_id":
			out.Values[i] = ec._enterprise_police_station_id(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._enterprise_province_id(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._enterprise_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._enterprise_record_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._enterprise_remarks(ctx, field, obj)
		case "score":
			out.Values[i] = ec._enterprise_score(ctx, field, obj)
		case "superior_enterprise_id":
			out.Values[i] = ec._enterprise_superior_enterprise_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._enterprise_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._enterprise_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._enterprise_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_aggregateImplementors = []string{"enterprise_aggregate"}

func (ec *executionContext) _enterprise_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_aggregate")
		case "aggregate":
			out.Values[i] = ec._enterprise_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._enterprise_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_aggregate_fieldsImplementors = []string{"enterprise_aggregate_fields"}

func (ec *executionContext) _enterprise_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_aggregate_fields")
		case "avg":
			out.Values[i] = ec._enterprise_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._enterprise_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._enterprise_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._enterprise_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._enterprise_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._enterprise_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._enterprise_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._enterprise_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._enterprise_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._enterprise_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._enterprise_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_avg_fieldsImplementors = []string{"enterprise_avg_fields"}

func (ec *executionContext) _enterprise_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_avg_fields")
		case "business_scope":
			out.Values[i] = ec._enterprise_avg_fields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._enterprise_avg_fields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._enterprise_avg_fields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._enterprise_avg_fields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._enterprise_avg_fields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._enterprise_avg_fields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._enterprise_avg_fields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_avg_fields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._enterprise_avg_fields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._enterprise_avg_fields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._enterprise_avg_fields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_max_fieldsImplementors = []string{"enterprise_max_fields"}

func (ec *executionContext) _enterprise_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_max_fields")
		case "association_review_by":
			out.Values[i] = ec._enterprise_max_fields_association_review_by(ctx, field, obj)
		case "association_review_opinion":
			out.Values[i] = ec._enterprise_max_fields_association_review_opinion(ctx, field, obj)
		case "association_review_time":
			out.Values[i] = ec._enterprise_max_fields_association_review_time(ctx, field, obj)
		case "brigade_id":
			out.Values[i] = ec._enterprise_max_fields_brigade_id(ctx, field, obj)
		case "brigade_review_by":
			out.Values[i] = ec._enterprise_max_fields_brigade_review_by(ctx, field, obj)
		case "brigade_review_opinion":
			out.Values[i] = ec._enterprise_max_fields_brigade_review_opinion(ctx, field, obj)
		case "brigade_review_time":
			out.Values[i] = ec._enterprise_max_fields_brigade_review_time(ctx, field, obj)
		case "business_license_expiry_date":
			out.Values[i] = ec._enterprise_max_fields_business_license_expiry_date(ctx, field, obj)
		case "business_license_issuance_date":
			out.Values[i] = ec._enterprise_max_fields_business_license_issuance_date(ctx, field, obj)
		case "business_license_photo":
			out.Values[i] = ec._enterprise_max_fields_business_license_photo(ctx, field, obj)
		case "business_photo":
			out.Values[i] = ec._enterprise_max_fields_business_photo(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._enterprise_max_fields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._enterprise_max_fields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._enterprise_max_fields_city_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._enterprise_max_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._enterprise_max_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._enterprise_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._enterprise_max_fields_delete_by(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._enterprise_max_fields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._enterprise_max_fields_district_id(ctx, field, obj)
		case "enterprise_address":
			out.Values[i] = ec._enterprise_max_fields_enterprise_address(ctx, field, obj)
		case "enterprise_code":
			out.Values[i] = ec._enterprise_max_fields_enterprise_code(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._enterprise_max_fields_enterprise_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._enterprise_max_fields_enterprise_level(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._enterprise_max_fields_enterprise_name(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._enterprise_max_fields_enterprise_nature(ctx, field, obj)
		case "entrusted_agent":
			out.Values[i] = ec._enterprise_max_fields_entrusted_agent(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._enterprise_max_fields_entrusted_agent_id_card(ctx, field, obj)
		case "entrusted_agent_id_card_photo":
			out.Values[i] = ec._enterprise_max_fields_entrusted_agent_id_card_photo(ctx, field, obj)
		case "entrusted_agent_phone":
			out.Values[i] = ec._enterprise_max_fields_entrusted_agent_phone(ctx, field, obj)
		case "fax_number":
			out.Values[i] = ec._enterprise_max_fields_fax_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_max_fields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._enterprise_max_fields_institution_category(ctx, field, obj)
		case "legal_representative":
			out.Values[i] = ec._enterprise_max_fields_legal_representative(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._enterprise_max_fields_legal_representative_id_card(ctx, field, obj)
		case "legal_representative_id_card_photo":
			out.Values[i] = ec._enterprise_max_fields_legal_representative_id_card_photo(ctx, field, obj)
		case "legal_representative_phone":
			out.Values[i] = ec._enterprise_max_fields_legal_representative_phone(ctx, field, obj)
		case "operating_license_photo":
			out.Values[i] = ec._enterprise_max_fields_operating_license_photo(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._enterprise_max_fields_organization_code(ctx, field, obj)
		case "organization_code_certificate_photo":
			out.Values[i] = ec._enterprise_max_fields_organization_code_certificate_photo(ctx, field, obj)
		case "police_station_id":
			out.Values[i] = ec._enterprise_max_fields_police_station_id(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._enterprise_max_fields_province_id(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._enterprise_max_fields_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._enterprise_max_fields_record_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._enterprise_max_fields_remarks(ctx, field, obj)
		case "score":
			out.Values[i] = ec._enterprise_max_fields_score(ctx, field, obj)
		case "superior_enterprise_id":
			out.Values[i] = ec._enterprise_max_fields_superior_enterprise_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._enterprise_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._enterprise_max_fields_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._enterprise_max_fields_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_min_fieldsImplementors = []string{"enterprise_min_fields"}

func (ec *executionContext) _enterprise_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_min_fields")
		case "association_review_by":
			out.Values[i] = ec._enterprise_min_fields_association_review_by(ctx, field, obj)
		case "association_review_opinion":
			out.Values[i] = ec._enterprise_min_fields_association_review_opinion(ctx, field, obj)
		case "association_review_time":
			out.Values[i] = ec._enterprise_min_fields_association_review_time(ctx, field, obj)
		case "brigade_id":
			out.Values[i] = ec._enterprise_min_fields_brigade_id(ctx, field, obj)
		case "brigade_review_by":
			out.Values[i] = ec._enterprise_min_fields_brigade_review_by(ctx, field, obj)
		case "brigade_review_opinion":
			out.Values[i] = ec._enterprise_min_fields_brigade_review_opinion(ctx, field, obj)
		case "brigade_review_time":
			out.Values[i] = ec._enterprise_min_fields_brigade_review_time(ctx, field, obj)
		case "business_license_expiry_date":
			out.Values[i] = ec._enterprise_min_fields_business_license_expiry_date(ctx, field, obj)
		case "business_license_issuance_date":
			out.Values[i] = ec._enterprise_min_fields_business_license_issuance_date(ctx, field, obj)
		case "business_license_photo":
			out.Values[i] = ec._enterprise_min_fields_business_license_photo(ctx, field, obj)
		case "business_photo":
			out.Values[i] = ec._enterprise_min_fields_business_photo(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._enterprise_min_fields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._enterprise_min_fields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._enterprise_min_fields_city_id(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._enterprise_min_fields_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._enterprise_min_fields_create_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._enterprise_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._enterprise_min_fields_delete_by(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._enterprise_min_fields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._enterprise_min_fields_district_id(ctx, field, obj)
		case "enterprise_address":
			out.Values[i] = ec._enterprise_min_fields_enterprise_address(ctx, field, obj)
		case "enterprise_code":
			out.Values[i] = ec._enterprise_min_fields_enterprise_code(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._enterprise_min_fields_enterprise_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._enterprise_min_fields_enterprise_level(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._enterprise_min_fields_enterprise_name(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._enterprise_min_fields_enterprise_nature(ctx, field, obj)
		case "entrusted_agent":
			out.Values[i] = ec._enterprise_min_fields_entrusted_agent(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._enterprise_min_fields_entrusted_agent_id_card(ctx, field, obj)
		case "entrusted_agent_id_card_photo":
			out.Values[i] = ec._enterprise_min_fields_entrusted_agent_id_card_photo(ctx, field, obj)
		case "entrusted_agent_phone":
			out.Values[i] = ec._enterprise_min_fields_entrusted_agent_phone(ctx, field, obj)
		case "fax_number":
			out.Values[i] = ec._enterprise_min_fields_fax_number(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_min_fields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._enterprise_min_fields_institution_category(ctx, field, obj)
		case "legal_representative":
			out.Values[i] = ec._enterprise_min_fields_legal_representative(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._enterprise_min_fields_legal_representative_id_card(ctx, field, obj)
		case "legal_representative_id_card_photo":
			out.Values[i] = ec._enterprise_min_fields_legal_representative_id_card_photo(ctx, field, obj)
		case "legal_representative_phone":
			out.Values[i] = ec._enterprise_min_fields_legal_representative_phone(ctx, field, obj)
		case "operating_license_photo":
			out.Values[i] = ec._enterprise_min_fields_operating_license_photo(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._enterprise_min_fields_organization_code(ctx, field, obj)
		case "organization_code_certificate_photo":
			out.Values[i] = ec._enterprise_min_fields_organization_code_certificate_photo(ctx, field, obj)
		case "police_station_id":
			out.Values[i] = ec._enterprise_min_fields_police_station_id(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._enterprise_min_fields_province_id(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._enterprise_min_fields_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._enterprise_min_fields_record_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._enterprise_min_fields_remarks(ctx, field, obj)
		case "score":
			out.Values[i] = ec._enterprise_min_fields_score(ctx, field, obj)
		case "superior_enterprise_id":
			out.Values[i] = ec._enterprise_min_fields_superior_enterprise_id(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._enterprise_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._enterprise_min_fields_update_by(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._enterprise_min_fields_update_time_in(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_mutation_responseImplementors = []string{"enterprise_mutation_response"}

func (ec *executionContext) _enterprise_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._enterprise_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._enterprise_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_stddev_fieldsImplementors = []string{"enterprise_stddev_fields"}

func (ec *executionContext) _enterprise_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_stddev_fields")
		case "business_scope":
			out.Values[i] = ec._enterprise_stddev_fields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._enterprise_stddev_fields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._enterprise_stddev_fields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._enterprise_stddev_fields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._enterprise_stddev_fields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._enterprise_stddev_fields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._enterprise_stddev_fields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_stddev_fields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._enterprise_stddev_fields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._enterprise_stddev_fields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._enterprise_stddev_fields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_stddev_pop_fieldsImplementors = []string{"enterprise_stddev_pop_fields"}

func (ec *executionContext) _enterprise_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_stddev_pop_fields")
		case "business_scope":
			out.Values[i] = ec._enterprise_stddev_pop_fields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._enterprise_stddev_pop_fields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._enterprise_stddev_pop_fields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._enterprise_stddev_pop_fields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._enterprise_stddev_pop_fields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._enterprise_stddev_pop_fields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._enterprise_stddev_pop_fields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_stddev_pop_fields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._enterprise_stddev_pop_fields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._enterprise_stddev_pop_fields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._enterprise_stddev_pop_fields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_stddev_samp_fieldsImplementors = []string{"enterprise_stddev_samp_fields"}

func (ec *executionContext) _enterprise_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_stddev_samp_fields")
		case "business_scope":
			out.Values[i] = ec._enterprise_stddev_samp_fields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._enterprise_stddev_samp_fields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._enterprise_stddev_samp_fields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._enterprise_stddev_samp_fields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._enterprise_stddev_samp_fields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._enterprise_stddev_samp_fields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._enterprise_stddev_samp_fields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_stddev_samp_fields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._enterprise_stddev_samp_fields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._enterprise_stddev_samp_fields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._enterprise_stddev_samp_fields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_sum_fieldsImplementors = []string{"enterprise_sum_fields"}

func (ec *executionContext) _enterprise_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_sum_fields")
		case "business_scope":
			out.Values[i] = ec._enterprise_sum_fields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._enterprise_sum_fields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._enterprise_sum_fields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._enterprise_sum_fields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._enterprise_sum_fields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._enterprise_sum_fields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._enterprise_sum_fields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_sum_fields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._enterprise_sum_fields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._enterprise_sum_fields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._enterprise_sum_fields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_var_pop_fieldsImplementors = []string{"enterprise_var_pop_fields"}

func (ec *executionContext) _enterprise_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_var_pop_fields")
		case "business_scope":
			out.Values[i] = ec._enterprise_var_pop_fields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._enterprise_var_pop_fields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._enterprise_var_pop_fields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._enterprise_var_pop_fields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._enterprise_var_pop_fields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._enterprise_var_pop_fields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._enterprise_var_pop_fields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_var_pop_fields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._enterprise_var_pop_fields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._enterprise_var_pop_fields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._enterprise_var_pop_fields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_var_samp_fieldsImplementors = []string{"enterprise_var_samp_fields"}

func (ec *executionContext) _enterprise_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_var_samp_fields")
		case "business_scope":
			out.Values[i] = ec._enterprise_var_samp_fields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._enterprise_var_samp_fields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._enterprise_var_samp_fields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._enterprise_var_samp_fields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._enterprise_var_samp_fields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._enterprise_var_samp_fields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._enterprise_var_samp_fields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_var_samp_fields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._enterprise_var_samp_fields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._enterprise_var_samp_fields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._enterprise_var_samp_fields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterprise_variance_fieldsImplementors = []string{"enterprise_variance_fields"}

func (ec *executionContext) _enterprise_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterprise_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("enterprise_variance_fields")
		case "business_scope":
			out.Values[i] = ec._enterprise_variance_fields_business_scope(ctx, field, obj)
		case "check_status":
			out.Values[i] = ec._enterprise_variance_fields_check_status(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._enterprise_variance_fields_city_id(ctx, field, obj)
		case "display_number":
			out.Values[i] = ec._enterprise_variance_fields_display_number(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._enterprise_variance_fields_district_id(ctx, field, obj)
		case "enterprise_level":
			out.Values[i] = ec._enterprise_variance_fields_enterprise_level(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._enterprise_variance_fields_enterprise_nature(ctx, field, obj)
		case "id":
			out.Values[i] = ec._enterprise_variance_fields_id(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._enterprise_variance_fields_institution_category(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._enterprise_variance_fields_province_id(ctx, field, obj)
		case "score":
			out.Values[i] = ec._enterprise_variance_fields_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_userImplementors = []string{"system_user"}

func (ec *executionContext) _system_user(ctx context.Context, sel ast.SelectionSet, obj *model1.SystemUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user")
		case "Is_bind_ip":
			out.Values[i] = ec._system_user_Is_bind_ip(ctx, field, obj)
		case "app_version":
			out.Values[i] = ec._system_user_app_version(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._system_user_audit_level(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._system_user_create_by(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._system_user_created_at(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._system_user_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._system_user_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._system_user_department_id(ctx, field, obj)
		case "email":
			out.Values[i] = ec._system_user_email(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._system_user_enterprise_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._system_user_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._system_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ip_address":
			out.Values[i] = ec._system_user_ip_address(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._system_user_is_delete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_valid":
			out.Values[i] = ec._system_user_is_valid(ctx, field, obj)
		case "mkey":
			out.Values[i] = ec._system_user_mkey(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._system_user_mobile(ctx, field, obj)
		case "password":
			out.Values[i] = ec._system_user_password(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "proxy_user":
			out.Values[i] = ec._system_user_proxy_user(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._system_user_remarks(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._system_user_telephone(ctx, field, obj)
		case "username":
			out.Values[i] = ec._system_user_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ukey":
			out.Values[i] = ec._system_user_ukey(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._system_user_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._system_user_update_by(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._system_user_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_state":
			out.Values[i] = ec._system_user_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._system_user_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_aggregateImplementors = []string{"system_user_aggregate"}

func (ec *executionContext) _system_user_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_aggregate")
		case "aggregate":
			out.Values[i] = ec._system_user_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._system_user_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_aggregate_fieldsImplementors = []string{"system_user_aggregate_fields"}

func (ec *executionContext) _system_user_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_aggregate_fields")
		case "avg":
			out.Values[i] = ec._system_user_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._system_user_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._system_user_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._system_user_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._system_user_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._system_user_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._system_user_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._system_user_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._system_user_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._system_user_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._system_user_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_avg_fieldsImplementors = []string{"system_user_avg_fields"}

func (ec *executionContext) _system_user_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_avg_fields")
		case "audit_level":
			out.Values[i] = ec._system_user_avg_fields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._system_user_avg_fields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._system_user_avg_fields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._system_user_avg_fields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._system_user_avg_fields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_max_fieldsImplementors = []string{"system_user_max_fields"}

func (ec *executionContext) _system_user_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_max_fields")
		case "app_version":
			out.Values[i] = ec._system_user_max_fields_app_version(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._system_user_max_fields_audit_level(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._system_user_max_fields_create_by(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._system_user_max_fields_created_at(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._system_user_max_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._system_user_max_fields_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._system_user_max_fields_department_id(ctx, field, obj)
		case "email":
			out.Values[i] = ec._system_user_max_fields_email(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._system_user_max_fields_enterprise_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._system_user_max_fields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._system_user_max_fields_id(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._system_user_max_fields_ip_address(ctx, field, obj)
		case "mkey":
			out.Values[i] = ec._system_user_max_fields_mkey(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._system_user_max_fields_mobile(ctx, field, obj)
		case "password":
			out.Values[i] = ec._system_user_max_fields_password(ctx, field, obj)
		case "proxy_user":
			out.Values[i] = ec._system_user_max_fields_proxy_user(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._system_user_max_fields_remarks(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._system_user_max_fields_telephone(ctx, field, obj)
		case "username":
			out.Values[i] = ec._system_user_max_fields_username(ctx, field, obj)
		case "ukey":
			out.Values[i] = ec._system_user_max_fields_ukey(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._system_user_max_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._system_user_max_fields_update_by(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._system_user_max_fields_user_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._system_user_max_fields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._system_user_max_fields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_min_fieldsImplementors = []string{"system_user_min_fields"}

func (ec *executionContext) _system_user_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_min_fields")
		case "app_version":
			out.Values[i] = ec._system_user_min_fields_app_version(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._system_user_min_fields_audit_level(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._system_user_min_fields_create_by(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._system_user_min_fields_created_at(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._system_user_min_fields_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._system_user_min_fields_delete_by(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._system_user_min_fields_department_id(ctx, field, obj)
		case "email":
			out.Values[i] = ec._system_user_min_fields_email(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._system_user_min_fields_enterprise_id(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._system_user_min_fields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._system_user_min_fields_id(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._system_user_min_fields_ip_address(ctx, field, obj)
		case "mkey":
			out.Values[i] = ec._system_user_min_fields_mkey(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._system_user_min_fields_mobile(ctx, field, obj)
		case "password":
			out.Values[i] = ec._system_user_min_fields_password(ctx, field, obj)
		case "proxy_user":
			out.Values[i] = ec._system_user_min_fields_proxy_user(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._system_user_min_fields_remarks(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._system_user_min_fields_telephone(ctx, field, obj)
		case "username":
			out.Values[i] = ec._system_user_min_fields_username(ctx, field, obj)
		case "ukey":
			out.Values[i] = ec._system_user_min_fields_ukey(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._system_user_min_fields_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._system_user_min_fields_update_by(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._system_user_min_fields_user_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._system_user_min_fields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._system_user_min_fields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_mutation_responseImplementors = []string{"system_user_mutation_response"}

func (ec *executionContext) _system_user_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._system_user_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._system_user_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_stddev_fieldsImplementors = []string{"system_user_stddev_fields"}

func (ec *executionContext) _system_user_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_stddev_fields")
		case "audit_level":
			out.Values[i] = ec._system_user_stddev_fields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._system_user_stddev_fields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._system_user_stddev_fields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._system_user_stddev_fields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._system_user_stddev_fields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_stddev_pop_fieldsImplementors = []string{"system_user_stddev_pop_fields"}

func (ec *executionContext) _system_user_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_stddev_pop_fields")
		case "audit_level":
			out.Values[i] = ec._system_user_stddev_pop_fields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._system_user_stddev_pop_fields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._system_user_stddev_pop_fields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._system_user_stddev_pop_fields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._system_user_stddev_pop_fields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_stddev_samp_fieldsImplementors = []string{"system_user_stddev_samp_fields"}

func (ec *executionContext) _system_user_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_stddev_samp_fields")
		case "audit_level":
			out.Values[i] = ec._system_user_stddev_samp_fields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._system_user_stddev_samp_fields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._system_user_stddev_samp_fields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._system_user_stddev_samp_fields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._system_user_stddev_samp_fields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_sum_fieldsImplementors = []string{"system_user_sum_fields"}

func (ec *executionContext) _system_user_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_sum_fields")
		case "audit_level":
			out.Values[i] = ec._system_user_sum_fields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._system_user_sum_fields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._system_user_sum_fields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._system_user_sum_fields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._system_user_sum_fields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_var_pop_fieldsImplementors = []string{"system_user_var_pop_fields"}

func (ec *executionContext) _system_user_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_var_pop_fields")
		case "audit_level":
			out.Values[i] = ec._system_user_var_pop_fields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._system_user_var_pop_fields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._system_user_var_pop_fields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._system_user_var_pop_fields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._system_user_var_pop_fields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_var_samp_fieldsImplementors = []string{"system_user_var_samp_fields"}

func (ec *executionContext) _system_user_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_var_samp_fields")
		case "audit_level":
			out.Values[i] = ec._system_user_var_samp_fields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._system_user_var_samp_fields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._system_user_var_samp_fields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._system_user_var_samp_fields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._system_user_var_samp_fields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var system_user_variance_fieldsImplementors = []string{"system_user_variance_fields"}

func (ec *executionContext) _system_user_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, system_user_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("system_user_variance_fields")
		case "audit_level":
			out.Values[i] = ec._system_user_variance_fields_audit_level(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._system_user_variance_fields_grade(ctx, field, obj)
		case "id":
			out.Values[i] = ec._system_user_variance_fields_id(ctx, field, obj)
		case "user_state":
			out.Values[i] = ec._system_user_variance_fields_user_state(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._system_user_variance_fields_user_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_jsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_jsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNdepartment2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.Department) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *model1.Department) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._department(ctx, sel, v)
}

func (ec *executionContext) marshalNdepartment_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregate(ctx context.Context, sel ast.SelectionSet, v model.DepartmentAggregate) graphql.Marshaler {
	return ec._department_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdepartment_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._department_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdepartment_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx context.Context, v interface{}) (model.DepartmentBoolExp, error) {
	res, err := ec.unmarshalInputdepartment_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdepartment_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentConstraint(ctx context.Context, v interface{}) (model.DepartmentConstraint, error) {
	var res model.DepartmentConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdepartment_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentConstraint(ctx context.Context, sel ast.SelectionSet, v model.DepartmentConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdepartment_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx context.Context, v interface{}) (model.DepartmentInsertInput, error) {
	res, err := ec.unmarshalInputdepartment_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdepartment_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DepartmentInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DepartmentInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdepartment_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdepartment_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentInsertInput(ctx context.Context, v interface{}) (*model.DepartmentInsertInput, error) {
	res, err := ec.unmarshalInputdepartment_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdepartment_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderBy(ctx context.Context, v interface{}) (*model.DepartmentOrderBy, error) {
	res, err := ec.unmarshalInputdepartment_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdepartment_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentPkColumnsInput(ctx context.Context, v interface{}) (model.DepartmentPkColumnsInput, error) {
	res, err := ec.unmarshalInputdepartment_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdepartment_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx context.Context, v interface{}) (model.DepartmentSelectColumn, error) {
	var res model.DepartmentSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdepartment_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DepartmentSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdepartment_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumn(ctx context.Context, v interface{}) (model.DepartmentUpdateColumn, error) {
	var res model.DepartmentUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdepartment_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DepartmentUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdepartment_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DepartmentUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DepartmentUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdepartment_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdepartment_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DepartmentUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdepartment_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNenterprise2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterpriseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.Enterprise) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNenterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v *model1.Enterprise) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._enterprise(ctx, sel, v)
}

func (ec *executionContext) marshalNenterprise_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregate(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseAggregate) graphql.Marshaler {
	return ec._enterprise_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNenterprise_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregate(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._enterprise_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNenterprise_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx context.Context, v interface{}) (model.EnterpriseBoolExp, error) {
	res, err := ec.unmarshalInputenterprise_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseConstraint(ctx context.Context, v interface{}) (model.EnterpriseConstraint, error) {
	var res model.EnterpriseConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseConstraint(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx context.Context, v interface{}) (model.EnterpriseInsertInput, error) {
	res, err := ec.unmarshalInputenterprise_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNenterprise_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseInsertInput(ctx context.Context, v interface{}) (*model.EnterpriseInsertInput, error) {
	res, err := ec.unmarshalInputenterprise_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseOrderBy, error) {
	res, err := ec.unmarshalInputenterprise_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterprisePkColumnsInput(ctx context.Context, v interface{}) (model.EnterprisePkColumnsInput, error) {
	res, err := ec.unmarshalInputenterprise_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNenterprise_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx context.Context, v interface{}) (model.EnterpriseSelectColumn, error) {
	var res model.EnterpriseSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumn(ctx context.Context, v interface{}) (model.EnterpriseUpdateColumn, error) {
	var res model.EnterpriseUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNenterprise_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNenterprise_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNenterprise_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNpoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNpoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNsystem_user2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.SystemUser) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNsystem_user2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNsystem_user2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx context.Context, sel ast.SelectionSet, v *model1.SystemUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._system_user(ctx, sel, v)
}

func (ec *executionContext) marshalNsystem_user_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregate(ctx context.Context, sel ast.SelectionSet, v model.SystemUserAggregate) graphql.Marshaler {
	return ec._system_user_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNsystem_user_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregate(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._system_user_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNsystem_user_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx context.Context, v interface{}) (model.SystemUserBoolExp, error) {
	res, err := ec.unmarshalInputsystem_user_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsystem_user_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserConstraint(ctx context.Context, v interface{}) (model.SystemUserConstraint, error) {
	var res model.SystemUserConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsystem_user_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserConstraint(ctx context.Context, sel ast.SelectionSet, v model.SystemUserConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNsystem_user_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx context.Context, v interface{}) (model.SystemUserInsertInput, error) {
	res, err := ec.unmarshalInputsystem_user_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsystem_user_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.SystemUserInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SystemUserInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNsystem_user_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNsystem_user_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserInsertInput(ctx context.Context, v interface{}) (*model.SystemUserInsertInput, error) {
	res, err := ec.unmarshalInputsystem_user_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsystem_user_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderBy(ctx context.Context, v interface{}) (*model.SystemUserOrderBy, error) {
	res, err := ec.unmarshalInputsystem_user_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsystem_user_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserPkColumnsInput(ctx context.Context, v interface{}) (model.SystemUserPkColumnsInput, error) {
	res, err := ec.unmarshalInputsystem_user_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNsystem_user_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx context.Context, v interface{}) (model.SystemUserSelectColumn, error) {
	var res model.SystemUserSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsystem_user_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.SystemUserSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNsystem_user_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumn(ctx context.Context, v interface{}) (model.SystemUserUpdateColumn, error) {
	var res model.SystemUserUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNsystem_user_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.SystemUserUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNsystem_user_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.SystemUserUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.SystemUserUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNsystem_user_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNsystem_user_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SystemUserUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNsystem_user_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalO_jsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_jsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_jsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_jsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_jsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_jsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalO_jsonb_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐJsonbComparisonExp(ctx context.Context, v interface{}) (*model2.JsonbComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInput_jsonb_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdepartment2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *model1.Department) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department(ctx, sel, v)
}

func (ec *executionContext) marshalOdepartment_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdepartment_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdepartment_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentAvgOrderBy(ctx context.Context, v interface{}) (*model.DepartmentAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdepartment_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx context.Context, v interface{}) ([]*model.DepartmentBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DepartmentBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdepartment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdepartment_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentBoolExp(ctx context.Context, v interface{}) (*model.DepartmentBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdepartment_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentIncInput(ctx context.Context, v interface{}) (*model.DepartmentIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdepartment_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdepartment_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMaxOrderBy(ctx context.Context, v interface{}) (*model.DepartmentMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdepartment_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdepartment_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMinOrderBy(ctx context.Context, v interface{}) (*model.DepartmentMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdepartment_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdepartment_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOnConflict(ctx context.Context, v interface{}) (*model.DepartmentOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdepartment_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DepartmentOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DepartmentOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdepartment_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdepartment_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DepartmentSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DepartmentSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdepartment_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdepartment_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DepartmentSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdepartment_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdepartment_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSetInput(ctx context.Context, v interface{}) (*model.DepartmentSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdepartment_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdepartment_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevOrderBy(ctx context.Context, v interface{}) (*model.DepartmentStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdepartment_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdepartment_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DepartmentStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdepartment_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdepartment_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DepartmentStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdepartment_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdepartment_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentSumOrderBy(ctx context.Context, v interface{}) (*model.DepartmentSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdepartment_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdepartment_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarPopOrderBy(ctx context.Context, v interface{}) (*model.DepartmentVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdepartment_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdepartment_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarSampOrderBy(ctx context.Context, v interface{}) (*model.DepartmentVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdepartment_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._department_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdepartment_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐDepartmentVarianceOrderBy(ctx context.Context, v interface{}) (*model.DepartmentVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdepartment_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v *model1.Enterprise) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise(ctx, sel, v)
}

func (ec *executionContext) marshalOenterprise_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOenterprise_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseAvgOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx context.Context, v interface{}) ([]*model.EnterpriseBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOenterprise_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOenterprise_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseBoolExp(ctx context.Context, v interface{}) (*model.EnterpriseBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseIncInput(ctx context.Context, v interface{}) (*model.EnterpriseIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMaxOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMinFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMinOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOnConflict(ctx context.Context, v interface{}) (*model.EnterpriseOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOenterprise_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderByᚄ(ctx context.Context, v interface{}) ([]*model.EnterpriseOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.EnterpriseOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOenterprise_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.EnterpriseSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.EnterpriseSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNenterprise_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOenterprise_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EnterpriseSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNenterprise_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOenterprise_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSetInput(ctx context.Context, v interface{}) (*model.EnterpriseSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevPopOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseStddevSampOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSumFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseSumOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarPopOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarSampOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOenterprise_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._enterprise_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOenterprise_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐEnterpriseVarianceOrderBy(ctx context.Context, v interface{}) (*model.EnterpriseVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputenterprise_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNpoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOpoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNpoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOpoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOsystem_user2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋmodelᚐSystemUser(ctx context.Context, sel ast.SelectionSet, v *model1.SystemUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user(ctx, sel, v)
}

func (ec *executionContext) marshalOsystem_user_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOsystem_user_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsystem_user_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserAvgOrderBy(ctx context.Context, v interface{}) (*model.SystemUserAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsystem_user_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx context.Context, v interface{}) ([]*model.SystemUserBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SystemUserBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOsystem_user_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsystem_user_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserBoolExp(ctx context.Context, v interface{}) (*model.SystemUserBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsystem_user_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserIncInput(ctx context.Context, v interface{}) (*model.SystemUserIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsystem_user_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsystem_user_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMaxOrderBy(ctx context.Context, v interface{}) (*model.SystemUserMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsystem_user_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMinFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsystem_user_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMinOrderBy(ctx context.Context, v interface{}) (*model.SystemUserMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsystem_user_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsystem_user_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOnConflict(ctx context.Context, v interface{}) (*model.SystemUserOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOsystem_user_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderByᚄ(ctx context.Context, v interface{}) ([]*model.SystemUserOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.SystemUserOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNsystem_user_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOsystem_user_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.SystemUserSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.SystemUserSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNsystem_user_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOsystem_user_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.SystemUserSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNsystem_user_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOsystem_user_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSetInput(ctx context.Context, v interface{}) (*model.SystemUserSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsystem_user_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsystem_user_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevOrderBy(ctx context.Context, v interface{}) (*model.SystemUserStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsystem_user_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsystem_user_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevPopOrderBy(ctx context.Context, v interface{}) (*model.SystemUserStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsystem_user_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsystem_user_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserStddevSampOrderBy(ctx context.Context, v interface{}) (*model.SystemUserStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsystem_user_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSumFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsystem_user_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserSumOrderBy(ctx context.Context, v interface{}) (*model.SystemUserSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsystem_user_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsystem_user_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarPopOrderBy(ctx context.Context, v interface{}) (*model.SystemUserVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsystem_user_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsystem_user_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarSampOrderBy(ctx context.Context, v interface{}) (*model.SystemUserVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOsystem_user_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._system_user_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOsystem_user_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋadminᚋgraphᚋmodelᚐSystemUserVarianceOrderBy(ctx context.Context, v interface{}) (*model.SystemUserVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputsystem_user_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
