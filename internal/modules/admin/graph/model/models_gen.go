// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"VehicleSupervision/internal/modules/admin/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "department"
type DepartmentAggregate struct {
	Aggregate *DepartmentAggregateFields `json:"aggregate"`
	Nodes     []*model.Department        `json:"nodes"`
}

// aggregate fields of "department"
type DepartmentAggregateFields struct {
	Avg        *DepartmentAvgFields        `json:"avg"`
	Count      *int                        `json:"count"`
	Max        *DepartmentMaxFields        `json:"max"`
	Min        *DepartmentMinFields        `json:"min"`
	Stddev     *DepartmentStddevFields     `json:"stddev"`
	StddevPop  *DepartmentStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DepartmentStddevSampFields `json:"stddev_samp"`
	Sum        *DepartmentSumFields        `json:"sum"`
	VarPop     *DepartmentVarPopFields     `json:"var_pop"`
	VarSamp    *DepartmentVarSampFields    `json:"var_samp"`
	Variance   *DepartmentVarianceFields   `json:"variance"`
}

// order by aggregate values of table "department"
type DepartmentAggregateOrderBy struct {
	Avg        *DepartmentAvgOrderBy        `json:"avg"`
	Count      *model1.OrderBy              `json:"count"`
	Max        *DepartmentMaxOrderBy        `json:"max"`
	Min        *DepartmentMinOrderBy        `json:"min"`
	Stddev     *DepartmentStddevOrderBy     `json:"stddev"`
	StddevPop  *DepartmentStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *DepartmentStddevSampOrderBy `json:"stddev_samp"`
	Sum        *DepartmentSumOrderBy        `json:"sum"`
	VarPop     *DepartmentVarPopOrderBy     `json:"var_pop"`
	VarSamp    *DepartmentVarSampOrderBy    `json:"var_samp"`
	Variance   *DepartmentVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "department"
type DepartmentArrRelInsertInput struct {
	Data       []*DepartmentInsertInput `json:"data"`
	OnConflict *DepartmentOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type DepartmentAvgFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by avg() on columns of table "department"
type DepartmentAvgOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// Boolean expression to filter rows from the table "department". All fields are combined with a logical 'AND'.
type DepartmentBoolExp struct {
	And                  []*DepartmentBoolExp             `json:"_and"`
	Not                  *DepartmentBoolExp               `json:"_not"`
	Or                   []*DepartmentBoolExp             `json:"_or"`
	CreateAt             *model1.TimestamptzComparisonExp `json:"create_at"`
	CreateBy             *model1.StringComparisonExp      `json:"create_by"`
	DeleteAt             *model1.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy             *model1.StringComparisonExp      `json:"delete_by"`
	DepartmentCategory   *model1.IntComparisonExp         `json:"department_category"`
	DepartmentCode       *model1.StringComparisonExp      `json:"department_code"`
	DepartmentID         *model1.StringComparisonExp      `json:"department_id"`
	DepartmentName       *model1.StringComparisonExp      `json:"department_name"`
	EnterpriseID         *model1.StringComparisonExp      `json:"enterprise_id"`
	ID                   *model1.BigintComparisonExp      `json:"id"`
	InternalNumber       *model1.IntComparisonExp         `json:"internal_number"`
	IsDelete             *model1.BooleanComparisonExp     `json:"is_delete"`
	Remarks              *model1.StringComparisonExp      `json:"remarks"`
	SuperiorDepartmentID *model1.StringComparisonExp      `json:"superior_department_id"`
	UpdateAt             *model1.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy             *model1.StringComparisonExp      `json:"update_by"`
}

// input type for incrementing integer column in table "department"
type DepartmentIncInput struct {
	DepartmentCategory *int   `json:"department_category"`
	ID                 *int64 `json:"id"`
	InternalNumber     *int   `json:"internal_number"`
}

// input type for inserting data into table "department"
type DepartmentInsertInput struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	DepartmentCategory   *int       `json:"department_category"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentID         *string    `json:"department_id"`
	DepartmentName       *string    `json:"department_name"`
	EnterpriseID         *string    `json:"enterprise_id"`
	ID                   *int64     `json:"id"`
	InternalNumber       *int       `json:"internal_number"`
	IsDelete             *bool      `json:"is_delete"`
	Remarks              *string    `json:"remarks"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

// aggregate max on columns
type DepartmentMaxFields struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	DepartmentCategory   *int       `json:"department_category"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentID         *string    `json:"department_id"`
	DepartmentName       *string    `json:"department_name"`
	EnterpriseID         *string    `json:"enterprise_id"`
	ID                   *int64     `json:"id"`
	InternalNumber       *int       `json:"internal_number"`
	Remarks              *string    `json:"remarks"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

// order by max() on columns of table "department"
type DepartmentMaxOrderBy struct {
	CreateAt             *model1.OrderBy `json:"create_at"`
	CreateBy             *model1.OrderBy `json:"create_by"`
	DeleteAt             *model1.OrderBy `json:"delete_at"`
	DeleteBy             *model1.OrderBy `json:"delete_by"`
	DepartmentCategory   *model1.OrderBy `json:"department_category"`
	DepartmentCode       *model1.OrderBy `json:"department_code"`
	DepartmentID         *model1.OrderBy `json:"department_id"`
	DepartmentName       *model1.OrderBy `json:"department_name"`
	EnterpriseID         *model1.OrderBy `json:"enterprise_id"`
	ID                   *model1.OrderBy `json:"id"`
	InternalNumber       *model1.OrderBy `json:"internal_number"`
	Remarks              *model1.OrderBy `json:"remarks"`
	SuperiorDepartmentID *model1.OrderBy `json:"superior_department_id"`
	UpdateAt             *model1.OrderBy `json:"update_at"`
	UpdateBy             *model1.OrderBy `json:"update_by"`
}

// aggregate min on columns
type DepartmentMinFields struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	DepartmentCategory   *int       `json:"department_category"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentID         *string    `json:"department_id"`
	DepartmentName       *string    `json:"department_name"`
	EnterpriseID         *string    `json:"enterprise_id"`
	ID                   *int64     `json:"id"`
	InternalNumber       *int       `json:"internal_number"`
	Remarks              *string    `json:"remarks"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

// order by min() on columns of table "department"
type DepartmentMinOrderBy struct {
	CreateAt             *model1.OrderBy `json:"create_at"`
	CreateBy             *model1.OrderBy `json:"create_by"`
	DeleteAt             *model1.OrderBy `json:"delete_at"`
	DeleteBy             *model1.OrderBy `json:"delete_by"`
	DepartmentCategory   *model1.OrderBy `json:"department_category"`
	DepartmentCode       *model1.OrderBy `json:"department_code"`
	DepartmentID         *model1.OrderBy `json:"department_id"`
	DepartmentName       *model1.OrderBy `json:"department_name"`
	EnterpriseID         *model1.OrderBy `json:"enterprise_id"`
	ID                   *model1.OrderBy `json:"id"`
	InternalNumber       *model1.OrderBy `json:"internal_number"`
	Remarks              *model1.OrderBy `json:"remarks"`
	SuperiorDepartmentID *model1.OrderBy `json:"superior_department_id"`
	UpdateAt             *model1.OrderBy `json:"update_at"`
	UpdateBy             *model1.OrderBy `json:"update_by"`
}

// response of any mutation on the table "department"
type DepartmentMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*model.Department `json:"returning"`
}

// input type for inserting object relation for remote table "department"
type DepartmentObjRelInsertInput struct {
	Data       *DepartmentInsertInput `json:"data"`
	OnConflict *DepartmentOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "department"
type DepartmentOnConflict struct {
	Constraint    DepartmentConstraint     `json:"constraint"`
	UpdateColumns []DepartmentUpdateColumn `json:"update_columns"`
	Where         *DepartmentBoolExp       `json:"where"`
}

// ordering options when selecting data from "department"
type DepartmentOrderBy struct {
	CreateAt             *model1.OrderBy `json:"create_at"`
	CreateBy             *model1.OrderBy `json:"create_by"`
	DeleteAt             *model1.OrderBy `json:"delete_at"`
	DeleteBy             *model1.OrderBy `json:"delete_by"`
	DepartmentCategory   *model1.OrderBy `json:"department_category"`
	DepartmentCode       *model1.OrderBy `json:"department_code"`
	DepartmentID         *model1.OrderBy `json:"department_id"`
	DepartmentName       *model1.OrderBy `json:"department_name"`
	EnterpriseID         *model1.OrderBy `json:"enterprise_id"`
	ID                   *model1.OrderBy `json:"id"`
	InternalNumber       *model1.OrderBy `json:"internal_number"`
	IsDelete             *model1.OrderBy `json:"is_delete"`
	Remarks              *model1.OrderBy `json:"remarks"`
	SuperiorDepartmentID *model1.OrderBy `json:"superior_department_id"`
	UpdateAt             *model1.OrderBy `json:"update_at"`
	UpdateBy             *model1.OrderBy `json:"update_by"`
}

// primary key columns input for table: "department"
type DepartmentPkColumnsInput struct {
	// ID
	ID int64 `json:"id"`
}

// input type for updating data in table "department"
type DepartmentSetInput struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	DepartmentCategory   *int       `json:"department_category"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentID         *string    `json:"department_id"`
	DepartmentName       *string    `json:"department_name"`
	EnterpriseID         *string    `json:"enterprise_id"`
	ID                   *int64     `json:"id"`
	InternalNumber       *int       `json:"internal_number"`
	IsDelete             *bool      `json:"is_delete"`
	Remarks              *string    `json:"remarks"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

// aggregate stddev on columns
type DepartmentStddevFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by stddev() on columns of table "department"
type DepartmentStddevOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate stddev_pop on columns
type DepartmentStddevPopFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by stddev_pop() on columns of table "department"
type DepartmentStddevPopOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate stddev_samp on columns
type DepartmentStddevSampFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by stddev_samp() on columns of table "department"
type DepartmentStddevSampOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate sum on columns
type DepartmentSumFields struct {
	DepartmentCategory *int   `json:"department_category"`
	ID                 *int64 `json:"id"`
	InternalNumber     *int   `json:"internal_number"`
}

// order by sum() on columns of table "department"
type DepartmentSumOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate var_pop on columns
type DepartmentVarPopFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by var_pop() on columns of table "department"
type DepartmentVarPopOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate var_samp on columns
type DepartmentVarSampFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by var_samp() on columns of table "department"
type DepartmentVarSampOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate variance on columns
type DepartmentVarianceFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by variance() on columns of table "department"
type DepartmentVarianceOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregated selection of "enterprise"
type EnterpriseAggregate struct {
	Aggregate *EnterpriseAggregateFields `json:"aggregate"`
	Nodes     []*model.Enterprise        `json:"nodes"`
}

// aggregate fields of "enterprise"
type EnterpriseAggregateFields struct {
	Avg        *EnterpriseAvgFields        `json:"avg"`
	Count      *int                        `json:"count"`
	Max        *EnterpriseMaxFields        `json:"max"`
	Min        *EnterpriseMinFields        `json:"min"`
	Stddev     *EnterpriseStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseSumFields        `json:"sum"`
	VarPop     *EnterpriseVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseVarianceFields   `json:"variance"`
}

// order by aggregate values of table "enterprise"
type EnterpriseAggregateOrderBy struct {
	Avg        *EnterpriseAvgOrderBy        `json:"avg"`
	Count      *model1.OrderBy              `json:"count"`
	Max        *EnterpriseMaxOrderBy        `json:"max"`
	Min        *EnterpriseMinOrderBy        `json:"min"`
	Stddev     *EnterpriseStddevOrderBy     `json:"stddev"`
	StddevPop  *EnterpriseStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *EnterpriseStddevSampOrderBy `json:"stddev_samp"`
	Sum        *EnterpriseSumOrderBy        `json:"sum"`
	VarPop     *EnterpriseVarPopOrderBy     `json:"var_pop"`
	VarSamp    *EnterpriseVarSampOrderBy    `json:"var_samp"`
	Variance   *EnterpriseVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "enterprise"
type EnterpriseArrRelInsertInput struct {
	Data       []*EnterpriseInsertInput `json:"data"`
	OnConflict *EnterpriseOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type EnterpriseAvgFields struct {
	BusinessScope       *float64 `json:"business_scope"`
	CheckStatus         *float64 `json:"check_status"`
	CityID              *float64 `json:"city_id"`
	DisplayNumber       *float64 `json:"display_number"`
	DistrictID          *float64 `json:"district_id"`
	EnterpriseLevel     *float64 `json:"enterprise_level"`
	EnterpriseNature    *float64 `json:"enterprise_nature"`
	ID                  *float64 `json:"id"`
	InstitutionCategory *float64 `json:"institution_category"`
	ProvinceID          *float64 `json:"province_id"`
	Score               *float64 `json:"score"`
}

// order by avg() on columns of table "enterprise"
type EnterpriseAvgOrderBy struct {
	BusinessScope       *model1.OrderBy `json:"business_scope"`
	CheckStatus         *model1.OrderBy `json:"check_status"`
	CityID              *model1.OrderBy `json:"city_id"`
	DisplayNumber       *model1.OrderBy `json:"display_number"`
	DistrictID          *model1.OrderBy `json:"district_id"`
	EnterpriseLevel     *model1.OrderBy `json:"enterprise_level"`
	EnterpriseNature    *model1.OrderBy `json:"enterprise_nature"`
	ID                  *model1.OrderBy `json:"id"`
	InstitutionCategory *model1.OrderBy `json:"institution_category"`
	ProvinceID          *model1.OrderBy `json:"province_id"`
	Score               *model1.OrderBy `json:"score"`
}

// Boolean expression to filter rows from the table "enterprise". All fields are combined with a logical 'AND'.
type EnterpriseBoolExp struct {
	And                              []*EnterpriseBoolExp             `json:"_and"`
	Not                              *EnterpriseBoolExp               `json:"_not"`
	Or                               []*EnterpriseBoolExp             `json:"_or"`
	AssociationReviewBy              *model1.TimestamptzComparisonExp `json:"association_review_by"`
	AssociationReviewOpinion         *model1.StringComparisonExp      `json:"association_review_opinion"`
	AssociationReviewTime            *model1.TimestamptzComparisonExp `json:"association_review_time"`
	BrigadeID                        *model1.StringComparisonExp      `json:"brigade_id"`
	BrigadeReviewBy                  *model1.StringComparisonExp      `json:"brigade_review_by"`
	BrigadeReviewOpinion             *model1.StringComparisonExp      `json:"brigade_review_opinion"`
	BrigadeReviewTime                *model1.TimestamptzComparisonExp `json:"brigade_review_time"`
	BusinessLicenseExpiryDate        *model1.TimestamptzComparisonExp `json:"business_license_expiry_date"`
	BusinessLicenseIssuanceDate      *model1.TimestamptzComparisonExp `json:"business_license_issuance_date"`
	BusinessLicensePhoto             *model1.StringComparisonExp      `json:"business_license_photo"`
	BusinessPhoto                    *model1.StringComparisonExp      `json:"business_photo"`
	BusinessScope                    *model1.IntComparisonExp         `json:"business_scope"`
	CheckStatus                      *model1.IntComparisonExp         `json:"check_status"`
	CityID                           *model1.BigintComparisonExp      `json:"city_id"`
	ContactPersons                   *model1.JsonbComparisonExp       `json:"contact_persons"`
	CreateAt                         *model1.TimestamptzComparisonExp `json:"create_at"`
	CreateBy                         *model1.StringComparisonExp      `json:"create_by"`
	DeleteAt                         *model1.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy                         *model1.StringComparisonExp      `json:"delete_by"`
	DisplayNumber                    *model1.IntComparisonExp         `json:"display_number"`
	DistrictID                       *model1.BigintComparisonExp      `json:"district_id"`
	EnterpriseAddress                *model1.StringComparisonExp      `json:"enterprise_address"`
	EnterpriseCode                   *model1.StringComparisonExp      `json:"enterprise_code"`
	EnterpriseID                     *model1.StringComparisonExp      `json:"enterprise_id"`
	EnterpriseLevel                  *model1.IntComparisonExp         `json:"enterprise_level"`
	EnterpriseName                   *model1.StringComparisonExp      `json:"enterprise_name"`
	EnterpriseNature                 *model1.IntComparisonExp         `json:"enterprise_nature"`
	EntrustedAgent                   *model1.StringComparisonExp      `json:"entrusted_agent"`
	EntrustedAgentIDCard             *model1.StringComparisonExp      `json:"entrusted_agent_id_card"`
	EntrustedAgentIDCardPhoto        *model1.StringComparisonExp      `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentPhone              *model1.StringComparisonExp      `json:"entrusted_agent_phone"`
	FaxNumber                        *model1.StringComparisonExp      `json:"fax_number"`
	ID                               *model1.BigintComparisonExp      `json:"id"`
	InstitutionCategory              *model1.BigintComparisonExp      `json:"institution_category"`
	IsBlack                          *model1.BooleanComparisonExp     `json:"is_black"`
	IsDeleted                        *model1.BooleanComparisonExp     `json:"is_deleted"`
	IsInput                          *model1.BooleanComparisonExp     `json:"is_input"`
	IsInstall                        *model1.BooleanComparisonExp     `json:"is_install"`
	IsUploadProvince                 *model1.BooleanComparisonExp     `json:"is_upload_province"`
	LegalRepresentative              *model1.StringComparisonExp      `json:"legal_representative"`
	LegalRepresentativeIDCard        *model1.StringComparisonExp      `json:"legal_representative_id_card"`
	LegalRepresentativeIDCardPhoto   *model1.StringComparisonExp      `json:"legal_representative_id_card_photo"`
	LegalRepresentativePhone         *model1.StringComparisonExp      `json:"legal_representative_phone"`
	OperatingLicensePhoto            *model1.StringComparisonExp      `json:"operating_license_photo"`
	OrganizationCode                 *model1.StringComparisonExp      `json:"organization_code"`
	OrganizationCodeCertificatePhoto *model1.StringComparisonExp      `json:"organization_code_certificate_photo"`
	PoliceStationID                  *model1.StringComparisonExp      `json:"police_station_id"`
	ProvinceID                       *model1.BigintComparisonExp      `json:"province_id"`
	RecordAt                         *model1.TimestamptzComparisonExp `json:"record_at"`
	RecordBy                         *model1.StringComparisonExp      `json:"record_by"`
	Remarks                          *model1.StringComparisonExp      `json:"remarks"`
	Score                            *model1.IntComparisonExp         `json:"score"`
	SuperiorEnterpriseID             *model1.StringComparisonExp      `json:"superior_enterprise_id"`
	UpdateAt                         *model1.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy                         *model1.StringComparisonExp      `json:"update_by"`
	UpdateTimeIn                     *model1.TimestamptzComparisonExp `json:"update_time_in"`
}

// input type for incrementing integer column in table "enterprise"
type EnterpriseIncInput struct {
	BusinessScope       *int   `json:"business_scope"`
	CheckStatus         *int   `json:"check_status"`
	CityID              *int64 `json:"city_id"`
	DisplayNumber       *int   `json:"display_number"`
	DistrictID          *int64 `json:"district_id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	ID                  *int64 `json:"id"`
	InstitutionCategory *int64 `json:"institution_category"`
	ProvinceID          *int64 `json:"province_id"`
	Score               *int   `json:"score"`
}

// input type for inserting data into table "enterprise"
type EnterpriseInsertInput struct {
	AssociationReviewBy              *time.Time `json:"association_review_by"`
	AssociationReviewOpinion         *string    `json:"association_review_opinion"`
	AssociationReviewTime            *time.Time `json:"association_review_time"`
	BrigadeID                        *string    `json:"brigade_id"`
	BrigadeReviewBy                  *string    `json:"brigade_review_by"`
	BrigadeReviewOpinion             *string    `json:"brigade_review_opinion"`
	BrigadeReviewTime                *time.Time `json:"brigade_review_time"`
	BusinessLicenseExpiryDate        *time.Time `json:"business_license_expiry_date"`
	BusinessLicenseIssuanceDate      *time.Time `json:"business_license_issuance_date"`
	BusinessLicensePhoto             *string    `json:"business_license_photo"`
	BusinessPhoto                    *string    `json:"business_photo"`
	BusinessScope                    *int       `json:"business_scope"`
	CheckStatus                      *int       `json:"check_status"`
	CityID                           *int64     `json:"city_id"`
	ContactPersons                   *string    `json:"contact_persons"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	DisplayNumber                    *int       `json:"display_number"`
	DistrictID                       *int64     `json:"district_id"`
	EnterpriseAddress                *string    `json:"enterprise_address"`
	EnterpriseCode                   *string    `json:"enterprise_code"`
	EnterpriseID                     *string    `json:"enterprise_id"`
	EnterpriseLevel                  *int       `json:"enterprise_level"`
	EnterpriseName                   *string    `json:"enterprise_name"`
	EnterpriseNature                 *int       `json:"enterprise_nature"`
	EntrustedAgent                   *string    `json:"entrusted_agent"`
	EntrustedAgentIDCard             *string    `json:"entrusted_agent_id_card"`
	EntrustedAgentIDCardPhoto        *string    `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentPhone              *string    `json:"entrusted_agent_phone"`
	FaxNumber                        *string    `json:"fax_number"`
	ID                               *int64     `json:"id"`
	InstitutionCategory              *int64     `json:"institution_category"`
	IsBlack                          *bool      `json:"is_black"`
	IsDeleted                        *bool      `json:"is_deleted"`
	IsInput                          *bool      `json:"is_input"`
	IsInstall                        *bool      `json:"is_install"`
	IsUploadProvince                 *bool      `json:"is_upload_province"`
	LegalRepresentative              *string    `json:"legal_representative"`
	LegalRepresentativeIDCard        *string    `json:"legal_representative_id_card"`
	LegalRepresentativeIDCardPhoto   *string    `json:"legal_representative_id_card_photo"`
	LegalRepresentativePhone         *string    `json:"legal_representative_phone"`
	OperatingLicensePhoto            *string    `json:"operating_license_photo"`
	OrganizationCode                 *string    `json:"organization_code"`
	OrganizationCodeCertificatePhoto *string    `json:"organization_code_certificate_photo"`
	PoliceStationID                  *string    `json:"police_station_id"`
	ProvinceID                       *int64     `json:"province_id"`
	RecordAt                         *time.Time `json:"record_at"`
	RecordBy                         *string    `json:"record_by"`
	Remarks                          *string    `json:"remarks"`
	Score                            *int       `json:"score"`
	SuperiorEnterpriseID             *string    `json:"superior_enterprise_id"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	UpdateTimeIn                     *time.Time `json:"update_time_in"`
}

// aggregate max on columns
type EnterpriseMaxFields struct {
	AssociationReviewBy              *time.Time `json:"association_review_by"`
	AssociationReviewOpinion         *string    `json:"association_review_opinion"`
	AssociationReviewTime            *time.Time `json:"association_review_time"`
	BrigadeID                        *string    `json:"brigade_id"`
	BrigadeReviewBy                  *string    `json:"brigade_review_by"`
	BrigadeReviewOpinion             *string    `json:"brigade_review_opinion"`
	BrigadeReviewTime                *time.Time `json:"brigade_review_time"`
	BusinessLicenseExpiryDate        *time.Time `json:"business_license_expiry_date"`
	BusinessLicenseIssuanceDate      *time.Time `json:"business_license_issuance_date"`
	BusinessLicensePhoto             *string    `json:"business_license_photo"`
	BusinessPhoto                    *string    `json:"business_photo"`
	BusinessScope                    *int       `json:"business_scope"`
	CheckStatus                      *int       `json:"check_status"`
	CityID                           *int64     `json:"city_id"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	DisplayNumber                    *int       `json:"display_number"`
	DistrictID                       *int64     `json:"district_id"`
	EnterpriseAddress                *string    `json:"enterprise_address"`
	EnterpriseCode                   *string    `json:"enterprise_code"`
	EnterpriseID                     *string    `json:"enterprise_id"`
	EnterpriseLevel                  *int       `json:"enterprise_level"`
	EnterpriseName                   *string    `json:"enterprise_name"`
	EnterpriseNature                 *int       `json:"enterprise_nature"`
	EntrustedAgent                   *string    `json:"entrusted_agent"`
	EntrustedAgentIDCard             *string    `json:"entrusted_agent_id_card"`
	EntrustedAgentIDCardPhoto        *string    `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentPhone              *string    `json:"entrusted_agent_phone"`
	FaxNumber                        *string    `json:"fax_number"`
	ID                               *int64     `json:"id"`
	InstitutionCategory              *int64     `json:"institution_category"`
	LegalRepresentative              *string    `json:"legal_representative"`
	LegalRepresentativeIDCard        *string    `json:"legal_representative_id_card"`
	LegalRepresentativeIDCardPhoto   *string    `json:"legal_representative_id_card_photo"`
	LegalRepresentativePhone         *string    `json:"legal_representative_phone"`
	OperatingLicensePhoto            *string    `json:"operating_license_photo"`
	OrganizationCode                 *string    `json:"organization_code"`
	OrganizationCodeCertificatePhoto *string    `json:"organization_code_certificate_photo"`
	PoliceStationID                  *string    `json:"police_station_id"`
	ProvinceID                       *int64     `json:"province_id"`
	RecordAt                         *time.Time `json:"record_at"`
	RecordBy                         *string    `json:"record_by"`
	Remarks                          *string    `json:"remarks"`
	Score                            *int       `json:"score"`
	SuperiorEnterpriseID             *string    `json:"superior_enterprise_id"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	UpdateTimeIn                     *time.Time `json:"update_time_in"`
}

// order by max() on columns of table "enterprise"
type EnterpriseMaxOrderBy struct {
	AssociationReviewBy              *model1.OrderBy `json:"association_review_by"`
	AssociationReviewOpinion         *model1.OrderBy `json:"association_review_opinion"`
	AssociationReviewTime            *model1.OrderBy `json:"association_review_time"`
	BrigadeID                        *model1.OrderBy `json:"brigade_id"`
	BrigadeReviewBy                  *model1.OrderBy `json:"brigade_review_by"`
	BrigadeReviewOpinion             *model1.OrderBy `json:"brigade_review_opinion"`
	BrigadeReviewTime                *model1.OrderBy `json:"brigade_review_time"`
	BusinessLicenseExpiryDate        *model1.OrderBy `json:"business_license_expiry_date"`
	BusinessLicenseIssuanceDate      *model1.OrderBy `json:"business_license_issuance_date"`
	BusinessLicensePhoto             *model1.OrderBy `json:"business_license_photo"`
	BusinessPhoto                    *model1.OrderBy `json:"business_photo"`
	BusinessScope                    *model1.OrderBy `json:"business_scope"`
	CheckStatus                      *model1.OrderBy `json:"check_status"`
	CityID                           *model1.OrderBy `json:"city_id"`
	CreateAt                         *model1.OrderBy `json:"create_at"`
	CreateBy                         *model1.OrderBy `json:"create_by"`
	DeleteAt                         *model1.OrderBy `json:"delete_at"`
	DeleteBy                         *model1.OrderBy `json:"delete_by"`
	DisplayNumber                    *model1.OrderBy `json:"display_number"`
	DistrictID                       *model1.OrderBy `json:"district_id"`
	EnterpriseAddress                *model1.OrderBy `json:"enterprise_address"`
	EnterpriseCode                   *model1.OrderBy `json:"enterprise_code"`
	EnterpriseID                     *model1.OrderBy `json:"enterprise_id"`
	EnterpriseLevel                  *model1.OrderBy `json:"enterprise_level"`
	EnterpriseName                   *model1.OrderBy `json:"enterprise_name"`
	EnterpriseNature                 *model1.OrderBy `json:"enterprise_nature"`
	EntrustedAgent                   *model1.OrderBy `json:"entrusted_agent"`
	EntrustedAgentIDCard             *model1.OrderBy `json:"entrusted_agent_id_card"`
	EntrustedAgentIDCardPhoto        *model1.OrderBy `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentPhone              *model1.OrderBy `json:"entrusted_agent_phone"`
	FaxNumber                        *model1.OrderBy `json:"fax_number"`
	ID                               *model1.OrderBy `json:"id"`
	InstitutionCategory              *model1.OrderBy `json:"institution_category"`
	LegalRepresentative              *model1.OrderBy `json:"legal_representative"`
	LegalRepresentativeIDCard        *model1.OrderBy `json:"legal_representative_id_card"`
	LegalRepresentativeIDCardPhoto   *model1.OrderBy `json:"legal_representative_id_card_photo"`
	LegalRepresentativePhone         *model1.OrderBy `json:"legal_representative_phone"`
	OperatingLicensePhoto            *model1.OrderBy `json:"operating_license_photo"`
	OrganizationCode                 *model1.OrderBy `json:"organization_code"`
	OrganizationCodeCertificatePhoto *model1.OrderBy `json:"organization_code_certificate_photo"`
	PoliceStationID                  *model1.OrderBy `json:"police_station_id"`
	ProvinceID                       *model1.OrderBy `json:"province_id"`
	RecordAt                         *model1.OrderBy `json:"record_at"`
	RecordBy                         *model1.OrderBy `json:"record_by"`
	Remarks                          *model1.OrderBy `json:"remarks"`
	Score                            *model1.OrderBy `json:"score"`
	SuperiorEnterpriseID             *model1.OrderBy `json:"superior_enterprise_id"`
	UpdateAt                         *model1.OrderBy `json:"update_at"`
	UpdateBy                         *model1.OrderBy `json:"update_by"`
	UpdateTimeIn                     *model1.OrderBy `json:"update_time_in"`
}

// aggregate min on columns
type EnterpriseMinFields struct {
	AssociationReviewBy              *time.Time `json:"association_review_by"`
	AssociationReviewOpinion         *string    `json:"association_review_opinion"`
	AssociationReviewTime            *time.Time `json:"association_review_time"`
	BrigadeID                        *string    `json:"brigade_id"`
	BrigadeReviewBy                  *string    `json:"brigade_review_by"`
	BrigadeReviewOpinion             *string    `json:"brigade_review_opinion"`
	BrigadeReviewTime                *time.Time `json:"brigade_review_time"`
	BusinessLicenseExpiryDate        *time.Time `json:"business_license_expiry_date"`
	BusinessLicenseIssuanceDate      *time.Time `json:"business_license_issuance_date"`
	BusinessLicensePhoto             *string    `json:"business_license_photo"`
	BusinessPhoto                    *string    `json:"business_photo"`
	BusinessScope                    *int       `json:"business_scope"`
	CheckStatus                      *int       `json:"check_status"`
	CityID                           *int64     `json:"city_id"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	DisplayNumber                    *int       `json:"display_number"`
	DistrictID                       *int64     `json:"district_id"`
	EnterpriseAddress                *string    `json:"enterprise_address"`
	EnterpriseCode                   *string    `json:"enterprise_code"`
	EnterpriseID                     *string    `json:"enterprise_id"`
	EnterpriseLevel                  *int       `json:"enterprise_level"`
	EnterpriseName                   *string    `json:"enterprise_name"`
	EnterpriseNature                 *int       `json:"enterprise_nature"`
	EntrustedAgent                   *string    `json:"entrusted_agent"`
	EntrustedAgentIDCard             *string    `json:"entrusted_agent_id_card"`
	EntrustedAgentIDCardPhoto        *string    `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentPhone              *string    `json:"entrusted_agent_phone"`
	FaxNumber                        *string    `json:"fax_number"`
	ID                               *int64     `json:"id"`
	InstitutionCategory              *int64     `json:"institution_category"`
	LegalRepresentative              *string    `json:"legal_representative"`
	LegalRepresentativeIDCard        *string    `json:"legal_representative_id_card"`
	LegalRepresentativeIDCardPhoto   *string    `json:"legal_representative_id_card_photo"`
	LegalRepresentativePhone         *string    `json:"legal_representative_phone"`
	OperatingLicensePhoto            *string    `json:"operating_license_photo"`
	OrganizationCode                 *string    `json:"organization_code"`
	OrganizationCodeCertificatePhoto *string    `json:"organization_code_certificate_photo"`
	PoliceStationID                  *string    `json:"police_station_id"`
	ProvinceID                       *int64     `json:"province_id"`
	RecordAt                         *time.Time `json:"record_at"`
	RecordBy                         *string    `json:"record_by"`
	Remarks                          *string    `json:"remarks"`
	Score                            *int       `json:"score"`
	SuperiorEnterpriseID             *string    `json:"superior_enterprise_id"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	UpdateTimeIn                     *time.Time `json:"update_time_in"`
}

// order by min() on columns of table "enterprise"
type EnterpriseMinOrderBy struct {
	AssociationReviewBy              *model1.OrderBy `json:"association_review_by"`
	AssociationReviewOpinion         *model1.OrderBy `json:"association_review_opinion"`
	AssociationReviewTime            *model1.OrderBy `json:"association_review_time"`
	BrigadeID                        *model1.OrderBy `json:"brigade_id"`
	BrigadeReviewBy                  *model1.OrderBy `json:"brigade_review_by"`
	BrigadeReviewOpinion             *model1.OrderBy `json:"brigade_review_opinion"`
	BrigadeReviewTime                *model1.OrderBy `json:"brigade_review_time"`
	BusinessLicenseExpiryDate        *model1.OrderBy `json:"business_license_expiry_date"`
	BusinessLicenseIssuanceDate      *model1.OrderBy `json:"business_license_issuance_date"`
	BusinessLicensePhoto             *model1.OrderBy `json:"business_license_photo"`
	BusinessPhoto                    *model1.OrderBy `json:"business_photo"`
	BusinessScope                    *model1.OrderBy `json:"business_scope"`
	CheckStatus                      *model1.OrderBy `json:"check_status"`
	CityID                           *model1.OrderBy `json:"city_id"`
	CreateAt                         *model1.OrderBy `json:"create_at"`
	CreateBy                         *model1.OrderBy `json:"create_by"`
	DeleteAt                         *model1.OrderBy `json:"delete_at"`
	DeleteBy                         *model1.OrderBy `json:"delete_by"`
	DisplayNumber                    *model1.OrderBy `json:"display_number"`
	DistrictID                       *model1.OrderBy `json:"district_id"`
	EnterpriseAddress                *model1.OrderBy `json:"enterprise_address"`
	EnterpriseCode                   *model1.OrderBy `json:"enterprise_code"`
	EnterpriseID                     *model1.OrderBy `json:"enterprise_id"`
	EnterpriseLevel                  *model1.OrderBy `json:"enterprise_level"`
	EnterpriseName                   *model1.OrderBy `json:"enterprise_name"`
	EnterpriseNature                 *model1.OrderBy `json:"enterprise_nature"`
	EntrustedAgent                   *model1.OrderBy `json:"entrusted_agent"`
	EntrustedAgentIDCard             *model1.OrderBy `json:"entrusted_agent_id_card"`
	EntrustedAgentIDCardPhoto        *model1.OrderBy `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentPhone              *model1.OrderBy `json:"entrusted_agent_phone"`
	FaxNumber                        *model1.OrderBy `json:"fax_number"`
	ID                               *model1.OrderBy `json:"id"`
	InstitutionCategory              *model1.OrderBy `json:"institution_category"`
	LegalRepresentative              *model1.OrderBy `json:"legal_representative"`
	LegalRepresentativeIDCard        *model1.OrderBy `json:"legal_representative_id_card"`
	LegalRepresentativeIDCardPhoto   *model1.OrderBy `json:"legal_representative_id_card_photo"`
	LegalRepresentativePhone         *model1.OrderBy `json:"legal_representative_phone"`
	OperatingLicensePhoto            *model1.OrderBy `json:"operating_license_photo"`
	OrganizationCode                 *model1.OrderBy `json:"organization_code"`
	OrganizationCodeCertificatePhoto *model1.OrderBy `json:"organization_code_certificate_photo"`
	PoliceStationID                  *model1.OrderBy `json:"police_station_id"`
	ProvinceID                       *model1.OrderBy `json:"province_id"`
	RecordAt                         *model1.OrderBy `json:"record_at"`
	RecordBy                         *model1.OrderBy `json:"record_by"`
	Remarks                          *model1.OrderBy `json:"remarks"`
	Score                            *model1.OrderBy `json:"score"`
	SuperiorEnterpriseID             *model1.OrderBy `json:"superior_enterprise_id"`
	UpdateAt                         *model1.OrderBy `json:"update_at"`
	UpdateBy                         *model1.OrderBy `json:"update_by"`
	UpdateTimeIn                     *model1.OrderBy `json:"update_time_in"`
}

// response of any mutation on the table "enterprise"
type EnterpriseMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*model.Enterprise `json:"returning"`
}

// input type for inserting object relation for remote table "enterprise"
type EnterpriseObjRelInsertInput struct {
	Data       *EnterpriseInsertInput `json:"data"`
	OnConflict *EnterpriseOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "enterprise"
type EnterpriseOnConflict struct {
	Constraint    EnterpriseConstraint     `json:"constraint"`
	UpdateColumns []EnterpriseUpdateColumn `json:"update_columns"`
	Where         *EnterpriseBoolExp       `json:"where"`
}

// ordering options when selecting data from "enterprise"
type EnterpriseOrderBy struct {
	AssociationReviewBy              *model1.OrderBy `json:"association_review_by"`
	AssociationReviewOpinion         *model1.OrderBy `json:"association_review_opinion"`
	AssociationReviewTime            *model1.OrderBy `json:"association_review_time"`
	BrigadeID                        *model1.OrderBy `json:"brigade_id"`
	BrigadeReviewBy                  *model1.OrderBy `json:"brigade_review_by"`
	BrigadeReviewOpinion             *model1.OrderBy `json:"brigade_review_opinion"`
	BrigadeReviewTime                *model1.OrderBy `json:"brigade_review_time"`
	BusinessLicenseExpiryDate        *model1.OrderBy `json:"business_license_expiry_date"`
	BusinessLicenseIssuanceDate      *model1.OrderBy `json:"business_license_issuance_date"`
	BusinessLicensePhoto             *model1.OrderBy `json:"business_license_photo"`
	BusinessPhoto                    *model1.OrderBy `json:"business_photo"`
	BusinessScope                    *model1.OrderBy `json:"business_scope"`
	CheckStatus                      *model1.OrderBy `json:"check_status"`
	CityID                           *model1.OrderBy `json:"city_id"`
	ContactPersons                   *model1.OrderBy `json:"contact_persons"`
	CreateAt                         *model1.OrderBy `json:"create_at"`
	CreateBy                         *model1.OrderBy `json:"create_by"`
	DeleteAt                         *model1.OrderBy `json:"delete_at"`
	DeleteBy                         *model1.OrderBy `json:"delete_by"`
	DisplayNumber                    *model1.OrderBy `json:"display_number"`
	DistrictID                       *model1.OrderBy `json:"district_id"`
	EnterpriseAddress                *model1.OrderBy `json:"enterprise_address"`
	EnterpriseCode                   *model1.OrderBy `json:"enterprise_code"`
	EnterpriseID                     *model1.OrderBy `json:"enterprise_id"`
	EnterpriseLevel                  *model1.OrderBy `json:"enterprise_level"`
	EnterpriseName                   *model1.OrderBy `json:"enterprise_name"`
	EnterpriseNature                 *model1.OrderBy `json:"enterprise_nature"`
	EntrustedAgent                   *model1.OrderBy `json:"entrusted_agent"`
	EntrustedAgentIDCard             *model1.OrderBy `json:"entrusted_agent_id_card"`
	EntrustedAgentIDCardPhoto        *model1.OrderBy `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentPhone              *model1.OrderBy `json:"entrusted_agent_phone"`
	FaxNumber                        *model1.OrderBy `json:"fax_number"`
	ID                               *model1.OrderBy `json:"id"`
	InstitutionCategory              *model1.OrderBy `json:"institution_category"`
	IsBlack                          *model1.OrderBy `json:"is_black"`
	IsDeleted                        *model1.OrderBy `json:"is_deleted"`
	IsInput                          *model1.OrderBy `json:"is_input"`
	IsInstall                        *model1.OrderBy `json:"is_install"`
	IsUploadProvince                 *model1.OrderBy `json:"is_upload_province"`
	LegalRepresentative              *model1.OrderBy `json:"legal_representative"`
	LegalRepresentativeIDCard        *model1.OrderBy `json:"legal_representative_id_card"`
	LegalRepresentativeIDCardPhoto   *model1.OrderBy `json:"legal_representative_id_card_photo"`
	LegalRepresentativePhone         *model1.OrderBy `json:"legal_representative_phone"`
	OperatingLicensePhoto            *model1.OrderBy `json:"operating_license_photo"`
	OrganizationCode                 *model1.OrderBy `json:"organization_code"`
	OrganizationCodeCertificatePhoto *model1.OrderBy `json:"organization_code_certificate_photo"`
	PoliceStationID                  *model1.OrderBy `json:"police_station_id"`
	ProvinceID                       *model1.OrderBy `json:"province_id"`
	RecordAt                         *model1.OrderBy `json:"record_at"`
	RecordBy                         *model1.OrderBy `json:"record_by"`
	Remarks                          *model1.OrderBy `json:"remarks"`
	Score                            *model1.OrderBy `json:"score"`
	SuperiorEnterpriseID             *model1.OrderBy `json:"superior_enterprise_id"`
	UpdateAt                         *model1.OrderBy `json:"update_at"`
	UpdateBy                         *model1.OrderBy `json:"update_by"`
	UpdateTimeIn                     *model1.OrderBy `json:"update_time_in"`
}

// primary key columns input for table: "enterprise"
type EnterprisePkColumnsInput struct {
	// ID
	ID int64 `json:"id"`
}

// input type for updating data in table "enterprise"
type EnterpriseSetInput struct {
	AssociationReviewBy              *time.Time `json:"association_review_by"`
	AssociationReviewOpinion         *string    `json:"association_review_opinion"`
	AssociationReviewTime            *time.Time `json:"association_review_time"`
	BrigadeID                        *string    `json:"brigade_id"`
	BrigadeReviewBy                  *string    `json:"brigade_review_by"`
	BrigadeReviewOpinion             *string    `json:"brigade_review_opinion"`
	BrigadeReviewTime                *time.Time `json:"brigade_review_time"`
	BusinessLicenseExpiryDate        *time.Time `json:"business_license_expiry_date"`
	BusinessLicenseIssuanceDate      *time.Time `json:"business_license_issuance_date"`
	BusinessLicensePhoto             *string    `json:"business_license_photo"`
	BusinessPhoto                    *string    `json:"business_photo"`
	BusinessScope                    *int       `json:"business_scope"`
	CheckStatus                      *int       `json:"check_status"`
	CityID                           *int64     `json:"city_id"`
	ContactPersons                   *string    `json:"contact_persons"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	DisplayNumber                    *int       `json:"display_number"`
	DistrictID                       *int64     `json:"district_id"`
	EnterpriseAddress                *string    `json:"enterprise_address"`
	EnterpriseCode                   *string    `json:"enterprise_code"`
	EnterpriseID                     *string    `json:"enterprise_id"`
	EnterpriseLevel                  *int       `json:"enterprise_level"`
	EnterpriseName                   *string    `json:"enterprise_name"`
	EnterpriseNature                 *int       `json:"enterprise_nature"`
	EntrustedAgent                   *string    `json:"entrusted_agent"`
	EntrustedAgentIDCard             *string    `json:"entrusted_agent_id_card"`
	EntrustedAgentIDCardPhoto        *string    `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentPhone              *string    `json:"entrusted_agent_phone"`
	FaxNumber                        *string    `json:"fax_number"`
	ID                               *int64     `json:"id"`
	InstitutionCategory              *int64     `json:"institution_category"`
	IsBlack                          *bool      `json:"is_black"`
	IsDeleted                        *bool      `json:"is_deleted"`
	IsInput                          *bool      `json:"is_input"`
	IsInstall                        *bool      `json:"is_install"`
	IsUploadProvince                 *bool      `json:"is_upload_province"`
	LegalRepresentative              *string    `json:"legal_representative"`
	LegalRepresentativeIDCard        *string    `json:"legal_representative_id_card"`
	LegalRepresentativeIDCardPhoto   *string    `json:"legal_representative_id_card_photo"`
	LegalRepresentativePhone         *string    `json:"legal_representative_phone"`
	OperatingLicensePhoto            *string    `json:"operating_license_photo"`
	OrganizationCode                 *string    `json:"organization_code"`
	OrganizationCodeCertificatePhoto *string    `json:"organization_code_certificate_photo"`
	PoliceStationID                  *string    `json:"police_station_id"`
	ProvinceID                       *int64     `json:"province_id"`
	RecordAt                         *time.Time `json:"record_at"`
	RecordBy                         *string    `json:"record_by"`
	Remarks                          *string    `json:"remarks"`
	Score                            *int       `json:"score"`
	SuperiorEnterpriseID             *string    `json:"superior_enterprise_id"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	UpdateTimeIn                     *time.Time `json:"update_time_in"`
}

// aggregate stddev on columns
type EnterpriseStddevFields struct {
	BusinessScope       *float64 `json:"business_scope"`
	CheckStatus         *float64 `json:"check_status"`
	CityID              *float64 `json:"city_id"`
	DisplayNumber       *float64 `json:"display_number"`
	DistrictID          *float64 `json:"district_id"`
	EnterpriseLevel     *float64 `json:"enterprise_level"`
	EnterpriseNature    *float64 `json:"enterprise_nature"`
	ID                  *float64 `json:"id"`
	InstitutionCategory *float64 `json:"institution_category"`
	ProvinceID          *float64 `json:"province_id"`
	Score               *float64 `json:"score"`
}

// order by stddev() on columns of table "enterprise"
type EnterpriseStddevOrderBy struct {
	BusinessScope       *model1.OrderBy `json:"business_scope"`
	CheckStatus         *model1.OrderBy `json:"check_status"`
	CityID              *model1.OrderBy `json:"city_id"`
	DisplayNumber       *model1.OrderBy `json:"display_number"`
	DistrictID          *model1.OrderBy `json:"district_id"`
	EnterpriseLevel     *model1.OrderBy `json:"enterprise_level"`
	EnterpriseNature    *model1.OrderBy `json:"enterprise_nature"`
	ID                  *model1.OrderBy `json:"id"`
	InstitutionCategory *model1.OrderBy `json:"institution_category"`
	ProvinceID          *model1.OrderBy `json:"province_id"`
	Score               *model1.OrderBy `json:"score"`
}

// aggregate stddev_pop on columns
type EnterpriseStddevPopFields struct {
	BusinessScope       *float64 `json:"business_scope"`
	CheckStatus         *float64 `json:"check_status"`
	CityID              *float64 `json:"city_id"`
	DisplayNumber       *float64 `json:"display_number"`
	DistrictID          *float64 `json:"district_id"`
	EnterpriseLevel     *float64 `json:"enterprise_level"`
	EnterpriseNature    *float64 `json:"enterprise_nature"`
	ID                  *float64 `json:"id"`
	InstitutionCategory *float64 `json:"institution_category"`
	ProvinceID          *float64 `json:"province_id"`
	Score               *float64 `json:"score"`
}

// order by stddev_pop() on columns of table "enterprise"
type EnterpriseStddevPopOrderBy struct {
	BusinessScope       *model1.OrderBy `json:"business_scope"`
	CheckStatus         *model1.OrderBy `json:"check_status"`
	CityID              *model1.OrderBy `json:"city_id"`
	DisplayNumber       *model1.OrderBy `json:"display_number"`
	DistrictID          *model1.OrderBy `json:"district_id"`
	EnterpriseLevel     *model1.OrderBy `json:"enterprise_level"`
	EnterpriseNature    *model1.OrderBy `json:"enterprise_nature"`
	ID                  *model1.OrderBy `json:"id"`
	InstitutionCategory *model1.OrderBy `json:"institution_category"`
	ProvinceID          *model1.OrderBy `json:"province_id"`
	Score               *model1.OrderBy `json:"score"`
}

// aggregate stddev_samp on columns
type EnterpriseStddevSampFields struct {
	BusinessScope       *float64 `json:"business_scope"`
	CheckStatus         *float64 `json:"check_status"`
	CityID              *float64 `json:"city_id"`
	DisplayNumber       *float64 `json:"display_number"`
	DistrictID          *float64 `json:"district_id"`
	EnterpriseLevel     *float64 `json:"enterprise_level"`
	EnterpriseNature    *float64 `json:"enterprise_nature"`
	ID                  *float64 `json:"id"`
	InstitutionCategory *float64 `json:"institution_category"`
	ProvinceID          *float64 `json:"province_id"`
	Score               *float64 `json:"score"`
}

// order by stddev_samp() on columns of table "enterprise"
type EnterpriseStddevSampOrderBy struct {
	BusinessScope       *model1.OrderBy `json:"business_scope"`
	CheckStatus         *model1.OrderBy `json:"check_status"`
	CityID              *model1.OrderBy `json:"city_id"`
	DisplayNumber       *model1.OrderBy `json:"display_number"`
	DistrictID          *model1.OrderBy `json:"district_id"`
	EnterpriseLevel     *model1.OrderBy `json:"enterprise_level"`
	EnterpriseNature    *model1.OrderBy `json:"enterprise_nature"`
	ID                  *model1.OrderBy `json:"id"`
	InstitutionCategory *model1.OrderBy `json:"institution_category"`
	ProvinceID          *model1.OrderBy `json:"province_id"`
	Score               *model1.OrderBy `json:"score"`
}

// aggregate sum on columns
type EnterpriseSumFields struct {
	BusinessScope       *int   `json:"business_scope"`
	CheckStatus         *int   `json:"check_status"`
	CityID              *int64 `json:"city_id"`
	DisplayNumber       *int   `json:"display_number"`
	DistrictID          *int64 `json:"district_id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	ID                  *int64 `json:"id"`
	InstitutionCategory *int64 `json:"institution_category"`
	ProvinceID          *int64 `json:"province_id"`
	Score               *int   `json:"score"`
}

// order by sum() on columns of table "enterprise"
type EnterpriseSumOrderBy struct {
	BusinessScope       *model1.OrderBy `json:"business_scope"`
	CheckStatus         *model1.OrderBy `json:"check_status"`
	CityID              *model1.OrderBy `json:"city_id"`
	DisplayNumber       *model1.OrderBy `json:"display_number"`
	DistrictID          *model1.OrderBy `json:"district_id"`
	EnterpriseLevel     *model1.OrderBy `json:"enterprise_level"`
	EnterpriseNature    *model1.OrderBy `json:"enterprise_nature"`
	ID                  *model1.OrderBy `json:"id"`
	InstitutionCategory *model1.OrderBy `json:"institution_category"`
	ProvinceID          *model1.OrderBy `json:"province_id"`
	Score               *model1.OrderBy `json:"score"`
}

// aggregate var_pop on columns
type EnterpriseVarPopFields struct {
	BusinessScope       *float64 `json:"business_scope"`
	CheckStatus         *float64 `json:"check_status"`
	CityID              *float64 `json:"city_id"`
	DisplayNumber       *float64 `json:"display_number"`
	DistrictID          *float64 `json:"district_id"`
	EnterpriseLevel     *float64 `json:"enterprise_level"`
	EnterpriseNature    *float64 `json:"enterprise_nature"`
	ID                  *float64 `json:"id"`
	InstitutionCategory *float64 `json:"institution_category"`
	ProvinceID          *float64 `json:"province_id"`
	Score               *float64 `json:"score"`
}

// order by var_pop() on columns of table "enterprise"
type EnterpriseVarPopOrderBy struct {
	BusinessScope       *model1.OrderBy `json:"business_scope"`
	CheckStatus         *model1.OrderBy `json:"check_status"`
	CityID              *model1.OrderBy `json:"city_id"`
	DisplayNumber       *model1.OrderBy `json:"display_number"`
	DistrictID          *model1.OrderBy `json:"district_id"`
	EnterpriseLevel     *model1.OrderBy `json:"enterprise_level"`
	EnterpriseNature    *model1.OrderBy `json:"enterprise_nature"`
	ID                  *model1.OrderBy `json:"id"`
	InstitutionCategory *model1.OrderBy `json:"institution_category"`
	ProvinceID          *model1.OrderBy `json:"province_id"`
	Score               *model1.OrderBy `json:"score"`
}

// aggregate var_samp on columns
type EnterpriseVarSampFields struct {
	BusinessScope       *float64 `json:"business_scope"`
	CheckStatus         *float64 `json:"check_status"`
	CityID              *float64 `json:"city_id"`
	DisplayNumber       *float64 `json:"display_number"`
	DistrictID          *float64 `json:"district_id"`
	EnterpriseLevel     *float64 `json:"enterprise_level"`
	EnterpriseNature    *float64 `json:"enterprise_nature"`
	ID                  *float64 `json:"id"`
	InstitutionCategory *float64 `json:"institution_category"`
	ProvinceID          *float64 `json:"province_id"`
	Score               *float64 `json:"score"`
}

// order by var_samp() on columns of table "enterprise"
type EnterpriseVarSampOrderBy struct {
	BusinessScope       *model1.OrderBy `json:"business_scope"`
	CheckStatus         *model1.OrderBy `json:"check_status"`
	CityID              *model1.OrderBy `json:"city_id"`
	DisplayNumber       *model1.OrderBy `json:"display_number"`
	DistrictID          *model1.OrderBy `json:"district_id"`
	EnterpriseLevel     *model1.OrderBy `json:"enterprise_level"`
	EnterpriseNature    *model1.OrderBy `json:"enterprise_nature"`
	ID                  *model1.OrderBy `json:"id"`
	InstitutionCategory *model1.OrderBy `json:"institution_category"`
	ProvinceID          *model1.OrderBy `json:"province_id"`
	Score               *model1.OrderBy `json:"score"`
}

// aggregate variance on columns
type EnterpriseVarianceFields struct {
	BusinessScope       *float64 `json:"business_scope"`
	CheckStatus         *float64 `json:"check_status"`
	CityID              *float64 `json:"city_id"`
	DisplayNumber       *float64 `json:"display_number"`
	DistrictID          *float64 `json:"district_id"`
	EnterpriseLevel     *float64 `json:"enterprise_level"`
	EnterpriseNature    *float64 `json:"enterprise_nature"`
	ID                  *float64 `json:"id"`
	InstitutionCategory *float64 `json:"institution_category"`
	ProvinceID          *float64 `json:"province_id"`
	Score               *float64 `json:"score"`
}

// order by variance() on columns of table "enterprise"
type EnterpriseVarianceOrderBy struct {
	BusinessScope       *model1.OrderBy `json:"business_scope"`
	CheckStatus         *model1.OrderBy `json:"check_status"`
	CityID              *model1.OrderBy `json:"city_id"`
	DisplayNumber       *model1.OrderBy `json:"display_number"`
	DistrictID          *model1.OrderBy `json:"district_id"`
	EnterpriseLevel     *model1.OrderBy `json:"enterprise_level"`
	EnterpriseNature    *model1.OrderBy `json:"enterprise_nature"`
	ID                  *model1.OrderBy `json:"id"`
	InstitutionCategory *model1.OrderBy `json:"institution_category"`
	ProvinceID          *model1.OrderBy `json:"province_id"`
	Score               *model1.OrderBy `json:"score"`
}

// aggregated selection of "system_user"
type SystemUserAggregate struct {
	Aggregate *SystemUserAggregateFields `json:"aggregate"`
	Nodes     []*model.SystemUser        `json:"nodes"`
}

// aggregate fields of "system_user"
type SystemUserAggregateFields struct {
	Avg        *SystemUserAvgFields        `json:"avg"`
	Count      *int                        `json:"count"`
	Max        *SystemUserMaxFields        `json:"max"`
	Min        *SystemUserMinFields        `json:"min"`
	Stddev     *SystemUserStddevFields     `json:"stddev"`
	StddevPop  *SystemUserStddevPopFields  `json:"stddev_pop"`
	StddevSamp *SystemUserStddevSampFields `json:"stddev_samp"`
	Sum        *SystemUserSumFields        `json:"sum"`
	VarPop     *SystemUserVarPopFields     `json:"var_pop"`
	VarSamp    *SystemUserVarSampFields    `json:"var_samp"`
	Variance   *SystemUserVarianceFields   `json:"variance"`
}

// order by aggregate values of table "system_user"
type SystemUserAggregateOrderBy struct {
	Avg        *SystemUserAvgOrderBy        `json:"avg"`
	Count      *model1.OrderBy              `json:"count"`
	Max        *SystemUserMaxOrderBy        `json:"max"`
	Min        *SystemUserMinOrderBy        `json:"min"`
	Stddev     *SystemUserStddevOrderBy     `json:"stddev"`
	StddevPop  *SystemUserStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *SystemUserStddevSampOrderBy `json:"stddev_samp"`
	Sum        *SystemUserSumOrderBy        `json:"sum"`
	VarPop     *SystemUserVarPopOrderBy     `json:"var_pop"`
	VarSamp    *SystemUserVarSampOrderBy    `json:"var_samp"`
	Variance   *SystemUserVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "system_user"
type SystemUserArrRelInsertInput struct {
	Data       []*SystemUserInsertInput `json:"data"`
	OnConflict *SystemUserOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type SystemUserAvgFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by avg() on columns of table "system_user"
type SystemUserAvgOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// Boolean expression to filter rows from the table "system_user". All fields are combined with a logical 'AND'.
type SystemUserBoolExp struct {
	IsBindIP     *model1.BooleanComparisonExp     `json:"Is_bind_ip"`
	And          []*SystemUserBoolExp             `json:"_and"`
	Not          *SystemUserBoolExp               `json:"_not"`
	Or           []*SystemUserBoolExp             `json:"_or"`
	AppVersion   *model1.StringComparisonExp      `json:"app_version"`
	AuditLevel   *model1.IntComparisonExp         `json:"audit_level"`
	CreateBy     *model1.StringComparisonExp      `json:"create_by"`
	CreatedAt    *model1.TimestamptzComparisonExp `json:"created_at"`
	DeleteAt     *model1.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy     *model1.StringComparisonExp      `json:"delete_by"`
	DepartmentID *model1.StringComparisonExp      `json:"department_id"`
	Email        *model1.StringComparisonExp      `json:"email"`
	EnterpriseID *model1.StringComparisonExp      `json:"enterprise_id"`
	Grade        *model1.IntComparisonExp         `json:"grade"`
	ID           *model1.BigintComparisonExp      `json:"id"`
	IPAddress    *model1.StringComparisonExp      `json:"ip_address"`
	IsDelete     *model1.BooleanComparisonExp     `json:"is_delete"`
	IsValid      *model1.BooleanComparisonExp     `json:"is_valid"`
	Mkey         *model1.StringComparisonExp      `json:"mkey"`
	Mobile       *model1.StringComparisonExp      `json:"mobile"`
	Password     *model1.StringComparisonExp      `json:"password"`
	ProxyUser    *model1.StringComparisonExp      `json:"proxy_user"`
	Remarks      *model1.StringComparisonExp      `json:"remarks"`
	Telephone    *model1.StringComparisonExp      `json:"telephone"`
	Username     *model1.StringComparisonExp      `json:"username"`
	Ukey         *model1.StringComparisonExp      `json:"ukey"`
	UpdateAt     *model1.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy     *model1.StringComparisonExp      `json:"update_by"`
	UserID       *model1.StringComparisonExp      `json:"user_id"`
	UserState    *model1.IntComparisonExp         `json:"user_state"`
	UserType     *model1.IntComparisonExp         `json:"user_type"`
}

// input type for incrementing integer column in table "system_user"
type SystemUserIncInput struct {
	AuditLevel *int   `json:"audit_level"`
	Grade      *int   `json:"grade"`
	ID         *int64 `json:"id"`
	UserState  *int   `json:"user_state"`
	UserType   *int   `json:"user_type"`
}

// input type for inserting data into table "system_user"
type SystemUserInsertInput struct {
	IsBindIP     *bool      `json:"Is_bind_ip"`
	AppVersion   *string    `json:"app_version"`
	AuditLevel   *int       `json:"audit_level"`
	CreateBy     *string    `json:"create_by"`
	CreatedAt    *time.Time `json:"created_at"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	EnterpriseID *string    `json:"enterprise_id"`
	Grade        *int       `json:"grade"`
	ID           *int64     `json:"id"`
	IPAddress    *string    `json:"ip_address"`
	IsDelete     *bool      `json:"is_delete"`
	IsValid      *bool      `json:"is_valid"`
	Mkey         *string    `json:"mkey"`
	Mobile       *string    `json:"mobile"`
	Password     *string    `json:"password"`
	ProxyUser    *string    `json:"proxy_user"`
	Remarks      *string    `json:"remarks"`
	Telephone    *string    `json:"telephone"`
	Username     *string    `json:"username"`
	Ukey         *string    `json:"ukey"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	UserID       *string    `json:"user_id"`
	UserState    *int       `json:"user_state"`
	UserType     *int       `json:"user_type"`
}

// aggregate max on columns
type SystemUserMaxFields struct {
	AppVersion   *string    `json:"app_version"`
	AuditLevel   *int       `json:"audit_level"`
	CreateBy     *string    `json:"create_by"`
	CreatedAt    *time.Time `json:"created_at"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	EnterpriseID *string    `json:"enterprise_id"`
	Grade        *int       `json:"grade"`
	ID           *int64     `json:"id"`
	IPAddress    *string    `json:"ip_address"`
	Mkey         *string    `json:"mkey"`
	Mobile       *string    `json:"mobile"`
	Password     *string    `json:"password"`
	ProxyUser    *string    `json:"proxy_user"`
	Remarks      *string    `json:"remarks"`
	Telephone    *string    `json:"telephone"`
	Username     *string    `json:"username"`
	Ukey         *string    `json:"ukey"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	UserID       *string    `json:"user_id"`
	UserState    *int       `json:"user_state"`
	UserType     *int       `json:"user_type"`
}

// order by max() on columns of table "system_user"
type SystemUserMaxOrderBy struct {
	AppVersion   *model1.OrderBy `json:"app_version"`
	AuditLevel   *model1.OrderBy `json:"audit_level"`
	CreateBy     *model1.OrderBy `json:"create_by"`
	CreatedAt    *model1.OrderBy `json:"created_at"`
	DeleteAt     *model1.OrderBy `json:"delete_at"`
	DeleteBy     *model1.OrderBy `json:"delete_by"`
	DepartmentID *model1.OrderBy `json:"department_id"`
	Email        *model1.OrderBy `json:"email"`
	EnterpriseID *model1.OrderBy `json:"enterprise_id"`
	Grade        *model1.OrderBy `json:"grade"`
	ID           *model1.OrderBy `json:"id"`
	IPAddress    *model1.OrderBy `json:"ip_address"`
	Mkey         *model1.OrderBy `json:"mkey"`
	Mobile       *model1.OrderBy `json:"mobile"`
	Password     *model1.OrderBy `json:"password"`
	ProxyUser    *model1.OrderBy `json:"proxy_user"`
	Remarks      *model1.OrderBy `json:"remarks"`
	Telephone    *model1.OrderBy `json:"telephone"`
	Username     *model1.OrderBy `json:"username"`
	Ukey         *model1.OrderBy `json:"ukey"`
	UpdateAt     *model1.OrderBy `json:"update_at"`
	UpdateBy     *model1.OrderBy `json:"update_by"`
	UserID       *model1.OrderBy `json:"user_id"`
	UserState    *model1.OrderBy `json:"user_state"`
	UserType     *model1.OrderBy `json:"user_type"`
}

// aggregate min on columns
type SystemUserMinFields struct {
	AppVersion   *string    `json:"app_version"`
	AuditLevel   *int       `json:"audit_level"`
	CreateBy     *string    `json:"create_by"`
	CreatedAt    *time.Time `json:"created_at"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	EnterpriseID *string    `json:"enterprise_id"`
	Grade        *int       `json:"grade"`
	ID           *int64     `json:"id"`
	IPAddress    *string    `json:"ip_address"`
	Mkey         *string    `json:"mkey"`
	Mobile       *string    `json:"mobile"`
	Password     *string    `json:"password"`
	ProxyUser    *string    `json:"proxy_user"`
	Remarks      *string    `json:"remarks"`
	Telephone    *string    `json:"telephone"`
	Username     *string    `json:"username"`
	Ukey         *string    `json:"ukey"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	UserID       *string    `json:"user_id"`
	UserState    *int       `json:"user_state"`
	UserType     *int       `json:"user_type"`
}

// order by min() on columns of table "system_user"
type SystemUserMinOrderBy struct {
	AppVersion   *model1.OrderBy `json:"app_version"`
	AuditLevel   *model1.OrderBy `json:"audit_level"`
	CreateBy     *model1.OrderBy `json:"create_by"`
	CreatedAt    *model1.OrderBy `json:"created_at"`
	DeleteAt     *model1.OrderBy `json:"delete_at"`
	DeleteBy     *model1.OrderBy `json:"delete_by"`
	DepartmentID *model1.OrderBy `json:"department_id"`
	Email        *model1.OrderBy `json:"email"`
	EnterpriseID *model1.OrderBy `json:"enterprise_id"`
	Grade        *model1.OrderBy `json:"grade"`
	ID           *model1.OrderBy `json:"id"`
	IPAddress    *model1.OrderBy `json:"ip_address"`
	Mkey         *model1.OrderBy `json:"mkey"`
	Mobile       *model1.OrderBy `json:"mobile"`
	Password     *model1.OrderBy `json:"password"`
	ProxyUser    *model1.OrderBy `json:"proxy_user"`
	Remarks      *model1.OrderBy `json:"remarks"`
	Telephone    *model1.OrderBy `json:"telephone"`
	Username     *model1.OrderBy `json:"username"`
	Ukey         *model1.OrderBy `json:"ukey"`
	UpdateAt     *model1.OrderBy `json:"update_at"`
	UpdateBy     *model1.OrderBy `json:"update_by"`
	UserID       *model1.OrderBy `json:"user_id"`
	UserState    *model1.OrderBy `json:"user_state"`
	UserType     *model1.OrderBy `json:"user_type"`
}

// response of any mutation on the table "system_user"
type SystemUserMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*model.SystemUser `json:"returning"`
}

// input type for inserting object relation for remote table "system_user"
type SystemUserObjRelInsertInput struct {
	Data       *SystemUserInsertInput `json:"data"`
	OnConflict *SystemUserOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "system_user"
type SystemUserOnConflict struct {
	Constraint    SystemUserConstraint     `json:"constraint"`
	UpdateColumns []SystemUserUpdateColumn `json:"update_columns"`
	Where         *SystemUserBoolExp       `json:"where"`
}

// ordering options when selecting data from "system_user"
type SystemUserOrderBy struct {
	IsBindIP     *model1.OrderBy `json:"Is_bind_ip"`
	AppVersion   *model1.OrderBy `json:"app_version"`
	AuditLevel   *model1.OrderBy `json:"audit_level"`
	CreateBy     *model1.OrderBy `json:"create_by"`
	CreatedAt    *model1.OrderBy `json:"created_at"`
	DeleteAt     *model1.OrderBy `json:"delete_at"`
	DeleteBy     *model1.OrderBy `json:"delete_by"`
	DepartmentID *model1.OrderBy `json:"department_id"`
	Email        *model1.OrderBy `json:"email"`
	EnterpriseID *model1.OrderBy `json:"enterprise_id"`
	Grade        *model1.OrderBy `json:"grade"`
	ID           *model1.OrderBy `json:"id"`
	IPAddress    *model1.OrderBy `json:"ip_address"`
	IsDelete     *model1.OrderBy `json:"is_delete"`
	IsValid      *model1.OrderBy `json:"is_valid"`
	Mkey         *model1.OrderBy `json:"mkey"`
	Mobile       *model1.OrderBy `json:"mobile"`
	Password     *model1.OrderBy `json:"password"`
	ProxyUser    *model1.OrderBy `json:"proxy_user"`
	Remarks      *model1.OrderBy `json:"remarks"`
	Telephone    *model1.OrderBy `json:"telephone"`
	Username     *model1.OrderBy `json:"username"`
	Ukey         *model1.OrderBy `json:"ukey"`
	UpdateAt     *model1.OrderBy `json:"update_at"`
	UpdateBy     *model1.OrderBy `json:"update_by"`
	UserID       *model1.OrderBy `json:"user_id"`
	UserState    *model1.OrderBy `json:"user_state"`
	UserType     *model1.OrderBy `json:"user_type"`
}

// primary key columns input for table: "system_user"
type SystemUserPkColumnsInput struct {
	// ID
	ID int64 `json:"id"`
}

// input type for updating data in table "system_user"
type SystemUserSetInput struct {
	IsBindIP     *bool      `json:"Is_bind_ip"`
	AppVersion   *string    `json:"app_version"`
	AuditLevel   *int       `json:"audit_level"`
	CreateBy     *string    `json:"create_by"`
	CreatedAt    *time.Time `json:"created_at"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	DepartmentID *string    `json:"department_id"`
	Email        *string    `json:"email"`
	EnterpriseID *string    `json:"enterprise_id"`
	Grade        *int       `json:"grade"`
	ID           *int64     `json:"id"`
	IPAddress    *string    `json:"ip_address"`
	IsDelete     *bool      `json:"is_delete"`
	IsValid      *bool      `json:"is_valid"`
	Mkey         *string    `json:"mkey"`
	Mobile       *string    `json:"mobile"`
	Password     *string    `json:"password"`
	ProxyUser    *string    `json:"proxy_user"`
	Remarks      *string    `json:"remarks"`
	Telephone    *string    `json:"telephone"`
	Username     *string    `json:"username"`
	Ukey         *string    `json:"ukey"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	UserID       *string    `json:"user_id"`
	UserState    *int       `json:"user_state"`
	UserType     *int       `json:"user_type"`
}

// aggregate stddev on columns
type SystemUserStddevFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by stddev() on columns of table "system_user"
type SystemUserStddevOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate stddev_pop on columns
type SystemUserStddevPopFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by stddev_pop() on columns of table "system_user"
type SystemUserStddevPopOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate stddev_samp on columns
type SystemUserStddevSampFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by stddev_samp() on columns of table "system_user"
type SystemUserStddevSampOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate sum on columns
type SystemUserSumFields struct {
	AuditLevel *int   `json:"audit_level"`
	Grade      *int   `json:"grade"`
	ID         *int64 `json:"id"`
	UserState  *int   `json:"user_state"`
	UserType   *int   `json:"user_type"`
}

// order by sum() on columns of table "system_user"
type SystemUserSumOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate var_pop on columns
type SystemUserVarPopFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by var_pop() on columns of table "system_user"
type SystemUserVarPopOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate var_samp on columns
type SystemUserVarSampFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by var_samp() on columns of table "system_user"
type SystemUserVarSampOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// aggregate variance on columns
type SystemUserVarianceFields struct {
	AuditLevel *float64 `json:"audit_level"`
	Grade      *float64 `json:"grade"`
	ID         *float64 `json:"id"`
	UserState  *float64 `json:"user_state"`
	UserType   *float64 `json:"user_type"`
}

// order by variance() on columns of table "system_user"
type SystemUserVarianceOrderBy struct {
	AuditLevel *model1.OrderBy `json:"audit_level"`
	Grade      *model1.OrderBy `json:"grade"`
	ID         *model1.OrderBy `json:"id"`
	UserState  *model1.OrderBy `json:"user_state"`
	UserType   *model1.OrderBy `json:"user_type"`
}

// unique or primary key constraints on table "department"
type DepartmentConstraint string

const (
	// unique or primary key constraint
	DepartmentConstraintDepartmentPkey DepartmentConstraint = "department_pkey"
)

var AllDepartmentConstraint = []DepartmentConstraint{
	DepartmentConstraintDepartmentPkey,
}

func (e DepartmentConstraint) IsValid() bool {
	switch e {
	case DepartmentConstraintDepartmentPkey:
		return true
	}
	return false
}

func (e DepartmentConstraint) String() string {
	return string(e)
}

func (e *DepartmentConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DepartmentConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid department_constraint", str)
	}
	return nil
}

func (e DepartmentConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "department"
type DepartmentSelectColumn string

const (
	// column name
	DepartmentSelectColumnCreateAt DepartmentSelectColumn = "create_at"
	// column name
	DepartmentSelectColumnCreateBy DepartmentSelectColumn = "create_by"
	// column name
	DepartmentSelectColumnDeleteAt DepartmentSelectColumn = "delete_at"
	// column name
	DepartmentSelectColumnDeleteBy DepartmentSelectColumn = "delete_by"
	// column name
	DepartmentSelectColumnDepartmentCategory DepartmentSelectColumn = "department_category"
	// column name
	DepartmentSelectColumnDepartmentCode DepartmentSelectColumn = "department_code"
	// column name
	DepartmentSelectColumnDepartmentID DepartmentSelectColumn = "department_id"
	// column name
	DepartmentSelectColumnDepartmentName DepartmentSelectColumn = "department_name"
	// column name
	DepartmentSelectColumnEnterpriseID DepartmentSelectColumn = "enterprise_id"
	// column name
	DepartmentSelectColumnID DepartmentSelectColumn = "id"
	// column name
	DepartmentSelectColumnInternalNumber DepartmentSelectColumn = "internal_number"
	// column name
	DepartmentSelectColumnIsDelete DepartmentSelectColumn = "is_delete"
	// column name
	DepartmentSelectColumnRemarks DepartmentSelectColumn = "remarks"
	// column name
	DepartmentSelectColumnSuperiorDepartmentID DepartmentSelectColumn = "superior_department_id"
	// column name
	DepartmentSelectColumnUpdateAt DepartmentSelectColumn = "update_at"
	// column name
	DepartmentSelectColumnUpdateBy DepartmentSelectColumn = "update_by"
)

var AllDepartmentSelectColumn = []DepartmentSelectColumn{
	DepartmentSelectColumnCreateAt,
	DepartmentSelectColumnCreateBy,
	DepartmentSelectColumnDeleteAt,
	DepartmentSelectColumnDeleteBy,
	DepartmentSelectColumnDepartmentCategory,
	DepartmentSelectColumnDepartmentCode,
	DepartmentSelectColumnDepartmentID,
	DepartmentSelectColumnDepartmentName,
	DepartmentSelectColumnEnterpriseID,
	DepartmentSelectColumnID,
	DepartmentSelectColumnInternalNumber,
	DepartmentSelectColumnIsDelete,
	DepartmentSelectColumnRemarks,
	DepartmentSelectColumnSuperiorDepartmentID,
	DepartmentSelectColumnUpdateAt,
	DepartmentSelectColumnUpdateBy,
}

func (e DepartmentSelectColumn) IsValid() bool {
	switch e {
	case DepartmentSelectColumnCreateAt, DepartmentSelectColumnCreateBy, DepartmentSelectColumnDeleteAt, DepartmentSelectColumnDeleteBy, DepartmentSelectColumnDepartmentCategory, DepartmentSelectColumnDepartmentCode, DepartmentSelectColumnDepartmentID, DepartmentSelectColumnDepartmentName, DepartmentSelectColumnEnterpriseID, DepartmentSelectColumnID, DepartmentSelectColumnInternalNumber, DepartmentSelectColumnIsDelete, DepartmentSelectColumnRemarks, DepartmentSelectColumnSuperiorDepartmentID, DepartmentSelectColumnUpdateAt, DepartmentSelectColumnUpdateBy:
		return true
	}
	return false
}

func (e DepartmentSelectColumn) String() string {
	return string(e)
}

func (e *DepartmentSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DepartmentSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid department_select_column", str)
	}
	return nil
}

func (e DepartmentSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "department"
type DepartmentUpdateColumn string

const (
	// column name
	DepartmentUpdateColumnCreateAt DepartmentUpdateColumn = "create_at"
	// column name
	DepartmentUpdateColumnCreateBy DepartmentUpdateColumn = "create_by"
	// column name
	DepartmentUpdateColumnDeleteAt DepartmentUpdateColumn = "delete_at"
	// column name
	DepartmentUpdateColumnDeleteBy DepartmentUpdateColumn = "delete_by"
	// column name
	DepartmentUpdateColumnDepartmentCategory DepartmentUpdateColumn = "department_category"
	// column name
	DepartmentUpdateColumnDepartmentCode DepartmentUpdateColumn = "department_code"
	// column name
	DepartmentUpdateColumnDepartmentID DepartmentUpdateColumn = "department_id"
	// column name
	DepartmentUpdateColumnDepartmentName DepartmentUpdateColumn = "department_name"
	// column name
	DepartmentUpdateColumnEnterpriseID DepartmentUpdateColumn = "enterprise_id"
	// column name
	DepartmentUpdateColumnID DepartmentUpdateColumn = "id"
	// column name
	DepartmentUpdateColumnInternalNumber DepartmentUpdateColumn = "internal_number"
	// column name
	DepartmentUpdateColumnIsDelete DepartmentUpdateColumn = "is_delete"
	// column name
	DepartmentUpdateColumnRemarks DepartmentUpdateColumn = "remarks"
	// column name
	DepartmentUpdateColumnSuperiorDepartmentID DepartmentUpdateColumn = "superior_department_id"
	// column name
	DepartmentUpdateColumnUpdateAt DepartmentUpdateColumn = "update_at"
	// column name
	DepartmentUpdateColumnUpdateBy DepartmentUpdateColumn = "update_by"
)

var AllDepartmentUpdateColumn = []DepartmentUpdateColumn{
	DepartmentUpdateColumnCreateAt,
	DepartmentUpdateColumnCreateBy,
	DepartmentUpdateColumnDeleteAt,
	DepartmentUpdateColumnDeleteBy,
	DepartmentUpdateColumnDepartmentCategory,
	DepartmentUpdateColumnDepartmentCode,
	DepartmentUpdateColumnDepartmentID,
	DepartmentUpdateColumnDepartmentName,
	DepartmentUpdateColumnEnterpriseID,
	DepartmentUpdateColumnID,
	DepartmentUpdateColumnInternalNumber,
	DepartmentUpdateColumnIsDelete,
	DepartmentUpdateColumnRemarks,
	DepartmentUpdateColumnSuperiorDepartmentID,
	DepartmentUpdateColumnUpdateAt,
	DepartmentUpdateColumnUpdateBy,
}

func (e DepartmentUpdateColumn) IsValid() bool {
	switch e {
	case DepartmentUpdateColumnCreateAt, DepartmentUpdateColumnCreateBy, DepartmentUpdateColumnDeleteAt, DepartmentUpdateColumnDeleteBy, DepartmentUpdateColumnDepartmentCategory, DepartmentUpdateColumnDepartmentCode, DepartmentUpdateColumnDepartmentID, DepartmentUpdateColumnDepartmentName, DepartmentUpdateColumnEnterpriseID, DepartmentUpdateColumnID, DepartmentUpdateColumnInternalNumber, DepartmentUpdateColumnIsDelete, DepartmentUpdateColumnRemarks, DepartmentUpdateColumnSuperiorDepartmentID, DepartmentUpdateColumnUpdateAt, DepartmentUpdateColumnUpdateBy:
		return true
	}
	return false
}

func (e DepartmentUpdateColumn) String() string {
	return string(e)
}

func (e *DepartmentUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DepartmentUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid department_update_column", str)
	}
	return nil
}

func (e DepartmentUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "enterprise"
type EnterpriseConstraint string

const (
	// unique or primary key constraint
	EnterpriseConstraintNewtablePk EnterpriseConstraint = "newtable_pk"
)

var AllEnterpriseConstraint = []EnterpriseConstraint{
	EnterpriseConstraintNewtablePk,
}

func (e EnterpriseConstraint) IsValid() bool {
	switch e {
	case EnterpriseConstraintNewtablePk:
		return true
	}
	return false
}

func (e EnterpriseConstraint) String() string {
	return string(e)
}

func (e *EnterpriseConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid enterprise_constraint", str)
	}
	return nil
}

func (e EnterpriseConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "enterprise"
type EnterpriseSelectColumn string

const (
	// column name
	EnterpriseSelectColumnAssociationReviewBy EnterpriseSelectColumn = "association_review_by"
	// column name
	EnterpriseSelectColumnAssociationReviewOpinion EnterpriseSelectColumn = "association_review_opinion"
	// column name
	EnterpriseSelectColumnAssociationReviewTime EnterpriseSelectColumn = "association_review_time"
	// column name
	EnterpriseSelectColumnBrigadeID EnterpriseSelectColumn = "brigade_id"
	// column name
	EnterpriseSelectColumnBrigadeReviewBy EnterpriseSelectColumn = "brigade_review_by"
	// column name
	EnterpriseSelectColumnBrigadeReviewOpinion EnterpriseSelectColumn = "brigade_review_opinion"
	// column name
	EnterpriseSelectColumnBrigadeReviewTime EnterpriseSelectColumn = "brigade_review_time"
	// column name
	EnterpriseSelectColumnBusinessLicenseExpiryDate EnterpriseSelectColumn = "business_license_expiry_date"
	// column name
	EnterpriseSelectColumnBusinessLicenseIssuanceDate EnterpriseSelectColumn = "business_license_issuance_date"
	// column name
	EnterpriseSelectColumnBusinessLicensePhoto EnterpriseSelectColumn = "business_license_photo"
	// column name
	EnterpriseSelectColumnBusinessPhoto EnterpriseSelectColumn = "business_photo"
	// column name
	EnterpriseSelectColumnBusinessScope EnterpriseSelectColumn = "business_scope"
	// column name
	EnterpriseSelectColumnCheckStatus EnterpriseSelectColumn = "check_status"
	// column name
	EnterpriseSelectColumnCityID EnterpriseSelectColumn = "city_id"
	// column name
	EnterpriseSelectColumnContactPersons EnterpriseSelectColumn = "contact_persons"
	// column name
	EnterpriseSelectColumnCreateAt EnterpriseSelectColumn = "create_at"
	// column name
	EnterpriseSelectColumnCreateBy EnterpriseSelectColumn = "create_by"
	// column name
	EnterpriseSelectColumnDeleteAt EnterpriseSelectColumn = "delete_at"
	// column name
	EnterpriseSelectColumnDeleteBy EnterpriseSelectColumn = "delete_by"
	// column name
	EnterpriseSelectColumnDisplayNumber EnterpriseSelectColumn = "display_number"
	// column name
	EnterpriseSelectColumnDistrictID EnterpriseSelectColumn = "district_id"
	// column name
	EnterpriseSelectColumnEnterpriseAddress EnterpriseSelectColumn = "enterprise_address"
	// column name
	EnterpriseSelectColumnEnterpriseCode EnterpriseSelectColumn = "enterprise_code"
	// column name
	EnterpriseSelectColumnEnterpriseID EnterpriseSelectColumn = "enterprise_id"
	// column name
	EnterpriseSelectColumnEnterpriseLevel EnterpriseSelectColumn = "enterprise_level"
	// column name
	EnterpriseSelectColumnEnterpriseName EnterpriseSelectColumn = "enterprise_name"
	// column name
	EnterpriseSelectColumnEnterpriseNature EnterpriseSelectColumn = "enterprise_nature"
	// column name
	EnterpriseSelectColumnEntrustedAgent EnterpriseSelectColumn = "entrusted_agent"
	// column name
	EnterpriseSelectColumnEntrustedAgentIDCard EnterpriseSelectColumn = "entrusted_agent_id_card"
	// column name
	EnterpriseSelectColumnEntrustedAgentIDCardPhoto EnterpriseSelectColumn = "entrusted_agent_id_card_photo"
	// column name
	EnterpriseSelectColumnEntrustedAgentPhone EnterpriseSelectColumn = "entrusted_agent_phone"
	// column name
	EnterpriseSelectColumnFaxNumber EnterpriseSelectColumn = "fax_number"
	// column name
	EnterpriseSelectColumnID EnterpriseSelectColumn = "id"
	// column name
	EnterpriseSelectColumnInstitutionCategory EnterpriseSelectColumn = "institution_category"
	// column name
	EnterpriseSelectColumnIsBlack EnterpriseSelectColumn = "is_black"
	// column name
	EnterpriseSelectColumnIsDeleted EnterpriseSelectColumn = "is_deleted"
	// column name
	EnterpriseSelectColumnIsInput EnterpriseSelectColumn = "is_input"
	// column name
	EnterpriseSelectColumnIsInstall EnterpriseSelectColumn = "is_install"
	// column name
	EnterpriseSelectColumnIsUploadProvince EnterpriseSelectColumn = "is_upload_province"
	// column name
	EnterpriseSelectColumnLegalRepresentative EnterpriseSelectColumn = "legal_representative"
	// column name
	EnterpriseSelectColumnLegalRepresentativeIDCard EnterpriseSelectColumn = "legal_representative_id_card"
	// column name
	EnterpriseSelectColumnLegalRepresentativeIDCardPhoto EnterpriseSelectColumn = "legal_representative_id_card_photo"
	// column name
	EnterpriseSelectColumnLegalRepresentativePhone EnterpriseSelectColumn = "legal_representative_phone"
	// column name
	EnterpriseSelectColumnOperatingLicensePhoto EnterpriseSelectColumn = "operating_license_photo"
	// column name
	EnterpriseSelectColumnOrganizationCode EnterpriseSelectColumn = "organization_code"
	// column name
	EnterpriseSelectColumnOrganizationCodeCertificatePhoto EnterpriseSelectColumn = "organization_code_certificate_photo"
	// column name
	EnterpriseSelectColumnPoliceStationID EnterpriseSelectColumn = "police_station_id"
	// column name
	EnterpriseSelectColumnProvinceID EnterpriseSelectColumn = "province_id"
	// column name
	EnterpriseSelectColumnRecordAt EnterpriseSelectColumn = "record_at"
	// column name
	EnterpriseSelectColumnRecordBy EnterpriseSelectColumn = "record_by"
	// column name
	EnterpriseSelectColumnRemarks EnterpriseSelectColumn = "remarks"
	// column name
	EnterpriseSelectColumnScore EnterpriseSelectColumn = "score"
	// column name
	EnterpriseSelectColumnSuperiorEnterpriseID EnterpriseSelectColumn = "superior_enterprise_id"
	// column name
	EnterpriseSelectColumnUpdateAt EnterpriseSelectColumn = "update_at"
	// column name
	EnterpriseSelectColumnUpdateBy EnterpriseSelectColumn = "update_by"
	// column name
	EnterpriseSelectColumnUpdateTimeIn EnterpriseSelectColumn = "update_time_in"
)

var AllEnterpriseSelectColumn = []EnterpriseSelectColumn{
	EnterpriseSelectColumnAssociationReviewBy,
	EnterpriseSelectColumnAssociationReviewOpinion,
	EnterpriseSelectColumnAssociationReviewTime,
	EnterpriseSelectColumnBrigadeID,
	EnterpriseSelectColumnBrigadeReviewBy,
	EnterpriseSelectColumnBrigadeReviewOpinion,
	EnterpriseSelectColumnBrigadeReviewTime,
	EnterpriseSelectColumnBusinessLicenseExpiryDate,
	EnterpriseSelectColumnBusinessLicenseIssuanceDate,
	EnterpriseSelectColumnBusinessLicensePhoto,
	EnterpriseSelectColumnBusinessPhoto,
	EnterpriseSelectColumnBusinessScope,
	EnterpriseSelectColumnCheckStatus,
	EnterpriseSelectColumnCityID,
	EnterpriseSelectColumnContactPersons,
	EnterpriseSelectColumnCreateAt,
	EnterpriseSelectColumnCreateBy,
	EnterpriseSelectColumnDeleteAt,
	EnterpriseSelectColumnDeleteBy,
	EnterpriseSelectColumnDisplayNumber,
	EnterpriseSelectColumnDistrictID,
	EnterpriseSelectColumnEnterpriseAddress,
	EnterpriseSelectColumnEnterpriseCode,
	EnterpriseSelectColumnEnterpriseID,
	EnterpriseSelectColumnEnterpriseLevel,
	EnterpriseSelectColumnEnterpriseName,
	EnterpriseSelectColumnEnterpriseNature,
	EnterpriseSelectColumnEntrustedAgent,
	EnterpriseSelectColumnEntrustedAgentIDCard,
	EnterpriseSelectColumnEntrustedAgentIDCardPhoto,
	EnterpriseSelectColumnEntrustedAgentPhone,
	EnterpriseSelectColumnFaxNumber,
	EnterpriseSelectColumnID,
	EnterpriseSelectColumnInstitutionCategory,
	EnterpriseSelectColumnIsBlack,
	EnterpriseSelectColumnIsDeleted,
	EnterpriseSelectColumnIsInput,
	EnterpriseSelectColumnIsInstall,
	EnterpriseSelectColumnIsUploadProvince,
	EnterpriseSelectColumnLegalRepresentative,
	EnterpriseSelectColumnLegalRepresentativeIDCard,
	EnterpriseSelectColumnLegalRepresentativeIDCardPhoto,
	EnterpriseSelectColumnLegalRepresentativePhone,
	EnterpriseSelectColumnOperatingLicensePhoto,
	EnterpriseSelectColumnOrganizationCode,
	EnterpriseSelectColumnOrganizationCodeCertificatePhoto,
	EnterpriseSelectColumnPoliceStationID,
	EnterpriseSelectColumnProvinceID,
	EnterpriseSelectColumnRecordAt,
	EnterpriseSelectColumnRecordBy,
	EnterpriseSelectColumnRemarks,
	EnterpriseSelectColumnScore,
	EnterpriseSelectColumnSuperiorEnterpriseID,
	EnterpriseSelectColumnUpdateAt,
	EnterpriseSelectColumnUpdateBy,
	EnterpriseSelectColumnUpdateTimeIn,
}

func (e EnterpriseSelectColumn) IsValid() bool {
	switch e {
	case EnterpriseSelectColumnAssociationReviewBy, EnterpriseSelectColumnAssociationReviewOpinion, EnterpriseSelectColumnAssociationReviewTime, EnterpriseSelectColumnBrigadeID, EnterpriseSelectColumnBrigadeReviewBy, EnterpriseSelectColumnBrigadeReviewOpinion, EnterpriseSelectColumnBrigadeReviewTime, EnterpriseSelectColumnBusinessLicenseExpiryDate, EnterpriseSelectColumnBusinessLicenseIssuanceDate, EnterpriseSelectColumnBusinessLicensePhoto, EnterpriseSelectColumnBusinessPhoto, EnterpriseSelectColumnBusinessScope, EnterpriseSelectColumnCheckStatus, EnterpriseSelectColumnCityID, EnterpriseSelectColumnContactPersons, EnterpriseSelectColumnCreateAt, EnterpriseSelectColumnCreateBy, EnterpriseSelectColumnDeleteAt, EnterpriseSelectColumnDeleteBy, EnterpriseSelectColumnDisplayNumber, EnterpriseSelectColumnDistrictID, EnterpriseSelectColumnEnterpriseAddress, EnterpriseSelectColumnEnterpriseCode, EnterpriseSelectColumnEnterpriseID, EnterpriseSelectColumnEnterpriseLevel, EnterpriseSelectColumnEnterpriseName, EnterpriseSelectColumnEnterpriseNature, EnterpriseSelectColumnEntrustedAgent, EnterpriseSelectColumnEntrustedAgentIDCard, EnterpriseSelectColumnEntrustedAgentIDCardPhoto, EnterpriseSelectColumnEntrustedAgentPhone, EnterpriseSelectColumnFaxNumber, EnterpriseSelectColumnID, EnterpriseSelectColumnInstitutionCategory, EnterpriseSelectColumnIsBlack, EnterpriseSelectColumnIsDeleted, EnterpriseSelectColumnIsInput, EnterpriseSelectColumnIsInstall, EnterpriseSelectColumnIsUploadProvince, EnterpriseSelectColumnLegalRepresentative, EnterpriseSelectColumnLegalRepresentativeIDCard, EnterpriseSelectColumnLegalRepresentativeIDCardPhoto, EnterpriseSelectColumnLegalRepresentativePhone, EnterpriseSelectColumnOperatingLicensePhoto, EnterpriseSelectColumnOrganizationCode, EnterpriseSelectColumnOrganizationCodeCertificatePhoto, EnterpriseSelectColumnPoliceStationID, EnterpriseSelectColumnProvinceID, EnterpriseSelectColumnRecordAt, EnterpriseSelectColumnRecordBy, EnterpriseSelectColumnRemarks, EnterpriseSelectColumnScore, EnterpriseSelectColumnSuperiorEnterpriseID, EnterpriseSelectColumnUpdateAt, EnterpriseSelectColumnUpdateBy, EnterpriseSelectColumnUpdateTimeIn:
		return true
	}
	return false
}

func (e EnterpriseSelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid enterprise_select_column", str)
	}
	return nil
}

func (e EnterpriseSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "enterprise"
type EnterpriseUpdateColumn string

const (
	// column name
	EnterpriseUpdateColumnAssociationReviewBy EnterpriseUpdateColumn = "association_review_by"
	// column name
	EnterpriseUpdateColumnAssociationReviewOpinion EnterpriseUpdateColumn = "association_review_opinion"
	// column name
	EnterpriseUpdateColumnAssociationReviewTime EnterpriseUpdateColumn = "association_review_time"
	// column name
	EnterpriseUpdateColumnBrigadeID EnterpriseUpdateColumn = "brigade_id"
	// column name
	EnterpriseUpdateColumnBrigadeReviewBy EnterpriseUpdateColumn = "brigade_review_by"
	// column name
	EnterpriseUpdateColumnBrigadeReviewOpinion EnterpriseUpdateColumn = "brigade_review_opinion"
	// column name
	EnterpriseUpdateColumnBrigadeReviewTime EnterpriseUpdateColumn = "brigade_review_time"
	// column name
	EnterpriseUpdateColumnBusinessLicenseExpiryDate EnterpriseUpdateColumn = "business_license_expiry_date"
	// column name
	EnterpriseUpdateColumnBusinessLicenseIssuanceDate EnterpriseUpdateColumn = "business_license_issuance_date"
	// column name
	EnterpriseUpdateColumnBusinessLicensePhoto EnterpriseUpdateColumn = "business_license_photo"
	// column name
	EnterpriseUpdateColumnBusinessPhoto EnterpriseUpdateColumn = "business_photo"
	// column name
	EnterpriseUpdateColumnBusinessScope EnterpriseUpdateColumn = "business_scope"
	// column name
	EnterpriseUpdateColumnCheckStatus EnterpriseUpdateColumn = "check_status"
	// column name
	EnterpriseUpdateColumnCityID EnterpriseUpdateColumn = "city_id"
	// column name
	EnterpriseUpdateColumnContactPersons EnterpriseUpdateColumn = "contact_persons"
	// column name
	EnterpriseUpdateColumnCreateAt EnterpriseUpdateColumn = "create_at"
	// column name
	EnterpriseUpdateColumnCreateBy EnterpriseUpdateColumn = "create_by"
	// column name
	EnterpriseUpdateColumnDeleteAt EnterpriseUpdateColumn = "delete_at"
	// column name
	EnterpriseUpdateColumnDeleteBy EnterpriseUpdateColumn = "delete_by"
	// column name
	EnterpriseUpdateColumnDisplayNumber EnterpriseUpdateColumn = "display_number"
	// column name
	EnterpriseUpdateColumnDistrictID EnterpriseUpdateColumn = "district_id"
	// column name
	EnterpriseUpdateColumnEnterpriseAddress EnterpriseUpdateColumn = "enterprise_address"
	// column name
	EnterpriseUpdateColumnEnterpriseCode EnterpriseUpdateColumn = "enterprise_code"
	// column name
	EnterpriseUpdateColumnEnterpriseID EnterpriseUpdateColumn = "enterprise_id"
	// column name
	EnterpriseUpdateColumnEnterpriseLevel EnterpriseUpdateColumn = "enterprise_level"
	// column name
	EnterpriseUpdateColumnEnterpriseName EnterpriseUpdateColumn = "enterprise_name"
	// column name
	EnterpriseUpdateColumnEnterpriseNature EnterpriseUpdateColumn = "enterprise_nature"
	// column name
	EnterpriseUpdateColumnEntrustedAgent EnterpriseUpdateColumn = "entrusted_agent"
	// column name
	EnterpriseUpdateColumnEntrustedAgentIDCard EnterpriseUpdateColumn = "entrusted_agent_id_card"
	// column name
	EnterpriseUpdateColumnEntrustedAgentIDCardPhoto EnterpriseUpdateColumn = "entrusted_agent_id_card_photo"
	// column name
	EnterpriseUpdateColumnEntrustedAgentPhone EnterpriseUpdateColumn = "entrusted_agent_phone"
	// column name
	EnterpriseUpdateColumnFaxNumber EnterpriseUpdateColumn = "fax_number"
	// column name
	EnterpriseUpdateColumnID EnterpriseUpdateColumn = "id"
	// column name
	EnterpriseUpdateColumnInstitutionCategory EnterpriseUpdateColumn = "institution_category"
	// column name
	EnterpriseUpdateColumnIsBlack EnterpriseUpdateColumn = "is_black"
	// column name
	EnterpriseUpdateColumnIsDeleted EnterpriseUpdateColumn = "is_deleted"
	// column name
	EnterpriseUpdateColumnIsInput EnterpriseUpdateColumn = "is_input"
	// column name
	EnterpriseUpdateColumnIsInstall EnterpriseUpdateColumn = "is_install"
	// column name
	EnterpriseUpdateColumnIsUploadProvince EnterpriseUpdateColumn = "is_upload_province"
	// column name
	EnterpriseUpdateColumnLegalRepresentative EnterpriseUpdateColumn = "legal_representative"
	// column name
	EnterpriseUpdateColumnLegalRepresentativeIDCard EnterpriseUpdateColumn = "legal_representative_id_card"
	// column name
	EnterpriseUpdateColumnLegalRepresentativeIDCardPhoto EnterpriseUpdateColumn = "legal_representative_id_card_photo"
	// column name
	EnterpriseUpdateColumnLegalRepresentativePhone EnterpriseUpdateColumn = "legal_representative_phone"
	// column name
	EnterpriseUpdateColumnOperatingLicensePhoto EnterpriseUpdateColumn = "operating_license_photo"
	// column name
	EnterpriseUpdateColumnOrganizationCode EnterpriseUpdateColumn = "organization_code"
	// column name
	EnterpriseUpdateColumnOrganizationCodeCertificatePhoto EnterpriseUpdateColumn = "organization_code_certificate_photo"
	// column name
	EnterpriseUpdateColumnPoliceStationID EnterpriseUpdateColumn = "police_station_id"
	// column name
	EnterpriseUpdateColumnProvinceID EnterpriseUpdateColumn = "province_id"
	// column name
	EnterpriseUpdateColumnRecordAt EnterpriseUpdateColumn = "record_at"
	// column name
	EnterpriseUpdateColumnRecordBy EnterpriseUpdateColumn = "record_by"
	// column name
	EnterpriseUpdateColumnRemarks EnterpriseUpdateColumn = "remarks"
	// column name
	EnterpriseUpdateColumnScore EnterpriseUpdateColumn = "score"
	// column name
	EnterpriseUpdateColumnSuperiorEnterpriseID EnterpriseUpdateColumn = "superior_enterprise_id"
	// column name
	EnterpriseUpdateColumnUpdateAt EnterpriseUpdateColumn = "update_at"
	// column name
	EnterpriseUpdateColumnUpdateBy EnterpriseUpdateColumn = "update_by"
	// column name
	EnterpriseUpdateColumnUpdateTimeIn EnterpriseUpdateColumn = "update_time_in"
)

var AllEnterpriseUpdateColumn = []EnterpriseUpdateColumn{
	EnterpriseUpdateColumnAssociationReviewBy,
	EnterpriseUpdateColumnAssociationReviewOpinion,
	EnterpriseUpdateColumnAssociationReviewTime,
	EnterpriseUpdateColumnBrigadeID,
	EnterpriseUpdateColumnBrigadeReviewBy,
	EnterpriseUpdateColumnBrigadeReviewOpinion,
	EnterpriseUpdateColumnBrigadeReviewTime,
	EnterpriseUpdateColumnBusinessLicenseExpiryDate,
	EnterpriseUpdateColumnBusinessLicenseIssuanceDate,
	EnterpriseUpdateColumnBusinessLicensePhoto,
	EnterpriseUpdateColumnBusinessPhoto,
	EnterpriseUpdateColumnBusinessScope,
	EnterpriseUpdateColumnCheckStatus,
	EnterpriseUpdateColumnCityID,
	EnterpriseUpdateColumnContactPersons,
	EnterpriseUpdateColumnCreateAt,
	EnterpriseUpdateColumnCreateBy,
	EnterpriseUpdateColumnDeleteAt,
	EnterpriseUpdateColumnDeleteBy,
	EnterpriseUpdateColumnDisplayNumber,
	EnterpriseUpdateColumnDistrictID,
	EnterpriseUpdateColumnEnterpriseAddress,
	EnterpriseUpdateColumnEnterpriseCode,
	EnterpriseUpdateColumnEnterpriseID,
	EnterpriseUpdateColumnEnterpriseLevel,
	EnterpriseUpdateColumnEnterpriseName,
	EnterpriseUpdateColumnEnterpriseNature,
	EnterpriseUpdateColumnEntrustedAgent,
	EnterpriseUpdateColumnEntrustedAgentIDCard,
	EnterpriseUpdateColumnEntrustedAgentIDCardPhoto,
	EnterpriseUpdateColumnEntrustedAgentPhone,
	EnterpriseUpdateColumnFaxNumber,
	EnterpriseUpdateColumnID,
	EnterpriseUpdateColumnInstitutionCategory,
	EnterpriseUpdateColumnIsBlack,
	EnterpriseUpdateColumnIsDeleted,
	EnterpriseUpdateColumnIsInput,
	EnterpriseUpdateColumnIsInstall,
	EnterpriseUpdateColumnIsUploadProvince,
	EnterpriseUpdateColumnLegalRepresentative,
	EnterpriseUpdateColumnLegalRepresentativeIDCard,
	EnterpriseUpdateColumnLegalRepresentativeIDCardPhoto,
	EnterpriseUpdateColumnLegalRepresentativePhone,
	EnterpriseUpdateColumnOperatingLicensePhoto,
	EnterpriseUpdateColumnOrganizationCode,
	EnterpriseUpdateColumnOrganizationCodeCertificatePhoto,
	EnterpriseUpdateColumnPoliceStationID,
	EnterpriseUpdateColumnProvinceID,
	EnterpriseUpdateColumnRecordAt,
	EnterpriseUpdateColumnRecordBy,
	EnterpriseUpdateColumnRemarks,
	EnterpriseUpdateColumnScore,
	EnterpriseUpdateColumnSuperiorEnterpriseID,
	EnterpriseUpdateColumnUpdateAt,
	EnterpriseUpdateColumnUpdateBy,
	EnterpriseUpdateColumnUpdateTimeIn,
}

func (e EnterpriseUpdateColumn) IsValid() bool {
	switch e {
	case EnterpriseUpdateColumnAssociationReviewBy, EnterpriseUpdateColumnAssociationReviewOpinion, EnterpriseUpdateColumnAssociationReviewTime, EnterpriseUpdateColumnBrigadeID, EnterpriseUpdateColumnBrigadeReviewBy, EnterpriseUpdateColumnBrigadeReviewOpinion, EnterpriseUpdateColumnBrigadeReviewTime, EnterpriseUpdateColumnBusinessLicenseExpiryDate, EnterpriseUpdateColumnBusinessLicenseIssuanceDate, EnterpriseUpdateColumnBusinessLicensePhoto, EnterpriseUpdateColumnBusinessPhoto, EnterpriseUpdateColumnBusinessScope, EnterpriseUpdateColumnCheckStatus, EnterpriseUpdateColumnCityID, EnterpriseUpdateColumnContactPersons, EnterpriseUpdateColumnCreateAt, EnterpriseUpdateColumnCreateBy, EnterpriseUpdateColumnDeleteAt, EnterpriseUpdateColumnDeleteBy, EnterpriseUpdateColumnDisplayNumber, EnterpriseUpdateColumnDistrictID, EnterpriseUpdateColumnEnterpriseAddress, EnterpriseUpdateColumnEnterpriseCode, EnterpriseUpdateColumnEnterpriseID, EnterpriseUpdateColumnEnterpriseLevel, EnterpriseUpdateColumnEnterpriseName, EnterpriseUpdateColumnEnterpriseNature, EnterpriseUpdateColumnEntrustedAgent, EnterpriseUpdateColumnEntrustedAgentIDCard, EnterpriseUpdateColumnEntrustedAgentIDCardPhoto, EnterpriseUpdateColumnEntrustedAgentPhone, EnterpriseUpdateColumnFaxNumber, EnterpriseUpdateColumnID, EnterpriseUpdateColumnInstitutionCategory, EnterpriseUpdateColumnIsBlack, EnterpriseUpdateColumnIsDeleted, EnterpriseUpdateColumnIsInput, EnterpriseUpdateColumnIsInstall, EnterpriseUpdateColumnIsUploadProvince, EnterpriseUpdateColumnLegalRepresentative, EnterpriseUpdateColumnLegalRepresentativeIDCard, EnterpriseUpdateColumnLegalRepresentativeIDCardPhoto, EnterpriseUpdateColumnLegalRepresentativePhone, EnterpriseUpdateColumnOperatingLicensePhoto, EnterpriseUpdateColumnOrganizationCode, EnterpriseUpdateColumnOrganizationCodeCertificatePhoto, EnterpriseUpdateColumnPoliceStationID, EnterpriseUpdateColumnProvinceID, EnterpriseUpdateColumnRecordAt, EnterpriseUpdateColumnRecordBy, EnterpriseUpdateColumnRemarks, EnterpriseUpdateColumnScore, EnterpriseUpdateColumnSuperiorEnterpriseID, EnterpriseUpdateColumnUpdateAt, EnterpriseUpdateColumnUpdateBy, EnterpriseUpdateColumnUpdateTimeIn:
		return true
	}
	return false
}

func (e EnterpriseUpdateColumn) String() string {
	return string(e)
}

func (e *EnterpriseUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid enterprise_update_column", str)
	}
	return nil
}

func (e EnterpriseUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// unique or primary key constraints on table "system_user"
type SystemUserConstraint string

const (
	// unique or primary key constraint
	SystemUserConstraintSystemUserPkey SystemUserConstraint = "system_user_pkey"
)

var AllSystemUserConstraint = []SystemUserConstraint{
	SystemUserConstraintSystemUserPkey,
}

func (e SystemUserConstraint) IsValid() bool {
	switch e {
	case SystemUserConstraintSystemUserPkey:
		return true
	}
	return false
}

func (e SystemUserConstraint) String() string {
	return string(e)
}

func (e *SystemUserConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemUserConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid system_user_constraint", str)
	}
	return nil
}

func (e SystemUserConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "system_user"
type SystemUserSelectColumn string

const (
	// column name
	SystemUserSelectColumnIsBindIP SystemUserSelectColumn = "Is_bind_ip"
	// column name
	SystemUserSelectColumnAppVersion SystemUserSelectColumn = "app_version"
	// column name
	SystemUserSelectColumnAuditLevel SystemUserSelectColumn = "audit_level"
	// column name
	SystemUserSelectColumnCreateBy SystemUserSelectColumn = "create_by"
	// column name
	SystemUserSelectColumnCreatedAt SystemUserSelectColumn = "created_at"
	// column name
	SystemUserSelectColumnDeleteAt SystemUserSelectColumn = "delete_at"
	// column name
	SystemUserSelectColumnDeleteBy SystemUserSelectColumn = "delete_by"
	// column name
	SystemUserSelectColumnDepartmentID SystemUserSelectColumn = "department_id"
	// column name
	SystemUserSelectColumnEmail SystemUserSelectColumn = "email"
	// column name
	SystemUserSelectColumnEnterpriseID SystemUserSelectColumn = "enterprise_id"
	// column name
	SystemUserSelectColumnGrade SystemUserSelectColumn = "grade"
	// column name
	SystemUserSelectColumnID SystemUserSelectColumn = "id"
	// column name
	SystemUserSelectColumnIPAddress SystemUserSelectColumn = "ip_address"
	// column name
	SystemUserSelectColumnIsDelete SystemUserSelectColumn = "is_delete"
	// column name
	SystemUserSelectColumnIsValid SystemUserSelectColumn = "is_valid"
	// column name
	SystemUserSelectColumnMkey SystemUserSelectColumn = "mkey"
	// column name
	SystemUserSelectColumnMobile SystemUserSelectColumn = "mobile"
	// column name
	SystemUserSelectColumnPassword SystemUserSelectColumn = "password"
	// column name
	SystemUserSelectColumnProxyUser SystemUserSelectColumn = "proxy_user"
	// column name
	SystemUserSelectColumnRemarks SystemUserSelectColumn = "remarks"
	// column name
	SystemUserSelectColumnTelephone SystemUserSelectColumn = "telephone"
	// column name
	SystemUserSelectColumnUsername SystemUserSelectColumn = "username"
	// column name
	SystemUserSelectColumnUkey SystemUserSelectColumn = "ukey"
	// column name
	SystemUserSelectColumnUpdateAt SystemUserSelectColumn = "update_at"
	// column name
	SystemUserSelectColumnUpdateBy SystemUserSelectColumn = "update_by"
	// column name
	SystemUserSelectColumnUserID SystemUserSelectColumn = "user_id"
	// column name
	SystemUserSelectColumnUserState SystemUserSelectColumn = "user_state"
	// column name
	SystemUserSelectColumnUserType SystemUserSelectColumn = "user_type"
)

var AllSystemUserSelectColumn = []SystemUserSelectColumn{
	SystemUserSelectColumnIsBindIP,
	SystemUserSelectColumnAppVersion,
	SystemUserSelectColumnAuditLevel,
	SystemUserSelectColumnCreateBy,
	SystemUserSelectColumnCreatedAt,
	SystemUserSelectColumnDeleteAt,
	SystemUserSelectColumnDeleteBy,
	SystemUserSelectColumnDepartmentID,
	SystemUserSelectColumnEmail,
	SystemUserSelectColumnEnterpriseID,
	SystemUserSelectColumnGrade,
	SystemUserSelectColumnID,
	SystemUserSelectColumnIPAddress,
	SystemUserSelectColumnIsDelete,
	SystemUserSelectColumnIsValid,
	SystemUserSelectColumnMkey,
	SystemUserSelectColumnMobile,
	SystemUserSelectColumnPassword,
	SystemUserSelectColumnProxyUser,
	SystemUserSelectColumnRemarks,
	SystemUserSelectColumnTelephone,
	SystemUserSelectColumnUsername,
	SystemUserSelectColumnUkey,
	SystemUserSelectColumnUpdateAt,
	SystemUserSelectColumnUpdateBy,
	SystemUserSelectColumnUserID,
	SystemUserSelectColumnUserState,
	SystemUserSelectColumnUserType,
}

func (e SystemUserSelectColumn) IsValid() bool {
	switch e {
	case SystemUserSelectColumnIsBindIP, SystemUserSelectColumnAppVersion, SystemUserSelectColumnAuditLevel, SystemUserSelectColumnCreateBy, SystemUserSelectColumnCreatedAt, SystemUserSelectColumnDeleteAt, SystemUserSelectColumnDeleteBy, SystemUserSelectColumnDepartmentID, SystemUserSelectColumnEmail, SystemUserSelectColumnEnterpriseID, SystemUserSelectColumnGrade, SystemUserSelectColumnID, SystemUserSelectColumnIPAddress, SystemUserSelectColumnIsDelete, SystemUserSelectColumnIsValid, SystemUserSelectColumnMkey, SystemUserSelectColumnMobile, SystemUserSelectColumnPassword, SystemUserSelectColumnProxyUser, SystemUserSelectColumnRemarks, SystemUserSelectColumnTelephone, SystemUserSelectColumnUsername, SystemUserSelectColumnUkey, SystemUserSelectColumnUpdateAt, SystemUserSelectColumnUpdateBy, SystemUserSelectColumnUserID, SystemUserSelectColumnUserState, SystemUserSelectColumnUserType:
		return true
	}
	return false
}

func (e SystemUserSelectColumn) String() string {
	return string(e)
}

func (e *SystemUserSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemUserSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid system_user_select_column", str)
	}
	return nil
}

func (e SystemUserSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "system_user"
type SystemUserUpdateColumn string

const (
	// column name
	SystemUserUpdateColumnIsBindIP SystemUserUpdateColumn = "Is_bind_ip"
	// column name
	SystemUserUpdateColumnAppVersion SystemUserUpdateColumn = "app_version"
	// column name
	SystemUserUpdateColumnAuditLevel SystemUserUpdateColumn = "audit_level"
	// column name
	SystemUserUpdateColumnCreateBy SystemUserUpdateColumn = "create_by"
	// column name
	SystemUserUpdateColumnCreatedAt SystemUserUpdateColumn = "created_at"
	// column name
	SystemUserUpdateColumnDeleteAt SystemUserUpdateColumn = "delete_at"
	// column name
	SystemUserUpdateColumnDeleteBy SystemUserUpdateColumn = "delete_by"
	// column name
	SystemUserUpdateColumnDepartmentID SystemUserUpdateColumn = "department_id"
	// column name
	SystemUserUpdateColumnEmail SystemUserUpdateColumn = "email"
	// column name
	SystemUserUpdateColumnEnterpriseID SystemUserUpdateColumn = "enterprise_id"
	// column name
	SystemUserUpdateColumnGrade SystemUserUpdateColumn = "grade"
	// column name
	SystemUserUpdateColumnID SystemUserUpdateColumn = "id"
	// column name
	SystemUserUpdateColumnIPAddress SystemUserUpdateColumn = "ip_address"
	// column name
	SystemUserUpdateColumnIsDelete SystemUserUpdateColumn = "is_delete"
	// column name
	SystemUserUpdateColumnIsValid SystemUserUpdateColumn = "is_valid"
	// column name
	SystemUserUpdateColumnMkey SystemUserUpdateColumn = "mkey"
	// column name
	SystemUserUpdateColumnMobile SystemUserUpdateColumn = "mobile"
	// column name
	SystemUserUpdateColumnPassword SystemUserUpdateColumn = "password"
	// column name
	SystemUserUpdateColumnProxyUser SystemUserUpdateColumn = "proxy_user"
	// column name
	SystemUserUpdateColumnRemarks SystemUserUpdateColumn = "remarks"
	// column name
	SystemUserUpdateColumnTelephone SystemUserUpdateColumn = "telephone"
	// column name
	SystemUserUpdateColumnUsername SystemUserUpdateColumn = "username"
	// column name
	SystemUserUpdateColumnUkey SystemUserUpdateColumn = "ukey"
	// column name
	SystemUserUpdateColumnUpdateAt SystemUserUpdateColumn = "update_at"
	// column name
	SystemUserUpdateColumnUpdateBy SystemUserUpdateColumn = "update_by"
	// column name
	SystemUserUpdateColumnUserID SystemUserUpdateColumn = "user_id"
	// column name
	SystemUserUpdateColumnUserState SystemUserUpdateColumn = "user_state"
	// column name
	SystemUserUpdateColumnUserType SystemUserUpdateColumn = "user_type"
)

var AllSystemUserUpdateColumn = []SystemUserUpdateColumn{
	SystemUserUpdateColumnIsBindIP,
	SystemUserUpdateColumnAppVersion,
	SystemUserUpdateColumnAuditLevel,
	SystemUserUpdateColumnCreateBy,
	SystemUserUpdateColumnCreatedAt,
	SystemUserUpdateColumnDeleteAt,
	SystemUserUpdateColumnDeleteBy,
	SystemUserUpdateColumnDepartmentID,
	SystemUserUpdateColumnEmail,
	SystemUserUpdateColumnEnterpriseID,
	SystemUserUpdateColumnGrade,
	SystemUserUpdateColumnID,
	SystemUserUpdateColumnIPAddress,
	SystemUserUpdateColumnIsDelete,
	SystemUserUpdateColumnIsValid,
	SystemUserUpdateColumnMkey,
	SystemUserUpdateColumnMobile,
	SystemUserUpdateColumnPassword,
	SystemUserUpdateColumnProxyUser,
	SystemUserUpdateColumnRemarks,
	SystemUserUpdateColumnTelephone,
	SystemUserUpdateColumnUsername,
	SystemUserUpdateColumnUkey,
	SystemUserUpdateColumnUpdateAt,
	SystemUserUpdateColumnUpdateBy,
	SystemUserUpdateColumnUserID,
	SystemUserUpdateColumnUserState,
	SystemUserUpdateColumnUserType,
}

func (e SystemUserUpdateColumn) IsValid() bool {
	switch e {
	case SystemUserUpdateColumnIsBindIP, SystemUserUpdateColumnAppVersion, SystemUserUpdateColumnAuditLevel, SystemUserUpdateColumnCreateBy, SystemUserUpdateColumnCreatedAt, SystemUserUpdateColumnDeleteAt, SystemUserUpdateColumnDeleteBy, SystemUserUpdateColumnDepartmentID, SystemUserUpdateColumnEmail, SystemUserUpdateColumnEnterpriseID, SystemUserUpdateColumnGrade, SystemUserUpdateColumnID, SystemUserUpdateColumnIPAddress, SystemUserUpdateColumnIsDelete, SystemUserUpdateColumnIsValid, SystemUserUpdateColumnMkey, SystemUserUpdateColumnMobile, SystemUserUpdateColumnPassword, SystemUserUpdateColumnProxyUser, SystemUserUpdateColumnRemarks, SystemUserUpdateColumnTelephone, SystemUserUpdateColumnUsername, SystemUserUpdateColumnUkey, SystemUserUpdateColumnUpdateAt, SystemUserUpdateColumnUpdateBy, SystemUserUpdateColumnUserID, SystemUserUpdateColumnUserState, SystemUserUpdateColumnUserType:
		return true
	}
	return false
}

func (e SystemUserUpdateColumn) String() string {
	return string(e)
}

func (e *SystemUserUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemUserUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid system_user_update_column", str)
	}
	return nil
}

func (e SystemUserUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
