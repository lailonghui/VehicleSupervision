// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/admin/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "department"
type DepartmentAggregate struct {
	Aggregate *DepartmentAggregateFields `json:"aggregate"`
}

// aggregate fields of "department"
type DepartmentAggregateFields struct {
	Avg        *DepartmentAvgFields        `json:"avg"`
	Count      *int                        `json:"count"`
	Max        *DepartmentMaxFields        `json:"max"`
	Min        *DepartmentMinFields        `json:"min"`
	Stddev     *DepartmentStddevFields     `json:"stddev"`
	StddevPop  *DepartmentStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DepartmentStddevSampFields `json:"stddev_samp"`
	Sum        *DepartmentSumFields        `json:"sum"`
	VarPop     *DepartmentVarPopFields     `json:"var_pop"`
	VarSamp    *DepartmentVarSampFields    `json:"var_samp"`
	Variance   *DepartmentVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "department"
type DepartmentAvgFields struct {
	ID                 *int64 `json:"id"`
	DepartmentCategory *int   `json:"department_category"`
	InternalNumber     *int   `json:"internal_number"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'department'.
type DepartmentBoolExp struct {
	And                  []*DepartmentBoolExp            `json:"_and"`
	Not                  *DepartmentBoolExp              `json:"_not"`
	Or                   []*DepartmentBoolExp            `json:"_or"`
	ID                   *model.BigintComparisonExp      `json:"id"`
	DepartmentID         *model.StringComparisonExp      `json:"department_id"`
	EnterpriseID         *model.StringComparisonExp      `json:"enterprise_id"`
	SuperiorDepartmentID *model.StringComparisonExp      `json:"superior_department_id"`
	DepartmentName       *model.StringComparisonExp      `json:"department_name"`
	DepartmentCode       *model.StringComparisonExp      `json:"department_code"`
	DepartmentCategory   *model.IntComparisonExp         `json:"department_category"`
	InternalNumber       *model.IntComparisonExp         `json:"internal_number"`
	CreateAt             *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy             *model.StringComparisonExp      `json:"create_by"`
	UpdateAt             *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy             *model.StringComparisonExp      `json:"update_by"`
	DeleteAt             *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy             *model.StringComparisonExp      `json:"delete_by"`
	IsDelete             *model.BooleanComparisonExp     `json:"is_delete"`
	Remarks              *model.StringComparisonExp      `json:"remarks"`
}

// input type for incrementing integer column in table "department"
type DepartmentIncInput struct {
	ID                 *int64 `json:"id"`
	DepartmentCategory *int   `json:"department_category"`
	InternalNumber     *int   `json:"internal_number"`
}

// input type for inserting data into table "department"
type DepartmentInsertInput struct {
	DepartmentID         string     `json:"department_id"`
	EnterpriseID         string     `json:"enterprise_id"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	DepartmentName       *string    `json:"department_name"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentCategory   *int       `json:"department_category"`
	InternalNumber       *int       `json:"internal_number"`
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	IsDelete             bool       `json:"is_delete"`
	Remarks              *string    `json:"remarks"`
}

// aggregate max on columns of table "department"
type DepartmentMaxFields struct {
	ID                   *int64     `json:"id"`
	DepartmentID         *string    `json:"department_id"`
	EnterpriseID         *string    `json:"enterprise_id"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	DepartmentName       *string    `json:"department_name"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentCategory   *int       `json:"department_category"`
	InternalNumber       *int       `json:"internal_number"`
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	IsDelete             *bool      `json:"is_delete"`
	Remarks              *string    `json:"remarks"`
}

// aggregate min on columns of table "department"
type DepartmentMinFields struct {
	ID                   *int64     `json:"id"`
	DepartmentID         *string    `json:"department_id"`
	EnterpriseID         *string    `json:"enterprise_id"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	DepartmentName       *string    `json:"department_name"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentCategory   *int       `json:"department_category"`
	InternalNumber       *int       `json:"internal_number"`
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	IsDelete             *bool      `json:"is_delete"`
	Remarks              *string    `json:"remarks"`
}

// response of any mutation on the table "department"
type DepartmentMutationResponse struct {
	AffectedRows int                  `json:"affected_rows"`
	Returning    []*model1.Department `json:"returning"`
}

// ordering options when selecting data from "department"
type DepartmentOrderBy struct {
	ID                   *model.OrderBy `json:"id"`
	DepartmentID         *model.OrderBy `json:"department_id"`
	EnterpriseID         *model.OrderBy `json:"enterprise_id"`
	SuperiorDepartmentID *model.OrderBy `json:"superior_department_id"`
	DepartmentName       *model.OrderBy `json:"department_name"`
	DepartmentCode       *model.OrderBy `json:"department_code"`
	DepartmentCategory   *model.OrderBy `json:"department_category"`
	InternalNumber       *model.OrderBy `json:"internal_number"`
	CreateAt             *model.OrderBy `json:"create_at"`
	CreateBy             *model.OrderBy `json:"create_by"`
	UpdateAt             *model.OrderBy `json:"update_at"`
	UpdateBy             *model.OrderBy `json:"update_by"`
	DeleteAt             *model.OrderBy `json:"delete_at"`
	DeleteBy             *model.OrderBy `json:"delete_by"`
	IsDelete             *model.OrderBy `json:"is_delete"`
	Remarks              *model.OrderBy `json:"remarks"`
}

// input type for updating data in table "department"
type DepartmentSetInput struct {
	ID                   *int64     `json:"id"`
	DepartmentID         *string    `json:"department_id"`
	EnterpriseID         *string    `json:"enterprise_id"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	DepartmentName       *string    `json:"department_name"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentCategory   *int       `json:"department_category"`
	InternalNumber       *int       `json:"internal_number"`
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	IsDelete             *bool      `json:"is_delete"`
	Remarks              *string    `json:"remarks"`
}

// aggregate stddev on columns of table "department"
type DepartmentStddevFields struct {
	ID                 *int64 `json:"id"`
	DepartmentCategory *int   `json:"department_category"`
	InternalNumber     *int   `json:"internal_number"`
}

// aggregate stddev_pop on columns of table "department"
type DepartmentStddevPopFields struct {
	ID                 *int64 `json:"id"`
	DepartmentCategory *int   `json:"department_category"`
	InternalNumber     *int   `json:"internal_number"`
}

// aggregate stddev_samp on columns of table "department"
type DepartmentStddevSampFields struct {
	ID                 *int64 `json:"id"`
	DepartmentCategory *int   `json:"department_category"`
	InternalNumber     *int   `json:"internal_number"`
}

// aggregate sum on columns of table "department"
type DepartmentSumFields struct {
	ID                 *int64 `json:"id"`
	DepartmentCategory *int   `json:"department_category"`
	InternalNumber     *int   `json:"internal_number"`
}

// aggregate var_pop on columns of table "department"
type DepartmentVarPopFields struct {
	ID                 *int64 `json:"id"`
	DepartmentCategory *int   `json:"department_category"`
	InternalNumber     *int   `json:"internal_number"`
}

// aggregate var_samp on columns of table "department"
type DepartmentVarSampFields struct {
	ID                 *int64 `json:"id"`
	DepartmentCategory *int   `json:"department_category"`
	InternalNumber     *int   `json:"internal_number"`
}

// aggregate variance on columns of table "department"
type DepartmentVarianceFields struct {
	ID                 *int64 `json:"id"`
	DepartmentCategory *int   `json:"department_category"`
	InternalNumber     *int   `json:"internal_number"`
}

// aggregated selection of "enterprise"
type EnterpriseAggregate struct {
	Aggregate *EnterpriseAggregateFields `json:"aggregate"`
}

// aggregate fields of "enterprise"
type EnterpriseAggregateFields struct {
	Avg        *EnterpriseAvgFields        `json:"avg"`
	Count      *int                        `json:"count"`
	Max        *EnterpriseMaxFields        `json:"max"`
	Min        *EnterpriseMinFields        `json:"min"`
	Stddev     *EnterpriseStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseSumFields        `json:"sum"`
	VarPop     *EnterpriseVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseVarianceFields   `json:"variance"`
}

// aggregated selection of "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceAggregate struct {
	Aggregate *EnterpriseAlarmSendPoliceAggregateFields `json:"aggregate"`
}

// aggregate fields of "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceAggregateFields struct {
	Avg        *EnterpriseAlarmSendPoliceAvgFields        `json:"avg"`
	Count      *int                                       `json:"count"`
	Max        *EnterpriseAlarmSendPoliceMaxFields        `json:"max"`
	Min        *EnterpriseAlarmSendPoliceMinFields        `json:"min"`
	Stddev     *EnterpriseAlarmSendPoliceStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseAlarmSendPoliceStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseAlarmSendPoliceStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseAlarmSendPoliceSumFields        `json:"sum"`
	VarPop     *EnterpriseAlarmSendPoliceVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseAlarmSendPoliceVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseAlarmSendPoliceVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_alarm_send_police'.
type EnterpriseAlarmSendPoliceBoolExp struct {
	And                         []*EnterpriseAlarmSendPoliceBoolExp `json:"_and"`
	Not                         *EnterpriseAlarmSendPoliceBoolExp   `json:"_not"`
	Or                          []*EnterpriseAlarmSendPoliceBoolExp `json:"_or"`
	ID                          *model.BigintComparisonExp          `json:"id"`
	EnterpriseAlarmSendPoliceID *model.StringComparisonExp          `json:"enterprise_alarm_send_police_id"`
	EnterpriseID                *model.StringComparisonExp          `json:"enterprise_id"`
	EnterpriseName              *model.StringComparisonExp          `json:"enterprise_name"`
	EnterpriseContact           *model.StringComparisonExp          `json:"enterprise_contact"`
	EnterprisePhone             *model.StringComparisonExp          `json:"enterprise_phone"`
	Police                      *model.StringComparisonExp          `json:"police"`
	PolicePhone                 *model.StringComparisonExp          `json:"police_phone"`
	PhliceDepartment            *model.StringComparisonExp          `json:"phlice_department"`
	CreatedAt                   *model.TimestamptzComparisonExp     `json:"created_at"`
	CreatedBy                   *model.StringComparisonExp          `json:"created_by"`
	UpdatedAt                   *model.TimestamptzComparisonExp     `json:"updated_at"`
	UpdatedBy                   *model.StringComparisonExp          `json:"updated_by"`
	DeletedAt                   *model.TimestamptzComparisonExp     `json:"deleted_at"`
	DeletedBy                   *model.StringComparisonExp          `json:"deleted_by"`
}

// input type for incrementing integer column in table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceInsertInput struct {
	EnterpriseAlarmSendPoliceID string     `json:"enterprise_alarm_send_police_id"`
	EnterpriseID                *string    `json:"enterprise_id"`
	EnterpriseName              *string    `json:"enterprise_name"`
	EnterpriseContact           *string    `json:"enterprise_contact"`
	EnterprisePhone             *string    `json:"enterprise_phone"`
	Police                      *string    `json:"police"`
	PolicePhone                 *string    `json:"police_phone"`
	PhliceDepartment            *string    `json:"phlice_department"`
	CreatedAt                   time.Time  `json:"created_at"`
	CreatedBy                   string     `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
}

// aggregate max on columns of table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceMaxFields struct {
	ID                          *int64     `json:"id"`
	EnterpriseAlarmSendPoliceID *string    `json:"enterprise_alarm_send_police_id"`
	EnterpriseID                *string    `json:"enterprise_id"`
	EnterpriseName              *string    `json:"enterprise_name"`
	EnterpriseContact           *string    `json:"enterprise_contact"`
	EnterprisePhone             *string    `json:"enterprise_phone"`
	Police                      *string    `json:"police"`
	PolicePhone                 *string    `json:"police_phone"`
	PhliceDepartment            *string    `json:"phlice_department"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
}

// aggregate min on columns of table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceMinFields struct {
	ID                          *int64     `json:"id"`
	EnterpriseAlarmSendPoliceID *string    `json:"enterprise_alarm_send_police_id"`
	EnterpriseID                *string    `json:"enterprise_id"`
	EnterpriseName              *string    `json:"enterprise_name"`
	EnterpriseContact           *string    `json:"enterprise_contact"`
	EnterprisePhone             *string    `json:"enterprise_phone"`
	Police                      *string    `json:"police"`
	PolicePhone                 *string    `json:"police_phone"`
	PhliceDepartment            *string    `json:"phlice_department"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
}

// response of any mutation on the table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceMutationResponse struct {
	AffectedRows int                                 `json:"affected_rows"`
	Returning    []*model1.EnterpriseAlarmSendPolice `json:"returning"`
}

// ordering options when selecting data from "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceOrderBy struct {
	ID                          *model.OrderBy `json:"id"`
	EnterpriseAlarmSendPoliceID *model.OrderBy `json:"enterprise_alarm_send_police_id"`
	EnterpriseID                *model.OrderBy `json:"enterprise_id"`
	EnterpriseName              *model.OrderBy `json:"enterprise_name"`
	EnterpriseContact           *model.OrderBy `json:"enterprise_contact"`
	EnterprisePhone             *model.OrderBy `json:"enterprise_phone"`
	Police                      *model.OrderBy `json:"police"`
	PolicePhone                 *model.OrderBy `json:"police_phone"`
	PhliceDepartment            *model.OrderBy `json:"phlice_department"`
	CreatedAt                   *model.OrderBy `json:"created_at"`
	CreatedBy                   *model.OrderBy `json:"created_by"`
	UpdatedAt                   *model.OrderBy `json:"updated_at"`
	UpdatedBy                   *model.OrderBy `json:"updated_by"`
	DeletedAt                   *model.OrderBy `json:"deleted_at"`
	DeletedBy                   *model.OrderBy `json:"deleted_by"`
}

// input type for updating data in table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceSetInput struct {
	ID                          *int64     `json:"id"`
	EnterpriseAlarmSendPoliceID *string    `json:"enterprise_alarm_send_police_id"`
	EnterpriseID                *string    `json:"enterprise_id"`
	EnterpriseName              *string    `json:"enterprise_name"`
	EnterpriseContact           *string    `json:"enterprise_contact"`
	EnterprisePhone             *string    `json:"enterprise_phone"`
	Police                      *string    `json:"police"`
	PolicePhone                 *string    `json:"police_phone"`
	PhliceDepartment            *string    `json:"phlice_department"`
	CreatedAt                   *time.Time `json:"created_at"`
	CreatedBy                   *string    `json:"created_by"`
	UpdatedAt                   *time.Time `json:"updated_at"`
	UpdatedBy                   *string    `json:"updated_by"`
	DeletedAt                   *time.Time `json:"deleted_at"`
	DeletedBy                   *string    `json:"deleted_by"`
}

// aggregate stddev on columns of table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceSumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "enterprise_alarm_send_police"
type EnterpriseAlarmSendPoliceVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregate avg on columns of table "enterprise"
type EnterpriseAvgFields struct {
	ID                  *int64 `json:"id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	DisplayNumber       *int   `json:"display_number"`
	BusinessScope       *int   `json:"business_scope"`
	ProvinceID          *int64 `json:"province_id"`
	CityID              *int64 `json:"city_id"`
	DistrictID          *int64 `json:"district_id"`
	InstitutionCategory *int64 `json:"institution_category"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	CheckStatus         *int   `json:"check_status"`
	Score               *int   `json:"score"`
	EnterpriseType      *int   `json:"enterprise_type"`
	State               *int   `json:"state"`
	CreditLevel         *int   `json:"credit_level"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise'.
type EnterpriseBoolExp struct {
	And                              []*EnterpriseBoolExp            `json:"_and"`
	Not                              *EnterpriseBoolExp              `json:"_not"`
	Or                               []*EnterpriseBoolExp            `json:"_or"`
	ID                               *model.BigintComparisonExp      `json:"id"`
	EnterpriseID                     *model.StringComparisonExp      `json:"enterprise_id"`
	SuperiorEnterpriseID             *model.StringComparisonExp      `json:"superior_enterprise_id"`
	EnterpriseCode                   *model.StringComparisonExp      `json:"enterprise_code"`
	EnterpriseName                   *model.StringComparisonExp      `json:"enterprise_name"`
	EnterpriseLevel                  *model.IntComparisonExp         `json:"enterprise_level"`
	DisplayNumber                    *model.IntComparisonExp         `json:"display_number"`
	EnterpriseAddress                *model.StringComparisonExp      `json:"enterprise_address"`
	BusinessScope                    *model.IntComparisonExp         `json:"business_scope"`
	FaxNumber                        *model.StringComparisonExp      `json:"fax_number"`
	ProvinceID                       *model.BigintComparisonExp      `json:"province_id"`
	CityID                           *model.BigintComparisonExp      `json:"city_id"`
	DistrictID                       *model.BigintComparisonExp      `json:"district_id"`
	InstitutionCategory              *model.BigintComparisonExp      `json:"institution_category"`
	OperatingLicensePhoto            *model.StringComparisonExp      `json:"operating_license_photo"`
	BusinessLicensePhoto             *model.StringComparisonExp      `json:"business_license_photo"`
	BusinessLicenseIssuanceDate      *model.TimestamptzComparisonExp `json:"business_license_issuance_date"`
	BusinessLicenseExpiryDate        *model.TimestamptzComparisonExp `json:"business_license_expiry_date"`
	EnterpriseNature                 *model.IntComparisonExp         `json:"enterprise_nature"`
	LegalRepresentative              *model.StringComparisonExp      `json:"legal_representative"`
	LegalRepresentativePhone         *model.StringComparisonExp      `json:"legal_representative_phone"`
	LegalRepresentativeIDCardPhoto   *model.StringComparisonExp      `json:"legal_representative_id_card_photo"`
	LegalRepresentativeIDCard        *model.StringComparisonExp      `json:"legal_representative_id_card"`
	EntrustedAgent                   *model.StringComparisonExp      `json:"entrusted_agent"`
	EntrustedAgentPhone              *model.StringComparisonExp      `json:"entrusted_agent_phone"`
	EntrustedAgentIDCardPhoto        *model.StringComparisonExp      `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentIDCard             *model.StringComparisonExp      `json:"entrusted_agent_id_card"`
	OrganizationCode                 *model.StringComparisonExp      `json:"organization_code"`
	OrganizationCodeCertificatePhoto *model.StringComparisonExp      `json:"organization_code_certificate_photo"`
	UpdateTimeIn                     *model.TimestamptzComparisonExp `json:"update_time_in"`
	BusinessPhoto                    *model.StringComparisonExp      `json:"business_photo"`
	IsBlack                          *model.BooleanComparisonExp     `json:"is_black"`
	CheckStatus                      *model.IntComparisonExp         `json:"check_status"`
	IsInstall                        *model.BooleanComparisonExp     `json:"is_install"`
	IsInput                          *model.BooleanComparisonExp     `json:"is_input"`
	IsUploadProvince                 *model.BooleanComparisonExp     `json:"is_upload_province"`
	Score                            *model.IntComparisonExp         `json:"score"`
	BrigadeID                        *model.StringComparisonExp      `json:"brigade_id"`
	PoliceStationID                  *model.StringComparisonExp      `json:"police_station_id"`
	BrigadeReviewOpinion             *model.StringComparisonExp      `json:"brigade_review_opinion"`
	BrigadeReviewTime                *model.TimestamptzComparisonExp `json:"brigade_review_time"`
	BrigadeReviewBy                  *model.StringComparisonExp      `json:"brigade_review_by"`
	AssociationReviewOpinion         *model.StringComparisonExp      `json:"association_review_opinion"`
	AssociationReviewTime            *model.TimestamptzComparisonExp `json:"association_review_time"`
	AssociationReviewBy              *model.TimestamptzComparisonExp `json:"association_review_by"`
	CreateAt                         *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy                         *model.StringComparisonExp      `json:"create_by"`
	UpdateAt                         *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy                         *model.StringComparisonExp      `json:"update_by"`
	DeleteAt                         *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy                         *model.StringComparisonExp      `json:"delete_by"`
	Remarks                          *model.StringComparisonExp      `json:"remarks"`
	IsDeleted                        *model.BooleanComparisonExp     `json:"is_deleted"`
	IsKeyPoint                       *model.BooleanComparisonExp     `json:"is_key_point"`
	EnterpriseType                   *model.IntComparisonExp         `json:"enterprise_type"`
	IsCatalog                        *model.BooleanComparisonExp     `json:"is_catalog"`
	State                            *model.IntComparisonExp         `json:"state"`
	ProxyEnterpriseID                *model.StringComparisonExp      `json:"proxy_enterprise_id"`
	IsExpire                         *model.BooleanComparisonExp     `json:"is_expire"`
	CreditLevel                      *model.IntComparisonExp         `json:"credit_level"`
	CreditLevelRemark                *model.StringComparisonExp      `json:"credit_level_remark"`
}

// aggregated selection of "enterprise_contact"
type EnterpriseContactAggregate struct {
	Aggregate *EnterpriseContactAggregateFields `json:"aggregate"`
}

// aggregate fields of "enterprise_contact"
type EnterpriseContactAggregateFields struct {
	Avg        *EnterpriseContactAvgFields        `json:"avg"`
	Count      *int                               `json:"count"`
	Max        *EnterpriseContactMaxFields        `json:"max"`
	Min        *EnterpriseContactMinFields        `json:"min"`
	Stddev     *EnterpriseContactStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseContactStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseContactStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseContactSumFields        `json:"sum"`
	VarPop     *EnterpriseContactVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseContactVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseContactVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "enterprise_contact"
type EnterpriseContactAvgFields struct {
	ID      *int64 `json:"id"`
	SortNum *int   `json:"sort_num"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_contact'.
type EnterpriseContactBoolExp struct {
	And          []*EnterpriseContactBoolExp     `json:"_and"`
	Not          *EnterpriseContactBoolExp       `json:"_not"`
	Or           []*EnterpriseContactBoolExp     `json:"_or"`
	ID           *model.BigintComparisonExp      `json:"id"`
	ContactID    *model.StringComparisonExp      `json:"contact_id"`
	EnterpriseID *model.StringComparisonExp      `json:"enterprise_id"`
	Name         *model.StringComparisonExp      `json:"name"`
	Mobile       *model.StringComparisonExp      `json:"mobile"`
	Phone        *model.StringComparisonExp      `json:"phone"`
	Email        *model.StringComparisonExp      `json:"email"`
	SortNum      *model.IntComparisonExp         `json:"sort_num"`
	CreateAt     *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy     *model.StringComparisonExp      `json:"create_by"`
	UpdateAt     *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy     *model.StringComparisonExp      `json:"update_by"`
	DeleteAt     *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy     *model.StringComparisonExp      `json:"delete_by"`
	IsDelete     *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "enterprise_contact"
type EnterpriseContactIncInput struct {
	ID      *int64 `json:"id"`
	SortNum *int   `json:"sort_num"`
}

// input type for inserting data into table "enterprise_contact"
type EnterpriseContactInsertInput struct {
	ContactID    string     `json:"contact_id"`
	EnterpriseID string     `json:"enterprise_id"`
	Name         *string    `json:"name"`
	Mobile       *string    `json:"mobile"`
	Phone        *string    `json:"phone"`
	Email        *string    `json:"email"`
	SortNum      *int       `json:"sort_num"`
	CreateAt     time.Time  `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     bool       `json:"is_delete"`
}

// aggregate max on columns of table "enterprise_contact"
type EnterpriseContactMaxFields struct {
	ID           *int64     `json:"id"`
	ContactID    *string    `json:"contact_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	Name         *string    `json:"name"`
	Mobile       *string    `json:"mobile"`
	Phone        *string    `json:"phone"`
	Email        *string    `json:"email"`
	SortNum      *int       `json:"sort_num"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// aggregate min on columns of table "enterprise_contact"
type EnterpriseContactMinFields struct {
	ID           *int64     `json:"id"`
	ContactID    *string    `json:"contact_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	Name         *string    `json:"name"`
	Mobile       *string    `json:"mobile"`
	Phone        *string    `json:"phone"`
	Email        *string    `json:"email"`
	SortNum      *int       `json:"sort_num"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// response of any mutation on the table "enterprise_contact"
type EnterpriseContactMutationResponse struct {
	AffectedRows int                         `json:"affected_rows"`
	Returning    []*model1.EnterpriseContact `json:"returning"`
}

// ordering options when selecting data from "enterprise_contact"
type EnterpriseContactOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	ContactID    *model.OrderBy `json:"contact_id"`
	EnterpriseID *model.OrderBy `json:"enterprise_id"`
	Name         *model.OrderBy `json:"name"`
	Mobile       *model.OrderBy `json:"mobile"`
	Phone        *model.OrderBy `json:"phone"`
	Email        *model.OrderBy `json:"email"`
	SortNum      *model.OrderBy `json:"sort_num"`
	CreateAt     *model.OrderBy `json:"create_at"`
	CreateBy     *model.OrderBy `json:"create_by"`
	UpdateAt     *model.OrderBy `json:"update_at"`
	UpdateBy     *model.OrderBy `json:"update_by"`
	DeleteAt     *model.OrderBy `json:"delete_at"`
	DeleteBy     *model.OrderBy `json:"delete_by"`
	IsDelete     *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "enterprise_contact"
type EnterpriseContactSetInput struct {
	ID           *int64     `json:"id"`
	ContactID    *string    `json:"contact_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	Name         *string    `json:"name"`
	Mobile       *string    `json:"mobile"`
	Phone        *string    `json:"phone"`
	Email        *string    `json:"email"`
	SortNum      *int       `json:"sort_num"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "enterprise_contact"
type EnterpriseContactStddevFields struct {
	ID      *int64 `json:"id"`
	SortNum *int   `json:"sort_num"`
}

// aggregate stddev_pop on columns of table "enterprise_contact"
type EnterpriseContactStddevPopFields struct {
	ID      *int64 `json:"id"`
	SortNum *int   `json:"sort_num"`
}

// aggregate stddev_samp on columns of table "enterprise_contact"
type EnterpriseContactStddevSampFields struct {
	ID      *int64 `json:"id"`
	SortNum *int   `json:"sort_num"`
}

// aggregate sum on columns of table "enterprise_contact"
type EnterpriseContactSumFields struct {
	ID      *int64 `json:"id"`
	SortNum *int   `json:"sort_num"`
}

// aggregate var_pop on columns of table "enterprise_contact"
type EnterpriseContactVarPopFields struct {
	ID      *int64 `json:"id"`
	SortNum *int   `json:"sort_num"`
}

// aggregate var_samp on columns of table "enterprise_contact"
type EnterpriseContactVarSampFields struct {
	ID      *int64 `json:"id"`
	SortNum *int   `json:"sort_num"`
}

// aggregate variance on columns of table "enterprise_contact"
type EnterpriseContactVarianceFields struct {
	ID      *int64 `json:"id"`
	SortNum *int   `json:"sort_num"`
}

// input type for incrementing integer column in table "enterprise"
type EnterpriseIncInput struct {
	ID                  *int64 `json:"id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	DisplayNumber       *int   `json:"display_number"`
	BusinessScope       *int   `json:"business_scope"`
	ProvinceID          *int64 `json:"province_id"`
	CityID              *int64 `json:"city_id"`
	DistrictID          *int64 `json:"district_id"`
	InstitutionCategory *int64 `json:"institution_category"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	CheckStatus         *int   `json:"check_status"`
	Score               *int   `json:"score"`
	EnterpriseType      *int   `json:"enterprise_type"`
	State               *int   `json:"state"`
	CreditLevel         *int   `json:"credit_level"`
}

// input type for inserting data into table "enterprise"
type EnterpriseInsertInput struct {
	EnterpriseID                     string     `json:"enterprise_id"`
	SuperiorEnterpriseID             *string    `json:"superior_enterprise_id"`
	EnterpriseCode                   *string    `json:"enterprise_code"`
	EnterpriseName                   *string    `json:"enterprise_name"`
	EnterpriseLevel                  *int       `json:"enterprise_level"`
	DisplayNumber                    *int       `json:"display_number"`
	EnterpriseAddress                *string    `json:"enterprise_address"`
	BusinessScope                    *int       `json:"business_scope"`
	FaxNumber                        *string    `json:"fax_number"`
	ProvinceID                       *int64     `json:"province_id"`
	CityID                           *int64     `json:"city_id"`
	DistrictID                       *int64     `json:"district_id"`
	InstitutionCategory              *int64     `json:"institution_category"`
	OperatingLicensePhoto            *string    `json:"operating_license_photo"`
	BusinessLicensePhoto             *string    `json:"business_license_photo"`
	BusinessLicenseIssuanceDate      *time.Time `json:"business_license_issuance_date"`
	BusinessLicenseExpiryDate        *time.Time `json:"business_license_expiry_date"`
	EnterpriseNature                 *int       `json:"enterprise_nature"`
	LegalRepresentative              *string    `json:"legal_representative"`
	LegalRepresentativePhone         *string    `json:"legal_representative_phone"`
	LegalRepresentativeIDCardPhoto   *string    `json:"legal_representative_id_card_photo"`
	LegalRepresentativeIDCard        *string    `json:"legal_representative_id_card"`
	EntrustedAgent                   *string    `json:"entrusted_agent"`
	EntrustedAgentPhone              *string    `json:"entrusted_agent_phone"`
	EntrustedAgentIDCardPhoto        *string    `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentIDCard             *string    `json:"entrusted_agent_id_card"`
	OrganizationCode                 *string    `json:"organization_code"`
	OrganizationCodeCertificatePhoto *string    `json:"organization_code_certificate_photo"`
	UpdateTimeIn                     *time.Time `json:"update_time_in"`
	BusinessPhoto                    *string    `json:"business_photo"`
	IsBlack                          bool       `json:"is_black"`
	CheckStatus                      *int       `json:"check_status"`
	IsInstall                        bool       `json:"is_install"`
	IsInput                          bool       `json:"is_input"`
	IsUploadProvince                 bool       `json:"is_upload_province"`
	Score                            *int       `json:"score"`
	BrigadeID                        *string    `json:"brigade_id"`
	PoliceStationID                  *string    `json:"police_station_id"`
	BrigadeReviewOpinion             *string    `json:"brigade_review_opinion"`
	BrigadeReviewTime                *time.Time `json:"brigade_review_time"`
	BrigadeReviewBy                  *string    `json:"brigade_review_by"`
	AssociationReviewOpinion         *string    `json:"association_review_opinion"`
	AssociationReviewTime            *time.Time `json:"association_review_time"`
	AssociationReviewBy              *time.Time `json:"association_review_by"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	Remarks                          *string    `json:"remarks"`
	IsDeleted                        bool       `json:"is_deleted"`
	IsKeyPoint                       bool       `json:"is_key_point"`
	EnterpriseType                   *int       `json:"enterprise_type"`
	IsCatalog                        bool       `json:"is_catalog"`
	State                            *int       `json:"state"`
	ProxyEnterpriseID                *string    `json:"proxy_enterprise_id"`
	IsExpire                         bool       `json:"is_expire"`
	CreditLevel                      *int       `json:"credit_level"`
	CreditLevelRemark                *string    `json:"credit_level_remark"`
}

// aggregate max on columns of table "enterprise"
type EnterpriseMaxFields struct {
	ID                               *int64     `json:"id"`
	EnterpriseID                     *string    `json:"enterprise_id"`
	SuperiorEnterpriseID             *string    `json:"superior_enterprise_id"`
	EnterpriseCode                   *string    `json:"enterprise_code"`
	EnterpriseName                   *string    `json:"enterprise_name"`
	EnterpriseLevel                  *int       `json:"enterprise_level"`
	DisplayNumber                    *int       `json:"display_number"`
	EnterpriseAddress                *string    `json:"enterprise_address"`
	BusinessScope                    *int       `json:"business_scope"`
	FaxNumber                        *string    `json:"fax_number"`
	ProvinceID                       *int64     `json:"province_id"`
	CityID                           *int64     `json:"city_id"`
	DistrictID                       *int64     `json:"district_id"`
	InstitutionCategory              *int64     `json:"institution_category"`
	OperatingLicensePhoto            *string    `json:"operating_license_photo"`
	BusinessLicensePhoto             *string    `json:"business_license_photo"`
	BusinessLicenseIssuanceDate      *time.Time `json:"business_license_issuance_date"`
	BusinessLicenseExpiryDate        *time.Time `json:"business_license_expiry_date"`
	EnterpriseNature                 *int       `json:"enterprise_nature"`
	LegalRepresentative              *string    `json:"legal_representative"`
	LegalRepresentativePhone         *string    `json:"legal_representative_phone"`
	LegalRepresentativeIDCardPhoto   *string    `json:"legal_representative_id_card_photo"`
	LegalRepresentativeIDCard        *string    `json:"legal_representative_id_card"`
	EntrustedAgent                   *string    `json:"entrusted_agent"`
	EntrustedAgentPhone              *string    `json:"entrusted_agent_phone"`
	EntrustedAgentIDCardPhoto        *string    `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentIDCard             *string    `json:"entrusted_agent_id_card"`
	OrganizationCode                 *string    `json:"organization_code"`
	OrganizationCodeCertificatePhoto *string    `json:"organization_code_certificate_photo"`
	UpdateTimeIn                     *time.Time `json:"update_time_in"`
	BusinessPhoto                    *string    `json:"business_photo"`
	IsBlack                          *bool      `json:"is_black"`
	CheckStatus                      *int       `json:"check_status"`
	IsInstall                        *bool      `json:"is_install"`
	IsInput                          *bool      `json:"is_input"`
	IsUploadProvince                 *bool      `json:"is_upload_province"`
	Score                            *int       `json:"score"`
	BrigadeID                        *string    `json:"brigade_id"`
	PoliceStationID                  *string    `json:"police_station_id"`
	BrigadeReviewOpinion             *string    `json:"brigade_review_opinion"`
	BrigadeReviewTime                *time.Time `json:"brigade_review_time"`
	BrigadeReviewBy                  *string    `json:"brigade_review_by"`
	AssociationReviewOpinion         *string    `json:"association_review_opinion"`
	AssociationReviewTime            *time.Time `json:"association_review_time"`
	AssociationReviewBy              *time.Time `json:"association_review_by"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	Remarks                          *string    `json:"remarks"`
	IsDeleted                        *bool      `json:"is_deleted"`
	IsKeyPoint                       *bool      `json:"is_key_point"`
	EnterpriseType                   *int       `json:"enterprise_type"`
	IsCatalog                        *bool      `json:"is_catalog"`
	State                            *int       `json:"state"`
	ProxyEnterpriseID                *string    `json:"proxy_enterprise_id"`
	IsExpire                         *bool      `json:"is_expire"`
	CreditLevel                      *int       `json:"credit_level"`
	CreditLevelRemark                *string    `json:"credit_level_remark"`
}

// aggregate min on columns of table "enterprise"
type EnterpriseMinFields struct {
	ID                               *int64     `json:"id"`
	EnterpriseID                     *string    `json:"enterprise_id"`
	SuperiorEnterpriseID             *string    `json:"superior_enterprise_id"`
	EnterpriseCode                   *string    `json:"enterprise_code"`
	EnterpriseName                   *string    `json:"enterprise_name"`
	EnterpriseLevel                  *int       `json:"enterprise_level"`
	DisplayNumber                    *int       `json:"display_number"`
	EnterpriseAddress                *string    `json:"enterprise_address"`
	BusinessScope                    *int       `json:"business_scope"`
	FaxNumber                        *string    `json:"fax_number"`
	ProvinceID                       *int64     `json:"province_id"`
	CityID                           *int64     `json:"city_id"`
	DistrictID                       *int64     `json:"district_id"`
	InstitutionCategory              *int64     `json:"institution_category"`
	OperatingLicensePhoto            *string    `json:"operating_license_photo"`
	BusinessLicensePhoto             *string    `json:"business_license_photo"`
	BusinessLicenseIssuanceDate      *time.Time `json:"business_license_issuance_date"`
	BusinessLicenseExpiryDate        *time.Time `json:"business_license_expiry_date"`
	EnterpriseNature                 *int       `json:"enterprise_nature"`
	LegalRepresentative              *string    `json:"legal_representative"`
	LegalRepresentativePhone         *string    `json:"legal_representative_phone"`
	LegalRepresentativeIDCardPhoto   *string    `json:"legal_representative_id_card_photo"`
	LegalRepresentativeIDCard        *string    `json:"legal_representative_id_card"`
	EntrustedAgent                   *string    `json:"entrusted_agent"`
	EntrustedAgentPhone              *string    `json:"entrusted_agent_phone"`
	EntrustedAgentIDCardPhoto        *string    `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentIDCard             *string    `json:"entrusted_agent_id_card"`
	OrganizationCode                 *string    `json:"organization_code"`
	OrganizationCodeCertificatePhoto *string    `json:"organization_code_certificate_photo"`
	UpdateTimeIn                     *time.Time `json:"update_time_in"`
	BusinessPhoto                    *string    `json:"business_photo"`
	IsBlack                          *bool      `json:"is_black"`
	CheckStatus                      *int       `json:"check_status"`
	IsInstall                        *bool      `json:"is_install"`
	IsInput                          *bool      `json:"is_input"`
	IsUploadProvince                 *bool      `json:"is_upload_province"`
	Score                            *int       `json:"score"`
	BrigadeID                        *string    `json:"brigade_id"`
	PoliceStationID                  *string    `json:"police_station_id"`
	BrigadeReviewOpinion             *string    `json:"brigade_review_opinion"`
	BrigadeReviewTime                *time.Time `json:"brigade_review_time"`
	BrigadeReviewBy                  *string    `json:"brigade_review_by"`
	AssociationReviewOpinion         *string    `json:"association_review_opinion"`
	AssociationReviewTime            *time.Time `json:"association_review_time"`
	AssociationReviewBy              *time.Time `json:"association_review_by"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	Remarks                          *string    `json:"remarks"`
	IsDeleted                        *bool      `json:"is_deleted"`
	IsKeyPoint                       *bool      `json:"is_key_point"`
	EnterpriseType                   *int       `json:"enterprise_type"`
	IsCatalog                        *bool      `json:"is_catalog"`
	State                            *int       `json:"state"`
	ProxyEnterpriseID                *string    `json:"proxy_enterprise_id"`
	IsExpire                         *bool      `json:"is_expire"`
	CreditLevel                      *int       `json:"credit_level"`
	CreditLevelRemark                *string    `json:"credit_level_remark"`
}

// aggregated selection of "enterprise_muck_trunk"
type EnterpriseMuckTrunkAggregate struct {
	Aggregate *EnterpriseMuckTrunkAggregateFields `json:"aggregate"`
}

// aggregate fields of "enterprise_muck_trunk"
type EnterpriseMuckTrunkAggregateFields struct {
	Avg        *EnterpriseMuckTrunkAvgFields        `json:"avg"`
	Count      *int                                 `json:"count"`
	Max        *EnterpriseMuckTrunkMaxFields        `json:"max"`
	Min        *EnterpriseMuckTrunkMinFields        `json:"min"`
	Stddev     *EnterpriseMuckTrunkStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseMuckTrunkStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseMuckTrunkStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseMuckTrunkSumFields        `json:"sum"`
	VarPop     *EnterpriseMuckTrunkVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseMuckTrunkVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseMuckTrunkVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "enterprise_muck_trunk"
type EnterpriseMuckTrunkAvgFields struct {
	ID            *int64 `json:"id"`
	SmartCarCount *int64 `json:"smart_car_count"`
	TransportType *int   `json:"transport_type"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_muck_trunk'.
type EnterpriseMuckTrunkBoolExp struct {
	And                         []*EnterpriseMuckTrunkBoolExp   `json:"_and"`
	Not                         *EnterpriseMuckTrunkBoolExp     `json:"_not"`
	Or                          []*EnterpriseMuckTrunkBoolExp   `json:"_or"`
	ID                          *model.BigintComparisonExp      `json:"id"`
	EnterpriseMuckTrunkID       *model.StringComparisonExp      `json:"enterprise_muck_trunk_id"`
	EnterpriseID                *model.StringComparisonExp      `json:"enterprise_id"`
	CompanyManager              *model.StringComparisonExp      `json:"company_manager"`
	CompanyManagerPhone         *model.StringComparisonExp      `json:"company_manager_phone"`
	CompanyManagerIDCard        *model.StringComparisonExp      `json:"company_manager_id_card"`
	CompanySafeManager          *model.StringComparisonExp      `json:"company_safe_manager"`
	CompanySafeMangerPhone      *model.StringComparisonExp      `json:"company_safe_manger_phone"`
	CompanySafeManagerIDCard    *model.StringComparisonExp      `json:"company_safe_manager_id_card"`
	RoadLicense                 *model.StringComparisonExp      `json:"road_license"`
	RoadLicensePhoto            *model.StringComparisonExp      `json:"road_license_photo"`
	OfficeAddress               *model.StringComparisonExp      `json:"office_address"`
	OfficeArea                  *model.StringComparisonExp      `json:"office_area"`
	OfficePhoto                 *model.StringComparisonExp      `json:"office_photo"`
	ParkingAddress              *model.StringComparisonExp      `json:"parking_address"`
	ParkingArea                 *model.StringComparisonExp      `json:"parking_area"`
	ParkingSingleArea           *model.StringComparisonExp      `json:"parking_single_area"`
	SmartCarCount               *model.BigintComparisonExp      `json:"smart_car_count"`
	IsTransportAdd              *model.BooleanComparisonExp     `json:"is_transport_add"`
	CountyCheckState            *model.BooleanComparisonExp     `json:"county_check_state"`
	CityCheckState              *model.BooleanComparisonExp     `json:"city_check_state"`
	AllowGeneratePreviewNum     *model.BooleanComparisonExp     `json:"allow_generate_preview_num"`
	PromiseBookURL              *model.StringComparisonExp      `json:"promise_book_url"`
	PromiseRemark               *model.StringComparisonExp      `json:"promise_remark"`
	TransportType               *model.IntComparisonExp         `json:"transport_type"`
	RoutelineCardPromisePhoto   *model.StringComparisonExp      `json:"routeline_card_promise_photo"`
	TransportLiablePromisePhoto *model.StringComparisonExp      `json:"transport_liable_promise_photo"`
	IsTypeA                     *model.BooleanComparisonExp     `json:"is_type_a"`
	IsTypeB                     *model.BooleanComparisonExp     `json:"is_type_b"`
	IsTypeC                     *model.BooleanComparisonExp     `json:"is_type_c"`
	IsTypeD                     *model.BooleanComparisonExp     `json:"is_type_d"`
	IsTypeE                     *model.BooleanComparisonExp     `json:"is_type_e"`
	CreateAt                    *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy                    *model.StringComparisonExp      `json:"create_by"`
	UpdateAt                    *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy                    *model.StringComparisonExp      `json:"update_by"`
	DeleteAt                    *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy                    *model.StringComparisonExp      `json:"delete_by"`
	IsDelete                    *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "enterprise_muck_trunk"
type EnterpriseMuckTrunkIncInput struct {
	ID            *int64 `json:"id"`
	SmartCarCount *int64 `json:"smart_car_count"`
	TransportType *int   `json:"transport_type"`
}

// input type for inserting data into table "enterprise_muck_trunk"
type EnterpriseMuckTrunkInsertInput struct {
	EnterpriseMuckTrunkID       string     `json:"enterprise_muck_trunk_id"`
	EnterpriseID                string     `json:"enterprise_id"`
	CompanyManager              *string    `json:"company_manager"`
	CompanyManagerPhone         *string    `json:"company_manager_phone"`
	CompanyManagerIDCard        *string    `json:"company_manager_id_card"`
	CompanySafeManager          *string    `json:"company_safe_manager"`
	CompanySafeMangerPhone      *string    `json:"company_safe_manger_phone"`
	CompanySafeManagerIDCard    *string    `json:"company_safe_manager_id_card"`
	RoadLicense                 *string    `json:"road_license"`
	RoadLicensePhoto            *string    `json:"road_license_photo"`
	OfficeAddress               *string    `json:"office_address"`
	OfficeArea                  *string    `json:"office_area"`
	OfficePhoto                 *string    `json:"office_photo"`
	ParkingAddress              *string    `json:"parking_address"`
	ParkingArea                 *string    `json:"parking_area"`
	ParkingSingleArea           *string    `json:"parking_single_area"`
	SmartCarCount               *int64     `json:"smart_car_count"`
	IsTransportAdd              bool       `json:"is_transport_add"`
	CountyCheckState            bool       `json:"county_check_state"`
	CityCheckState              bool       `json:"city_check_state"`
	AllowGeneratePreviewNum     bool       `json:"allow_generate_preview_num"`
	PromiseBookURL              *string    `json:"promise_book_url"`
	PromiseRemark               *string    `json:"promise_remark"`
	TransportType               *int       `json:"transport_type"`
	RoutelineCardPromisePhoto   *string    `json:"routeline_card_promise_photo"`
	TransportLiablePromisePhoto *string    `json:"transport_liable_promise_photo"`
	IsTypeA                     bool       `json:"is_type_a"`
	IsTypeB                     bool       `json:"is_type_b"`
	IsTypeC                     bool       `json:"is_type_c"`
	IsTypeD                     bool       `json:"is_type_d"`
	IsTypeE                     bool       `json:"is_type_e"`
	CreateAt                    time.Time  `json:"create_at"`
	CreateBy                    *string    `json:"create_by"`
	UpdateAt                    *time.Time `json:"update_at"`
	UpdateBy                    *string    `json:"update_by"`
	DeleteAt                    *time.Time `json:"delete_at"`
	DeleteBy                    *string    `json:"delete_by"`
	IsDelete                    bool       `json:"is_delete"`
}

// aggregate max on columns of table "enterprise_muck_trunk"
type EnterpriseMuckTrunkMaxFields struct {
	ID                          *int64     `json:"id"`
	EnterpriseMuckTrunkID       *string    `json:"enterprise_muck_trunk_id"`
	EnterpriseID                *string    `json:"enterprise_id"`
	CompanyManager              *string    `json:"company_manager"`
	CompanyManagerPhone         *string    `json:"company_manager_phone"`
	CompanyManagerIDCard        *string    `json:"company_manager_id_card"`
	CompanySafeManager          *string    `json:"company_safe_manager"`
	CompanySafeMangerPhone      *string    `json:"company_safe_manger_phone"`
	CompanySafeManagerIDCard    *string    `json:"company_safe_manager_id_card"`
	RoadLicense                 *string    `json:"road_license"`
	RoadLicensePhoto            *string    `json:"road_license_photo"`
	OfficeAddress               *string    `json:"office_address"`
	OfficeArea                  *string    `json:"office_area"`
	OfficePhoto                 *string    `json:"office_photo"`
	ParkingAddress              *string    `json:"parking_address"`
	ParkingArea                 *string    `json:"parking_area"`
	ParkingSingleArea           *string    `json:"parking_single_area"`
	SmartCarCount               *int64     `json:"smart_car_count"`
	IsTransportAdd              *bool      `json:"is_transport_add"`
	CountyCheckState            *bool      `json:"county_check_state"`
	CityCheckState              *bool      `json:"city_check_state"`
	AllowGeneratePreviewNum     *bool      `json:"allow_generate_preview_num"`
	PromiseBookURL              *string    `json:"promise_book_url"`
	PromiseRemark               *string    `json:"promise_remark"`
	TransportType               *int       `json:"transport_type"`
	RoutelineCardPromisePhoto   *string    `json:"routeline_card_promise_photo"`
	TransportLiablePromisePhoto *string    `json:"transport_liable_promise_photo"`
	IsTypeA                     *bool      `json:"is_type_a"`
	IsTypeB                     *bool      `json:"is_type_b"`
	IsTypeC                     *bool      `json:"is_type_c"`
	IsTypeD                     *bool      `json:"is_type_d"`
	IsTypeE                     *bool      `json:"is_type_e"`
	CreateAt                    *time.Time `json:"create_at"`
	CreateBy                    *string    `json:"create_by"`
	UpdateAt                    *time.Time `json:"update_at"`
	UpdateBy                    *string    `json:"update_by"`
	DeleteAt                    *time.Time `json:"delete_at"`
	DeleteBy                    *string    `json:"delete_by"`
	IsDelete                    *bool      `json:"is_delete"`
}

// aggregate min on columns of table "enterprise_muck_trunk"
type EnterpriseMuckTrunkMinFields struct {
	ID                          *int64     `json:"id"`
	EnterpriseMuckTrunkID       *string    `json:"enterprise_muck_trunk_id"`
	EnterpriseID                *string    `json:"enterprise_id"`
	CompanyManager              *string    `json:"company_manager"`
	CompanyManagerPhone         *string    `json:"company_manager_phone"`
	CompanyManagerIDCard        *string    `json:"company_manager_id_card"`
	CompanySafeManager          *string    `json:"company_safe_manager"`
	CompanySafeMangerPhone      *string    `json:"company_safe_manger_phone"`
	CompanySafeManagerIDCard    *string    `json:"company_safe_manager_id_card"`
	RoadLicense                 *string    `json:"road_license"`
	RoadLicensePhoto            *string    `json:"road_license_photo"`
	OfficeAddress               *string    `json:"office_address"`
	OfficeArea                  *string    `json:"office_area"`
	OfficePhoto                 *string    `json:"office_photo"`
	ParkingAddress              *string    `json:"parking_address"`
	ParkingArea                 *string    `json:"parking_area"`
	ParkingSingleArea           *string    `json:"parking_single_area"`
	SmartCarCount               *int64     `json:"smart_car_count"`
	IsTransportAdd              *bool      `json:"is_transport_add"`
	CountyCheckState            *bool      `json:"county_check_state"`
	CityCheckState              *bool      `json:"city_check_state"`
	AllowGeneratePreviewNum     *bool      `json:"allow_generate_preview_num"`
	PromiseBookURL              *string    `json:"promise_book_url"`
	PromiseRemark               *string    `json:"promise_remark"`
	TransportType               *int       `json:"transport_type"`
	RoutelineCardPromisePhoto   *string    `json:"routeline_card_promise_photo"`
	TransportLiablePromisePhoto *string    `json:"transport_liable_promise_photo"`
	IsTypeA                     *bool      `json:"is_type_a"`
	IsTypeB                     *bool      `json:"is_type_b"`
	IsTypeC                     *bool      `json:"is_type_c"`
	IsTypeD                     *bool      `json:"is_type_d"`
	IsTypeE                     *bool      `json:"is_type_e"`
	CreateAt                    *time.Time `json:"create_at"`
	CreateBy                    *string    `json:"create_by"`
	UpdateAt                    *time.Time `json:"update_at"`
	UpdateBy                    *string    `json:"update_by"`
	DeleteAt                    *time.Time `json:"delete_at"`
	DeleteBy                    *string    `json:"delete_by"`
	IsDelete                    *bool      `json:"is_delete"`
}

// response of any mutation on the table "enterprise_muck_trunk"
type EnterpriseMuckTrunkMutationResponse struct {
	AffectedRows int                           `json:"affected_rows"`
	Returning    []*model1.EnterpriseMuckTrunk `json:"returning"`
}

// ordering options when selecting data from "enterprise_muck_trunk"
type EnterpriseMuckTrunkOrderBy struct {
	ID                          *model.OrderBy `json:"id"`
	EnterpriseMuckTrunkID       *model.OrderBy `json:"enterprise_muck_trunk_id"`
	EnterpriseID                *model.OrderBy `json:"enterprise_id"`
	CompanyManager              *model.OrderBy `json:"company_manager"`
	CompanyManagerPhone         *model.OrderBy `json:"company_manager_phone"`
	CompanyManagerIDCard        *model.OrderBy `json:"company_manager_id_card"`
	CompanySafeManager          *model.OrderBy `json:"company_safe_manager"`
	CompanySafeMangerPhone      *model.OrderBy `json:"company_safe_manger_phone"`
	CompanySafeManagerIDCard    *model.OrderBy `json:"company_safe_manager_id_card"`
	RoadLicense                 *model.OrderBy `json:"road_license"`
	RoadLicensePhoto            *model.OrderBy `json:"road_license_photo"`
	OfficeAddress               *model.OrderBy `json:"office_address"`
	OfficeArea                  *model.OrderBy `json:"office_area"`
	OfficePhoto                 *model.OrderBy `json:"office_photo"`
	ParkingAddress              *model.OrderBy `json:"parking_address"`
	ParkingArea                 *model.OrderBy `json:"parking_area"`
	ParkingSingleArea           *model.OrderBy `json:"parking_single_area"`
	SmartCarCount               *model.OrderBy `json:"smart_car_count"`
	IsTransportAdd              *model.OrderBy `json:"is_transport_add"`
	CountyCheckState            *model.OrderBy `json:"county_check_state"`
	CityCheckState              *model.OrderBy `json:"city_check_state"`
	AllowGeneratePreviewNum     *model.OrderBy `json:"allow_generate_preview_num"`
	PromiseBookURL              *model.OrderBy `json:"promise_book_url"`
	PromiseRemark               *model.OrderBy `json:"promise_remark"`
	TransportType               *model.OrderBy `json:"transport_type"`
	RoutelineCardPromisePhoto   *model.OrderBy `json:"routeline_card_promise_photo"`
	TransportLiablePromisePhoto *model.OrderBy `json:"transport_liable_promise_photo"`
	IsTypeA                     *model.OrderBy `json:"is_type_a"`
	IsTypeB                     *model.OrderBy `json:"is_type_b"`
	IsTypeC                     *model.OrderBy `json:"is_type_c"`
	IsTypeD                     *model.OrderBy `json:"is_type_d"`
	IsTypeE                     *model.OrderBy `json:"is_type_e"`
	CreateAt                    *model.OrderBy `json:"create_at"`
	CreateBy                    *model.OrderBy `json:"create_by"`
	UpdateAt                    *model.OrderBy `json:"update_at"`
	UpdateBy                    *model.OrderBy `json:"update_by"`
	DeleteAt                    *model.OrderBy `json:"delete_at"`
	DeleteBy                    *model.OrderBy `json:"delete_by"`
	IsDelete                    *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "enterprise_muck_trunk"
type EnterpriseMuckTrunkSetInput struct {
	ID                          *int64     `json:"id"`
	EnterpriseMuckTrunkID       *string    `json:"enterprise_muck_trunk_id"`
	EnterpriseID                *string    `json:"enterprise_id"`
	CompanyManager              *string    `json:"company_manager"`
	CompanyManagerPhone         *string    `json:"company_manager_phone"`
	CompanyManagerIDCard        *string    `json:"company_manager_id_card"`
	CompanySafeManager          *string    `json:"company_safe_manager"`
	CompanySafeMangerPhone      *string    `json:"company_safe_manger_phone"`
	CompanySafeManagerIDCard    *string    `json:"company_safe_manager_id_card"`
	RoadLicense                 *string    `json:"road_license"`
	RoadLicensePhoto            *string    `json:"road_license_photo"`
	OfficeAddress               *string    `json:"office_address"`
	OfficeArea                  *string    `json:"office_area"`
	OfficePhoto                 *string    `json:"office_photo"`
	ParkingAddress              *string    `json:"parking_address"`
	ParkingArea                 *string    `json:"parking_area"`
	ParkingSingleArea           *string    `json:"parking_single_area"`
	SmartCarCount               *int64     `json:"smart_car_count"`
	IsTransportAdd              *bool      `json:"is_transport_add"`
	CountyCheckState            *bool      `json:"county_check_state"`
	CityCheckState              *bool      `json:"city_check_state"`
	AllowGeneratePreviewNum     *bool      `json:"allow_generate_preview_num"`
	PromiseBookURL              *string    `json:"promise_book_url"`
	PromiseRemark               *string    `json:"promise_remark"`
	TransportType               *int       `json:"transport_type"`
	RoutelineCardPromisePhoto   *string    `json:"routeline_card_promise_photo"`
	TransportLiablePromisePhoto *string    `json:"transport_liable_promise_photo"`
	IsTypeA                     *bool      `json:"is_type_a"`
	IsTypeB                     *bool      `json:"is_type_b"`
	IsTypeC                     *bool      `json:"is_type_c"`
	IsTypeD                     *bool      `json:"is_type_d"`
	IsTypeE                     *bool      `json:"is_type_e"`
	CreateAt                    *time.Time `json:"create_at"`
	CreateBy                    *string    `json:"create_by"`
	UpdateAt                    *time.Time `json:"update_at"`
	UpdateBy                    *string    `json:"update_by"`
	DeleteAt                    *time.Time `json:"delete_at"`
	DeleteBy                    *string    `json:"delete_by"`
	IsDelete                    *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "enterprise_muck_trunk"
type EnterpriseMuckTrunkStddevFields struct {
	ID            *int64 `json:"id"`
	SmartCarCount *int64 `json:"smart_car_count"`
	TransportType *int   `json:"transport_type"`
}

// aggregate stddev_pop on columns of table "enterprise_muck_trunk"
type EnterpriseMuckTrunkStddevPopFields struct {
	ID            *int64 `json:"id"`
	SmartCarCount *int64 `json:"smart_car_count"`
	TransportType *int   `json:"transport_type"`
}

// aggregate stddev_samp on columns of table "enterprise_muck_trunk"
type EnterpriseMuckTrunkStddevSampFields struct {
	ID            *int64 `json:"id"`
	SmartCarCount *int64 `json:"smart_car_count"`
	TransportType *int   `json:"transport_type"`
}

// aggregate sum on columns of table "enterprise_muck_trunk"
type EnterpriseMuckTrunkSumFields struct {
	ID            *int64 `json:"id"`
	SmartCarCount *int64 `json:"smart_car_count"`
	TransportType *int   `json:"transport_type"`
}

// aggregate var_pop on columns of table "enterprise_muck_trunk"
type EnterpriseMuckTrunkVarPopFields struct {
	ID            *int64 `json:"id"`
	SmartCarCount *int64 `json:"smart_car_count"`
	TransportType *int   `json:"transport_type"`
}

// aggregate var_samp on columns of table "enterprise_muck_trunk"
type EnterpriseMuckTrunkVarSampFields struct {
	ID            *int64 `json:"id"`
	SmartCarCount *int64 `json:"smart_car_count"`
	TransportType *int   `json:"transport_type"`
}

// aggregate variance on columns of table "enterprise_muck_trunk"
type EnterpriseMuckTrunkVarianceFields struct {
	ID            *int64 `json:"id"`
	SmartCarCount *int64 `json:"smart_car_count"`
	TransportType *int   `json:"transport_type"`
}

// response of any mutation on the table "enterprise"
type EnterpriseMutationResponse struct {
	AffectedRows int                  `json:"affected_rows"`
	Returning    []*model1.Enterprise `json:"returning"`
}

// ordering options when selecting data from "enterprise"
type EnterpriseOrderBy struct {
	ID                               *model.OrderBy `json:"id"`
	EnterpriseID                     *model.OrderBy `json:"enterprise_id"`
	SuperiorEnterpriseID             *model.OrderBy `json:"superior_enterprise_id"`
	EnterpriseCode                   *model.OrderBy `json:"enterprise_code"`
	EnterpriseName                   *model.OrderBy `json:"enterprise_name"`
	EnterpriseLevel                  *model.OrderBy `json:"enterprise_level"`
	DisplayNumber                    *model.OrderBy `json:"display_number"`
	EnterpriseAddress                *model.OrderBy `json:"enterprise_address"`
	BusinessScope                    *model.OrderBy `json:"business_scope"`
	FaxNumber                        *model.OrderBy `json:"fax_number"`
	ProvinceID                       *model.OrderBy `json:"province_id"`
	CityID                           *model.OrderBy `json:"city_id"`
	DistrictID                       *model.OrderBy `json:"district_id"`
	InstitutionCategory              *model.OrderBy `json:"institution_category"`
	OperatingLicensePhoto            *model.OrderBy `json:"operating_license_photo"`
	BusinessLicensePhoto             *model.OrderBy `json:"business_license_photo"`
	BusinessLicenseIssuanceDate      *model.OrderBy `json:"business_license_issuance_date"`
	BusinessLicenseExpiryDate        *model.OrderBy `json:"business_license_expiry_date"`
	EnterpriseNature                 *model.OrderBy `json:"enterprise_nature"`
	LegalRepresentative              *model.OrderBy `json:"legal_representative"`
	LegalRepresentativePhone         *model.OrderBy `json:"legal_representative_phone"`
	LegalRepresentativeIDCardPhoto   *model.OrderBy `json:"legal_representative_id_card_photo"`
	LegalRepresentativeIDCard        *model.OrderBy `json:"legal_representative_id_card"`
	EntrustedAgent                   *model.OrderBy `json:"entrusted_agent"`
	EntrustedAgentPhone              *model.OrderBy `json:"entrusted_agent_phone"`
	EntrustedAgentIDCardPhoto        *model.OrderBy `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentIDCard             *model.OrderBy `json:"entrusted_agent_id_card"`
	OrganizationCode                 *model.OrderBy `json:"organization_code"`
	OrganizationCodeCertificatePhoto *model.OrderBy `json:"organization_code_certificate_photo"`
	UpdateTimeIn                     *model.OrderBy `json:"update_time_in"`
	BusinessPhoto                    *model.OrderBy `json:"business_photo"`
	IsBlack                          *model.OrderBy `json:"is_black"`
	CheckStatus                      *model.OrderBy `json:"check_status"`
	IsInstall                        *model.OrderBy `json:"is_install"`
	IsInput                          *model.OrderBy `json:"is_input"`
	IsUploadProvince                 *model.OrderBy `json:"is_upload_province"`
	Score                            *model.OrderBy `json:"score"`
	BrigadeID                        *model.OrderBy `json:"brigade_id"`
	PoliceStationID                  *model.OrderBy `json:"police_station_id"`
	BrigadeReviewOpinion             *model.OrderBy `json:"brigade_review_opinion"`
	BrigadeReviewTime                *model.OrderBy `json:"brigade_review_time"`
	BrigadeReviewBy                  *model.OrderBy `json:"brigade_review_by"`
	AssociationReviewOpinion         *model.OrderBy `json:"association_review_opinion"`
	AssociationReviewTime            *model.OrderBy `json:"association_review_time"`
	AssociationReviewBy              *model.OrderBy `json:"association_review_by"`
	CreateAt                         *model.OrderBy `json:"create_at"`
	CreateBy                         *model.OrderBy `json:"create_by"`
	UpdateAt                         *model.OrderBy `json:"update_at"`
	UpdateBy                         *model.OrderBy `json:"update_by"`
	DeleteAt                         *model.OrderBy `json:"delete_at"`
	DeleteBy                         *model.OrderBy `json:"delete_by"`
	Remarks                          *model.OrderBy `json:"remarks"`
	IsDeleted                        *model.OrderBy `json:"is_deleted"`
	IsKeyPoint                       *model.OrderBy `json:"is_key_point"`
	EnterpriseType                   *model.OrderBy `json:"enterprise_type"`
	IsCatalog                        *model.OrderBy `json:"is_catalog"`
	State                            *model.OrderBy `json:"state"`
	ProxyEnterpriseID                *model.OrderBy `json:"proxy_enterprise_id"`
	IsExpire                         *model.OrderBy `json:"is_expire"`
	CreditLevel                      *model.OrderBy `json:"credit_level"`
	CreditLevelRemark                *model.OrderBy `json:"credit_level_remark"`
}

// aggregated selection of "enterprise_score_log"
type EnterpriseScoreLogAggregate struct {
	Aggregate *EnterpriseScoreLogAggregateFields `json:"aggregate"`
}

// aggregate fields of "enterprise_score_log"
type EnterpriseScoreLogAggregateFields struct {
	Avg        *EnterpriseScoreLogAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *EnterpriseScoreLogMaxFields        `json:"max"`
	Min        *EnterpriseScoreLogMinFields        `json:"min"`
	Stddev     *EnterpriseScoreLogStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseScoreLogStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseScoreLogStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseScoreLogSumFields        `json:"sum"`
	VarPop     *EnterpriseScoreLogVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseScoreLogVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseScoreLogVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "enterprise_score_log"
type EnterpriseScoreLogAvgFields struct {
	ID           *int64 `json:"id"`
	CurrentScore *int   `json:"current_score"`
	AddScore     *int   `json:"add_score"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_score_log'.
type EnterpriseScoreLogBoolExp struct {
	And          []*EnterpriseScoreLogBoolExp    `json:"_and"`
	Not          *EnterpriseScoreLogBoolExp      `json:"_not"`
	Or           []*EnterpriseScoreLogBoolExp    `json:"_or"`
	ID           *model.BigintComparisonExp      `json:"id"`
	LogID        *model.StringComparisonExp      `json:"log_id"`
	EnterpriseID *model.StringComparisonExp      `json:"enterprise_id"`
	CurrentScore *model.IntComparisonExp         `json:"current_score"`
	AddScore     *model.IntComparisonExp         `json:"add_score"`
	Content      *model.StringComparisonExp      `json:"content"`
	FileURL      *model.StringComparisonExp      `json:"file_url"`
	ScoreSetID   *model.StringComparisonExp      `json:"score_set_id"`
	CreateAt     *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy     *model.StringComparisonExp      `json:"create_by"`
	UpdateAt     *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy     *model.StringComparisonExp      `json:"update_by"`
	DeleteAt     *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy     *model.StringComparisonExp      `json:"delete_by"`
	IsDelete     *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "enterprise_score_log"
type EnterpriseScoreLogIncInput struct {
	ID           *int64 `json:"id"`
	CurrentScore *int   `json:"current_score"`
	AddScore     *int   `json:"add_score"`
}

// input type for inserting data into table "enterprise_score_log"
type EnterpriseScoreLogInsertInput struct {
	LogID        string     `json:"log_id"`
	EnterpriseID string     `json:"enterprise_id"`
	CurrentScore int        `json:"current_score"`
	AddScore     int        `json:"add_score"`
	Content      string     `json:"content"`
	FileURL      string     `json:"file_url"`
	ScoreSetID   string     `json:"score_set_id"`
	CreateAt     time.Time  `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     bool       `json:"is_delete"`
}

// aggregate max on columns of table "enterprise_score_log"
type EnterpriseScoreLogMaxFields struct {
	ID           *int64     `json:"id"`
	LogID        *string    `json:"log_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	CurrentScore *int       `json:"current_score"`
	AddScore     *int       `json:"add_score"`
	Content      *string    `json:"content"`
	FileURL      *string    `json:"file_url"`
	ScoreSetID   *string    `json:"score_set_id"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// aggregate min on columns of table "enterprise_score_log"
type EnterpriseScoreLogMinFields struct {
	ID           *int64     `json:"id"`
	LogID        *string    `json:"log_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	CurrentScore *int       `json:"current_score"`
	AddScore     *int       `json:"add_score"`
	Content      *string    `json:"content"`
	FileURL      *string    `json:"file_url"`
	ScoreSetID   *string    `json:"score_set_id"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// response of any mutation on the table "enterprise_score_log"
type EnterpriseScoreLogMutationResponse struct {
	AffectedRows int                          `json:"affected_rows"`
	Returning    []*model1.EnterpriseScoreLog `json:"returning"`
}

// ordering options when selecting data from "enterprise_score_log"
type EnterpriseScoreLogOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	LogID        *model.OrderBy `json:"log_id"`
	EnterpriseID *model.OrderBy `json:"enterprise_id"`
	CurrentScore *model.OrderBy `json:"current_score"`
	AddScore     *model.OrderBy `json:"add_score"`
	Content      *model.OrderBy `json:"content"`
	FileURL      *model.OrderBy `json:"file_url"`
	ScoreSetID   *model.OrderBy `json:"score_set_id"`
	CreateAt     *model.OrderBy `json:"create_at"`
	CreateBy     *model.OrderBy `json:"create_by"`
	UpdateAt     *model.OrderBy `json:"update_at"`
	UpdateBy     *model.OrderBy `json:"update_by"`
	DeleteAt     *model.OrderBy `json:"delete_at"`
	DeleteBy     *model.OrderBy `json:"delete_by"`
	IsDelete     *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "enterprise_score_log"
type EnterpriseScoreLogSetInput struct {
	ID           *int64     `json:"id"`
	LogID        *string    `json:"log_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	CurrentScore *int       `json:"current_score"`
	AddScore     *int       `json:"add_score"`
	Content      *string    `json:"content"`
	FileURL      *string    `json:"file_url"`
	ScoreSetID   *string    `json:"score_set_id"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "enterprise_score_log"
type EnterpriseScoreLogStddevFields struct {
	ID           *int64 `json:"id"`
	CurrentScore *int   `json:"current_score"`
	AddScore     *int   `json:"add_score"`
}

// aggregate stddev_pop on columns of table "enterprise_score_log"
type EnterpriseScoreLogStddevPopFields struct {
	ID           *int64 `json:"id"`
	CurrentScore *int   `json:"current_score"`
	AddScore     *int   `json:"add_score"`
}

// aggregate stddev_samp on columns of table "enterprise_score_log"
type EnterpriseScoreLogStddevSampFields struct {
	ID           *int64 `json:"id"`
	CurrentScore *int   `json:"current_score"`
	AddScore     *int   `json:"add_score"`
}

// aggregate sum on columns of table "enterprise_score_log"
type EnterpriseScoreLogSumFields struct {
	ID           *int64 `json:"id"`
	CurrentScore *int   `json:"current_score"`
	AddScore     *int   `json:"add_score"`
}

// aggregate var_pop on columns of table "enterprise_score_log"
type EnterpriseScoreLogVarPopFields struct {
	ID           *int64 `json:"id"`
	CurrentScore *int   `json:"current_score"`
	AddScore     *int   `json:"add_score"`
}

// aggregate var_samp on columns of table "enterprise_score_log"
type EnterpriseScoreLogVarSampFields struct {
	ID           *int64 `json:"id"`
	CurrentScore *int   `json:"current_score"`
	AddScore     *int   `json:"add_score"`
}

// aggregate variance on columns of table "enterprise_score_log"
type EnterpriseScoreLogVarianceFields struct {
	ID           *int64 `json:"id"`
	CurrentScore *int   `json:"current_score"`
	AddScore     *int   `json:"add_score"`
}

// aggregated selection of "enterprise_score_set"
type EnterpriseScoreSetAggregate struct {
	Aggregate *EnterpriseScoreSetAggregateFields `json:"aggregate"`
}

// aggregate fields of "enterprise_score_set"
type EnterpriseScoreSetAggregateFields struct {
	Avg        *EnterpriseScoreSetAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *EnterpriseScoreSetMaxFields        `json:"max"`
	Min        *EnterpriseScoreSetMinFields        `json:"min"`
	Stddev     *EnterpriseScoreSetStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseScoreSetStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseScoreSetStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseScoreSetSumFields        `json:"sum"`
	VarPop     *EnterpriseScoreSetVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseScoreSetVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseScoreSetVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "enterprise_score_set"
type EnterpriseScoreSetAvgFields struct {
	ID    *int64   `json:"id"`
	Type  *int     `json:"type"`
	Score *float64 `json:"score"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_score_set'.
type EnterpriseScoreSetBoolExp struct {
	And        []*EnterpriseScoreSetBoolExp    `json:"_and"`
	Not        *EnterpriseScoreSetBoolExp      `json:"_not"`
	Or         []*EnterpriseScoreSetBoolExp    `json:"_or"`
	ID         *model.BigintComparisonExp      `json:"id"`
	ScoreSetID *model.StringComparisonExp      `json:"score_set_id"`
	Content    *model.StringComparisonExp      `json:"content"`
	Type       *model.IntComparisonExp         `json:"type"`
	Score      *model.FloatComparisonExp       `json:"score"`
	CreateAt   *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy   *model.StringComparisonExp      `json:"create_by"`
	UpdateAt   *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy   *model.StringComparisonExp      `json:"update_by"`
	DeleteAt   *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy   *model.StringComparisonExp      `json:"delete_by"`
	IsDelete   *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "enterprise_score_set"
type EnterpriseScoreSetIncInput struct {
	ID    *int64   `json:"id"`
	Type  *int     `json:"type"`
	Score *float64 `json:"score"`
}

// input type for inserting data into table "enterprise_score_set"
type EnterpriseScoreSetInsertInput struct {
	ScoreSetID string     `json:"score_set_id"`
	Content    string     `json:"content"`
	Type       int        `json:"type"`
	Score      float64    `json:"score"`
	CreateAt   time.Time  `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	IsDelete   bool       `json:"is_delete"`
}

// aggregate max on columns of table "enterprise_score_set"
type EnterpriseScoreSetMaxFields struct {
	ID         *int64     `json:"id"`
	ScoreSetID *string    `json:"score_set_id"`
	Content    *string    `json:"content"`
	Type       *int       `json:"type"`
	Score      *float64   `json:"score"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	IsDelete   *bool      `json:"is_delete"`
}

// aggregate min on columns of table "enterprise_score_set"
type EnterpriseScoreSetMinFields struct {
	ID         *int64     `json:"id"`
	ScoreSetID *string    `json:"score_set_id"`
	Content    *string    `json:"content"`
	Type       *int       `json:"type"`
	Score      *float64   `json:"score"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	IsDelete   *bool      `json:"is_delete"`
}

// response of any mutation on the table "enterprise_score_set"
type EnterpriseScoreSetMutationResponse struct {
	AffectedRows int                          `json:"affected_rows"`
	Returning    []*model1.EnterpriseScoreSet `json:"returning"`
}

// ordering options when selecting data from "enterprise_score_set"
type EnterpriseScoreSetOrderBy struct {
	ID         *model.OrderBy `json:"id"`
	ScoreSetID *model.OrderBy `json:"score_set_id"`
	Content    *model.OrderBy `json:"content"`
	Type       *model.OrderBy `json:"type"`
	Score      *model.OrderBy `json:"score"`
	CreateAt   *model.OrderBy `json:"create_at"`
	CreateBy   *model.OrderBy `json:"create_by"`
	UpdateAt   *model.OrderBy `json:"update_at"`
	UpdateBy   *model.OrderBy `json:"update_by"`
	DeleteAt   *model.OrderBy `json:"delete_at"`
	DeleteBy   *model.OrderBy `json:"delete_by"`
	IsDelete   *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "enterprise_score_set"
type EnterpriseScoreSetSetInput struct {
	ID         *int64     `json:"id"`
	ScoreSetID *string    `json:"score_set_id"`
	Content    *string    `json:"content"`
	Type       *int       `json:"type"`
	Score      *float64   `json:"score"`
	CreateAt   *time.Time `json:"create_at"`
	CreateBy   *string    `json:"create_by"`
	UpdateAt   *time.Time `json:"update_at"`
	UpdateBy   *string    `json:"update_by"`
	DeleteAt   *time.Time `json:"delete_at"`
	DeleteBy   *string    `json:"delete_by"`
	IsDelete   *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "enterprise_score_set"
type EnterpriseScoreSetStddevFields struct {
	ID    *int64   `json:"id"`
	Type  *int     `json:"type"`
	Score *float64 `json:"score"`
}

// aggregate stddev_pop on columns of table "enterprise_score_set"
type EnterpriseScoreSetStddevPopFields struct {
	ID    *int64   `json:"id"`
	Type  *int     `json:"type"`
	Score *float64 `json:"score"`
}

// aggregate stddev_samp on columns of table "enterprise_score_set"
type EnterpriseScoreSetStddevSampFields struct {
	ID    *int64   `json:"id"`
	Type  *int     `json:"type"`
	Score *float64 `json:"score"`
}

// aggregate sum on columns of table "enterprise_score_set"
type EnterpriseScoreSetSumFields struct {
	ID    *int64   `json:"id"`
	Type  *int     `json:"type"`
	Score *float64 `json:"score"`
}

// aggregate var_pop on columns of table "enterprise_score_set"
type EnterpriseScoreSetVarPopFields struct {
	ID    *int64   `json:"id"`
	Type  *int     `json:"type"`
	Score *float64 `json:"score"`
}

// aggregate var_samp on columns of table "enterprise_score_set"
type EnterpriseScoreSetVarSampFields struct {
	ID    *int64   `json:"id"`
	Type  *int     `json:"type"`
	Score *float64 `json:"score"`
}

// aggregate variance on columns of table "enterprise_score_set"
type EnterpriseScoreSetVarianceFields struct {
	ID    *int64   `json:"id"`
	Type  *int     `json:"type"`
	Score *float64 `json:"score"`
}

// input type for updating data in table "enterprise"
type EnterpriseSetInput struct {
	ID                               *int64     `json:"id"`
	EnterpriseID                     *string    `json:"enterprise_id"`
	SuperiorEnterpriseID             *string    `json:"superior_enterprise_id"`
	EnterpriseCode                   *string    `json:"enterprise_code"`
	EnterpriseName                   *string    `json:"enterprise_name"`
	EnterpriseLevel                  *int       `json:"enterprise_level"`
	DisplayNumber                    *int       `json:"display_number"`
	EnterpriseAddress                *string    `json:"enterprise_address"`
	BusinessScope                    *int       `json:"business_scope"`
	FaxNumber                        *string    `json:"fax_number"`
	ProvinceID                       *int64     `json:"province_id"`
	CityID                           *int64     `json:"city_id"`
	DistrictID                       *int64     `json:"district_id"`
	InstitutionCategory              *int64     `json:"institution_category"`
	OperatingLicensePhoto            *string    `json:"operating_license_photo"`
	BusinessLicensePhoto             *string    `json:"business_license_photo"`
	BusinessLicenseIssuanceDate      *time.Time `json:"business_license_issuance_date"`
	BusinessLicenseExpiryDate        *time.Time `json:"business_license_expiry_date"`
	EnterpriseNature                 *int       `json:"enterprise_nature"`
	LegalRepresentative              *string    `json:"legal_representative"`
	LegalRepresentativePhone         *string    `json:"legal_representative_phone"`
	LegalRepresentativeIDCardPhoto   *string    `json:"legal_representative_id_card_photo"`
	LegalRepresentativeIDCard        *string    `json:"legal_representative_id_card"`
	EntrustedAgent                   *string    `json:"entrusted_agent"`
	EntrustedAgentPhone              *string    `json:"entrusted_agent_phone"`
	EntrustedAgentIDCardPhoto        *string    `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentIDCard             *string    `json:"entrusted_agent_id_card"`
	OrganizationCode                 *string    `json:"organization_code"`
	OrganizationCodeCertificatePhoto *string    `json:"organization_code_certificate_photo"`
	UpdateTimeIn                     *time.Time `json:"update_time_in"`
	BusinessPhoto                    *string    `json:"business_photo"`
	IsBlack                          *bool      `json:"is_black"`
	CheckStatus                      *int       `json:"check_status"`
	IsInstall                        *bool      `json:"is_install"`
	IsInput                          *bool      `json:"is_input"`
	IsUploadProvince                 *bool      `json:"is_upload_province"`
	Score                            *int       `json:"score"`
	BrigadeID                        *string    `json:"brigade_id"`
	PoliceStationID                  *string    `json:"police_station_id"`
	BrigadeReviewOpinion             *string    `json:"brigade_review_opinion"`
	BrigadeReviewTime                *time.Time `json:"brigade_review_time"`
	BrigadeReviewBy                  *string    `json:"brigade_review_by"`
	AssociationReviewOpinion         *string    `json:"association_review_opinion"`
	AssociationReviewTime            *time.Time `json:"association_review_time"`
	AssociationReviewBy              *time.Time `json:"association_review_by"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	Remarks                          *string    `json:"remarks"`
	IsDeleted                        *bool      `json:"is_deleted"`
	IsKeyPoint                       *bool      `json:"is_key_point"`
	EnterpriseType                   *int       `json:"enterprise_type"`
	IsCatalog                        *bool      `json:"is_catalog"`
	State                            *int       `json:"state"`
	ProxyEnterpriseID                *string    `json:"proxy_enterprise_id"`
	IsExpire                         *bool      `json:"is_expire"`
	CreditLevel                      *int       `json:"credit_level"`
	CreditLevelRemark                *string    `json:"credit_level_remark"`
}

// aggregated selection of "enterprise_state_his"
type EnterpriseStateHisAggregate struct {
	Aggregate *EnterpriseStateHisAggregateFields `json:"aggregate"`
}

// aggregate fields of "enterprise_state_his"
type EnterpriseStateHisAggregateFields struct {
	Avg        *EnterpriseStateHisAvgFields        `json:"avg"`
	Count      *int                                `json:"count"`
	Max        *EnterpriseStateHisMaxFields        `json:"max"`
	Min        *EnterpriseStateHisMinFields        `json:"min"`
	Stddev     *EnterpriseStateHisStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseStateHisStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseStateHisStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseStateHisSumFields        `json:"sum"`
	VarPop     *EnterpriseStateHisVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseStateHisVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseStateHisVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "enterprise_state_his"
type EnterpriseStateHisAvgFields struct {
	ID    *int64 `json:"id"`
	State *int   `json:"state"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_state_his'.
type EnterpriseStateHisBoolExp struct {
	And          []*EnterpriseStateHisBoolExp    `json:"_and"`
	Not          *EnterpriseStateHisBoolExp      `json:"_not"`
	Or           []*EnterpriseStateHisBoolExp    `json:"_or"`
	ID           *model.BigintComparisonExp      `json:"id"`
	StateHisID   *model.StringComparisonExp      `json:"state_his_id"`
	EnterpriseID *model.StringComparisonExp      `json:"enterprise_id"`
	Reason       *model.StringComparisonExp      `json:"reason"`
	State        *model.IntComparisonExp         `json:"state"`
	FileURL      *model.StringComparisonExp      `json:"file_url"`
	CreateAt     *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy     *model.StringComparisonExp      `json:"create_by"`
}

// input type for incrementing integer column in table "enterprise_state_his"
type EnterpriseStateHisIncInput struct {
	ID    *int64 `json:"id"`
	State *int   `json:"state"`
}

// input type for inserting data into table "enterprise_state_his"
type EnterpriseStateHisInsertInput struct {
	StateHisID   string    `json:"state_his_id"`
	EnterpriseID string    `json:"enterprise_id"`
	Reason       *string   `json:"reason"`
	State        int       `json:"state"`
	FileURL      *string   `json:"file_url"`
	CreateAt     time.Time `json:"create_at"`
	CreateBy     *string   `json:"create_by"`
}

// aggregate max on columns of table "enterprise_state_his"
type EnterpriseStateHisMaxFields struct {
	ID           *int64     `json:"id"`
	StateHisID   *string    `json:"state_his_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	Reason       *string    `json:"reason"`
	State        *int       `json:"state"`
	FileURL      *string    `json:"file_url"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
}

// aggregate min on columns of table "enterprise_state_his"
type EnterpriseStateHisMinFields struct {
	ID           *int64     `json:"id"`
	StateHisID   *string    `json:"state_his_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	Reason       *string    `json:"reason"`
	State        *int       `json:"state"`
	FileURL      *string    `json:"file_url"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
}

// response of any mutation on the table "enterprise_state_his"
type EnterpriseStateHisMutationResponse struct {
	AffectedRows int                          `json:"affected_rows"`
	Returning    []*model1.EnterpriseStateHis `json:"returning"`
}

// ordering options when selecting data from "enterprise_state_his"
type EnterpriseStateHisOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	StateHisID   *model.OrderBy `json:"state_his_id"`
	EnterpriseID *model.OrderBy `json:"enterprise_id"`
	Reason       *model.OrderBy `json:"reason"`
	State        *model.OrderBy `json:"state"`
	FileURL      *model.OrderBy `json:"file_url"`
	CreateAt     *model.OrderBy `json:"create_at"`
	CreateBy     *model.OrderBy `json:"create_by"`
}

// input type for updating data in table "enterprise_state_his"
type EnterpriseStateHisSetInput struct {
	ID           *int64     `json:"id"`
	StateHisID   *string    `json:"state_his_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	Reason       *string    `json:"reason"`
	State        *int       `json:"state"`
	FileURL      *string    `json:"file_url"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
}

// aggregate stddev on columns of table "enterprise_state_his"
type EnterpriseStateHisStddevFields struct {
	ID    *int64 `json:"id"`
	State *int   `json:"state"`
}

// aggregate stddev_pop on columns of table "enterprise_state_his"
type EnterpriseStateHisStddevPopFields struct {
	ID    *int64 `json:"id"`
	State *int   `json:"state"`
}

// aggregate stddev_samp on columns of table "enterprise_state_his"
type EnterpriseStateHisStddevSampFields struct {
	ID    *int64 `json:"id"`
	State *int   `json:"state"`
}

// aggregate sum on columns of table "enterprise_state_his"
type EnterpriseStateHisSumFields struct {
	ID    *int64 `json:"id"`
	State *int   `json:"state"`
}

// aggregate var_pop on columns of table "enterprise_state_his"
type EnterpriseStateHisVarPopFields struct {
	ID    *int64 `json:"id"`
	State *int   `json:"state"`
}

// aggregate var_samp on columns of table "enterprise_state_his"
type EnterpriseStateHisVarSampFields struct {
	ID    *int64 `json:"id"`
	State *int   `json:"state"`
}

// aggregate variance on columns of table "enterprise_state_his"
type EnterpriseStateHisVarianceFields struct {
	ID    *int64 `json:"id"`
	State *int   `json:"state"`
}

// aggregate stddev on columns of table "enterprise"
type EnterpriseStddevFields struct {
	ID                  *int64 `json:"id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	DisplayNumber       *int   `json:"display_number"`
	BusinessScope       *int   `json:"business_scope"`
	ProvinceID          *int64 `json:"province_id"`
	CityID              *int64 `json:"city_id"`
	DistrictID          *int64 `json:"district_id"`
	InstitutionCategory *int64 `json:"institution_category"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	CheckStatus         *int   `json:"check_status"`
	Score               *int   `json:"score"`
	EnterpriseType      *int   `json:"enterprise_type"`
	State               *int   `json:"state"`
	CreditLevel         *int   `json:"credit_level"`
}

// aggregate stddev_pop on columns of table "enterprise"
type EnterpriseStddevPopFields struct {
	ID                  *int64 `json:"id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	DisplayNumber       *int   `json:"display_number"`
	BusinessScope       *int   `json:"business_scope"`
	ProvinceID          *int64 `json:"province_id"`
	CityID              *int64 `json:"city_id"`
	DistrictID          *int64 `json:"district_id"`
	InstitutionCategory *int64 `json:"institution_category"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	CheckStatus         *int   `json:"check_status"`
	Score               *int   `json:"score"`
	EnterpriseType      *int   `json:"enterprise_type"`
	State               *int   `json:"state"`
	CreditLevel         *int   `json:"credit_level"`
}

// aggregate stddev_samp on columns of table "enterprise"
type EnterpriseStddevSampFields struct {
	ID                  *int64 `json:"id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	DisplayNumber       *int   `json:"display_number"`
	BusinessScope       *int   `json:"business_scope"`
	ProvinceID          *int64 `json:"province_id"`
	CityID              *int64 `json:"city_id"`
	DistrictID          *int64 `json:"district_id"`
	InstitutionCategory *int64 `json:"institution_category"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	CheckStatus         *int   `json:"check_status"`
	Score               *int   `json:"score"`
	EnterpriseType      *int   `json:"enterprise_type"`
	State               *int   `json:"state"`
	CreditLevel         *int   `json:"credit_level"`
}

// aggregate sum on columns of table "enterprise"
type EnterpriseSumFields struct {
	ID                  *int64 `json:"id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	DisplayNumber       *int   `json:"display_number"`
	BusinessScope       *int   `json:"business_scope"`
	ProvinceID          *int64 `json:"province_id"`
	CityID              *int64 `json:"city_id"`
	DistrictID          *int64 `json:"district_id"`
	InstitutionCategory *int64 `json:"institution_category"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	CheckStatus         *int   `json:"check_status"`
	Score               *int   `json:"score"`
	EnterpriseType      *int   `json:"enterprise_type"`
	State               *int   `json:"state"`
	CreditLevel         *int   `json:"credit_level"`
}

// aggregated selection of "enterprise_ukey"
type EnterpriseUkeyAggregate struct {
	Aggregate *EnterpriseUkeyAggregateFields `json:"aggregate"`
}

// aggregate fields of "enterprise_ukey"
type EnterpriseUkeyAggregateFields struct {
	Avg        *EnterpriseUkeyAvgFields        `json:"avg"`
	Count      *int                            `json:"count"`
	Max        *EnterpriseUkeyMaxFields        `json:"max"`
	Min        *EnterpriseUkeyMinFields        `json:"min"`
	Stddev     *EnterpriseUkeyStddevFields     `json:"stddev"`
	StddevPop  *EnterpriseUkeyStddevPopFields  `json:"stddev_pop"`
	StddevSamp *EnterpriseUkeyStddevSampFields `json:"stddev_samp"`
	Sum        *EnterpriseUkeySumFields        `json:"sum"`
	VarPop     *EnterpriseUkeyVarPopFields     `json:"var_pop"`
	VarSamp    *EnterpriseUkeyVarSampFields    `json:"var_samp"`
	Variance   *EnterpriseUkeyVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "enterprise_ukey"
type EnterpriseUkeyAvgFields struct {
	ID *int64 `json:"id"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'enterprise_ukey'.
type EnterpriseUkeyBoolExp struct {
	And          []*EnterpriseUkeyBoolExp        `json:"_and"`
	Not          *EnterpriseUkeyBoolExp          `json:"_not"`
	Or           []*EnterpriseUkeyBoolExp        `json:"_or"`
	ID           *model.BigintComparisonExp      `json:"id"`
	UkeyID       *model.StringComparisonExp      `json:"ukey_id"`
	EnterpriseID *model.StringComparisonExp      `json:"enterprise_id"`
	CreateAt     *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy     *model.StringComparisonExp      `json:"create_by"`
	UpdateAt     *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy     *model.StringComparisonExp      `json:"update_by"`
	DeleteAt     *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy     *model.StringComparisonExp      `json:"delete_by"`
	IsDelete     *model.BooleanComparisonExp     `json:"is_delete"`
}

// input type for incrementing integer column in table "enterprise_ukey"
type EnterpriseUkeyIncInput struct {
	ID *int64 `json:"id"`
}

// input type for inserting data into table "enterprise_ukey"
type EnterpriseUkeyInsertInput struct {
	UkeyID       string     `json:"ukey_id"`
	EnterpriseID string     `json:"enterprise_id"`
	CreateAt     time.Time  `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     bool       `json:"is_delete"`
}

// aggregate max on columns of table "enterprise_ukey"
type EnterpriseUkeyMaxFields struct {
	ID           *int64     `json:"id"`
	UkeyID       *string    `json:"ukey_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// aggregate min on columns of table "enterprise_ukey"
type EnterpriseUkeyMinFields struct {
	ID           *int64     `json:"id"`
	UkeyID       *string    `json:"ukey_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// response of any mutation on the table "enterprise_ukey"
type EnterpriseUkeyMutationResponse struct {
	AffectedRows int                      `json:"affected_rows"`
	Returning    []*model1.EnterpriseUkey `json:"returning"`
}

// ordering options when selecting data from "enterprise_ukey"
type EnterpriseUkeyOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	UkeyID       *model.OrderBy `json:"ukey_id"`
	EnterpriseID *model.OrderBy `json:"enterprise_id"`
	CreateAt     *model.OrderBy `json:"create_at"`
	CreateBy     *model.OrderBy `json:"create_by"`
	UpdateAt     *model.OrderBy `json:"update_at"`
	UpdateBy     *model.OrderBy `json:"update_by"`
	DeleteAt     *model.OrderBy `json:"delete_at"`
	DeleteBy     *model.OrderBy `json:"delete_by"`
	IsDelete     *model.OrderBy `json:"is_delete"`
}

// input type for updating data in table "enterprise_ukey"
type EnterpriseUkeySetInput struct {
	ID           *int64     `json:"id"`
	UkeyID       *string    `json:"ukey_id"`
	EnterpriseID *string    `json:"enterprise_id"`
	CreateAt     *time.Time `json:"create_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
}

// aggregate stddev on columns of table "enterprise_ukey"
type EnterpriseUkeyStddevFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_pop on columns of table "enterprise_ukey"
type EnterpriseUkeyStddevPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate stddev_samp on columns of table "enterprise_ukey"
type EnterpriseUkeyStddevSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate sum on columns of table "enterprise_ukey"
type EnterpriseUkeySumFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "enterprise_ukey"
type EnterpriseUkeyVarPopFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_samp on columns of table "enterprise_ukey"
type EnterpriseUkeyVarSampFields struct {
	ID *int64 `json:"id"`
}

// aggregate variance on columns of table "enterprise_ukey"
type EnterpriseUkeyVarianceFields struct {
	ID *int64 `json:"id"`
}

// aggregate var_pop on columns of table "enterprise"
type EnterpriseVarPopFields struct {
	ID                  *int64 `json:"id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	DisplayNumber       *int   `json:"display_number"`
	BusinessScope       *int   `json:"business_scope"`
	ProvinceID          *int64 `json:"province_id"`
	CityID              *int64 `json:"city_id"`
	DistrictID          *int64 `json:"district_id"`
	InstitutionCategory *int64 `json:"institution_category"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	CheckStatus         *int   `json:"check_status"`
	Score               *int   `json:"score"`
	EnterpriseType      *int   `json:"enterprise_type"`
	State               *int   `json:"state"`
	CreditLevel         *int   `json:"credit_level"`
}

// aggregate var_samp on columns of table "enterprise"
type EnterpriseVarSampFields struct {
	ID                  *int64 `json:"id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	DisplayNumber       *int   `json:"display_number"`
	BusinessScope       *int   `json:"business_scope"`
	ProvinceID          *int64 `json:"province_id"`
	CityID              *int64 `json:"city_id"`
	DistrictID          *int64 `json:"district_id"`
	InstitutionCategory *int64 `json:"institution_category"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	CheckStatus         *int   `json:"check_status"`
	Score               *int   `json:"score"`
	EnterpriseType      *int   `json:"enterprise_type"`
	State               *int   `json:"state"`
	CreditLevel         *int   `json:"credit_level"`
}

// aggregate variance on columns of table "enterprise"
type EnterpriseVarianceFields struct {
	ID                  *int64 `json:"id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	DisplayNumber       *int   `json:"display_number"`
	BusinessScope       *int   `json:"business_scope"`
	ProvinceID          *int64 `json:"province_id"`
	CityID              *int64 `json:"city_id"`
	DistrictID          *int64 `json:"district_id"`
	InstitutionCategory *int64 `json:"institution_category"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	CheckStatus         *int   `json:"check_status"`
	Score               *int   `json:"score"`
	EnterpriseType      *int   `json:"enterprise_type"`
	State               *int   `json:"state"`
	CreditLevel         *int   `json:"credit_level"`
}

// aggregated selection of "system_user"
type SystemUserAggregate struct {
	Aggregate *SystemUserAggregateFields `json:"aggregate"`
}

// aggregate fields of "system_user"
type SystemUserAggregateFields struct {
	Avg        *SystemUserAvgFields        `json:"avg"`
	Count      *int                        `json:"count"`
	Max        *SystemUserMaxFields        `json:"max"`
	Min        *SystemUserMinFields        `json:"min"`
	Stddev     *SystemUserStddevFields     `json:"stddev"`
	StddevPop  *SystemUserStddevPopFields  `json:"stddev_pop"`
	StddevSamp *SystemUserStddevSampFields `json:"stddev_samp"`
	Sum        *SystemUserSumFields        `json:"sum"`
	VarPop     *SystemUserVarPopFields     `json:"var_pop"`
	VarSamp    *SystemUserVarSampFields    `json:"var_samp"`
	Variance   *SystemUserVarianceFields   `json:"variance"`
}

// aggregate avg on columns of table "system_user"
type SystemUserAvgFields struct {
	ID         *int64 `json:"id"`
	Grade      *int   `json:"grade"`
	AuditLevel *int   `json:"audit_level"`
	UserType   *int   `json:"user_type"`
	UserState  *int   `json:"user_state"`
}

// Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'system_user'.
type SystemUserBoolExp struct {
	And          []*SystemUserBoolExp            `json:"_and"`
	Not          *SystemUserBoolExp              `json:"_not"`
	Or           []*SystemUserBoolExp            `json:"_or"`
	ID           *model.BigintComparisonExp      `json:"id"`
	UserID       *model.StringComparisonExp      `json:"user_id"`
	Password     *model.StringComparisonExp      `json:"password"`
	Uername      *model.StringComparisonExp      `json:"uername"`
	EnterpriseID *model.StringComparisonExp      `json:"enterprise_id"`
	DepartmentID *model.StringComparisonExp      `json:"department_id"`
	Grade        *model.IntComparisonExp         `json:"grade"`
	AuditLevel   *model.IntComparisonExp         `json:"audit_level"`
	UserType     *model.IntComparisonExp         `json:"user_type"`
	IsValid      *model.BooleanComparisonExp     `json:"is_valid"`
	UserState    *model.IntComparisonExp         `json:"user_state"`
	IPAddress    *model.StringComparisonExp      `json:"ip_address"`
	IsBindIP     *model.BooleanComparisonExp     `json:"is_bind_ip"`
	Email        *model.StringComparisonExp      `json:"email"`
	Telephone    *model.StringComparisonExp      `json:"telephone"`
	Mobile       *model.StringComparisonExp      `json:"mobile"`
	Ukey         *model.StringComparisonExp      `json:"ukey"`
	Mkey         *model.StringComparisonExp      `json:"mkey"`
	AppVersion   *model.StringComparisonExp      `json:"app_version"`
	CreatedAt    *model.TimestamptzComparisonExp `json:"created_at"`
	CreateBy     *model.StringComparisonExp      `json:"create_by"`
	UpdateAt     *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy     *model.StringComparisonExp      `json:"update_by"`
	DeleteAt     *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy     *model.StringComparisonExp      `json:"delete_by"`
	IsDelete     *model.BooleanComparisonExp     `json:"is_delete"`
	Remarks      *model.StringComparisonExp      `json:"remarks"`
}

// input type for incrementing integer column in table "system_user"
type SystemUserIncInput struct {
	ID         *int64 `json:"id"`
	Grade      *int   `json:"grade"`
	AuditLevel *int   `json:"audit_level"`
	UserType   *int   `json:"user_type"`
	UserState  *int   `json:"user_state"`
}

// input type for inserting data into table "system_user"
type SystemUserInsertInput struct {
	UserID       string     `json:"user_id"`
	Password     string     `json:"password"`
	Uername      string     `json:"uername"`
	EnterpriseID *string    `json:"enterprise_id"`
	DepartmentID *string    `json:"department_id"`
	Grade        *int       `json:"grade"`
	AuditLevel   *int       `json:"audit_level"`
	UserType     *int       `json:"user_type"`
	IsValid      *bool      `json:"is_valid"`
	UserState    *int       `json:"user_state"`
	IPAddress    *string    `json:"ip_address"`
	IsBindIP     *bool      `json:"is_bind_ip"`
	Email        *string    `json:"email"`
	Telephone    *string    `json:"telephone"`
	Mobile       *string    `json:"mobile"`
	Ukey         *string    `json:"ukey"`
	Mkey         *string    `json:"mkey"`
	AppVersion   *string    `json:"app_version"`
	CreatedAt    *time.Time `json:"created_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     bool       `json:"is_delete"`
	Remarks      *string    `json:"remarks"`
}

// aggregate max on columns of table "system_user"
type SystemUserMaxFields struct {
	ID           *int64     `json:"id"`
	UserID       *string    `json:"user_id"`
	Password     *string    `json:"password"`
	Uername      *string    `json:"uername"`
	EnterpriseID *string    `json:"enterprise_id"`
	DepartmentID *string    `json:"department_id"`
	Grade        *int       `json:"grade"`
	AuditLevel   *int       `json:"audit_level"`
	UserType     *int       `json:"user_type"`
	IsValid      *bool      `json:"is_valid"`
	UserState    *int       `json:"user_state"`
	IPAddress    *string    `json:"ip_address"`
	IsBindIP     *bool      `json:"is_bind_ip"`
	Email        *string    `json:"email"`
	Telephone    *string    `json:"telephone"`
	Mobile       *string    `json:"mobile"`
	Ukey         *string    `json:"ukey"`
	Mkey         *string    `json:"mkey"`
	AppVersion   *string    `json:"app_version"`
	CreatedAt    *time.Time `json:"created_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
	Remarks      *string    `json:"remarks"`
}

// aggregate min on columns of table "system_user"
type SystemUserMinFields struct {
	ID           *int64     `json:"id"`
	UserID       *string    `json:"user_id"`
	Password     *string    `json:"password"`
	Uername      *string    `json:"uername"`
	EnterpriseID *string    `json:"enterprise_id"`
	DepartmentID *string    `json:"department_id"`
	Grade        *int       `json:"grade"`
	AuditLevel   *int       `json:"audit_level"`
	UserType     *int       `json:"user_type"`
	IsValid      *bool      `json:"is_valid"`
	UserState    *int       `json:"user_state"`
	IPAddress    *string    `json:"ip_address"`
	IsBindIP     *bool      `json:"is_bind_ip"`
	Email        *string    `json:"email"`
	Telephone    *string    `json:"telephone"`
	Mobile       *string    `json:"mobile"`
	Ukey         *string    `json:"ukey"`
	Mkey         *string    `json:"mkey"`
	AppVersion   *string    `json:"app_version"`
	CreatedAt    *time.Time `json:"created_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
	Remarks      *string    `json:"remarks"`
}

// response of any mutation on the table "system_user"
type SystemUserMutationResponse struct {
	AffectedRows int                  `json:"affected_rows"`
	Returning    []*model1.SystemUser `json:"returning"`
}

// ordering options when selecting data from "system_user"
type SystemUserOrderBy struct {
	ID           *model.OrderBy `json:"id"`
	UserID       *model.OrderBy `json:"user_id"`
	Password     *model.OrderBy `json:"password"`
	Uername      *model.OrderBy `json:"uername"`
	EnterpriseID *model.OrderBy `json:"enterprise_id"`
	DepartmentID *model.OrderBy `json:"department_id"`
	Grade        *model.OrderBy `json:"grade"`
	AuditLevel   *model.OrderBy `json:"audit_level"`
	UserType     *model.OrderBy `json:"user_type"`
	IsValid      *model.OrderBy `json:"is_valid"`
	UserState    *model.OrderBy `json:"user_state"`
	IPAddress    *model.OrderBy `json:"ip_address"`
	IsBindIP     *model.OrderBy `json:"is_bind_ip"`
	Email        *model.OrderBy `json:"email"`
	Telephone    *model.OrderBy `json:"telephone"`
	Mobile       *model.OrderBy `json:"mobile"`
	Ukey         *model.OrderBy `json:"ukey"`
	Mkey         *model.OrderBy `json:"mkey"`
	AppVersion   *model.OrderBy `json:"app_version"`
	CreatedAt    *model.OrderBy `json:"created_at"`
	CreateBy     *model.OrderBy `json:"create_by"`
	UpdateAt     *model.OrderBy `json:"update_at"`
	UpdateBy     *model.OrderBy `json:"update_by"`
	DeleteAt     *model.OrderBy `json:"delete_at"`
	DeleteBy     *model.OrderBy `json:"delete_by"`
	IsDelete     *model.OrderBy `json:"is_delete"`
	Remarks      *model.OrderBy `json:"remarks"`
}

// input type for updating data in table "system_user"
type SystemUserSetInput struct {
	ID           *int64     `json:"id"`
	UserID       *string    `json:"user_id"`
	Password     *string    `json:"password"`
	Uername      *string    `json:"uername"`
	EnterpriseID *string    `json:"enterprise_id"`
	DepartmentID *string    `json:"department_id"`
	Grade        *int       `json:"grade"`
	AuditLevel   *int       `json:"audit_level"`
	UserType     *int       `json:"user_type"`
	IsValid      *bool      `json:"is_valid"`
	UserState    *int       `json:"user_state"`
	IPAddress    *string    `json:"ip_address"`
	IsBindIP     *bool      `json:"is_bind_ip"`
	Email        *string    `json:"email"`
	Telephone    *string    `json:"telephone"`
	Mobile       *string    `json:"mobile"`
	Ukey         *string    `json:"ukey"`
	Mkey         *string    `json:"mkey"`
	AppVersion   *string    `json:"app_version"`
	CreatedAt    *time.Time `json:"created_at"`
	CreateBy     *string    `json:"create_by"`
	UpdateAt     *time.Time `json:"update_at"`
	UpdateBy     *string    `json:"update_by"`
	DeleteAt     *time.Time `json:"delete_at"`
	DeleteBy     *string    `json:"delete_by"`
	IsDelete     *bool      `json:"is_delete"`
	Remarks      *string    `json:"remarks"`
}

// aggregate stddev on columns of table "system_user"
type SystemUserStddevFields struct {
	ID         *int64 `json:"id"`
	Grade      *int   `json:"grade"`
	AuditLevel *int   `json:"audit_level"`
	UserType   *int   `json:"user_type"`
	UserState  *int   `json:"user_state"`
}

// aggregate stddev_pop on columns of table "system_user"
type SystemUserStddevPopFields struct {
	ID         *int64 `json:"id"`
	Grade      *int   `json:"grade"`
	AuditLevel *int   `json:"audit_level"`
	UserType   *int   `json:"user_type"`
	UserState  *int   `json:"user_state"`
}

// aggregate stddev_samp on columns of table "system_user"
type SystemUserStddevSampFields struct {
	ID         *int64 `json:"id"`
	Grade      *int   `json:"grade"`
	AuditLevel *int   `json:"audit_level"`
	UserType   *int   `json:"user_type"`
	UserState  *int   `json:"user_state"`
}

// aggregate sum on columns of table "system_user"
type SystemUserSumFields struct {
	ID         *int64 `json:"id"`
	Grade      *int   `json:"grade"`
	AuditLevel *int   `json:"audit_level"`
	UserType   *int   `json:"user_type"`
	UserState  *int   `json:"user_state"`
}

// aggregate var_pop on columns of table "system_user"
type SystemUserVarPopFields struct {
	ID         *int64 `json:"id"`
	Grade      *int   `json:"grade"`
	AuditLevel *int   `json:"audit_level"`
	UserType   *int   `json:"user_type"`
	UserState  *int   `json:"user_state"`
}

// aggregate var_samp on columns of table "system_user"
type SystemUserVarSampFields struct {
	ID         *int64 `json:"id"`
	Grade      *int   `json:"grade"`
	AuditLevel *int   `json:"audit_level"`
	UserType   *int   `json:"user_type"`
	UserState  *int   `json:"user_state"`
}

// aggregate variance on columns of table "system_user"
type SystemUserVarianceFields struct {
	ID         *int64 `json:"id"`
	Grade      *int   `json:"grade"`
	AuditLevel *int   `json:"audit_level"`
	UserType   *int   `json:"user_type"`
	UserState  *int   `json:"user_state"`
}

// 可选select
type DepartmentSelectColumn string

const (
	// ID
	DepartmentSelectColumnID DepartmentSelectColumn = "id"
	// 部门ID
	DepartmentSelectColumnDepartmentID DepartmentSelectColumn = "department_id"
	// 企业ID
	DepartmentSelectColumnEnterpriseID DepartmentSelectColumn = "enterprise_id"
	// 上级部门ID
	DepartmentSelectColumnSuperiorDepartmentID DepartmentSelectColumn = "superior_department_id"
	// 部门名称
	DepartmentSelectColumnDepartmentName DepartmentSelectColumn = "department_name"
	// 部门编号
	DepartmentSelectColumnDepartmentCode DepartmentSelectColumn = "department_code"
	// 部门类型
	DepartmentSelectColumnDepartmentCategory DepartmentSelectColumn = "department_category"
	// 排序
	DepartmentSelectColumnInternalNumber DepartmentSelectColumn = "internal_number"
	// 创建时间
	DepartmentSelectColumnCreateAt DepartmentSelectColumn = "create_at"
	// 创建人
	DepartmentSelectColumnCreateBy DepartmentSelectColumn = "create_by"
	// 修改时间
	DepartmentSelectColumnUpdateAt DepartmentSelectColumn = "update_at"
	// 修改人
	DepartmentSelectColumnUpdateBy DepartmentSelectColumn = "update_by"
	// 删除时间
	DepartmentSelectColumnDeleteAt DepartmentSelectColumn = "delete_at"
	// 删除人
	DepartmentSelectColumnDeleteBy DepartmentSelectColumn = "delete_by"
	// 是否删除
	DepartmentSelectColumnIsDelete DepartmentSelectColumn = "is_delete"
	// 备注
	DepartmentSelectColumnRemarks DepartmentSelectColumn = "remarks"
)

var AllDepartmentSelectColumn = []DepartmentSelectColumn{
	DepartmentSelectColumnID,
	DepartmentSelectColumnDepartmentID,
	DepartmentSelectColumnEnterpriseID,
	DepartmentSelectColumnSuperiorDepartmentID,
	DepartmentSelectColumnDepartmentName,
	DepartmentSelectColumnDepartmentCode,
	DepartmentSelectColumnDepartmentCategory,
	DepartmentSelectColumnInternalNumber,
	DepartmentSelectColumnCreateAt,
	DepartmentSelectColumnCreateBy,
	DepartmentSelectColumnUpdateAt,
	DepartmentSelectColumnUpdateBy,
	DepartmentSelectColumnDeleteAt,
	DepartmentSelectColumnDeleteBy,
	DepartmentSelectColumnIsDelete,
	DepartmentSelectColumnRemarks,
}

func (e DepartmentSelectColumn) IsValid() bool {
	switch e {
	case DepartmentSelectColumnID, DepartmentSelectColumnDepartmentID, DepartmentSelectColumnEnterpriseID, DepartmentSelectColumnSuperiorDepartmentID, DepartmentSelectColumnDepartmentName, DepartmentSelectColumnDepartmentCode, DepartmentSelectColumnDepartmentCategory, DepartmentSelectColumnInternalNumber, DepartmentSelectColumnCreateAt, DepartmentSelectColumnCreateBy, DepartmentSelectColumnUpdateAt, DepartmentSelectColumnUpdateBy, DepartmentSelectColumnDeleteAt, DepartmentSelectColumnDeleteBy, DepartmentSelectColumnIsDelete, DepartmentSelectColumnRemarks:
		return true
	}
	return false
}

func (e DepartmentSelectColumn) String() string {
	return string(e)
}

func (e *DepartmentSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DepartmentSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DepartmentSelectColumn", str)
	}
	return nil
}

func (e DepartmentSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EnterpriseAlarmSendPoliceSelectColumn string

const (
	// 按指定方法生成                                  ( 主键                                 )
	EnterpriseAlarmSendPoliceSelectColumnID EnterpriseAlarmSendPoliceSelectColumn = "id"
	// 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                             )
	EnterpriseAlarmSendPoliceSelectColumnEnterpriseAlarmSendPoliceID EnterpriseAlarmSendPoliceSelectColumn = "enterprise_alarm_send_police_id"
	// 所在企业id                                      ( enterprise_info表的enterprise_id )
	EnterpriseAlarmSendPoliceSelectColumnEnterpriseID EnterpriseAlarmSendPoliceSelectColumn = "enterprise_id"
	// 企业名称
	EnterpriseAlarmSendPoliceSelectColumnEnterpriseName EnterpriseAlarmSendPoliceSelectColumn = "enterprise_name"
	// 企业联系人
	EnterpriseAlarmSendPoliceSelectColumnEnterpriseContact EnterpriseAlarmSendPoliceSelectColumn = "enterprise_contact"
	// 企业联系电话
	EnterpriseAlarmSendPoliceSelectColumnEnterprisePhone EnterpriseAlarmSendPoliceSelectColumn = "enterprise_phone"
	// 交警
	EnterpriseAlarmSendPoliceSelectColumnPolice EnterpriseAlarmSendPoliceSelectColumn = "police"
	// 交警联系电话
	EnterpriseAlarmSendPoliceSelectColumnPolicePhone EnterpriseAlarmSendPoliceSelectColumn = "police_phone"
	// 交警所属部门
	EnterpriseAlarmSendPoliceSelectColumnPhliceDepartment EnterpriseAlarmSendPoliceSelectColumn = "phlice_department"
	// 创建时间
	EnterpriseAlarmSendPoliceSelectColumnCreatedAt EnterpriseAlarmSendPoliceSelectColumn = "created_at"
	// 创建人                                          ( system_user表的user_id           )
	EnterpriseAlarmSendPoliceSelectColumnCreatedBy EnterpriseAlarmSendPoliceSelectColumn = "created_by"
	// 修改时间
	EnterpriseAlarmSendPoliceSelectColumnUpdatedAt EnterpriseAlarmSendPoliceSelectColumn = "updated_at"
	// 修改人                                          ( system_user表的user_id           )
	EnterpriseAlarmSendPoliceSelectColumnUpdatedBy EnterpriseAlarmSendPoliceSelectColumn = "updated_by"
	// 删除时间
	EnterpriseAlarmSendPoliceSelectColumnDeletedAt EnterpriseAlarmSendPoliceSelectColumn = "deleted_at"
	// 删除人                                          ( system_user表的user_id           )
	EnterpriseAlarmSendPoliceSelectColumnDeletedBy EnterpriseAlarmSendPoliceSelectColumn = "deleted_by"
)

var AllEnterpriseAlarmSendPoliceSelectColumn = []EnterpriseAlarmSendPoliceSelectColumn{
	EnterpriseAlarmSendPoliceSelectColumnID,
	EnterpriseAlarmSendPoliceSelectColumnEnterpriseAlarmSendPoliceID,
	EnterpriseAlarmSendPoliceSelectColumnEnterpriseID,
	EnterpriseAlarmSendPoliceSelectColumnEnterpriseName,
	EnterpriseAlarmSendPoliceSelectColumnEnterpriseContact,
	EnterpriseAlarmSendPoliceSelectColumnEnterprisePhone,
	EnterpriseAlarmSendPoliceSelectColumnPolice,
	EnterpriseAlarmSendPoliceSelectColumnPolicePhone,
	EnterpriseAlarmSendPoliceSelectColumnPhliceDepartment,
	EnterpriseAlarmSendPoliceSelectColumnCreatedAt,
	EnterpriseAlarmSendPoliceSelectColumnCreatedBy,
	EnterpriseAlarmSendPoliceSelectColumnUpdatedAt,
	EnterpriseAlarmSendPoliceSelectColumnUpdatedBy,
	EnterpriseAlarmSendPoliceSelectColumnDeletedAt,
	EnterpriseAlarmSendPoliceSelectColumnDeletedBy,
}

func (e EnterpriseAlarmSendPoliceSelectColumn) IsValid() bool {
	switch e {
	case EnterpriseAlarmSendPoliceSelectColumnID, EnterpriseAlarmSendPoliceSelectColumnEnterpriseAlarmSendPoliceID, EnterpriseAlarmSendPoliceSelectColumnEnterpriseID, EnterpriseAlarmSendPoliceSelectColumnEnterpriseName, EnterpriseAlarmSendPoliceSelectColumnEnterpriseContact, EnterpriseAlarmSendPoliceSelectColumnEnterprisePhone, EnterpriseAlarmSendPoliceSelectColumnPolice, EnterpriseAlarmSendPoliceSelectColumnPolicePhone, EnterpriseAlarmSendPoliceSelectColumnPhliceDepartment, EnterpriseAlarmSendPoliceSelectColumnCreatedAt, EnterpriseAlarmSendPoliceSelectColumnCreatedBy, EnterpriseAlarmSendPoliceSelectColumnUpdatedAt, EnterpriseAlarmSendPoliceSelectColumnUpdatedBy, EnterpriseAlarmSendPoliceSelectColumnDeletedAt, EnterpriseAlarmSendPoliceSelectColumnDeletedBy:
		return true
	}
	return false
}

func (e EnterpriseAlarmSendPoliceSelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseAlarmSendPoliceSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseAlarmSendPoliceSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseAlarmSendPoliceSelectColumn", str)
	}
	return nil
}

func (e EnterpriseAlarmSendPoliceSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EnterpriseContactSelectColumn string

const (
	// ID
	EnterpriseContactSelectColumnID EnterpriseContactSelectColumn = "id"
	// 联系人ID
	EnterpriseContactSelectColumnContactID EnterpriseContactSelectColumn = "contact_id"
	// 企业ID
	EnterpriseContactSelectColumnEnterpriseID EnterpriseContactSelectColumn = "enterprise_id"
	// 姓名
	EnterpriseContactSelectColumnName EnterpriseContactSelectColumn = "name"
	// 手机号码
	EnterpriseContactSelectColumnMobile EnterpriseContactSelectColumn = "mobile"
	// 固话
	EnterpriseContactSelectColumnPhone EnterpriseContactSelectColumn = "phone"
	// 邮箱
	EnterpriseContactSelectColumnEmail EnterpriseContactSelectColumn = "email"
	// 排序
	EnterpriseContactSelectColumnSortNum EnterpriseContactSelectColumn = "sort_num"
	// 创建时间
	EnterpriseContactSelectColumnCreateAt EnterpriseContactSelectColumn = "create_at"
	// 创建人
	EnterpriseContactSelectColumnCreateBy EnterpriseContactSelectColumn = "create_by"
	// 更新时间
	EnterpriseContactSelectColumnUpdateAt EnterpriseContactSelectColumn = "update_at"
	// 更新人
	EnterpriseContactSelectColumnUpdateBy EnterpriseContactSelectColumn = "update_by"
	// 删除时间
	EnterpriseContactSelectColumnDeleteAt EnterpriseContactSelectColumn = "delete_at"
	// 删除人
	EnterpriseContactSelectColumnDeleteBy EnterpriseContactSelectColumn = "delete_by"
	// 是否删除
	EnterpriseContactSelectColumnIsDelete EnterpriseContactSelectColumn = "is_delete"
)

var AllEnterpriseContactSelectColumn = []EnterpriseContactSelectColumn{
	EnterpriseContactSelectColumnID,
	EnterpriseContactSelectColumnContactID,
	EnterpriseContactSelectColumnEnterpriseID,
	EnterpriseContactSelectColumnName,
	EnterpriseContactSelectColumnMobile,
	EnterpriseContactSelectColumnPhone,
	EnterpriseContactSelectColumnEmail,
	EnterpriseContactSelectColumnSortNum,
	EnterpriseContactSelectColumnCreateAt,
	EnterpriseContactSelectColumnCreateBy,
	EnterpriseContactSelectColumnUpdateAt,
	EnterpriseContactSelectColumnUpdateBy,
	EnterpriseContactSelectColumnDeleteAt,
	EnterpriseContactSelectColumnDeleteBy,
	EnterpriseContactSelectColumnIsDelete,
}

func (e EnterpriseContactSelectColumn) IsValid() bool {
	switch e {
	case EnterpriseContactSelectColumnID, EnterpriseContactSelectColumnContactID, EnterpriseContactSelectColumnEnterpriseID, EnterpriseContactSelectColumnName, EnterpriseContactSelectColumnMobile, EnterpriseContactSelectColumnPhone, EnterpriseContactSelectColumnEmail, EnterpriseContactSelectColumnSortNum, EnterpriseContactSelectColumnCreateAt, EnterpriseContactSelectColumnCreateBy, EnterpriseContactSelectColumnUpdateAt, EnterpriseContactSelectColumnUpdateBy, EnterpriseContactSelectColumnDeleteAt, EnterpriseContactSelectColumnDeleteBy, EnterpriseContactSelectColumnIsDelete:
		return true
	}
	return false
}

func (e EnterpriseContactSelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseContactSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseContactSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseContactSelectColumn", str)
	}
	return nil
}

func (e EnterpriseContactSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EnterpriseMuckTrunkSelectColumn string

const (
	// ID
	EnterpriseMuckTrunkSelectColumnID EnterpriseMuckTrunkSelectColumn = "id"
	// 渣土车企业ID
	EnterpriseMuckTrunkSelectColumnEnterpriseMuckTrunkID EnterpriseMuckTrunkSelectColumn = "enterprise_muck_trunk_id"
	// 企业ID
	EnterpriseMuckTrunkSelectColumnEnterpriseID EnterpriseMuckTrunkSelectColumn = "enterprise_id"
	// 企业管理人
	EnterpriseMuckTrunkSelectColumnCompanyManager EnterpriseMuckTrunkSelectColumn = "company_manager"
	// 企业管理人联系电话
	EnterpriseMuckTrunkSelectColumnCompanyManagerPhone EnterpriseMuckTrunkSelectColumn = "company_manager_phone"
	// 企业管理人身份证
	EnterpriseMuckTrunkSelectColumnCompanyManagerIDCard EnterpriseMuckTrunkSelectColumn = "company_manager_id_card"
	// 企业安全管理人
	EnterpriseMuckTrunkSelectColumnCompanySafeManager EnterpriseMuckTrunkSelectColumn = "company_safe_manager"
	// 企业安全管理人联系电话
	EnterpriseMuckTrunkSelectColumnCompanySafeMangerPhone EnterpriseMuckTrunkSelectColumn = "company_safe_manger_phone"
	// 企业安全管理人身份证
	EnterpriseMuckTrunkSelectColumnCompanySafeManagerIDCard EnterpriseMuckTrunkSelectColumn = "company_safe_manager_id_card"
	// 道路运输证号
	EnterpriseMuckTrunkSelectColumnRoadLicense EnterpriseMuckTrunkSelectColumn = "road_license"
	// 道路运输证图片地址
	EnterpriseMuckTrunkSelectColumnRoadLicensePhoto EnterpriseMuckTrunkSelectColumn = "road_license_photo"
	// 办公场所地址
	EnterpriseMuckTrunkSelectColumnOfficeAddress EnterpriseMuckTrunkSelectColumn = "office_address"
	// 办公场所面积
	EnterpriseMuckTrunkSelectColumnOfficeArea EnterpriseMuckTrunkSelectColumn = "office_area"
	// 办公场所照片
	EnterpriseMuckTrunkSelectColumnOfficePhoto EnterpriseMuckTrunkSelectColumn = "office_photo"
	// 停车场地址
	EnterpriseMuckTrunkSelectColumnParkingAddress EnterpriseMuckTrunkSelectColumn = "parking_address"
	// 停车场面积
	EnterpriseMuckTrunkSelectColumnParkingArea EnterpriseMuckTrunkSelectColumn = "parking_area"
	// 单停车位面积
	EnterpriseMuckTrunkSelectColumnParkingSingleArea EnterpriseMuckTrunkSelectColumn = "parking_single_area"
	// 新型渣土车购置数
	EnterpriseMuckTrunkSelectColumnSmartCarCount EnterpriseMuckTrunkSelectColumn = "smart_car_count"
	// 是否继续运力增加
	EnterpriseMuckTrunkSelectColumnIsTransportAdd EnterpriseMuckTrunkSelectColumn = "is_transport_add"
	// 县级是否审核
	EnterpriseMuckTrunkSelectColumnCountyCheckState EnterpriseMuckTrunkSelectColumn = "county_check_state"
	// 市级是否审核
	EnterpriseMuckTrunkSelectColumnCityCheckState EnterpriseMuckTrunkSelectColumn = "city_check_state"
	// 是否允许生成与编号
	EnterpriseMuckTrunkSelectColumnAllowGeneratePreviewNum EnterpriseMuckTrunkSelectColumn = "allow_generate_preview_num"
	// 承诺书地址
	EnterpriseMuckTrunkSelectColumnPromiseBookURL EnterpriseMuckTrunkSelectColumn = "promise_book_url"
	// 承诺书-备注
	EnterpriseMuckTrunkSelectColumnPromiseRemark EnterpriseMuckTrunkSelectColumn = "promise_remark"
	// 企业类型（1.A类 2.B类 3.C类 4.D类 5.E类）
	EnterpriseMuckTrunkSelectColumnTransportType EnterpriseMuckTrunkSelectColumn = "transport_type"
	// 路线牌工作相关规定承诺书照片
	EnterpriseMuckTrunkSelectColumnRoutelineCardPromisePhoto EnterpriseMuckTrunkSelectColumn = "routeline_card_promise_photo"
	// 运输主题责任人承诺书照片
	EnterpriseMuckTrunkSelectColumnTransportLiablePromisePhoto EnterpriseMuckTrunkSelectColumn = "transport_liable_promise_photo"
	// 是否a类企业
	EnterpriseMuckTrunkSelectColumnIsTypeA EnterpriseMuckTrunkSelectColumn = "is_type_a"
	// 是否b类企业
	EnterpriseMuckTrunkSelectColumnIsTypeB EnterpriseMuckTrunkSelectColumn = "is_type_b"
	// 是否c类企业
	EnterpriseMuckTrunkSelectColumnIsTypeC EnterpriseMuckTrunkSelectColumn = "is_type_c"
	// 是否d类企业
	EnterpriseMuckTrunkSelectColumnIsTypeD EnterpriseMuckTrunkSelectColumn = "is_type_d"
	// 是否e类企业
	EnterpriseMuckTrunkSelectColumnIsTypeE EnterpriseMuckTrunkSelectColumn = "is_type_e"
	// 创建时间
	EnterpriseMuckTrunkSelectColumnCreateAt EnterpriseMuckTrunkSelectColumn = "create_at"
	// 创建人
	EnterpriseMuckTrunkSelectColumnCreateBy EnterpriseMuckTrunkSelectColumn = "create_by"
	// 更新时间
	EnterpriseMuckTrunkSelectColumnUpdateAt EnterpriseMuckTrunkSelectColumn = "update_at"
	// 更新人
	EnterpriseMuckTrunkSelectColumnUpdateBy EnterpriseMuckTrunkSelectColumn = "update_by"
	// 删除时间
	EnterpriseMuckTrunkSelectColumnDeleteAt EnterpriseMuckTrunkSelectColumn = "delete_at"
	// 删除人
	EnterpriseMuckTrunkSelectColumnDeleteBy EnterpriseMuckTrunkSelectColumn = "delete_by"
	// 是否删除
	EnterpriseMuckTrunkSelectColumnIsDelete EnterpriseMuckTrunkSelectColumn = "is_delete"
)

var AllEnterpriseMuckTrunkSelectColumn = []EnterpriseMuckTrunkSelectColumn{
	EnterpriseMuckTrunkSelectColumnID,
	EnterpriseMuckTrunkSelectColumnEnterpriseMuckTrunkID,
	EnterpriseMuckTrunkSelectColumnEnterpriseID,
	EnterpriseMuckTrunkSelectColumnCompanyManager,
	EnterpriseMuckTrunkSelectColumnCompanyManagerPhone,
	EnterpriseMuckTrunkSelectColumnCompanyManagerIDCard,
	EnterpriseMuckTrunkSelectColumnCompanySafeManager,
	EnterpriseMuckTrunkSelectColumnCompanySafeMangerPhone,
	EnterpriseMuckTrunkSelectColumnCompanySafeManagerIDCard,
	EnterpriseMuckTrunkSelectColumnRoadLicense,
	EnterpriseMuckTrunkSelectColumnRoadLicensePhoto,
	EnterpriseMuckTrunkSelectColumnOfficeAddress,
	EnterpriseMuckTrunkSelectColumnOfficeArea,
	EnterpriseMuckTrunkSelectColumnOfficePhoto,
	EnterpriseMuckTrunkSelectColumnParkingAddress,
	EnterpriseMuckTrunkSelectColumnParkingArea,
	EnterpriseMuckTrunkSelectColumnParkingSingleArea,
	EnterpriseMuckTrunkSelectColumnSmartCarCount,
	EnterpriseMuckTrunkSelectColumnIsTransportAdd,
	EnterpriseMuckTrunkSelectColumnCountyCheckState,
	EnterpriseMuckTrunkSelectColumnCityCheckState,
	EnterpriseMuckTrunkSelectColumnAllowGeneratePreviewNum,
	EnterpriseMuckTrunkSelectColumnPromiseBookURL,
	EnterpriseMuckTrunkSelectColumnPromiseRemark,
	EnterpriseMuckTrunkSelectColumnTransportType,
	EnterpriseMuckTrunkSelectColumnRoutelineCardPromisePhoto,
	EnterpriseMuckTrunkSelectColumnTransportLiablePromisePhoto,
	EnterpriseMuckTrunkSelectColumnIsTypeA,
	EnterpriseMuckTrunkSelectColumnIsTypeB,
	EnterpriseMuckTrunkSelectColumnIsTypeC,
	EnterpriseMuckTrunkSelectColumnIsTypeD,
	EnterpriseMuckTrunkSelectColumnIsTypeE,
	EnterpriseMuckTrunkSelectColumnCreateAt,
	EnterpriseMuckTrunkSelectColumnCreateBy,
	EnterpriseMuckTrunkSelectColumnUpdateAt,
	EnterpriseMuckTrunkSelectColumnUpdateBy,
	EnterpriseMuckTrunkSelectColumnDeleteAt,
	EnterpriseMuckTrunkSelectColumnDeleteBy,
	EnterpriseMuckTrunkSelectColumnIsDelete,
}

func (e EnterpriseMuckTrunkSelectColumn) IsValid() bool {
	switch e {
	case EnterpriseMuckTrunkSelectColumnID, EnterpriseMuckTrunkSelectColumnEnterpriseMuckTrunkID, EnterpriseMuckTrunkSelectColumnEnterpriseID, EnterpriseMuckTrunkSelectColumnCompanyManager, EnterpriseMuckTrunkSelectColumnCompanyManagerPhone, EnterpriseMuckTrunkSelectColumnCompanyManagerIDCard, EnterpriseMuckTrunkSelectColumnCompanySafeManager, EnterpriseMuckTrunkSelectColumnCompanySafeMangerPhone, EnterpriseMuckTrunkSelectColumnCompanySafeManagerIDCard, EnterpriseMuckTrunkSelectColumnRoadLicense, EnterpriseMuckTrunkSelectColumnRoadLicensePhoto, EnterpriseMuckTrunkSelectColumnOfficeAddress, EnterpriseMuckTrunkSelectColumnOfficeArea, EnterpriseMuckTrunkSelectColumnOfficePhoto, EnterpriseMuckTrunkSelectColumnParkingAddress, EnterpriseMuckTrunkSelectColumnParkingArea, EnterpriseMuckTrunkSelectColumnParkingSingleArea, EnterpriseMuckTrunkSelectColumnSmartCarCount, EnterpriseMuckTrunkSelectColumnIsTransportAdd, EnterpriseMuckTrunkSelectColumnCountyCheckState, EnterpriseMuckTrunkSelectColumnCityCheckState, EnterpriseMuckTrunkSelectColumnAllowGeneratePreviewNum, EnterpriseMuckTrunkSelectColumnPromiseBookURL, EnterpriseMuckTrunkSelectColumnPromiseRemark, EnterpriseMuckTrunkSelectColumnTransportType, EnterpriseMuckTrunkSelectColumnRoutelineCardPromisePhoto, EnterpriseMuckTrunkSelectColumnTransportLiablePromisePhoto, EnterpriseMuckTrunkSelectColumnIsTypeA, EnterpriseMuckTrunkSelectColumnIsTypeB, EnterpriseMuckTrunkSelectColumnIsTypeC, EnterpriseMuckTrunkSelectColumnIsTypeD, EnterpriseMuckTrunkSelectColumnIsTypeE, EnterpriseMuckTrunkSelectColumnCreateAt, EnterpriseMuckTrunkSelectColumnCreateBy, EnterpriseMuckTrunkSelectColumnUpdateAt, EnterpriseMuckTrunkSelectColumnUpdateBy, EnterpriseMuckTrunkSelectColumnDeleteAt, EnterpriseMuckTrunkSelectColumnDeleteBy, EnterpriseMuckTrunkSelectColumnIsDelete:
		return true
	}
	return false
}

func (e EnterpriseMuckTrunkSelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseMuckTrunkSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseMuckTrunkSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseMuckTrunkSelectColumn", str)
	}
	return nil
}

func (e EnterpriseMuckTrunkSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EnterpriseScoreLogSelectColumn string

const (
	// ID
	EnterpriseScoreLogSelectColumnID EnterpriseScoreLogSelectColumn = "id"
	// 企业扣分日志表ID
	EnterpriseScoreLogSelectColumnLogID EnterpriseScoreLogSelectColumn = "log_id"
	// 企业ID
	EnterpriseScoreLogSelectColumnEnterpriseID EnterpriseScoreLogSelectColumn = "enterprise_id"
	// 当前分数
	EnterpriseScoreLogSelectColumnCurrentScore EnterpriseScoreLogSelectColumn = "current_score"
	// 扣分分值
	EnterpriseScoreLogSelectColumnAddScore EnterpriseScoreLogSelectColumn = "add_score"
	// 扣分内容
	EnterpriseScoreLogSelectColumnContent EnterpriseScoreLogSelectColumn = "content"
	// 相关文件url
	EnterpriseScoreLogSelectColumnFileURL EnterpriseScoreLogSelectColumn = "file_url"
	// 扣分项ID
	EnterpriseScoreLogSelectColumnScoreSetID EnterpriseScoreLogSelectColumn = "score_set_id"
	// 创建时间
	EnterpriseScoreLogSelectColumnCreateAt EnterpriseScoreLogSelectColumn = "create_at"
	// 创建人
	EnterpriseScoreLogSelectColumnCreateBy EnterpriseScoreLogSelectColumn = "create_by"
	// 更新时间
	EnterpriseScoreLogSelectColumnUpdateAt EnterpriseScoreLogSelectColumn = "update_at"
	// 更新人
	EnterpriseScoreLogSelectColumnUpdateBy EnterpriseScoreLogSelectColumn = "update_by"
	// 删除时间
	EnterpriseScoreLogSelectColumnDeleteAt EnterpriseScoreLogSelectColumn = "delete_at"
	// 删除人
	EnterpriseScoreLogSelectColumnDeleteBy EnterpriseScoreLogSelectColumn = "delete_by"
	// 是否删除
	EnterpriseScoreLogSelectColumnIsDelete EnterpriseScoreLogSelectColumn = "is_delete"
)

var AllEnterpriseScoreLogSelectColumn = []EnterpriseScoreLogSelectColumn{
	EnterpriseScoreLogSelectColumnID,
	EnterpriseScoreLogSelectColumnLogID,
	EnterpriseScoreLogSelectColumnEnterpriseID,
	EnterpriseScoreLogSelectColumnCurrentScore,
	EnterpriseScoreLogSelectColumnAddScore,
	EnterpriseScoreLogSelectColumnContent,
	EnterpriseScoreLogSelectColumnFileURL,
	EnterpriseScoreLogSelectColumnScoreSetID,
	EnterpriseScoreLogSelectColumnCreateAt,
	EnterpriseScoreLogSelectColumnCreateBy,
	EnterpriseScoreLogSelectColumnUpdateAt,
	EnterpriseScoreLogSelectColumnUpdateBy,
	EnterpriseScoreLogSelectColumnDeleteAt,
	EnterpriseScoreLogSelectColumnDeleteBy,
	EnterpriseScoreLogSelectColumnIsDelete,
}

func (e EnterpriseScoreLogSelectColumn) IsValid() bool {
	switch e {
	case EnterpriseScoreLogSelectColumnID, EnterpriseScoreLogSelectColumnLogID, EnterpriseScoreLogSelectColumnEnterpriseID, EnterpriseScoreLogSelectColumnCurrentScore, EnterpriseScoreLogSelectColumnAddScore, EnterpriseScoreLogSelectColumnContent, EnterpriseScoreLogSelectColumnFileURL, EnterpriseScoreLogSelectColumnScoreSetID, EnterpriseScoreLogSelectColumnCreateAt, EnterpriseScoreLogSelectColumnCreateBy, EnterpriseScoreLogSelectColumnUpdateAt, EnterpriseScoreLogSelectColumnUpdateBy, EnterpriseScoreLogSelectColumnDeleteAt, EnterpriseScoreLogSelectColumnDeleteBy, EnterpriseScoreLogSelectColumnIsDelete:
		return true
	}
	return false
}

func (e EnterpriseScoreLogSelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseScoreLogSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseScoreLogSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseScoreLogSelectColumn", str)
	}
	return nil
}

func (e EnterpriseScoreLogSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EnterpriseScoreSetSelectColumn string

const (
	// ID
	EnterpriseScoreSetSelectColumnID EnterpriseScoreSetSelectColumn = "id"
	// 扣分项ID
	EnterpriseScoreSetSelectColumnScoreSetID EnterpriseScoreSetSelectColumn = "score_set_id"
	// 扣分内容
	EnterpriseScoreSetSelectColumnContent EnterpriseScoreSetSelectColumn = "content"
	// 类型
	EnterpriseScoreSetSelectColumnType EnterpriseScoreSetSelectColumn = "type"
	// 分值
	EnterpriseScoreSetSelectColumnScore EnterpriseScoreSetSelectColumn = "score"
	// 创建时间
	EnterpriseScoreSetSelectColumnCreateAt EnterpriseScoreSetSelectColumn = "create_at"
	// 创建人
	EnterpriseScoreSetSelectColumnCreateBy EnterpriseScoreSetSelectColumn = "create_by"
	// 修改时间
	EnterpriseScoreSetSelectColumnUpdateAt EnterpriseScoreSetSelectColumn = "update_at"
	// 修改人
	EnterpriseScoreSetSelectColumnUpdateBy EnterpriseScoreSetSelectColumn = "update_by"
	// 删除时间
	EnterpriseScoreSetSelectColumnDeleteAt EnterpriseScoreSetSelectColumn = "delete_at"
	// 删除人
	EnterpriseScoreSetSelectColumnDeleteBy EnterpriseScoreSetSelectColumn = "delete_by"
	// 是否删除
	EnterpriseScoreSetSelectColumnIsDelete EnterpriseScoreSetSelectColumn = "is_delete"
)

var AllEnterpriseScoreSetSelectColumn = []EnterpriseScoreSetSelectColumn{
	EnterpriseScoreSetSelectColumnID,
	EnterpriseScoreSetSelectColumnScoreSetID,
	EnterpriseScoreSetSelectColumnContent,
	EnterpriseScoreSetSelectColumnType,
	EnterpriseScoreSetSelectColumnScore,
	EnterpriseScoreSetSelectColumnCreateAt,
	EnterpriseScoreSetSelectColumnCreateBy,
	EnterpriseScoreSetSelectColumnUpdateAt,
	EnterpriseScoreSetSelectColumnUpdateBy,
	EnterpriseScoreSetSelectColumnDeleteAt,
	EnterpriseScoreSetSelectColumnDeleteBy,
	EnterpriseScoreSetSelectColumnIsDelete,
}

func (e EnterpriseScoreSetSelectColumn) IsValid() bool {
	switch e {
	case EnterpriseScoreSetSelectColumnID, EnterpriseScoreSetSelectColumnScoreSetID, EnterpriseScoreSetSelectColumnContent, EnterpriseScoreSetSelectColumnType, EnterpriseScoreSetSelectColumnScore, EnterpriseScoreSetSelectColumnCreateAt, EnterpriseScoreSetSelectColumnCreateBy, EnterpriseScoreSetSelectColumnUpdateAt, EnterpriseScoreSetSelectColumnUpdateBy, EnterpriseScoreSetSelectColumnDeleteAt, EnterpriseScoreSetSelectColumnDeleteBy, EnterpriseScoreSetSelectColumnIsDelete:
		return true
	}
	return false
}

func (e EnterpriseScoreSetSelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseScoreSetSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseScoreSetSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseScoreSetSelectColumn", str)
	}
	return nil
}

func (e EnterpriseScoreSetSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EnterpriseSelectColumn string

const (
	// ID
	EnterpriseSelectColumnID EnterpriseSelectColumn = "id"
	// 企业ID
	EnterpriseSelectColumnEnterpriseID EnterpriseSelectColumn = "enterprise_id"
	// 上级企业ID
	EnterpriseSelectColumnSuperiorEnterpriseID EnterpriseSelectColumn = "superior_enterprise_id"
	// 企业码
	EnterpriseSelectColumnEnterpriseCode EnterpriseSelectColumn = "enterprise_code"
	// 企业名称
	EnterpriseSelectColumnEnterpriseName EnterpriseSelectColumn = "enterprise_name"
	// 企业级别
	EnterpriseSelectColumnEnterpriseLevel EnterpriseSelectColumn = "enterprise_level"
	// 显示顺序
	EnterpriseSelectColumnDisplayNumber EnterpriseSelectColumn = "display_number"
	// 企业地址
	EnterpriseSelectColumnEnterpriseAddress EnterpriseSelectColumn = "enterprise_address"
	// 经营范围
	EnterpriseSelectColumnBusinessScope EnterpriseSelectColumn = "business_scope"
	// 传真号码
	EnterpriseSelectColumnFaxNumber EnterpriseSelectColumn = "fax_number"
	// 省份ID
	EnterpriseSelectColumnProvinceID EnterpriseSelectColumn = "province_id"
	// 城市ID
	EnterpriseSelectColumnCityID EnterpriseSelectColumn = "city_id"
	// 区域ID
	EnterpriseSelectColumnDistrictID EnterpriseSelectColumn = "district_id"
	// 机构类别
	EnterpriseSelectColumnInstitutionCategory EnterpriseSelectColumn = "institution_category"
	// 经营许可证图片
	EnterpriseSelectColumnOperatingLicensePhoto EnterpriseSelectColumn = "operating_license_photo"
	// 营业执照图片
	EnterpriseSelectColumnBusinessLicensePhoto EnterpriseSelectColumn = "business_license_photo"
	// 营业执照发证日期
	EnterpriseSelectColumnBusinessLicenseIssuanceDate EnterpriseSelectColumn = "business_license_issuance_date"
	// 营业执照到期日期
	EnterpriseSelectColumnBusinessLicenseExpiryDate EnterpriseSelectColumn = "business_license_expiry_date"
	// 企业性质
	EnterpriseSelectColumnEnterpriseNature EnterpriseSelectColumn = "enterprise_nature"
	// 企业法人代表
	EnterpriseSelectColumnLegalRepresentative EnterpriseSelectColumn = "legal_representative"
	// 企业法人代表联系电话
	EnterpriseSelectColumnLegalRepresentativePhone EnterpriseSelectColumn = "legal_representative_phone"
	// 企业法人代表身份证-图片
	EnterpriseSelectColumnLegalRepresentativeIDCardPhoto EnterpriseSelectColumn = "legal_representative_id_card_photo"
	// 企业法人-身份证号码
	EnterpriseSelectColumnLegalRepresentativeIDCard EnterpriseSelectColumn = "legal_representative_id_card"
	// 委托代理人
	EnterpriseSelectColumnEntrustedAgent EnterpriseSelectColumn = "entrusted_agent"
	// 委托代理人-电话号码
	EnterpriseSelectColumnEntrustedAgentPhone EnterpriseSelectColumn = "entrusted_agent_phone"
	// 委托代理人身份证图片
	EnterpriseSelectColumnEntrustedAgentIDCardPhoto EnterpriseSelectColumn = "entrusted_agent_id_card_photo"
	// 委托代理人-身份证号码
	EnterpriseSelectColumnEntrustedAgentIDCard EnterpriseSelectColumn = "entrusted_agent_id_card"
	// 组织机构代码(企业的营运证)
	EnterpriseSelectColumnOrganizationCode EnterpriseSelectColumn = "organization_code"
	// 组织机构代码证照片
	EnterpriseSelectColumnOrganizationCodeCertificatePhoto EnterpriseSelectColumn = "organization_code_certificate_photo"
	// 内网更新时间
	EnterpriseSelectColumnUpdateTimeIn EnterpriseSelectColumn = "update_time_in"
	// 业务办理扫描件照片
	EnterpriseSelectColumnBusinessPhoto EnterpriseSelectColumn = "business_photo"
	// 是否黑名单
	EnterpriseSelectColumnIsBlack EnterpriseSelectColumn = "is_black"
	// 审核状态
	EnterpriseSelectColumnCheckStatus EnterpriseSelectColumn = "check_status"
	// 是否安装
	EnterpriseSelectColumnIsInstall EnterpriseSelectColumn = "is_install"
	// 是否录入完成
	EnterpriseSelectColumnIsInput EnterpriseSelectColumn = "is_input"
	// 是否上传省厅
	EnterpriseSelectColumnIsUploadProvince EnterpriseSelectColumn = "is_upload_province"
	// 记分
	EnterpriseSelectColumnScore EnterpriseSelectColumn = "score"
	// 所属大队ID
	EnterpriseSelectColumnBrigadeID EnterpriseSelectColumn = "brigade_id"
	// 所属派出所ID
	EnterpriseSelectColumnPoliceStationID EnterpriseSelectColumn = "police_station_id"
	// 大队审核意见
	EnterpriseSelectColumnBrigadeReviewOpinion EnterpriseSelectColumn = "brigade_review_opinion"
	// 大队审核时间
	EnterpriseSelectColumnBrigadeReviewTime EnterpriseSelectColumn = "brigade_review_time"
	// 大队审核人
	EnterpriseSelectColumnBrigadeReviewBy EnterpriseSelectColumn = "brigade_review_by"
	// 协会审核意见
	EnterpriseSelectColumnAssociationReviewOpinion EnterpriseSelectColumn = "association_review_opinion"
	// 协会审核时间
	EnterpriseSelectColumnAssociationReviewTime EnterpriseSelectColumn = "association_review_time"
	// 协会审核时间
	EnterpriseSelectColumnAssociationReviewBy EnterpriseSelectColumn = "association_review_by"
	// 创建时间
	EnterpriseSelectColumnCreateAt EnterpriseSelectColumn = "create_at"
	// 创建人
	EnterpriseSelectColumnCreateBy EnterpriseSelectColumn = "create_by"
	// 修改时间
	EnterpriseSelectColumnUpdateAt EnterpriseSelectColumn = "update_at"
	// 修改人
	EnterpriseSelectColumnUpdateBy EnterpriseSelectColumn = "update_by"
	// 删除时间
	EnterpriseSelectColumnDeleteAt EnterpriseSelectColumn = "delete_at"
	// 删除人
	EnterpriseSelectColumnDeleteBy EnterpriseSelectColumn = "delete_by"
	// 备注
	EnterpriseSelectColumnRemarks EnterpriseSelectColumn = "remarks"
	// 是否删除
	EnterpriseSelectColumnIsDeleted EnterpriseSelectColumn = "is_deleted"
	// 是否重点企业
	EnterpriseSelectColumnIsKeyPoint EnterpriseSelectColumn = "is_key_point"
	// 企业类型，1-普通企业，2-中信代理商，3-渣土车企业，4-混凝土企业，5-网约车企业,6-大队
	EnterpriseSelectColumnEnterpriseType EnterpriseSelectColumn = "enterprise_type"
	// 是否目录库
	EnterpriseSelectColumnIsCatalog EnterpriseSelectColumn = "is_catalog"
	// 企业状态(0正常，1暂停受理, 2清退)
	EnterpriseSelectColumnState EnterpriseSelectColumn = "state"
	// 代理商ID
	EnterpriseSelectColumnProxyEnterpriseID EnterpriseSelectColumn = "proxy_enterprise_id"
	// 是否试用期结果
	EnterpriseSelectColumnIsExpire EnterpriseSelectColumn = "is_expire"
	// 信用登记
	EnterpriseSelectColumnCreditLevel EnterpriseSelectColumn = "credit_level"
	// 信用登记备注
	EnterpriseSelectColumnCreditLevelRemark EnterpriseSelectColumn = "credit_level_remark"
)

var AllEnterpriseSelectColumn = []EnterpriseSelectColumn{
	EnterpriseSelectColumnID,
	EnterpriseSelectColumnEnterpriseID,
	EnterpriseSelectColumnSuperiorEnterpriseID,
	EnterpriseSelectColumnEnterpriseCode,
	EnterpriseSelectColumnEnterpriseName,
	EnterpriseSelectColumnEnterpriseLevel,
	EnterpriseSelectColumnDisplayNumber,
	EnterpriseSelectColumnEnterpriseAddress,
	EnterpriseSelectColumnBusinessScope,
	EnterpriseSelectColumnFaxNumber,
	EnterpriseSelectColumnProvinceID,
	EnterpriseSelectColumnCityID,
	EnterpriseSelectColumnDistrictID,
	EnterpriseSelectColumnInstitutionCategory,
	EnterpriseSelectColumnOperatingLicensePhoto,
	EnterpriseSelectColumnBusinessLicensePhoto,
	EnterpriseSelectColumnBusinessLicenseIssuanceDate,
	EnterpriseSelectColumnBusinessLicenseExpiryDate,
	EnterpriseSelectColumnEnterpriseNature,
	EnterpriseSelectColumnLegalRepresentative,
	EnterpriseSelectColumnLegalRepresentativePhone,
	EnterpriseSelectColumnLegalRepresentativeIDCardPhoto,
	EnterpriseSelectColumnLegalRepresentativeIDCard,
	EnterpriseSelectColumnEntrustedAgent,
	EnterpriseSelectColumnEntrustedAgentPhone,
	EnterpriseSelectColumnEntrustedAgentIDCardPhoto,
	EnterpriseSelectColumnEntrustedAgentIDCard,
	EnterpriseSelectColumnOrganizationCode,
	EnterpriseSelectColumnOrganizationCodeCertificatePhoto,
	EnterpriseSelectColumnUpdateTimeIn,
	EnterpriseSelectColumnBusinessPhoto,
	EnterpriseSelectColumnIsBlack,
	EnterpriseSelectColumnCheckStatus,
	EnterpriseSelectColumnIsInstall,
	EnterpriseSelectColumnIsInput,
	EnterpriseSelectColumnIsUploadProvince,
	EnterpriseSelectColumnScore,
	EnterpriseSelectColumnBrigadeID,
	EnterpriseSelectColumnPoliceStationID,
	EnterpriseSelectColumnBrigadeReviewOpinion,
	EnterpriseSelectColumnBrigadeReviewTime,
	EnterpriseSelectColumnBrigadeReviewBy,
	EnterpriseSelectColumnAssociationReviewOpinion,
	EnterpriseSelectColumnAssociationReviewTime,
	EnterpriseSelectColumnAssociationReviewBy,
	EnterpriseSelectColumnCreateAt,
	EnterpriseSelectColumnCreateBy,
	EnterpriseSelectColumnUpdateAt,
	EnterpriseSelectColumnUpdateBy,
	EnterpriseSelectColumnDeleteAt,
	EnterpriseSelectColumnDeleteBy,
	EnterpriseSelectColumnRemarks,
	EnterpriseSelectColumnIsDeleted,
	EnterpriseSelectColumnIsKeyPoint,
	EnterpriseSelectColumnEnterpriseType,
	EnterpriseSelectColumnIsCatalog,
	EnterpriseSelectColumnState,
	EnterpriseSelectColumnProxyEnterpriseID,
	EnterpriseSelectColumnIsExpire,
	EnterpriseSelectColumnCreditLevel,
	EnterpriseSelectColumnCreditLevelRemark,
}

func (e EnterpriseSelectColumn) IsValid() bool {
	switch e {
	case EnterpriseSelectColumnID, EnterpriseSelectColumnEnterpriseID, EnterpriseSelectColumnSuperiorEnterpriseID, EnterpriseSelectColumnEnterpriseCode, EnterpriseSelectColumnEnterpriseName, EnterpriseSelectColumnEnterpriseLevel, EnterpriseSelectColumnDisplayNumber, EnterpriseSelectColumnEnterpriseAddress, EnterpriseSelectColumnBusinessScope, EnterpriseSelectColumnFaxNumber, EnterpriseSelectColumnProvinceID, EnterpriseSelectColumnCityID, EnterpriseSelectColumnDistrictID, EnterpriseSelectColumnInstitutionCategory, EnterpriseSelectColumnOperatingLicensePhoto, EnterpriseSelectColumnBusinessLicensePhoto, EnterpriseSelectColumnBusinessLicenseIssuanceDate, EnterpriseSelectColumnBusinessLicenseExpiryDate, EnterpriseSelectColumnEnterpriseNature, EnterpriseSelectColumnLegalRepresentative, EnterpriseSelectColumnLegalRepresentativePhone, EnterpriseSelectColumnLegalRepresentativeIDCardPhoto, EnterpriseSelectColumnLegalRepresentativeIDCard, EnterpriseSelectColumnEntrustedAgent, EnterpriseSelectColumnEntrustedAgentPhone, EnterpriseSelectColumnEntrustedAgentIDCardPhoto, EnterpriseSelectColumnEntrustedAgentIDCard, EnterpriseSelectColumnOrganizationCode, EnterpriseSelectColumnOrganizationCodeCertificatePhoto, EnterpriseSelectColumnUpdateTimeIn, EnterpriseSelectColumnBusinessPhoto, EnterpriseSelectColumnIsBlack, EnterpriseSelectColumnCheckStatus, EnterpriseSelectColumnIsInstall, EnterpriseSelectColumnIsInput, EnterpriseSelectColumnIsUploadProvince, EnterpriseSelectColumnScore, EnterpriseSelectColumnBrigadeID, EnterpriseSelectColumnPoliceStationID, EnterpriseSelectColumnBrigadeReviewOpinion, EnterpriseSelectColumnBrigadeReviewTime, EnterpriseSelectColumnBrigadeReviewBy, EnterpriseSelectColumnAssociationReviewOpinion, EnterpriseSelectColumnAssociationReviewTime, EnterpriseSelectColumnAssociationReviewBy, EnterpriseSelectColumnCreateAt, EnterpriseSelectColumnCreateBy, EnterpriseSelectColumnUpdateAt, EnterpriseSelectColumnUpdateBy, EnterpriseSelectColumnDeleteAt, EnterpriseSelectColumnDeleteBy, EnterpriseSelectColumnRemarks, EnterpriseSelectColumnIsDeleted, EnterpriseSelectColumnIsKeyPoint, EnterpriseSelectColumnEnterpriseType, EnterpriseSelectColumnIsCatalog, EnterpriseSelectColumnState, EnterpriseSelectColumnProxyEnterpriseID, EnterpriseSelectColumnIsExpire, EnterpriseSelectColumnCreditLevel, EnterpriseSelectColumnCreditLevelRemark:
		return true
	}
	return false
}

func (e EnterpriseSelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseSelectColumn", str)
	}
	return nil
}

func (e EnterpriseSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EnterpriseStateHisSelectColumn string

const (
	// ID
	EnterpriseStateHisSelectColumnID EnterpriseStateHisSelectColumn = "id"
	// 状态历史ID
	EnterpriseStateHisSelectColumnStateHisID EnterpriseStateHisSelectColumn = "state_his_id"
	// 企业ID
	EnterpriseStateHisSelectColumnEnterpriseID EnterpriseStateHisSelectColumn = "enterprise_id"
	// 原因
	EnterpriseStateHisSelectColumnReason EnterpriseStateHisSelectColumn = "reason"
	// 状态(0.正常 1.暂停受理 2.清退)
	EnterpriseStateHisSelectColumnState EnterpriseStateHisSelectColumn = "state"
	// 相关文件链接
	EnterpriseStateHisSelectColumnFileURL EnterpriseStateHisSelectColumn = "file_url"
	// 创建时间
	EnterpriseStateHisSelectColumnCreateAt EnterpriseStateHisSelectColumn = "create_at"
	// 创建人
	EnterpriseStateHisSelectColumnCreateBy EnterpriseStateHisSelectColumn = "create_by"
)

var AllEnterpriseStateHisSelectColumn = []EnterpriseStateHisSelectColumn{
	EnterpriseStateHisSelectColumnID,
	EnterpriseStateHisSelectColumnStateHisID,
	EnterpriseStateHisSelectColumnEnterpriseID,
	EnterpriseStateHisSelectColumnReason,
	EnterpriseStateHisSelectColumnState,
	EnterpriseStateHisSelectColumnFileURL,
	EnterpriseStateHisSelectColumnCreateAt,
	EnterpriseStateHisSelectColumnCreateBy,
}

func (e EnterpriseStateHisSelectColumn) IsValid() bool {
	switch e {
	case EnterpriseStateHisSelectColumnID, EnterpriseStateHisSelectColumnStateHisID, EnterpriseStateHisSelectColumnEnterpriseID, EnterpriseStateHisSelectColumnReason, EnterpriseStateHisSelectColumnState, EnterpriseStateHisSelectColumnFileURL, EnterpriseStateHisSelectColumnCreateAt, EnterpriseStateHisSelectColumnCreateBy:
		return true
	}
	return false
}

func (e EnterpriseStateHisSelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseStateHisSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseStateHisSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseStateHisSelectColumn", str)
	}
	return nil
}

func (e EnterpriseStateHisSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type EnterpriseUkeySelectColumn string

const (
	// ID
	EnterpriseUkeySelectColumnID EnterpriseUkeySelectColumn = "id"
	// 企业ukey ID
	EnterpriseUkeySelectColumnUkeyID EnterpriseUkeySelectColumn = "ukey_id"
	// 企业ID
	EnterpriseUkeySelectColumnEnterpriseID EnterpriseUkeySelectColumn = "enterprise_id"
	// 创建时间
	EnterpriseUkeySelectColumnCreateAt EnterpriseUkeySelectColumn = "create_at"
	// 创建人
	EnterpriseUkeySelectColumnCreateBy EnterpriseUkeySelectColumn = "create_by"
	// 更新时间
	EnterpriseUkeySelectColumnUpdateAt EnterpriseUkeySelectColumn = "update_at"
	// 更新人
	EnterpriseUkeySelectColumnUpdateBy EnterpriseUkeySelectColumn = "update_by"
	// 删除时间
	EnterpriseUkeySelectColumnDeleteAt EnterpriseUkeySelectColumn = "delete_at"
	// 删除人
	EnterpriseUkeySelectColumnDeleteBy EnterpriseUkeySelectColumn = "delete_by"
	// 是否删除
	EnterpriseUkeySelectColumnIsDelete EnterpriseUkeySelectColumn = "is_delete"
)

var AllEnterpriseUkeySelectColumn = []EnterpriseUkeySelectColumn{
	EnterpriseUkeySelectColumnID,
	EnterpriseUkeySelectColumnUkeyID,
	EnterpriseUkeySelectColumnEnterpriseID,
	EnterpriseUkeySelectColumnCreateAt,
	EnterpriseUkeySelectColumnCreateBy,
	EnterpriseUkeySelectColumnUpdateAt,
	EnterpriseUkeySelectColumnUpdateBy,
	EnterpriseUkeySelectColumnDeleteAt,
	EnterpriseUkeySelectColumnDeleteBy,
	EnterpriseUkeySelectColumnIsDelete,
}

func (e EnterpriseUkeySelectColumn) IsValid() bool {
	switch e {
	case EnterpriseUkeySelectColumnID, EnterpriseUkeySelectColumnUkeyID, EnterpriseUkeySelectColumnEnterpriseID, EnterpriseUkeySelectColumnCreateAt, EnterpriseUkeySelectColumnCreateBy, EnterpriseUkeySelectColumnUpdateAt, EnterpriseUkeySelectColumnUpdateBy, EnterpriseUkeySelectColumnDeleteAt, EnterpriseUkeySelectColumnDeleteBy, EnterpriseUkeySelectColumnIsDelete:
		return true
	}
	return false
}

func (e EnterpriseUkeySelectColumn) String() string {
	return string(e)
}

func (e *EnterpriseUkeySelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseUkeySelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseUkeySelectColumn", str)
	}
	return nil
}

func (e EnterpriseUkeySelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 可选select
type SystemUserSelectColumn string

const (
	// ID
	SystemUserSelectColumnID SystemUserSelectColumn = "id"
	// 用户ID
	SystemUserSelectColumnUserID SystemUserSelectColumn = "user_id"
	// 密码
	SystemUserSelectColumnPassword SystemUserSelectColumn = "password"
	// 用户名
	SystemUserSelectColumnUername SystemUserSelectColumn = "uername"
	// 企业ID
	SystemUserSelectColumnEnterpriseID SystemUserSelectColumn = "enterprise_id"
	// 部门ID
	SystemUserSelectColumnDepartmentID SystemUserSelectColumn = "department_id"
	// 级别
	SystemUserSelectColumnGrade SystemUserSelectColumn = "grade"
	// 审核等级
	SystemUserSelectColumnAuditLevel SystemUserSelectColumn = "audit_level"
	// 用户类型
	SystemUserSelectColumnUserType SystemUserSelectColumn = "user_type"
	// 是否有效
	SystemUserSelectColumnIsValid SystemUserSelectColumn = "is_valid"
	// 状态
	SystemUserSelectColumnUserState SystemUserSelectColumn = "user_state"
	// ip地址
	SystemUserSelectColumnIPAddress SystemUserSelectColumn = "ip_address"
	// 是否绑定IP
	SystemUserSelectColumnIsBindIP SystemUserSelectColumn = "is_bind_ip"
	// 邮箱
	SystemUserSelectColumnEmail SystemUserSelectColumn = "email"
	// 电话号码
	SystemUserSelectColumnTelephone SystemUserSelectColumn = "telephone"
	// 手机号码
	SystemUserSelectColumnMobile SystemUserSelectColumn = "mobile"
	// 加密串码
	SystemUserSelectColumnUkey SystemUserSelectColumn = "ukey"
	// 手机串号
	SystemUserSelectColumnMkey SystemUserSelectColumn = "mkey"
	// 客户端版本号
	SystemUserSelectColumnAppVersion SystemUserSelectColumn = "app_version"
	// 创建时间
	SystemUserSelectColumnCreatedAt SystemUserSelectColumn = "created_at"
	// 创建人
	SystemUserSelectColumnCreateBy SystemUserSelectColumn = "create_by"
	// 修改时间
	SystemUserSelectColumnUpdateAt SystemUserSelectColumn = "update_at"
	// 修改人
	SystemUserSelectColumnUpdateBy SystemUserSelectColumn = "update_by"
	// 删除时间
	SystemUserSelectColumnDeleteAt SystemUserSelectColumn = "delete_at"
	// 删除人
	SystemUserSelectColumnDeleteBy SystemUserSelectColumn = "delete_by"
	// 是否删除
	SystemUserSelectColumnIsDelete SystemUserSelectColumn = "is_delete"
	// 备注
	SystemUserSelectColumnRemarks SystemUserSelectColumn = "remarks"
)

var AllSystemUserSelectColumn = []SystemUserSelectColumn{
	SystemUserSelectColumnID,
	SystemUserSelectColumnUserID,
	SystemUserSelectColumnPassword,
	SystemUserSelectColumnUername,
	SystemUserSelectColumnEnterpriseID,
	SystemUserSelectColumnDepartmentID,
	SystemUserSelectColumnGrade,
	SystemUserSelectColumnAuditLevel,
	SystemUserSelectColumnUserType,
	SystemUserSelectColumnIsValid,
	SystemUserSelectColumnUserState,
	SystemUserSelectColumnIPAddress,
	SystemUserSelectColumnIsBindIP,
	SystemUserSelectColumnEmail,
	SystemUserSelectColumnTelephone,
	SystemUserSelectColumnMobile,
	SystemUserSelectColumnUkey,
	SystemUserSelectColumnMkey,
	SystemUserSelectColumnAppVersion,
	SystemUserSelectColumnCreatedAt,
	SystemUserSelectColumnCreateBy,
	SystemUserSelectColumnUpdateAt,
	SystemUserSelectColumnUpdateBy,
	SystemUserSelectColumnDeleteAt,
	SystemUserSelectColumnDeleteBy,
	SystemUserSelectColumnIsDelete,
	SystemUserSelectColumnRemarks,
}

func (e SystemUserSelectColumn) IsValid() bool {
	switch e {
	case SystemUserSelectColumnID, SystemUserSelectColumnUserID, SystemUserSelectColumnPassword, SystemUserSelectColumnUername, SystemUserSelectColumnEnterpriseID, SystemUserSelectColumnDepartmentID, SystemUserSelectColumnGrade, SystemUserSelectColumnAuditLevel, SystemUserSelectColumnUserType, SystemUserSelectColumnIsValid, SystemUserSelectColumnUserState, SystemUserSelectColumnIPAddress, SystemUserSelectColumnIsBindIP, SystemUserSelectColumnEmail, SystemUserSelectColumnTelephone, SystemUserSelectColumnMobile, SystemUserSelectColumnUkey, SystemUserSelectColumnMkey, SystemUserSelectColumnAppVersion, SystemUserSelectColumnCreatedAt, SystemUserSelectColumnCreateBy, SystemUserSelectColumnUpdateAt, SystemUserSelectColumnUpdateBy, SystemUserSelectColumnDeleteAt, SystemUserSelectColumnDeleteBy, SystemUserSelectColumnIsDelete, SystemUserSelectColumnRemarks:
		return true
	}
	return false
}

func (e SystemUserSelectColumn) String() string {
	return string(e)
}

func (e *SystemUserSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemUserSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemUserSelectColumn", str)
	}
	return nil
}

func (e SystemUserSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
