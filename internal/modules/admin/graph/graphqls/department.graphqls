"""
部门


columns and relationships of "department"
"""
type Department {
	"""
	创建时间
	"""
	create_at: Timestamptz
	"""
	创建人
	"""
	create_by: String
	"""
	删除时间
	"""
	delete_at: Timestamptz
	"""
	删除人
	"""
	delete_by: String
	"""
	部门类型
	"""
	department_category: Int
	"""
	部门编号
	"""
	department_code: String
	"""
	部门ID
	"""
	department_id: String!
	"""
	部门名称
	"""
	department_name: String
	"""
	企业ID
	"""
	enterprise_id: String!
	"""
	ID
	"""
	id: Bigint!
	"""
	排序
	"""
	internal_number: Int
	"""
	是否删除
	"""
	is_delete: Boolean!
	"""
	备注
	"""
	remarks: String
	"""
	上级部门ID
	"""
	superior_department_id: String
	"""
	修改时间
	"""
	update_at: Timestamptz
	"""
	修改人
	"""
	update_by: String
}
"""
aggregated selection of "department"
"""
type DepartmentAggregate {
	aggregate: DepartmentAggregateFields
	nodes: [Department!]!
}
"""
aggregate fields of "department"
"""
type DepartmentAggregateFields {
	avg: DepartmentAvgFields
	count(columns: [DepartmentSelectColumn!], distinct: Boolean): Int
	max: DepartmentMaxFields
	min: DepartmentMinFields
	stddev: DepartmentStddevFields
	stddev_pop: DepartmentStddevPopFields
	stddev_samp: DepartmentStddevSampFields
	sum: DepartmentSumFields
	var_pop: DepartmentVarPopFields
	var_samp: DepartmentVarSampFields
	variance: DepartmentVarianceFields
}
"""
order by aggregate values of table "department"
"""
input DepartmentAggregateOrderBy {
	avg: DepartmentAvgOrderBy
	count: OrderBy
	max: DepartmentMaxOrderBy
	min: DepartmentMinOrderBy
	stddev: DepartmentStddevOrderBy
	stddev_pop: DepartmentStddevPopOrderBy
	stddev_samp: DepartmentStddevSampOrderBy
	sum: DepartmentSumOrderBy
	var_pop: DepartmentVarPopOrderBy
	var_samp: DepartmentVarSampOrderBy
	variance: DepartmentVarianceOrderBy
}
"""
input type for inserting array relation for remote table "department"
"""
input DepartmentArrRelInsertInput {
	data: [DepartmentInsertInput!]!
	on_conflict: DepartmentOnConflict
}
"""
aggregate avg on columns
"""
type DepartmentAvgFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by avg() on columns of table "department"
"""
input DepartmentAvgOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
Boolean expression to filter rows from the table "department". All fields are combined with a logical 'AND'.
"""
input DepartmentBoolExp {
	_and: [DepartmentBoolExp]
	_not: DepartmentBoolExp
	_or: [DepartmentBoolExp]
	create_at: TimestamptzComparisonExp
	create_by: StringComparisonExp
	delete_at: TimestamptzComparisonExp
	delete_by: StringComparisonExp
	department_category: IntComparisonExp
	department_code: StringComparisonExp
	department_id: StringComparisonExp
	department_name: StringComparisonExp
	enterprise_id: StringComparisonExp
	id: BigintComparisonExp
	internal_number: IntComparisonExp
	is_delete: BooleanComparisonExp
	remarks: StringComparisonExp
	superior_department_id: StringComparisonExp
	update_at: TimestamptzComparisonExp
	update_by: StringComparisonExp
}
"""
unique or primary key constraints on table "department"
"""
enum DepartmentConstraint {
	"""
	unique or primary key constraint
	"""
	department_pkey
}
"""
input type for incrementing integer column in table "department"
"""
input DepartmentIncInput {
	department_category: Int
	id: Bigint
	internal_number: Int
}
"""
input type for inserting data into table "department"
"""
input DepartmentInsertInput {
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	department_category: Int
	department_code: String
	department_id: String
	department_name: String
	enterprise_id: String
	id: Bigint
	internal_number: Int
	is_delete: Boolean
	remarks: String
	superior_department_id: String
	update_at: Timestamptz
	update_by: String
}
"""
aggregate max on columns
"""
type DepartmentMaxFields {
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	department_category: Int
	department_code: String
	department_id: String
	department_name: String
	enterprise_id: String
	id: Bigint
	internal_number: Int
	remarks: String
	superior_department_id: String
	update_at: Timestamptz
	update_by: String
}
"""
order by max() on columns of table "department"
"""
input DepartmentMaxOrderBy {
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	department_category: OrderBy
	department_code: OrderBy
	department_id: OrderBy
	department_name: OrderBy
	enterprise_id: OrderBy
	id: OrderBy
	internal_number: OrderBy
	remarks: OrderBy
	superior_department_id: OrderBy
	update_at: OrderBy
	update_by: OrderBy
}
"""
aggregate min on columns
"""
type DepartmentMinFields {
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	department_category: Int
	department_code: String
	department_id: String
	department_name: String
	enterprise_id: String
	id: Bigint
	internal_number: Int
	remarks: String
	superior_department_id: String
	update_at: Timestamptz
	update_by: String
}
"""
order by min() on columns of table "department"
"""
input DepartmentMinOrderBy {
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	department_category: OrderBy
	department_code: OrderBy
	department_id: OrderBy
	department_name: OrderBy
	enterprise_id: OrderBy
	id: OrderBy
	internal_number: OrderBy
	remarks: OrderBy
	superior_department_id: OrderBy
	update_at: OrderBy
	update_by: OrderBy
}
"""
response of any mutation on the table "department"
"""
type DepartmentMutationResponse {
	"""
	number of affected rows by the mutation
	"""
	affected_rows: Int!
	"""
	data of the affected rows by the mutation
	"""
	returning: [Department!]!
}
"""
input type for inserting object relation for remote table "department"
"""
input DepartmentObjRelInsertInput {
	data: DepartmentInsertInput!
	on_conflict: DepartmentOnConflict
}
"""
on conflict condition type for table "department"
"""
input DepartmentOnConflict {
	constraint: DepartmentConstraint!
	update_columns: [DepartmentUpdateColumn!]!
	where: DepartmentBoolExp
}
"""
ordering options when selecting data from "department"
"""
input DepartmentOrderBy {
	create_at: OrderBy
	create_by: OrderBy
	delete_at: OrderBy
	delete_by: OrderBy
	department_category: OrderBy
	department_code: OrderBy
	department_id: OrderBy
	department_name: OrderBy
	enterprise_id: OrderBy
	id: OrderBy
	internal_number: OrderBy
	is_delete: OrderBy
	remarks: OrderBy
	superior_department_id: OrderBy
	update_at: OrderBy
	update_by: OrderBy
}
"""
primary key columns input for table: "department"
"""
input DepartmentPkColumnsInput {
	"""
	ID
	"""
	id: Bigint!
}
"""
select columns of table "department"
"""
enum DepartmentSelectColumn {
	"""
	column name
	"""
	create_at
	"""
	column name
	"""
	create_by
	"""
	column name
	"""
	delete_at
	"""
	column name
	"""
	delete_by
	"""
	column name
	"""
	department_category
	"""
	column name
	"""
	department_code
	"""
	column name
	"""
	department_id
	"""
	column name
	"""
	department_name
	"""
	column name
	"""
	enterprise_id
	"""
	column name
	"""
	id
	"""
	column name
	"""
	internal_number
	"""
	column name
	"""
	is_delete
	"""
	column name
	"""
	remarks
	"""
	column name
	"""
	superior_department_id
	"""
	column name
	"""
	update_at
	"""
	column name
	"""
	update_by
}
"""
input type for updating data in table "department"
"""
input DepartmentSetInput {
	create_at: Timestamptz
	create_by: String
	delete_at: Timestamptz
	delete_by: String
	department_category: Int
	department_code: String
	department_id: String
	department_name: String
	enterprise_id: String
	id: Bigint
	internal_number: Int
	is_delete: Boolean
	remarks: String
	superior_department_id: String
	update_at: Timestamptz
	update_by: String
}
"""
aggregate stddev on columns
"""
type DepartmentStddevFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by stddev() on columns of table "department"
"""
input DepartmentStddevOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
aggregate stddev_pop on columns
"""
type DepartmentStddevPopFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by stddev_pop() on columns of table "department"
"""
input DepartmentStddevPopOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
aggregate stddev_samp on columns
"""
type DepartmentStddevSampFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by stddev_samp() on columns of table "department"
"""
input DepartmentStddevSampOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
aggregate sum on columns
"""
type DepartmentSumFields {
	department_category: Int
	id: Bigint
	internal_number: Int
}
"""
order by sum() on columns of table "department"
"""
input DepartmentSumOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
update columns of table "department"
"""
enum DepartmentUpdateColumn {
	"""
	column name
	"""
	create_at
	"""
	column name
	"""
	create_by
	"""
	column name
	"""
	delete_at
	"""
	column name
	"""
	delete_by
	"""
	column name
	"""
	department_category
	"""
	column name
	"""
	department_code
	"""
	column name
	"""
	department_id
	"""
	column name
	"""
	department_name
	"""
	column name
	"""
	enterprise_id
	"""
	column name
	"""
	id
	"""
	column name
	"""
	internal_number
	"""
	column name
	"""
	is_delete
	"""
	column name
	"""
	remarks
	"""
	column name
	"""
	superior_department_id
	"""
	column name
	"""
	update_at
	"""
	column name
	"""
	update_by
}
"""
aggregate var_pop on columns
"""
type DepartmentVarPopFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by var_pop() on columns of table "department"
"""
input DepartmentVarPopOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
aggregate var_samp on columns
"""
type DepartmentVarSampFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by var_samp() on columns of table "department"
"""
input DepartmentVarSampOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
"""
aggregate variance on columns
"""
type DepartmentVarianceFields {
	department_category: Float
	id: Float
	internal_number: Float
}
"""
order by variance() on columns of table "department"
"""
input DepartmentVarianceOrderBy {
	department_category: OrderBy
	id: OrderBy
	internal_number: OrderBy
}
extend type Mutation {
	"""
	delete data from the table: "department"
	"""
	delete_department("""
	filter the rows which have to be deleted
	"""
	where: DepartmentBoolExp!): DepartmentMutationResponse
	"""
	delete single row from the table: "department"
	"""
	delete_department_by_pk("""
	ID
	"""
	id: Bigint!): Department
	"""
	insert data into the table: "department"
	"""
	insert_department("""
	the rows to be inserted
	"""
	objects: [DepartmentInsertInput!]!, """
	on conflict condition
	"""
	on_conflict: DepartmentOnConflict): DepartmentMutationResponse
	"""
	insert a single row into the table: "department"
	"""
	insert_department_one("""
	the row to be inserted
	"""
	object: DepartmentInsertInput!, """
	on conflict condition
	"""
	on_conflict: DepartmentOnConflict): Department
	"""
	update data of the table: "department"
	"""
	update_department("""
	increments the integer columns with given value of the filtered values
	"""
	_inc: DepartmentIncInput, """
	sets the columns of the filtered rows to the given values
	"""
	_set: DepartmentSetInput, """
	filter the rows which have to be updated
	"""
	where: DepartmentBoolExp!): DepartmentMutationResponse
	"""
	update single row of the table: "department"
	"""
	update_department_by_pk("""
	increments the integer columns with given value of the filtered values
	"""
	_inc: DepartmentIncInput, """
	sets the columns of the filtered rows to the given values
	"""
	_set: DepartmentSetInput, pk_columns: DepartmentPkColumnsInput!): Department
}
extend type Query {
	"""
	fetch data from the table: "department"
	"""
	department("""
	distinct select on columns
	"""
	distinct_on: [DepartmentSelectColumn!], """
	limit the number of rows returned
	"""
	limit: Int, """
	skip the first n rows. Use only with order_by
	"""
	offset: Int, """
	sort the rows by one or more columns
	"""
	order_by: [DepartmentOrderBy!], """
	filter the rows returned
	"""
	where: DepartmentBoolExp): [Department!]!
	"""
	fetch aggregated fields from the table: "department"
	"""
	department_aggregate("""
	distinct select on columns
	"""
	distinct_on: [DepartmentSelectColumn!], """
	limit the number of rows returned
	"""
	limit: Int, """
	skip the first n rows. Use only with order_by
	"""
	offset: Int, """
	sort the rows by one or more columns
	"""
	order_by: [DepartmentOrderBy!], """
	filter the rows returned
	"""
	where: DepartmentBoolExp): DepartmentAggregate!
	"""
	fetch data from the table: "department" using primary key columns
	"""
	department_by_pk("""
	ID
	"""
	id: Bigint!): Department
}
