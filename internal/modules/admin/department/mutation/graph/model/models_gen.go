// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"VehicleSupervision/internal/modules/admin/department/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// aggregated selection of "department"
type DepartmentAggregate struct {
	Aggregate *DepartmentAggregateFields `json:"aggregate"`
	Nodes     []*model.Department        `json:"nodes"`
}

// aggregate fields of "department"
type DepartmentAggregateFields struct {
	Avg        *DepartmentAvgFields        `json:"avg"`
	Count      *int                        `json:"count"`
	Max        *DepartmentMaxFields        `json:"max"`
	Min        *DepartmentMinFields        `json:"min"`
	Stddev     *DepartmentStddevFields     `json:"stddev"`
	StddevPop  *DepartmentStddevPopFields  `json:"stddev_pop"`
	StddevSamp *DepartmentStddevSampFields `json:"stddev_samp"`
	Sum        *DepartmentSumFields        `json:"sum"`
	VarPop     *DepartmentVarPopFields     `json:"var_pop"`
	VarSamp    *DepartmentVarSampFields    `json:"var_samp"`
	Variance   *DepartmentVarianceFields   `json:"variance"`
}

// order by aggregate values of table "department"
type DepartmentAggregateOrderBy struct {
	Avg        *DepartmentAvgOrderBy        `json:"avg"`
	Count      *model1.OrderBy              `json:"count"`
	Max        *DepartmentMaxOrderBy        `json:"max"`
	Min        *DepartmentMinOrderBy        `json:"min"`
	Stddev     *DepartmentStddevOrderBy     `json:"stddev"`
	StddevPop  *DepartmentStddevPopOrderBy  `json:"stddev_pop"`
	StddevSamp *DepartmentStddevSampOrderBy `json:"stddev_samp"`
	Sum        *DepartmentSumOrderBy        `json:"sum"`
	VarPop     *DepartmentVarPopOrderBy     `json:"var_pop"`
	VarSamp    *DepartmentVarSampOrderBy    `json:"var_samp"`
	Variance   *DepartmentVarianceOrderBy   `json:"variance"`
}

// input type for inserting array relation for remote table "department"
type DepartmentArrRelInsertInput struct {
	Data       []*DepartmentInsertInput `json:"data"`
	OnConflict *DepartmentOnConflict    `json:"on_conflict"`
}

// aggregate avg on columns
type DepartmentAvgFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by avg() on columns of table "department"
type DepartmentAvgOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// Boolean expression to filter rows from the table "department". All fields are combined with a logical 'AND'.
type DepartmentBoolExp struct {
	And                  []*DepartmentBoolExp             `json:"_and"`
	Not                  *DepartmentBoolExp               `json:"_not"`
	Or                   []*DepartmentBoolExp             `json:"_or"`
	CreateAt             *model1.TimestamptzComparisonExp `json:"create_at"`
	CreateBy             *model1.StringComparisonExp      `json:"create_by"`
	DeleteAt             *model1.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy             *model1.StringComparisonExp      `json:"delete_by"`
	DepartmentCategory   *model1.IntComparisonExp         `json:"department_category"`
	DepartmentCode       *model1.StringComparisonExp      `json:"department_code"`
	DepartmentID         *model1.StringComparisonExp      `json:"department_id"`
	DepartmentName       *model1.StringComparisonExp      `json:"department_name"`
	EnterpriseID         *model1.StringComparisonExp      `json:"enterprise_id"`
	ID                   *model1.BigintComparisonExp      `json:"id"`
	InternalNumber       *model1.IntComparisonExp         `json:"internal_number"`
	IsDelete             *model1.BooleanComparisonExp     `json:"is_delete"`
	Remarks              *model1.StringComparisonExp      `json:"remarks"`
	SuperiorDepartmentID *model1.StringComparisonExp      `json:"superior_department_id"`
	UpdateAt             *model1.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy             *model1.StringComparisonExp      `json:"update_by"`
}

// input type for incrementing integer column in table "department"
type DepartmentIncInput struct {
	DepartmentCategory *int   `json:"department_category"`
	ID                 *int64 `json:"id"`
	InternalNumber     *int   `json:"internal_number"`
}

// input type for inserting data into table "department"
type DepartmentInsertInput struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	DepartmentCategory   *int       `json:"department_category"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentID         *string    `json:"department_id"`
	DepartmentName       *string    `json:"department_name"`
	EnterpriseID         *string    `json:"enterprise_id"`
	ID                   *int64     `json:"id"`
	InternalNumber       *int       `json:"internal_number"`
	IsDelete             *bool      `json:"is_delete"`
	Remarks              *string    `json:"remarks"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

// aggregate max on columns
type DepartmentMaxFields struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	DepartmentCategory   *int       `json:"department_category"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentID         *string    `json:"department_id"`
	DepartmentName       *string    `json:"department_name"`
	EnterpriseID         *string    `json:"enterprise_id"`
	ID                   *int64     `json:"id"`
	InternalNumber       *int       `json:"internal_number"`
	Remarks              *string    `json:"remarks"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

// order by max() on columns of table "department"
type DepartmentMaxOrderBy struct {
	CreateAt             *model1.OrderBy `json:"create_at"`
	CreateBy             *model1.OrderBy `json:"create_by"`
	DeleteAt             *model1.OrderBy `json:"delete_at"`
	DeleteBy             *model1.OrderBy `json:"delete_by"`
	DepartmentCategory   *model1.OrderBy `json:"department_category"`
	DepartmentCode       *model1.OrderBy `json:"department_code"`
	DepartmentID         *model1.OrderBy `json:"department_id"`
	DepartmentName       *model1.OrderBy `json:"department_name"`
	EnterpriseID         *model1.OrderBy `json:"enterprise_id"`
	ID                   *model1.OrderBy `json:"id"`
	InternalNumber       *model1.OrderBy `json:"internal_number"`
	Remarks              *model1.OrderBy `json:"remarks"`
	SuperiorDepartmentID *model1.OrderBy `json:"superior_department_id"`
	UpdateAt             *model1.OrderBy `json:"update_at"`
	UpdateBy             *model1.OrderBy `json:"update_by"`
}

// aggregate min on columns
type DepartmentMinFields struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	DepartmentCategory   *int       `json:"department_category"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentID         *string    `json:"department_id"`
	DepartmentName       *string    `json:"department_name"`
	EnterpriseID         *string    `json:"enterprise_id"`
	ID                   *int64     `json:"id"`
	InternalNumber       *int       `json:"internal_number"`
	Remarks              *string    `json:"remarks"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

// order by min() on columns of table "department"
type DepartmentMinOrderBy struct {
	CreateAt             *model1.OrderBy `json:"create_at"`
	CreateBy             *model1.OrderBy `json:"create_by"`
	DeleteAt             *model1.OrderBy `json:"delete_at"`
	DeleteBy             *model1.OrderBy `json:"delete_by"`
	DepartmentCategory   *model1.OrderBy `json:"department_category"`
	DepartmentCode       *model1.OrderBy `json:"department_code"`
	DepartmentID         *model1.OrderBy `json:"department_id"`
	DepartmentName       *model1.OrderBy `json:"department_name"`
	EnterpriseID         *model1.OrderBy `json:"enterprise_id"`
	ID                   *model1.OrderBy `json:"id"`
	InternalNumber       *model1.OrderBy `json:"internal_number"`
	Remarks              *model1.OrderBy `json:"remarks"`
	SuperiorDepartmentID *model1.OrderBy `json:"superior_department_id"`
	UpdateAt             *model1.OrderBy `json:"update_at"`
	UpdateBy             *model1.OrderBy `json:"update_by"`
}

// response of any mutation on the table "department"
type DepartmentMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*model.Department `json:"returning"`
}

// input type for inserting object relation for remote table "department"
type DepartmentObjRelInsertInput struct {
	Data       *DepartmentInsertInput `json:"data"`
	OnConflict *DepartmentOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "department"
type DepartmentOnConflict struct {
	Constraint    DepartmentConstraint     `json:"constraint"`
	UpdateColumns []DepartmentUpdateColumn `json:"update_columns"`
	Where         *DepartmentBoolExp       `json:"where"`
}

// ordering options when selecting data from "department"
type DepartmentOrderBy struct {
	CreateAt             *model1.OrderBy `json:"create_at"`
	CreateBy             *model1.OrderBy `json:"create_by"`
	DeleteAt             *model1.OrderBy `json:"delete_at"`
	DeleteBy             *model1.OrderBy `json:"delete_by"`
	DepartmentCategory   *model1.OrderBy `json:"department_category"`
	DepartmentCode       *model1.OrderBy `json:"department_code"`
	DepartmentID         *model1.OrderBy `json:"department_id"`
	DepartmentName       *model1.OrderBy `json:"department_name"`
	EnterpriseID         *model1.OrderBy `json:"enterprise_id"`
	ID                   *model1.OrderBy `json:"id"`
	InternalNumber       *model1.OrderBy `json:"internal_number"`
	IsDelete             *model1.OrderBy `json:"is_delete"`
	Remarks              *model1.OrderBy `json:"remarks"`
	SuperiorDepartmentID *model1.OrderBy `json:"superior_department_id"`
	UpdateAt             *model1.OrderBy `json:"update_at"`
	UpdateBy             *model1.OrderBy `json:"update_by"`
}

// primary key columns input for table: "department"
type DepartmentPkColumnsInput struct {
	// ID
	ID int64 `json:"id"`
}

// input type for updating data in table "department"
type DepartmentSetInput struct {
	CreateAt             *time.Time `json:"create_at"`
	CreateBy             *string    `json:"create_by"`
	DeleteAt             *time.Time `json:"delete_at"`
	DeleteBy             *string    `json:"delete_by"`
	DepartmentCategory   *int       `json:"department_category"`
	DepartmentCode       *string    `json:"department_code"`
	DepartmentID         *string    `json:"department_id"`
	DepartmentName       *string    `json:"department_name"`
	EnterpriseID         *string    `json:"enterprise_id"`
	ID                   *int64     `json:"id"`
	InternalNumber       *int       `json:"internal_number"`
	IsDelete             *bool      `json:"is_delete"`
	Remarks              *string    `json:"remarks"`
	SuperiorDepartmentID *string    `json:"superior_department_id"`
	UpdateAt             *time.Time `json:"update_at"`
	UpdateBy             *string    `json:"update_by"`
}

// aggregate stddev on columns
type DepartmentStddevFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by stddev() on columns of table "department"
type DepartmentStddevOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate stddev_pop on columns
type DepartmentStddevPopFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by stddev_pop() on columns of table "department"
type DepartmentStddevPopOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate stddev_samp on columns
type DepartmentStddevSampFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by stddev_samp() on columns of table "department"
type DepartmentStddevSampOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate sum on columns
type DepartmentSumFields struct {
	DepartmentCategory *int   `json:"department_category"`
	ID                 *int64 `json:"id"`
	InternalNumber     *int   `json:"internal_number"`
}

// order by sum() on columns of table "department"
type DepartmentSumOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate var_pop on columns
type DepartmentVarPopFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by var_pop() on columns of table "department"
type DepartmentVarPopOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate var_samp on columns
type DepartmentVarSampFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by var_samp() on columns of table "department"
type DepartmentVarSampOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// aggregate variance on columns
type DepartmentVarianceFields struct {
	DepartmentCategory *float64 `json:"department_category"`
	ID                 *float64 `json:"id"`
	InternalNumber     *float64 `json:"internal_number"`
}

// order by variance() on columns of table "department"
type DepartmentVarianceOrderBy struct {
	DepartmentCategory *model1.OrderBy `json:"department_category"`
	ID                 *model1.OrderBy `json:"id"`
	InternalNumber     *model1.OrderBy `json:"internal_number"`
}

// unique or primary key constraints on table "department"
type DepartmentConstraint string

const (
	// unique or primary key constraint
	DepartmentConstraintDepartmentPkey DepartmentConstraint = "department_pkey"
)

var AllDepartmentConstraint = []DepartmentConstraint{
	DepartmentConstraintDepartmentPkey,
}

func (e DepartmentConstraint) IsValid() bool {
	switch e {
	case DepartmentConstraintDepartmentPkey:
		return true
	}
	return false
}

func (e DepartmentConstraint) String() string {
	return string(e)
}

func (e *DepartmentConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DepartmentConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid department_constraint", str)
	}
	return nil
}

func (e DepartmentConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// select columns of table "department"
type DepartmentSelectColumn string

const (
	// column name
	DepartmentSelectColumnCreateAt DepartmentSelectColumn = "create_at"
	// column name
	DepartmentSelectColumnCreateBy DepartmentSelectColumn = "create_by"
	// column name
	DepartmentSelectColumnDeleteAt DepartmentSelectColumn = "delete_at"
	// column name
	DepartmentSelectColumnDeleteBy DepartmentSelectColumn = "delete_by"
	// column name
	DepartmentSelectColumnDepartmentCategory DepartmentSelectColumn = "department_category"
	// column name
	DepartmentSelectColumnDepartmentCode DepartmentSelectColumn = "department_code"
	// column name
	DepartmentSelectColumnDepartmentID DepartmentSelectColumn = "department_id"
	// column name
	DepartmentSelectColumnDepartmentName DepartmentSelectColumn = "department_name"
	// column name
	DepartmentSelectColumnEnterpriseID DepartmentSelectColumn = "enterprise_id"
	// column name
	DepartmentSelectColumnID DepartmentSelectColumn = "id"
	// column name
	DepartmentSelectColumnInternalNumber DepartmentSelectColumn = "internal_number"
	// column name
	DepartmentSelectColumnIsDelete DepartmentSelectColumn = "is_delete"
	// column name
	DepartmentSelectColumnRemarks DepartmentSelectColumn = "remarks"
	// column name
	DepartmentSelectColumnSuperiorDepartmentID DepartmentSelectColumn = "superior_department_id"
	// column name
	DepartmentSelectColumnUpdateAt DepartmentSelectColumn = "update_at"
	// column name
	DepartmentSelectColumnUpdateBy DepartmentSelectColumn = "update_by"
)

var AllDepartmentSelectColumn = []DepartmentSelectColumn{
	DepartmentSelectColumnCreateAt,
	DepartmentSelectColumnCreateBy,
	DepartmentSelectColumnDeleteAt,
	DepartmentSelectColumnDeleteBy,
	DepartmentSelectColumnDepartmentCategory,
	DepartmentSelectColumnDepartmentCode,
	DepartmentSelectColumnDepartmentID,
	DepartmentSelectColumnDepartmentName,
	DepartmentSelectColumnEnterpriseID,
	DepartmentSelectColumnID,
	DepartmentSelectColumnInternalNumber,
	DepartmentSelectColumnIsDelete,
	DepartmentSelectColumnRemarks,
	DepartmentSelectColumnSuperiorDepartmentID,
	DepartmentSelectColumnUpdateAt,
	DepartmentSelectColumnUpdateBy,
}

func (e DepartmentSelectColumn) IsValid() bool {
	switch e {
	case DepartmentSelectColumnCreateAt, DepartmentSelectColumnCreateBy, DepartmentSelectColumnDeleteAt, DepartmentSelectColumnDeleteBy, DepartmentSelectColumnDepartmentCategory, DepartmentSelectColumnDepartmentCode, DepartmentSelectColumnDepartmentID, DepartmentSelectColumnDepartmentName, DepartmentSelectColumnEnterpriseID, DepartmentSelectColumnID, DepartmentSelectColumnInternalNumber, DepartmentSelectColumnIsDelete, DepartmentSelectColumnRemarks, DepartmentSelectColumnSuperiorDepartmentID, DepartmentSelectColumnUpdateAt, DepartmentSelectColumnUpdateBy:
		return true
	}
	return false
}

func (e DepartmentSelectColumn) String() string {
	return string(e)
}

func (e *DepartmentSelectColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DepartmentSelectColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid department_select_column", str)
	}
	return nil
}

func (e DepartmentSelectColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "department"
type DepartmentUpdateColumn string

const (
	// column name
	DepartmentUpdateColumnCreateAt DepartmentUpdateColumn = "create_at"
	// column name
	DepartmentUpdateColumnCreateBy DepartmentUpdateColumn = "create_by"
	// column name
	DepartmentUpdateColumnDeleteAt DepartmentUpdateColumn = "delete_at"
	// column name
	DepartmentUpdateColumnDeleteBy DepartmentUpdateColumn = "delete_by"
	// column name
	DepartmentUpdateColumnDepartmentCategory DepartmentUpdateColumn = "department_category"
	// column name
	DepartmentUpdateColumnDepartmentCode DepartmentUpdateColumn = "department_code"
	// column name
	DepartmentUpdateColumnDepartmentID DepartmentUpdateColumn = "department_id"
	// column name
	DepartmentUpdateColumnDepartmentName DepartmentUpdateColumn = "department_name"
	// column name
	DepartmentUpdateColumnEnterpriseID DepartmentUpdateColumn = "enterprise_id"
	// column name
	DepartmentUpdateColumnID DepartmentUpdateColumn = "id"
	// column name
	DepartmentUpdateColumnInternalNumber DepartmentUpdateColumn = "internal_number"
	// column name
	DepartmentUpdateColumnIsDelete DepartmentUpdateColumn = "is_delete"
	// column name
	DepartmentUpdateColumnRemarks DepartmentUpdateColumn = "remarks"
	// column name
	DepartmentUpdateColumnSuperiorDepartmentID DepartmentUpdateColumn = "superior_department_id"
	// column name
	DepartmentUpdateColumnUpdateAt DepartmentUpdateColumn = "update_at"
	// column name
	DepartmentUpdateColumnUpdateBy DepartmentUpdateColumn = "update_by"
)

var AllDepartmentUpdateColumn = []DepartmentUpdateColumn{
	DepartmentUpdateColumnCreateAt,
	DepartmentUpdateColumnCreateBy,
	DepartmentUpdateColumnDeleteAt,
	DepartmentUpdateColumnDeleteBy,
	DepartmentUpdateColumnDepartmentCategory,
	DepartmentUpdateColumnDepartmentCode,
	DepartmentUpdateColumnDepartmentID,
	DepartmentUpdateColumnDepartmentName,
	DepartmentUpdateColumnEnterpriseID,
	DepartmentUpdateColumnID,
	DepartmentUpdateColumnInternalNumber,
	DepartmentUpdateColumnIsDelete,
	DepartmentUpdateColumnRemarks,
	DepartmentUpdateColumnSuperiorDepartmentID,
	DepartmentUpdateColumnUpdateAt,
	DepartmentUpdateColumnUpdateBy,
}

func (e DepartmentUpdateColumn) IsValid() bool {
	switch e {
	case DepartmentUpdateColumnCreateAt, DepartmentUpdateColumnCreateBy, DepartmentUpdateColumnDeleteAt, DepartmentUpdateColumnDeleteBy, DepartmentUpdateColumnDepartmentCategory, DepartmentUpdateColumnDepartmentCode, DepartmentUpdateColumnDepartmentID, DepartmentUpdateColumnDepartmentName, DepartmentUpdateColumnEnterpriseID, DepartmentUpdateColumnID, DepartmentUpdateColumnInternalNumber, DepartmentUpdateColumnIsDelete, DepartmentUpdateColumnRemarks, DepartmentUpdateColumnSuperiorDepartmentID, DepartmentUpdateColumnUpdateAt, DepartmentUpdateColumnUpdateBy:
		return true
	}
	return false
}

func (e DepartmentUpdateColumn) String() string {
	return string(e)
}

func (e *DepartmentUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DepartmentUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid department_update_column", str)
	}
	return nil
}

func (e DepartmentUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
