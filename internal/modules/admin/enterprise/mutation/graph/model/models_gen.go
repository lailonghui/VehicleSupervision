// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	model1 "VehicleSupervision/internal/modules/admin/enterprise/model"
	"VehicleSupervision/pkg/graphql/model"
	"fmt"
	"io"
	"strconv"
	"time"
)

// Boolean expression to filter rows from the table "enterprise". All fields are combined with a logical 'AND'.
type EnterpriseBoolExp struct {
	And                              []*EnterpriseBoolExp            `json:"_and"`
	Not                              *EnterpriseBoolExp              `json:"_not"`
	Or                               []*EnterpriseBoolExp            `json:"_or"`
	AssociationReviewBy              *model.TimestamptzComparisonExp `json:"association_review_by"`
	AssociationReviewOpinion         *model.StringComparisonExp      `json:"association_review_opinion"`
	AssociationReviewTime            *model.TimestamptzComparisonExp `json:"association_review_time"`
	BrigadeID                        *model.StringComparisonExp      `json:"brigade_id"`
	BrigadeReviewBy                  *model.StringComparisonExp      `json:"brigade_review_by"`
	BrigadeReviewOpinion             *model.StringComparisonExp      `json:"brigade_review_opinion"`
	BrigadeReviewTime                *model.TimestamptzComparisonExp `json:"brigade_review_time"`
	BusinessLicenseExpiryDate        *model.TimestamptzComparisonExp `json:"business_license_expiry_date"`
	BusinessLicenseIssuanceDate      *model.TimestamptzComparisonExp `json:"business_license_issuance_date"`
	BusinessLicensePhoto             *model.StringComparisonExp      `json:"business_license_photo"`
	BusinessPhoto                    *model.StringComparisonExp      `json:"business_photo"`
	BusinessScope                    *model.IntComparisonExp         `json:"business_scope"`
	CheckStatus                      *model.IntComparisonExp         `json:"check_status"`
	CityID                           *model.BigintComparisonExp      `json:"city_id"`
	ContactPersons                   *model.JsonbComparisonExp       `json:"contact_persons"`
	CreateAt                         *model.TimestamptzComparisonExp `json:"create_at"`
	CreateBy                         *model.StringComparisonExp      `json:"create_by"`
	DeleteAt                         *model.TimestamptzComparisonExp `json:"delete_at"`
	DeleteBy                         *model.StringComparisonExp      `json:"delete_by"`
	DisplayNumber                    *model.IntComparisonExp         `json:"display_number"`
	DistrictID                       *model.BigintComparisonExp      `json:"district_id"`
	EnterpriseAddress                *model.StringComparisonExp      `json:"enterprise_address"`
	EnterpriseCode                   *model.StringComparisonExp      `json:"enterprise_code"`
	EnterpriseID                     *model.StringComparisonExp      `json:"enterprise_id"`
	EnterpriseLevel                  *model.IntComparisonExp         `json:"enterprise_level"`
	EnterpriseName                   *model.StringComparisonExp      `json:"enterprise_name"`
	EnterpriseNature                 *model.IntComparisonExp         `json:"enterprise_nature"`
	EntrustedAgent                   *model.StringComparisonExp      `json:"entrusted_agent"`
	EntrustedAgentIDCard             *model.StringComparisonExp      `json:"entrusted_agent_id_card"`
	EntrustedAgentIDCardPhoto        *model.StringComparisonExp      `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentPhone              *model.StringComparisonExp      `json:"entrusted_agent_phone"`
	FaxNumber                        *model.StringComparisonExp      `json:"fax_number"`
	ID                               *model.BigintComparisonExp      `json:"id"`
	InstitutionCategory              *model.BigintComparisonExp      `json:"institution_category"`
	IsBlack                          *model.BooleanComparisonExp     `json:"is_black"`
	IsDeleted                        *model.BooleanComparisonExp     `json:"is_deleted"`
	IsInput                          *model.BooleanComparisonExp     `json:"is_input"`
	IsInstall                        *model.BooleanComparisonExp     `json:"is_install"`
	IsUploadProvince                 *model.BooleanComparisonExp     `json:"is_upload_province"`
	LegalRepresentative              *model.StringComparisonExp      `json:"legal_representative"`
	LegalRepresentativeIDCard        *model.StringComparisonExp      `json:"legal_representative_id_card"`
	LegalRepresentativeIDCardPhoto   *model.StringComparisonExp      `json:"legal_representative_id_card_photo"`
	LegalRepresentativePhone         *model.StringComparisonExp      `json:"legal_representative_phone"`
	OperatingLicensePhoto            *model.StringComparisonExp      `json:"operating_license_photo"`
	OrganizationCode                 *model.StringComparisonExp      `json:"organization_code"`
	OrganizationCodeCertificatePhoto *model.StringComparisonExp      `json:"organization_code_certificate_photo"`
	PoliceStationID                  *model.StringComparisonExp      `json:"police_station_id"`
	ProvinceID                       *model.BigintComparisonExp      `json:"province_id"`
	RecordAt                         *model.TimestamptzComparisonExp `json:"record_at"`
	RecordBy                         *model.StringComparisonExp      `json:"record_by"`
	Remarks                          *model.StringComparisonExp      `json:"remarks"`
	Score                            *model.IntComparisonExp         `json:"score"`
	SuperiorEnterpriseID             *model.StringComparisonExp      `json:"superior_enterprise_id"`
	UpdateAt                         *model.TimestamptzComparisonExp `json:"update_at"`
	UpdateBy                         *model.StringComparisonExp      `json:"update_by"`
	UpdateTimeIn                     *model.TimestamptzComparisonExp `json:"update_time_in"`
}

// input type for incrementing integer column in table "enterprise"
type EnterpriseIncInput struct {
	BusinessScope       *int   `json:"business_scope"`
	CheckStatus         *int   `json:"check_status"`
	CityID              *int64 `json:"city_id"`
	DisplayNumber       *int   `json:"display_number"`
	DistrictID          *int64 `json:"district_id"`
	EnterpriseLevel     *int   `json:"enterprise_level"`
	EnterpriseNature    *int   `json:"enterprise_nature"`
	ID                  *int64 `json:"id"`
	InstitutionCategory *int64 `json:"institution_category"`
	ProvinceID          *int64 `json:"province_id"`
	Score               *int   `json:"score"`
}

// input type for inserting data into table "enterprise"
type EnterpriseInsertInput struct {
	AssociationReviewBy              *time.Time `json:"association_review_by"`
	AssociationReviewOpinion         *string    `json:"association_review_opinion"`
	AssociationReviewTime            *time.Time `json:"association_review_time"`
	BrigadeID                        *string    `json:"brigade_id"`
	BrigadeReviewBy                  *string    `json:"brigade_review_by"`
	BrigadeReviewOpinion             *string    `json:"brigade_review_opinion"`
	BrigadeReviewTime                *time.Time `json:"brigade_review_time"`
	BusinessLicenseExpiryDate        *time.Time `json:"business_license_expiry_date"`
	BusinessLicenseIssuanceDate      *time.Time `json:"business_license_issuance_date"`
	BusinessLicensePhoto             *string    `json:"business_license_photo"`
	BusinessPhoto                    *string    `json:"business_photo"`
	BusinessScope                    *int       `json:"business_scope"`
	CheckStatus                      *int       `json:"check_status"`
	CityID                           *int64     `json:"city_id"`
	ContactPersons                   *string    `json:"contact_persons"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	DisplayNumber                    *int       `json:"display_number"`
	DistrictID                       *int64     `json:"district_id"`
	EnterpriseAddress                *string    `json:"enterprise_address"`
	EnterpriseCode                   *string    `json:"enterprise_code"`
	EnterpriseID                     *string    `json:"enterprise_id"`
	EnterpriseLevel                  *int       `json:"enterprise_level"`
	EnterpriseName                   *string    `json:"enterprise_name"`
	EnterpriseNature                 *int       `json:"enterprise_nature"`
	EntrustedAgent                   *string    `json:"entrusted_agent"`
	EntrustedAgentIDCard             *string    `json:"entrusted_agent_id_card"`
	EntrustedAgentIDCardPhoto        *string    `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentPhone              *string    `json:"entrusted_agent_phone"`
	FaxNumber                        *string    `json:"fax_number"`
	ID                               *int64     `json:"id"`
	InstitutionCategory              *int64     `json:"institution_category"`
	IsBlack                          *bool      `json:"is_black"`
	IsDeleted                        *bool      `json:"is_deleted"`
	IsInput                          *bool      `json:"is_input"`
	IsInstall                        *bool      `json:"is_install"`
	IsUploadProvince                 *bool      `json:"is_upload_province"`
	LegalRepresentative              *string    `json:"legal_representative"`
	LegalRepresentativeIDCard        *string    `json:"legal_representative_id_card"`
	LegalRepresentativeIDCardPhoto   *string    `json:"legal_representative_id_card_photo"`
	LegalRepresentativePhone         *string    `json:"legal_representative_phone"`
	OperatingLicensePhoto            *string    `json:"operating_license_photo"`
	OrganizationCode                 *string    `json:"organization_code"`
	OrganizationCodeCertificatePhoto *string    `json:"organization_code_certificate_photo"`
	PoliceStationID                  *string    `json:"police_station_id"`
	ProvinceID                       *int64     `json:"province_id"`
	RecordAt                         *time.Time `json:"record_at"`
	RecordBy                         *string    `json:"record_by"`
	Remarks                          *string    `json:"remarks"`
	Score                            *int       `json:"score"`
	SuperiorEnterpriseID             *string    `json:"superior_enterprise_id"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	UpdateTimeIn                     *time.Time `json:"update_time_in"`
}

// response of any mutation on the table "enterprise"
type EnterpriseMutationResponse struct {
	// number of affected rows by the mutation
	AffectedRows int `json:"affected_rows"`
	// data of the affected rows by the mutation
	Returning []*model1.Enterprise `json:"returning"`
}

// input type for inserting object relation for remote table "enterprise"
type EnterpriseObjRelInsertInput struct {
	Data       *EnterpriseInsertInput `json:"data"`
	OnConflict *EnterpriseOnConflict  `json:"on_conflict"`
}

// on conflict condition type for table "enterprise"
type EnterpriseOnConflict struct {
	Constraint    EnterpriseConstraint     `json:"constraint"`
	UpdateColumns []EnterpriseUpdateColumn `json:"update_columns"`
	Where         *EnterpriseBoolExp       `json:"where"`
}

// primary key columns input for table: "enterprise"
type EnterprisePkColumnsInput struct {
	// ID
	ID int64 `json:"id"`
}

// input type for updating data in table "enterprise"
type EnterpriseSetInput struct {
	AssociationReviewBy              *time.Time `json:"association_review_by"`
	AssociationReviewOpinion         *string    `json:"association_review_opinion"`
	AssociationReviewTime            *time.Time `json:"association_review_time"`
	BrigadeID                        *string    `json:"brigade_id"`
	BrigadeReviewBy                  *string    `json:"brigade_review_by"`
	BrigadeReviewOpinion             *string    `json:"brigade_review_opinion"`
	BrigadeReviewTime                *time.Time `json:"brigade_review_time"`
	BusinessLicenseExpiryDate        *time.Time `json:"business_license_expiry_date"`
	BusinessLicenseIssuanceDate      *time.Time `json:"business_license_issuance_date"`
	BusinessLicensePhoto             *string    `json:"business_license_photo"`
	BusinessPhoto                    *string    `json:"business_photo"`
	BusinessScope                    *int       `json:"business_scope"`
	CheckStatus                      *int       `json:"check_status"`
	CityID                           *int64     `json:"city_id"`
	ContactPersons                   *string    `json:"contact_persons"`
	CreateAt                         *time.Time `json:"create_at"`
	CreateBy                         *string    `json:"create_by"`
	DeleteAt                         *time.Time `json:"delete_at"`
	DeleteBy                         *string    `json:"delete_by"`
	DisplayNumber                    *int       `json:"display_number"`
	DistrictID                       *int64     `json:"district_id"`
	EnterpriseAddress                *string    `json:"enterprise_address"`
	EnterpriseCode                   *string    `json:"enterprise_code"`
	EnterpriseID                     *string    `json:"enterprise_id"`
	EnterpriseLevel                  *int       `json:"enterprise_level"`
	EnterpriseName                   *string    `json:"enterprise_name"`
	EnterpriseNature                 *int       `json:"enterprise_nature"`
	EntrustedAgent                   *string    `json:"entrusted_agent"`
	EntrustedAgentIDCard             *string    `json:"entrusted_agent_id_card"`
	EntrustedAgentIDCardPhoto        *string    `json:"entrusted_agent_id_card_photo"`
	EntrustedAgentPhone              *string    `json:"entrusted_agent_phone"`
	FaxNumber                        *string    `json:"fax_number"`
	ID                               *int64     `json:"id"`
	InstitutionCategory              *int64     `json:"institution_category"`
	IsBlack                          *bool      `json:"is_black"`
	IsDeleted                        *bool      `json:"is_deleted"`
	IsInput                          *bool      `json:"is_input"`
	IsInstall                        *bool      `json:"is_install"`
	IsUploadProvince                 *bool      `json:"is_upload_province"`
	LegalRepresentative              *string    `json:"legal_representative"`
	LegalRepresentativeIDCard        *string    `json:"legal_representative_id_card"`
	LegalRepresentativeIDCardPhoto   *string    `json:"legal_representative_id_card_photo"`
	LegalRepresentativePhone         *string    `json:"legal_representative_phone"`
	OperatingLicensePhoto            *string    `json:"operating_license_photo"`
	OrganizationCode                 *string    `json:"organization_code"`
	OrganizationCodeCertificatePhoto *string    `json:"organization_code_certificate_photo"`
	PoliceStationID                  *string    `json:"police_station_id"`
	ProvinceID                       *int64     `json:"province_id"`
	RecordAt                         *time.Time `json:"record_at"`
	RecordBy                         *string    `json:"record_by"`
	Remarks                          *string    `json:"remarks"`
	Score                            *int       `json:"score"`
	SuperiorEnterpriseID             *string    `json:"superior_enterprise_id"`
	UpdateAt                         *time.Time `json:"update_at"`
	UpdateBy                         *string    `json:"update_by"`
	UpdateTimeIn                     *time.Time `json:"update_time_in"`
}

// unique or primary key constraints on table "enterprise"
type EnterpriseConstraint string

const (
	// unique or primary key constraint
	EnterpriseConstraintNewtablePk EnterpriseConstraint = "newtable_pk"
)

var AllEnterpriseConstraint = []EnterpriseConstraint{
	EnterpriseConstraintNewtablePk,
}

func (e EnterpriseConstraint) IsValid() bool {
	switch e {
	case EnterpriseConstraintNewtablePk:
		return true
	}
	return false
}

func (e EnterpriseConstraint) String() string {
	return string(e)
}

func (e *EnterpriseConstraint) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseConstraint(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid enterprise_constraint", str)
	}
	return nil
}

func (e EnterpriseConstraint) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// update columns of table "enterprise"
type EnterpriseUpdateColumn string

const (
	// column name
	EnterpriseUpdateColumnAssociationReviewBy EnterpriseUpdateColumn = "association_review_by"
	// column name
	EnterpriseUpdateColumnAssociationReviewOpinion EnterpriseUpdateColumn = "association_review_opinion"
	// column name
	EnterpriseUpdateColumnAssociationReviewTime EnterpriseUpdateColumn = "association_review_time"
	// column name
	EnterpriseUpdateColumnBrigadeID EnterpriseUpdateColumn = "brigade_id"
	// column name
	EnterpriseUpdateColumnBrigadeReviewBy EnterpriseUpdateColumn = "brigade_review_by"
	// column name
	EnterpriseUpdateColumnBrigadeReviewOpinion EnterpriseUpdateColumn = "brigade_review_opinion"
	// column name
	EnterpriseUpdateColumnBrigadeReviewTime EnterpriseUpdateColumn = "brigade_review_time"
	// column name
	EnterpriseUpdateColumnBusinessLicenseExpiryDate EnterpriseUpdateColumn = "business_license_expiry_date"
	// column name
	EnterpriseUpdateColumnBusinessLicenseIssuanceDate EnterpriseUpdateColumn = "business_license_issuance_date"
	// column name
	EnterpriseUpdateColumnBusinessLicensePhoto EnterpriseUpdateColumn = "business_license_photo"
	// column name
	EnterpriseUpdateColumnBusinessPhoto EnterpriseUpdateColumn = "business_photo"
	// column name
	EnterpriseUpdateColumnBusinessScope EnterpriseUpdateColumn = "business_scope"
	// column name
	EnterpriseUpdateColumnCheckStatus EnterpriseUpdateColumn = "check_status"
	// column name
	EnterpriseUpdateColumnCityID EnterpriseUpdateColumn = "city_id"
	// column name
	EnterpriseUpdateColumnContactPersons EnterpriseUpdateColumn = "contact_persons"
	// column name
	EnterpriseUpdateColumnCreateAt EnterpriseUpdateColumn = "create_at"
	// column name
	EnterpriseUpdateColumnCreateBy EnterpriseUpdateColumn = "create_by"
	// column name
	EnterpriseUpdateColumnDeleteAt EnterpriseUpdateColumn = "delete_at"
	// column name
	EnterpriseUpdateColumnDeleteBy EnterpriseUpdateColumn = "delete_by"
	// column name
	EnterpriseUpdateColumnDisplayNumber EnterpriseUpdateColumn = "display_number"
	// column name
	EnterpriseUpdateColumnDistrictID EnterpriseUpdateColumn = "district_id"
	// column name
	EnterpriseUpdateColumnEnterpriseAddress EnterpriseUpdateColumn = "enterprise_address"
	// column name
	EnterpriseUpdateColumnEnterpriseCode EnterpriseUpdateColumn = "enterprise_code"
	// column name
	EnterpriseUpdateColumnEnterpriseID EnterpriseUpdateColumn = "enterprise_id"
	// column name
	EnterpriseUpdateColumnEnterpriseLevel EnterpriseUpdateColumn = "enterprise_level"
	// column name
	EnterpriseUpdateColumnEnterpriseName EnterpriseUpdateColumn = "enterprise_name"
	// column name
	EnterpriseUpdateColumnEnterpriseNature EnterpriseUpdateColumn = "enterprise_nature"
	// column name
	EnterpriseUpdateColumnEntrustedAgent EnterpriseUpdateColumn = "entrusted_agent"
	// column name
	EnterpriseUpdateColumnEntrustedAgentIDCard EnterpriseUpdateColumn = "entrusted_agent_id_card"
	// column name
	EnterpriseUpdateColumnEntrustedAgentIDCardPhoto EnterpriseUpdateColumn = "entrusted_agent_id_card_photo"
	// column name
	EnterpriseUpdateColumnEntrustedAgentPhone EnterpriseUpdateColumn = "entrusted_agent_phone"
	// column name
	EnterpriseUpdateColumnFaxNumber EnterpriseUpdateColumn = "fax_number"
	// column name
	EnterpriseUpdateColumnID EnterpriseUpdateColumn = "id"
	// column name
	EnterpriseUpdateColumnInstitutionCategory EnterpriseUpdateColumn = "institution_category"
	// column name
	EnterpriseUpdateColumnIsBlack EnterpriseUpdateColumn = "is_black"
	// column name
	EnterpriseUpdateColumnIsDeleted EnterpriseUpdateColumn = "is_deleted"
	// column name
	EnterpriseUpdateColumnIsInput EnterpriseUpdateColumn = "is_input"
	// column name
	EnterpriseUpdateColumnIsInstall EnterpriseUpdateColumn = "is_install"
	// column name
	EnterpriseUpdateColumnIsUploadProvince EnterpriseUpdateColumn = "is_upload_province"
	// column name
	EnterpriseUpdateColumnLegalRepresentative EnterpriseUpdateColumn = "legal_representative"
	// column name
	EnterpriseUpdateColumnLegalRepresentativeIDCard EnterpriseUpdateColumn = "legal_representative_id_card"
	// column name
	EnterpriseUpdateColumnLegalRepresentativeIDCardPhoto EnterpriseUpdateColumn = "legal_representative_id_card_photo"
	// column name
	EnterpriseUpdateColumnLegalRepresentativePhone EnterpriseUpdateColumn = "legal_representative_phone"
	// column name
	EnterpriseUpdateColumnOperatingLicensePhoto EnterpriseUpdateColumn = "operating_license_photo"
	// column name
	EnterpriseUpdateColumnOrganizationCode EnterpriseUpdateColumn = "organization_code"
	// column name
	EnterpriseUpdateColumnOrganizationCodeCertificatePhoto EnterpriseUpdateColumn = "organization_code_certificate_photo"
	// column name
	EnterpriseUpdateColumnPoliceStationID EnterpriseUpdateColumn = "police_station_id"
	// column name
	EnterpriseUpdateColumnProvinceID EnterpriseUpdateColumn = "province_id"
	// column name
	EnterpriseUpdateColumnRecordAt EnterpriseUpdateColumn = "record_at"
	// column name
	EnterpriseUpdateColumnRecordBy EnterpriseUpdateColumn = "record_by"
	// column name
	EnterpriseUpdateColumnRemarks EnterpriseUpdateColumn = "remarks"
	// column name
	EnterpriseUpdateColumnScore EnterpriseUpdateColumn = "score"
	// column name
	EnterpriseUpdateColumnSuperiorEnterpriseID EnterpriseUpdateColumn = "superior_enterprise_id"
	// column name
	EnterpriseUpdateColumnUpdateAt EnterpriseUpdateColumn = "update_at"
	// column name
	EnterpriseUpdateColumnUpdateBy EnterpriseUpdateColumn = "update_by"
	// column name
	EnterpriseUpdateColumnUpdateTimeIn EnterpriseUpdateColumn = "update_time_in"
)

var AllEnterpriseUpdateColumn = []EnterpriseUpdateColumn{
	EnterpriseUpdateColumnAssociationReviewBy,
	EnterpriseUpdateColumnAssociationReviewOpinion,
	EnterpriseUpdateColumnAssociationReviewTime,
	EnterpriseUpdateColumnBrigadeID,
	EnterpriseUpdateColumnBrigadeReviewBy,
	EnterpriseUpdateColumnBrigadeReviewOpinion,
	EnterpriseUpdateColumnBrigadeReviewTime,
	EnterpriseUpdateColumnBusinessLicenseExpiryDate,
	EnterpriseUpdateColumnBusinessLicenseIssuanceDate,
	EnterpriseUpdateColumnBusinessLicensePhoto,
	EnterpriseUpdateColumnBusinessPhoto,
	EnterpriseUpdateColumnBusinessScope,
	EnterpriseUpdateColumnCheckStatus,
	EnterpriseUpdateColumnCityID,
	EnterpriseUpdateColumnContactPersons,
	EnterpriseUpdateColumnCreateAt,
	EnterpriseUpdateColumnCreateBy,
	EnterpriseUpdateColumnDeleteAt,
	EnterpriseUpdateColumnDeleteBy,
	EnterpriseUpdateColumnDisplayNumber,
	EnterpriseUpdateColumnDistrictID,
	EnterpriseUpdateColumnEnterpriseAddress,
	EnterpriseUpdateColumnEnterpriseCode,
	EnterpriseUpdateColumnEnterpriseID,
	EnterpriseUpdateColumnEnterpriseLevel,
	EnterpriseUpdateColumnEnterpriseName,
	EnterpriseUpdateColumnEnterpriseNature,
	EnterpriseUpdateColumnEntrustedAgent,
	EnterpriseUpdateColumnEntrustedAgentIDCard,
	EnterpriseUpdateColumnEntrustedAgentIDCardPhoto,
	EnterpriseUpdateColumnEntrustedAgentPhone,
	EnterpriseUpdateColumnFaxNumber,
	EnterpriseUpdateColumnID,
	EnterpriseUpdateColumnInstitutionCategory,
	EnterpriseUpdateColumnIsBlack,
	EnterpriseUpdateColumnIsDeleted,
	EnterpriseUpdateColumnIsInput,
	EnterpriseUpdateColumnIsInstall,
	EnterpriseUpdateColumnIsUploadProvince,
	EnterpriseUpdateColumnLegalRepresentative,
	EnterpriseUpdateColumnLegalRepresentativeIDCard,
	EnterpriseUpdateColumnLegalRepresentativeIDCardPhoto,
	EnterpriseUpdateColumnLegalRepresentativePhone,
	EnterpriseUpdateColumnOperatingLicensePhoto,
	EnterpriseUpdateColumnOrganizationCode,
	EnterpriseUpdateColumnOrganizationCodeCertificatePhoto,
	EnterpriseUpdateColumnPoliceStationID,
	EnterpriseUpdateColumnProvinceID,
	EnterpriseUpdateColumnRecordAt,
	EnterpriseUpdateColumnRecordBy,
	EnterpriseUpdateColumnRemarks,
	EnterpriseUpdateColumnScore,
	EnterpriseUpdateColumnSuperiorEnterpriseID,
	EnterpriseUpdateColumnUpdateAt,
	EnterpriseUpdateColumnUpdateBy,
	EnterpriseUpdateColumnUpdateTimeIn,
}

func (e EnterpriseUpdateColumn) IsValid() bool {
	switch e {
	case EnterpriseUpdateColumnAssociationReviewBy, EnterpriseUpdateColumnAssociationReviewOpinion, EnterpriseUpdateColumnAssociationReviewTime, EnterpriseUpdateColumnBrigadeID, EnterpriseUpdateColumnBrigadeReviewBy, EnterpriseUpdateColumnBrigadeReviewOpinion, EnterpriseUpdateColumnBrigadeReviewTime, EnterpriseUpdateColumnBusinessLicenseExpiryDate, EnterpriseUpdateColumnBusinessLicenseIssuanceDate, EnterpriseUpdateColumnBusinessLicensePhoto, EnterpriseUpdateColumnBusinessPhoto, EnterpriseUpdateColumnBusinessScope, EnterpriseUpdateColumnCheckStatus, EnterpriseUpdateColumnCityID, EnterpriseUpdateColumnContactPersons, EnterpriseUpdateColumnCreateAt, EnterpriseUpdateColumnCreateBy, EnterpriseUpdateColumnDeleteAt, EnterpriseUpdateColumnDeleteBy, EnterpriseUpdateColumnDisplayNumber, EnterpriseUpdateColumnDistrictID, EnterpriseUpdateColumnEnterpriseAddress, EnterpriseUpdateColumnEnterpriseCode, EnterpriseUpdateColumnEnterpriseID, EnterpriseUpdateColumnEnterpriseLevel, EnterpriseUpdateColumnEnterpriseName, EnterpriseUpdateColumnEnterpriseNature, EnterpriseUpdateColumnEntrustedAgent, EnterpriseUpdateColumnEntrustedAgentIDCard, EnterpriseUpdateColumnEntrustedAgentIDCardPhoto, EnterpriseUpdateColumnEntrustedAgentPhone, EnterpriseUpdateColumnFaxNumber, EnterpriseUpdateColumnID, EnterpriseUpdateColumnInstitutionCategory, EnterpriseUpdateColumnIsBlack, EnterpriseUpdateColumnIsDeleted, EnterpriseUpdateColumnIsInput, EnterpriseUpdateColumnIsInstall, EnterpriseUpdateColumnIsUploadProvince, EnterpriseUpdateColumnLegalRepresentative, EnterpriseUpdateColumnLegalRepresentativeIDCard, EnterpriseUpdateColumnLegalRepresentativeIDCardPhoto, EnterpriseUpdateColumnLegalRepresentativePhone, EnterpriseUpdateColumnOperatingLicensePhoto, EnterpriseUpdateColumnOrganizationCode, EnterpriseUpdateColumnOrganizationCodeCertificatePhoto, EnterpriseUpdateColumnPoliceStationID, EnterpriseUpdateColumnProvinceID, EnterpriseUpdateColumnRecordAt, EnterpriseUpdateColumnRecordBy, EnterpriseUpdateColumnRemarks, EnterpriseUpdateColumnScore, EnterpriseUpdateColumnSuperiorEnterpriseID, EnterpriseUpdateColumnUpdateAt, EnterpriseUpdateColumnUpdateBy, EnterpriseUpdateColumnUpdateTimeIn:
		return true
	}
	return false
}

func (e EnterpriseUpdateColumn) String() string {
	return string(e)
}

func (e *EnterpriseUpdateColumn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseUpdateColumn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid enterprise_update_column", str)
	}
	return nil
}

func (e EnterpriseUpdateColumn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
