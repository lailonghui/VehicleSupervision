schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

scalar bigint

# expression to compare columns of type bigint. All fields are combined with logical 'AND'.
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

# expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

# 动态监管抽查主表
#
#
# columns and relationships of "dynamic_supervision"
#
type dynamic_supervision {
    # 抽查人员
    check_user_id: String

    # 抽查人员位置的城市ID
    city_id: String

    # 创建时间
    create_at: timestamptz!

    # 创建人
    created_by: String!

    # 日
    day: Int

    # 删除时间
    deleted_at: timestamptz

    # 删除人
    deleted_by: String

    # 抽查人员位置的区域ID
    district_id: String

    # 主键
    #
    #
    id: bigint!

    # 是否被删除
    is_delete: Boolean

    # 月
    month: Int

    # 抽查人员位置的省份ID
    province_id: String

    # 抽查日期
    spot_check_date: timestamptz

    # 抽查数量
    spot_check_number: Int

    # 抽查比例
    spot_check_ratio: numeric

    # 抽查总数
    spot_check_total_number: Int

    # 联合主键
    supervision_id: String!

    # 总车辆数
    total_number_vehicle: Int

    # 修改时间
    updated_at: timestamptz

    # 修改人
    updated_by: String

    # 年
    year: Int
}

# aggregated selection of "dynamic_supervision"
type dynamic_supervision_aggregate {
    aggregate: dynamic_supervision_aggregate_fields
    nodes: [dynamic_supervision!]!
}

# aggregate fields of "dynamic_supervision"
type dynamic_supervision_aggregate_fields {
    avg: dynamic_supervision_avg_fields
    count(columns: [dynamic_supervision_select_column!], distinct: Boolean): Int
    max: dynamic_supervision_max_fields
    min: dynamic_supervision_min_fields
    stddev: dynamic_supervision_stddev_fields
    stddev_pop: dynamic_supervision_stddev_pop_fields
    stddev_samp: dynamic_supervision_stddev_samp_fields
    sum: dynamic_supervision_sum_fields
    var_pop: dynamic_supervision_var_pop_fields
    var_samp: dynamic_supervision_var_samp_fields
    variance: dynamic_supervision_variance_fields
}

# order by aggregate values of table "dynamic_supervision"
input dynamic_supervision_aggregate_order_by {
    avg: dynamic_supervision_avg_order_by
    count: order_by
    max: dynamic_supervision_max_order_by
    min: dynamic_supervision_min_order_by
    stddev: dynamic_supervision_stddev_order_by
    stddev_pop: dynamic_supervision_stddev_pop_order_by
    stddev_samp: dynamic_supervision_stddev_samp_order_by
    sum: dynamic_supervision_sum_order_by
    var_pop: dynamic_supervision_var_pop_order_by
    var_samp: dynamic_supervision_var_samp_order_by
    variance: dynamic_supervision_variance_order_by
}

# input type for inserting array relation for remote table "dynamic_supervision"
input dynamic_supervision_arr_rel_insert_input {
    data: [dynamic_supervision_insert_input!]!
    on_conflict: dynamic_supervision_on_conflict
}

# aggregate avg on columns
type dynamic_supervision_avg_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

# order by avg() on columns of table "dynamic_supervision"
input dynamic_supervision_avg_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

# Boolean expression to filter rows from the table "dynamic_supervision". All fields are combined with a logical 'AND'.
input dynamic_supervision_bool_exp {
    _and: [dynamic_supervision_bool_exp]
    _not: dynamic_supervision_bool_exp
    _or: [dynamic_supervision_bool_exp]
    check_user_id: String_comparison_exp
    city_id: String_comparison_exp
    create_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    day: Int_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    district_id: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    month: Int_comparison_exp
    province_id: String_comparison_exp
    spot_check_date: timestamptz_comparison_exp
    spot_check_number: Int_comparison_exp
    spot_check_ratio: numeric_comparison_exp
    spot_check_total_number: Int_comparison_exp
    supervision_id: String_comparison_exp
    total_number_vehicle: Int_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    year: Int_comparison_exp
}

# unique or primary key constraints on table "dynamic_supervision"
enum dynamic_supervision_constraint {
    # unique or primary key constraint
    dynamic_supervision_pkey
}

# input type for incrementing integer column in table "dynamic_supervision"
input dynamic_supervision_inc_input {
    day: Int
    id: bigint
    month: Int
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    total_number_vehicle: Int
    year: Int
}

# input type for inserting data into table "dynamic_supervision"
input dynamic_supervision_insert_input {
    check_user_id: String
    city_id: String
    create_at: timestamptz
    created_by: String
    day: Int
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    is_delete: Boolean
    month: Int
    province_id: String
    spot_check_date: timestamptz
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    supervision_id: String
    total_number_vehicle: Int
    updated_at: timestamptz
    updated_by: String
    year: Int
}

# aggregate max on columns
type dynamic_supervision_max_fields {
    check_user_id: String
    city_id: String
    create_at: timestamptz
    created_by: String
    day: Int
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    month: Int
    province_id: String
    spot_check_date: timestamptz
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    supervision_id: String
    total_number_vehicle: Int
    updated_at: timestamptz
    updated_by: String
    year: Int
}

# order by max() on columns of table "dynamic_supervision"
input dynamic_supervision_max_order_by {
    check_user_id: order_by
    city_id: order_by
    create_at: order_by
    created_by: order_by
    day: order_by
    deleted_at: order_by
    deleted_by: order_by
    district_id: order_by
    id: order_by
    month: order_by
    province_id: order_by
    spot_check_date: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    supervision_id: order_by
    total_number_vehicle: order_by
    updated_at: order_by
    updated_by: order_by
    year: order_by
}

# aggregate min on columns
type dynamic_supervision_min_fields {
    check_user_id: String
    city_id: String
    create_at: timestamptz
    created_by: String
    day: Int
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    month: Int
    province_id: String
    spot_check_date: timestamptz
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    supervision_id: String
    total_number_vehicle: Int
    updated_at: timestamptz
    updated_by: String
    year: Int
}

# order by min() on columns of table "dynamic_supervision"
input dynamic_supervision_min_order_by {
    check_user_id: order_by
    city_id: order_by
    create_at: order_by
    created_by: order_by
    day: order_by
    deleted_at: order_by
    deleted_by: order_by
    district_id: order_by
    id: order_by
    month: order_by
    province_id: order_by
    spot_check_date: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    supervision_id: order_by
    total_number_vehicle: order_by
    updated_at: order_by
    updated_by: order_by
    year: order_by
}

# response of any mutation on the table "dynamic_supervision"
type dynamic_supervision_mutation_response {
    # number of affected rows by the mutation
    affected_rows: Int!

    # data of the affected rows by the mutation
    returning: [dynamic_supervision!]!
}

# input type for inserting object relation for remote table "dynamic_supervision"
input dynamic_supervision_obj_rel_insert_input {
    data: dynamic_supervision_insert_input!
    on_conflict: dynamic_supervision_on_conflict
}

# on conflict condition type for table "dynamic_supervision"
input dynamic_supervision_on_conflict {
    constraint: dynamic_supervision_constraint!
    update_columns: [dynamic_supervision_update_column!]!
    where: dynamic_supervision_bool_exp
}

# ordering options when selecting data from "dynamic_supervision"
input dynamic_supervision_order_by {
    check_user_id: order_by
    city_id: order_by
    create_at: order_by
    created_by: order_by
    day: order_by
    deleted_at: order_by
    deleted_by: order_by
    district_id: order_by
    id: order_by
    is_delete: order_by
    month: order_by
    province_id: order_by
    spot_check_date: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    supervision_id: order_by
    total_number_vehicle: order_by
    updated_at: order_by
    updated_by: order_by
    year: order_by
}

# primary key columns input for table: "dynamic_supervision"
input dynamic_supervision_pk_columns_input {
    # 主键
    #
    #
    id: bigint!

    # 联合主键
    supervision_id: String!
}

# select columns of table "dynamic_supervision"
enum dynamic_supervision_select_column {
    # column name
    check_user_id

    # column name
    city_id

    # column name
    create_at

    # column name
    created_by

    # column name
    day

    # column name
    deleted_at

    # column name
    deleted_by

    # column name
    district_id

    # column name
    id

    # column name
    is_delete

    # column name
    month

    # column name
    province_id

    # column name
    spot_check_date

    # column name
    spot_check_number

    # column name
    spot_check_ratio

    # column name
    spot_check_total_number

    # column name
    supervision_id

    # column name
    total_number_vehicle

    # column name
    updated_at

    # column name
    updated_by

    # column name
    year
}

# input type for updating data in table "dynamic_supervision"
input dynamic_supervision_set_input {
    check_user_id: String
    city_id: String
    create_at: timestamptz
    created_by: String
    day: Int
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    is_delete: Boolean
    month: Int
    province_id: String
    spot_check_date: timestamptz
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    supervision_id: String
    total_number_vehicle: Int
    updated_at: timestamptz
    updated_by: String
    year: Int
}

# aggregate stddev on columns
type dynamic_supervision_stddev_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

# order by stddev() on columns of table "dynamic_supervision"
input dynamic_supervision_stddev_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

# aggregate stddev_pop on columns
type dynamic_supervision_stddev_pop_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

# order by stddev_pop() on columns of table "dynamic_supervision"
input dynamic_supervision_stddev_pop_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

# aggregate stddev_samp on columns
type dynamic_supervision_stddev_samp_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

# order by stddev_samp() on columns of table "dynamic_supervision"
input dynamic_supervision_stddev_samp_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

# aggregate sum on columns
type dynamic_supervision_sum_fields {
    day: Int
    id: bigint
    month: Int
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    total_number_vehicle: Int
    year: Int
}

# order by sum() on columns of table "dynamic_supervision"
input dynamic_supervision_sum_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

# update columns of table "dynamic_supervision"
enum dynamic_supervision_update_column {
    # column name
    check_user_id

    # column name
    city_id

    # column name
    create_at

    # column name
    created_by

    # column name
    day

    # column name
    deleted_at

    # column name
    deleted_by

    # column name
    district_id

    # column name
    id

    # column name
    is_delete

    # column name
    month

    # column name
    province_id

    # column name
    spot_check_date

    # column name
    spot_check_number

    # column name
    spot_check_ratio

    # column name
    spot_check_total_number

    # column name
    supervision_id

    # column name
    total_number_vehicle

    # column name
    updated_at

    # column name
    updated_by

    # column name
    year
}

# aggregate var_pop on columns
type dynamic_supervision_var_pop_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

# order by var_pop() on columns of table "dynamic_supervision"
input dynamic_supervision_var_pop_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

# aggregate var_samp on columns
type dynamic_supervision_var_samp_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

# order by var_samp() on columns of table "dynamic_supervision"
input dynamic_supervision_var_samp_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

# aggregate variance on columns
type dynamic_supervision_variance_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

# order by variance() on columns of table "dynamic_supervision"
input dynamic_supervision_variance_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

# expression to compare columns of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

# mutation root
type mutation_root {
    # delete data from the table: "dynamic_supervision"
    delete_dynamic_supervision(
        # filter the rows which have to be deleted
        where: dynamic_supervision_bool_exp!
    ): dynamic_supervision_mutation_response

    # delete single row from the table: "dynamic_supervision"
    delete_dynamic_supervision_by_pk(
        # 主键
        #
        #
        id: bigint!

        # 联合主键
        supervision_id: String!
    ): dynamic_supervision

    # insert data into the table: "dynamic_supervision"
    insert_dynamic_supervision(
        # the rows to be inserted
        objects: [dynamic_supervision_insert_input!]!

        # on conflict condition
        on_conflict: dynamic_supervision_on_conflict
    ): dynamic_supervision_mutation_response

    # insert a single row into the table: "dynamic_supervision"
    insert_dynamic_supervision_one(
        # the row to be inserted
        object: dynamic_supervision_insert_input!

        # on conflict condition
        on_conflict: dynamic_supervision_on_conflict
    ): dynamic_supervision

    # update data of the table: "dynamic_supervision"
    update_dynamic_supervision(
        # increments the integer columns with given value of the filtered values
        _inc: dynamic_supervision_inc_input

        # sets the columns of the filtered rows to the given values
        _set: dynamic_supervision_set_input

        # filter the rows which have to be updated
        where: dynamic_supervision_bool_exp!
    ): dynamic_supervision_mutation_response

    # update single row of the table: "dynamic_supervision"
    update_dynamic_supervision_by_pk(
        # increments the integer columns with given value of the filtered values
        _inc: dynamic_supervision_inc_input

        # sets the columns of the filtered rows to the given values
        _set: dynamic_supervision_set_input
        pk_columns: dynamic_supervision_pk_columns_input!
    ): dynamic_supervision
}

scalar numeric

# expression to compare columns of type numeric. All fields are combined with logical 'AND'.
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

# column ordering options
enum order_by {
    # in the ascending order, nulls last
    asc

    # in the ascending order, nulls first
    asc_nulls_first

    # in the ascending order, nulls last
    asc_nulls_last

    # in the descending order, nulls first
    desc

    # in the descending order, nulls first
    desc_nulls_first

    # in the descending order, nulls last
    desc_nulls_last
}

# query root
type query_root {
    # fetch data from the table: "dynamic_supervision"
    dynamic_supervision(
        # distinct select on columns
        distinct_on: [dynamic_supervision_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [dynamic_supervision_order_by!]

        # filter the rows returned
        where: dynamic_supervision_bool_exp
    ): [dynamic_supervision!]!

    # fetch aggregated fields from the table: "dynamic_supervision"
    dynamic_supervision_aggregate(
        # distinct select on columns
        distinct_on: [dynamic_supervision_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [dynamic_supervision_order_by!]

        # filter the rows returned
        where: dynamic_supervision_bool_exp
    ): dynamic_supervision_aggregate!

    # fetch data from the table: "dynamic_supervision" using primary key columns
    dynamic_supervision_by_pk(
        # 主键
        #
        #
        id: bigint!

        # 联合主键
        supervision_id: String!
    ): dynamic_supervision
}

# expression to compare columns of type String. All fields are combined with logical 'AND'.
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

# subscription root
type subscription_root {
    # fetch data from the table: "dynamic_supervision"
    dynamic_supervision(
        # distinct select on columns
        distinct_on: [dynamic_supervision_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [dynamic_supervision_order_by!]

        # filter the rows returned
        where: dynamic_supervision_bool_exp
    ): [dynamic_supervision!]!

    # fetch aggregated fields from the table: "dynamic_supervision"
    dynamic_supervision_aggregate(
        # distinct select on columns
        distinct_on: [dynamic_supervision_select_column!]

        # limit the number of rows returned
        limit: Int

        # skip the first n rows. Use only with order_by
        offset: Int

        # sort the rows by one or more columns
        order_by: [dynamic_supervision_order_by!]

        # filter the rows returned
        where: dynamic_supervision_bool_exp
    ): dynamic_supervision_aggregate!

    # fetch data from the table: "dynamic_supervision" using primary key columns
    dynamic_supervision_by_pk(
        # 主键
        #
        #
        id: bigint!

        # 联合主键
        supervision_id: String!
    ): dynamic_supervision
}

scalar timestamptz

# expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

