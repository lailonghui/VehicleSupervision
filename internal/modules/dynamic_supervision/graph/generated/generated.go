// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/dynamic_supervision/graph/model"
	model1 "VehicleSupervision/internal/modules/dynamic_supervision/model"
	model2 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	DynamicSpotCheckDisposal struct {
		AnnounceContent               func(childComplexity int) int
		AppPushContent                func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DisposalContent               func(childComplexity int) int
		DisposalMethod                func(childComplexity int) int
		DisposalResult                func(childComplexity int) int
		EnterpriseID                  func(childComplexity int) int
		FeedbackTime                  func(childComplexity int) int
		ID                            func(childComplexity int) int
		ImageAbnormalHandingMeasure   func(childComplexity int) int
		IsAnnounce                    func(childComplexity int) int
		IsAppPush                     func(childComplexity int) int
		IsDeleted                     func(childComplexity int) int
		IsNotify                      func(childComplexity int) int
		IsSmsPush                     func(childComplexity int) int
		NotifyContent                 func(childComplexity int) int
		OperationUser                 func(childComplexity int) int
		SendTime                      func(childComplexity int) int
		SupervisionDetailID           func(childComplexity int) int
		TachographDataDisposalMeasure func(childComplexity int) int
		Telephone                     func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		VehicleID                     func(childComplexity int) int
	}

	DynamicSpotCheckDisposalAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DynamicSpotCheckDisposalAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DynamicSpotCheckDisposalAvgFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalMaxFields struct {
		AnnounceContent               func(childComplexity int) int
		AppPushContent                func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DisposalContent               func(childComplexity int) int
		DisposalMethod                func(childComplexity int) int
		DisposalResult                func(childComplexity int) int
		EnterpriseID                  func(childComplexity int) int
		FeedbackTime                  func(childComplexity int) int
		ID                            func(childComplexity int) int
		ImageAbnormalHandingMeasure   func(childComplexity int) int
		IsAnnounce                    func(childComplexity int) int
		IsAppPush                     func(childComplexity int) int
		IsDeleted                     func(childComplexity int) int
		IsNotify                      func(childComplexity int) int
		IsSmsPush                     func(childComplexity int) int
		NotifyContent                 func(childComplexity int) int
		OperationUser                 func(childComplexity int) int
		SendTime                      func(childComplexity int) int
		SupervisionDetailID           func(childComplexity int) int
		TachographDataDisposalMeasure func(childComplexity int) int
		Telephone                     func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		VehicleID                     func(childComplexity int) int
	}

	DynamicSpotCheckDisposalMinFields struct {
		AnnounceContent               func(childComplexity int) int
		AppPushContent                func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DisposalContent               func(childComplexity int) int
		DisposalMethod                func(childComplexity int) int
		DisposalResult                func(childComplexity int) int
		EnterpriseID                  func(childComplexity int) int
		FeedbackTime                  func(childComplexity int) int
		ID                            func(childComplexity int) int
		ImageAbnormalHandingMeasure   func(childComplexity int) int
		IsAnnounce                    func(childComplexity int) int
		IsAppPush                     func(childComplexity int) int
		IsDeleted                     func(childComplexity int) int
		IsNotify                      func(childComplexity int) int
		IsSmsPush                     func(childComplexity int) int
		NotifyContent                 func(childComplexity int) int
		OperationUser                 func(childComplexity int) int
		SendTime                      func(childComplexity int) int
		SupervisionDetailID           func(childComplexity int) int
		TachographDataDisposalMeasure func(childComplexity int) int
		Telephone                     func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		VehicleID                     func(childComplexity int) int
	}

	DynamicSpotCheckDisposalMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DynamicSpotCheckDisposalStddevFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalStddevPopFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalStddevSampFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalSumFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalVarPopFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalVarSampFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalVarianceFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSupervision struct {
		CheckUserID          func(childComplexity int) int
		CityID               func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		Day                  func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DistrictID           func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Month                func(childComplexity int) int
		ProvinceID           func(childComplexity int) int
		SpotCheckDate        func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		SupervisionID        func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DynamicSupervisionAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DynamicSupervisionAvgFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionDetail struct {
		Assignee                     func(childComplexity int) int
		BusinessScope                func(childComplexity int) int
		Coordinate                   func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		Curve                        func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		DisposalMeasures             func(childComplexity int) int
		DisposalMeasures1            func(childComplexity int) int
		DisposalMeasures2            func(childComplexity int) int
		DisposalMeasures3            func(childComplexity int) int
		DisposalMeasures4            func(childComplexity int) int
		DisposalMeasures5            func(childComplexity int) int
		DisposalMeasures6            func(childComplexity int) int
		DisposalMeasures7            func(childComplexity int) int
		DisposalResults              func(childComplexity int) int
		DisposalResults1             func(childComplexity int) int
		DisposalResults2             func(childComplexity int) int
		DisposalResults3             func(childComplexity int) int
		DisposalResults4             func(childComplexity int) int
		DisposalResults5             func(childComplexity int) int
		DisposalResults6             func(childComplexity int) int
		DisposalResults7             func(childComplexity int) int
		DriverID                     func(childComplexity int) int
		EnterpriseID                 func(childComplexity int) int
		Equipment                    func(childComplexity int) int
		FatigueAlarmTime             func(childComplexity int) int
		FeedbackTime                 func(childComplexity int) int
		GpsSpeed                     func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsDeleted                    func(childComplexity int) int
		IsFatigueDriving             func(childComplexity int) int
		IsLocate                     func(childComplexity int) int
		IsMorningOutage              func(childComplexity int) int
		IsOnline                     func(childComplexity int) int
		IsSend                       func(childComplexity int) int
		IsSpeeding                   func(childComplexity int) int
		IsTachographRecordNormal     func(childComplexity int) int
		LatitudeLongitudeDescription func(childComplexity int) int
		LensOn                       func(childComplexity int) int
		LensPosition                 func(childComplexity int) int
		MonitorEndTime               func(childComplexity int) int
		MonitoringLocation           func(childComplexity int) int
		MonitoringTime               func(childComplexity int) int
		OtherInfraction              func(childComplexity int) int
		Others                       func(childComplexity int) int
		OutageAlarmTime              func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		SpeedAlarmTime               func(childComplexity int) int
		SpeedingSpeed                func(childComplexity int) int
		SupervisionDetailID          func(childComplexity int) int
		SupervisionID                func(childComplexity int) int
		TachographDataException      func(childComplexity int) int
		TachographSpeed              func(childComplexity int) int
		TaxiState                    func(childComplexity int) int
		Trail                        func(childComplexity int) int
		TreatmentTime                func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehicleID                    func(childComplexity int) int
	}

	DynamicSupervisionDetailAggregate struct {
		Aggregate func(childComplexity int) int
	}

	DynamicSupervisionDetailAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DynamicSupervisionDetailAvgFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailMaxFields struct {
		Assignee                     func(childComplexity int) int
		BusinessScope                func(childComplexity int) int
		Coordinate                   func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		Curve                        func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		DisposalMeasures             func(childComplexity int) int
		DisposalMeasures1            func(childComplexity int) int
		DisposalMeasures2            func(childComplexity int) int
		DisposalMeasures3            func(childComplexity int) int
		DisposalMeasures4            func(childComplexity int) int
		DisposalMeasures5            func(childComplexity int) int
		DisposalMeasures6            func(childComplexity int) int
		DisposalMeasures7            func(childComplexity int) int
		DisposalResults              func(childComplexity int) int
		DisposalResults1             func(childComplexity int) int
		DisposalResults2             func(childComplexity int) int
		DisposalResults3             func(childComplexity int) int
		DisposalResults4             func(childComplexity int) int
		DisposalResults5             func(childComplexity int) int
		DisposalResults6             func(childComplexity int) int
		DisposalResults7             func(childComplexity int) int
		DriverID                     func(childComplexity int) int
		EnterpriseID                 func(childComplexity int) int
		Equipment                    func(childComplexity int) int
		FatigueAlarmTime             func(childComplexity int) int
		FeedbackTime                 func(childComplexity int) int
		GpsSpeed                     func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsDeleted                    func(childComplexity int) int
		IsFatigueDriving             func(childComplexity int) int
		IsLocate                     func(childComplexity int) int
		IsMorningOutage              func(childComplexity int) int
		IsOnline                     func(childComplexity int) int
		IsSend                       func(childComplexity int) int
		IsSpeeding                   func(childComplexity int) int
		IsTachographRecordNormal     func(childComplexity int) int
		LatitudeLongitudeDescription func(childComplexity int) int
		LensOn                       func(childComplexity int) int
		LensPosition                 func(childComplexity int) int
		MonitorEndTime               func(childComplexity int) int
		MonitoringLocation           func(childComplexity int) int
		MonitoringTime               func(childComplexity int) int
		OtherInfraction              func(childComplexity int) int
		Others                       func(childComplexity int) int
		OutageAlarmTime              func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		SpeedAlarmTime               func(childComplexity int) int
		SpeedingSpeed                func(childComplexity int) int
		SupervisionDetailID          func(childComplexity int) int
		SupervisionID                func(childComplexity int) int
		TachographDataException      func(childComplexity int) int
		TachographSpeed              func(childComplexity int) int
		TaxiState                    func(childComplexity int) int
		Trail                        func(childComplexity int) int
		TreatmentTime                func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehicleID                    func(childComplexity int) int
	}

	DynamicSupervisionDetailMinFields struct {
		Assignee                     func(childComplexity int) int
		BusinessScope                func(childComplexity int) int
		Coordinate                   func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		Curve                        func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		DisposalMeasures             func(childComplexity int) int
		DisposalMeasures1            func(childComplexity int) int
		DisposalMeasures2            func(childComplexity int) int
		DisposalMeasures3            func(childComplexity int) int
		DisposalMeasures4            func(childComplexity int) int
		DisposalMeasures5            func(childComplexity int) int
		DisposalMeasures6            func(childComplexity int) int
		DisposalMeasures7            func(childComplexity int) int
		DisposalResults              func(childComplexity int) int
		DisposalResults1             func(childComplexity int) int
		DisposalResults2             func(childComplexity int) int
		DisposalResults3             func(childComplexity int) int
		DisposalResults4             func(childComplexity int) int
		DisposalResults5             func(childComplexity int) int
		DisposalResults6             func(childComplexity int) int
		DisposalResults7             func(childComplexity int) int
		DriverID                     func(childComplexity int) int
		EnterpriseID                 func(childComplexity int) int
		Equipment                    func(childComplexity int) int
		FatigueAlarmTime             func(childComplexity int) int
		FeedbackTime                 func(childComplexity int) int
		GpsSpeed                     func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsDeleted                    func(childComplexity int) int
		IsFatigueDriving             func(childComplexity int) int
		IsLocate                     func(childComplexity int) int
		IsMorningOutage              func(childComplexity int) int
		IsOnline                     func(childComplexity int) int
		IsSend                       func(childComplexity int) int
		IsSpeeding                   func(childComplexity int) int
		IsTachographRecordNormal     func(childComplexity int) int
		LatitudeLongitudeDescription func(childComplexity int) int
		LensOn                       func(childComplexity int) int
		LensPosition                 func(childComplexity int) int
		MonitorEndTime               func(childComplexity int) int
		MonitoringLocation           func(childComplexity int) int
		MonitoringTime               func(childComplexity int) int
		OtherInfraction              func(childComplexity int) int
		Others                       func(childComplexity int) int
		OutageAlarmTime              func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		SpeedAlarmTime               func(childComplexity int) int
		SpeedingSpeed                func(childComplexity int) int
		SupervisionDetailID          func(childComplexity int) int
		SupervisionID                func(childComplexity int) int
		TachographDataException      func(childComplexity int) int
		TachographSpeed              func(childComplexity int) int
		TaxiState                    func(childComplexity int) int
		Trail                        func(childComplexity int) int
		TreatmentTime                func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehicleID                    func(childComplexity int) int
	}

	DynamicSupervisionDetailMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DynamicSupervisionDetailStddevFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailStddevPopFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailStddevSampFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailSumFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailVarPopFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailVarSampFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailVarianceFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionMaxFields struct {
		CheckUserID          func(childComplexity int) int
		CityID               func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		Day                  func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DistrictID           func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Month                func(childComplexity int) int
		ProvinceID           func(childComplexity int) int
		SpotCheckDate        func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		SupervisionID        func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionMinFields struct {
		CheckUserID          func(childComplexity int) int
		CityID               func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		Day                  func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DistrictID           func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDeleted            func(childComplexity int) int
		Month                func(childComplexity int) int
		ProvinceID           func(childComplexity int) int
		SpotCheckDate        func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		SupervisionID        func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DynamicSupervisionStddevFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionStddevPopFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionStddevSampFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionSumFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionVarPopFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionVarSampFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionVarianceFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	MuckTruckOnline struct {
		Area                    func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		CreatedBy               func(childComplexity int) int
		DeletedAt               func(childComplexity int) int
		DeletedBy               func(childComplexity int) int
		ID                      func(childComplexity int) int
		IsCatalogLibrary        func(childComplexity int) int
		IsGpsOnline             func(childComplexity int) int
		IsInstall               func(childComplexity int) int
		IsNewVehicle            func(childComplexity int) int
		IsOnline                func(childComplexity int) int
		IsPay                   func(childComplexity int) int
		IsVehiclePassInspection func(childComplexity int) int
		LocationTime            func(childComplexity int) int
		MuckTruckOnlineID       func(childComplexity int) int
		SelfNumber              func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		UpdatedBy               func(childComplexity int) int
		VehicleID               func(childComplexity int) int
	}

	MuckTruckOnlineAggregate struct {
		Aggregate func(childComplexity int) int
	}

	MuckTruckOnlineAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	MuckTruckOnlineAvgFields struct {
		ID func(childComplexity int) int
	}

	MuckTruckOnlineMaxFields struct {
		Area                    func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		CreatedBy               func(childComplexity int) int
		DeletedAt               func(childComplexity int) int
		DeletedBy               func(childComplexity int) int
		ID                      func(childComplexity int) int
		IsCatalogLibrary        func(childComplexity int) int
		IsGpsOnline             func(childComplexity int) int
		IsInstall               func(childComplexity int) int
		IsNewVehicle            func(childComplexity int) int
		IsOnline                func(childComplexity int) int
		IsPay                   func(childComplexity int) int
		IsVehiclePassInspection func(childComplexity int) int
		LocationTime            func(childComplexity int) int
		MuckTruckOnlineID       func(childComplexity int) int
		SelfNumber              func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		UpdatedBy               func(childComplexity int) int
		VehicleID               func(childComplexity int) int
	}

	MuckTruckOnlineMinFields struct {
		Area                    func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		CreatedBy               func(childComplexity int) int
		DeletedAt               func(childComplexity int) int
		DeletedBy               func(childComplexity int) int
		ID                      func(childComplexity int) int
		IsCatalogLibrary        func(childComplexity int) int
		IsGpsOnline             func(childComplexity int) int
		IsInstall               func(childComplexity int) int
		IsNewVehicle            func(childComplexity int) int
		IsOnline                func(childComplexity int) int
		IsPay                   func(childComplexity int) int
		IsVehiclePassInspection func(childComplexity int) int
		LocationTime            func(childComplexity int) int
		MuckTruckOnlineID       func(childComplexity int) int
		SelfNumber              func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		UpdatedBy               func(childComplexity int) int
		VehicleID               func(childComplexity int) int
	}

	MuckTruckOnlineMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	MuckTruckOnlineStddevFields struct {
		ID func(childComplexity int) int
	}

	MuckTruckOnlineStddevPopFields struct {
		ID func(childComplexity int) int
	}

	MuckTruckOnlineStddevSampFields struct {
		ID func(childComplexity int) int
	}

	MuckTruckOnlineSumFields struct {
		ID func(childComplexity int) int
	}

	MuckTruckOnlineVarPopFields struct {
		ID func(childComplexity int) int
	}

	MuckTruckOnlineVarSampFields struct {
		ID func(childComplexity int) int
	}

	MuckTruckOnlineVarianceFields struct {
		ID func(childComplexity int) int
	}

	Mutation struct {
		DeleteDynamicSpotCheckDisposal     func(childComplexity int, where model.DynamicSpotCheckDisposalBoolExp) int
		DeleteDynamicSpotCheckDisposalByPk func(childComplexity int, id int64) int
		DeleteDynamicSupervision           func(childComplexity int, where model.DynamicSupervisionBoolExp) int
		DeleteDynamicSupervisionByPk       func(childComplexity int, id int64) int
		DeleteDynamicSupervisionDetail     func(childComplexity int, where model.DynamicSupervisionDetailBoolExp) int
		DeleteDynamicSupervisionDetailByPk func(childComplexity int, id int64) int
		DeleteMuckTruckOnline              func(childComplexity int, where model.MuckTruckOnlineBoolExp) int
		DeleteMuckTruckOnlineByPk          func(childComplexity int, id int64) int
		DeleteRegionIssued                 func(childComplexity int, where model.RegionIssuedBoolExp) int
		DeleteRegionIssuedByPk             func(childComplexity int, id int64) int
		DeleteRegionManagement             func(childComplexity int, where model.RegionManagementBoolExp) int
		DeleteRegionManagementByPk         func(childComplexity int, id int64) int
		DeleteVehicleAlarmSupervision      func(childComplexity int, where model.VehicleAlarmSupervisionBoolExp) int
		DeleteVehicleAlarmSupervisionByPk  func(childComplexity int, id int64) int
		DeleteVehicleAlarmTimesRecord      func(childComplexity int, where model.VehicleAlarmTimesRecordBoolExp) int
		DeleteVehicleAlarmTimesRecordByPk  func(childComplexity int, id int64) int
		DeleteVehicleOfflineDisposal       func(childComplexity int, where model.VehicleOfflineDisposalBoolExp) int
		DeleteVehicleOfflineDisposalByPk   func(childComplexity int, id int64) int
		InsertDynamicSpotCheckDisposal     func(childComplexity int, objects []*model.DynamicSpotCheckDisposalInsertInput) int
		InsertDynamicSpotCheckDisposalOne  func(childComplexity int, objects model.DynamicSpotCheckDisposalInsertInput) int
		InsertDynamicSupervision           func(childComplexity int, objects []*model.DynamicSupervisionInsertInput) int
		InsertDynamicSupervisionDetail     func(childComplexity int, objects []*model.DynamicSupervisionDetailInsertInput) int
		InsertDynamicSupervisionDetailOne  func(childComplexity int, objects model.DynamicSupervisionDetailInsertInput) int
		InsertDynamicSupervisionOne        func(childComplexity int, objects model.DynamicSupervisionInsertInput) int
		InsertMuckTruckOnline              func(childComplexity int, objects []*model.MuckTruckOnlineInsertInput) int
		InsertMuckTruckOnlineOne           func(childComplexity int, objects model.MuckTruckOnlineInsertInput) int
		InsertRegionIssued                 func(childComplexity int, objects []*model.RegionIssuedInsertInput) int
		InsertRegionIssuedOne              func(childComplexity int, objects model.RegionIssuedInsertInput) int
		InsertRegionManagement             func(childComplexity int, objects []*model.RegionManagementInsertInput) int
		InsertRegionManagementOne          func(childComplexity int, objects model.RegionManagementInsertInput) int
		InsertVehicleAlarmSupervision      func(childComplexity int, objects []*model.VehicleAlarmSupervisionInsertInput) int
		InsertVehicleAlarmSupervisionOne   func(childComplexity int, objects model.VehicleAlarmSupervisionInsertInput) int
		InsertVehicleAlarmTimesRecord      func(childComplexity int, objects []*model.VehicleAlarmTimesRecordInsertInput) int
		InsertVehicleAlarmTimesRecordOne   func(childComplexity int, objects model.VehicleAlarmTimesRecordInsertInput) int
		InsertVehicleOfflineDisposal       func(childComplexity int, objects []*model.VehicleOfflineDisposalInsertInput) int
		InsertVehicleOfflineDisposalOne    func(childComplexity int, objects model.VehicleOfflineDisposalInsertInput) int
		UpdateDynamicSpotCheckDisposal     func(childComplexity int, inc *model.DynamicSpotCheckDisposalIncInput, set *model.DynamicSpotCheckDisposalSetInput, where model.DynamicSpotCheckDisposalBoolExp) int
		UpdateDynamicSpotCheckDisposalByPk func(childComplexity int, inc *model.DynamicSpotCheckDisposalIncInput, set *model.DynamicSpotCheckDisposalSetInput, id int64) int
		UpdateDynamicSupervision           func(childComplexity int, inc *model.DynamicSupervisionIncInput, set *model.DynamicSupervisionSetInput, where model.DynamicSupervisionBoolExp) int
		UpdateDynamicSupervisionByPk       func(childComplexity int, inc *model.DynamicSupervisionIncInput, set *model.DynamicSupervisionSetInput, id int64) int
		UpdateDynamicSupervisionDetail     func(childComplexity int, inc *model.DynamicSupervisionDetailIncInput, set *model.DynamicSupervisionDetailSetInput, where model.DynamicSupervisionDetailBoolExp) int
		UpdateDynamicSupervisionDetailByPk func(childComplexity int, inc *model.DynamicSupervisionDetailIncInput, set *model.DynamicSupervisionDetailSetInput, id int64) int
		UpdateMuckTruckOnline              func(childComplexity int, inc *model.MuckTruckOnlineIncInput, set *model.MuckTruckOnlineSetInput, where model.MuckTruckOnlineBoolExp) int
		UpdateMuckTruckOnlineByPk          func(childComplexity int, inc *model.MuckTruckOnlineIncInput, set *model.MuckTruckOnlineSetInput, id int64) int
		UpdateRegionIssued                 func(childComplexity int, inc *model.RegionIssuedIncInput, set *model.RegionIssuedSetInput, where model.RegionIssuedBoolExp) int
		UpdateRegionIssuedByPk             func(childComplexity int, inc *model.RegionIssuedIncInput, set *model.RegionIssuedSetInput, id int64) int
		UpdateRegionManagement             func(childComplexity int, inc *model.RegionManagementIncInput, set *model.RegionManagementSetInput, where model.RegionManagementBoolExp) int
		UpdateRegionManagementByPk         func(childComplexity int, inc *model.RegionManagementIncInput, set *model.RegionManagementSetInput, id int64) int
		UpdateVehicleAlarmSupervision      func(childComplexity int, inc *model.VehicleAlarmSupervisionIncInput, set *model.VehicleAlarmSupervisionSetInput, where model.VehicleAlarmSupervisionBoolExp) int
		UpdateVehicleAlarmSupervisionByPk  func(childComplexity int, inc *model.VehicleAlarmSupervisionIncInput, set *model.VehicleAlarmSupervisionSetInput, id int64) int
		UpdateVehicleAlarmTimesRecord      func(childComplexity int, inc *model.VehicleAlarmTimesRecordIncInput, set *model.VehicleAlarmTimesRecordSetInput, where model.VehicleAlarmTimesRecordBoolExp) int
		UpdateVehicleAlarmTimesRecordByPk  func(childComplexity int, inc *model.VehicleAlarmTimesRecordIncInput, set *model.VehicleAlarmTimesRecordSetInput, id int64) int
		UpdateVehicleOfflineDisposal       func(childComplexity int, inc *model.VehicleOfflineDisposalIncInput, set *model.VehicleOfflineDisposalSetInput, where model.VehicleOfflineDisposalBoolExp) int
		UpdateVehicleOfflineDisposalByPk   func(childComplexity int, inc *model.VehicleOfflineDisposalIncInput, set *model.VehicleOfflineDisposalSetInput, id int64) int
	}

	Query struct {
		DynamicSpotCheckDisposal          func(childComplexity int, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) int
		DynamicSpotCheckDisposalAggregate func(childComplexity int, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) int
		DynamicSpotCheckDisposalByPk      func(childComplexity int, id int64) int
		DynamicSupervision                func(childComplexity int, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) int
		DynamicSupervisionAggregate       func(childComplexity int, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) int
		DynamicSupervisionByPk            func(childComplexity int, id int64) int
		DynamicSupervisionDetail          func(childComplexity int, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) int
		DynamicSupervisionDetailAggregate func(childComplexity int, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) int
		DynamicSupervisionDetailByPk      func(childComplexity int, id int64) int
		MuckTruckOnline                   func(childComplexity int, distinctOn []model.MuckTruckOnlineSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckOnlineOrderBy, where *model.MuckTruckOnlineBoolExp) int
		MuckTruckOnlineAggregate          func(childComplexity int, distinctOn []model.MuckTruckOnlineSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckOnlineOrderBy, where *model.MuckTruckOnlineBoolExp) int
		MuckTruckOnlineByPk               func(childComplexity int, id int64) int
		RegionIssued                      func(childComplexity int, distinctOn []model.RegionIssuedSelectColumn, limit *int, offset *int, orderBy []*model.RegionIssuedOrderBy, where *model.RegionIssuedBoolExp) int
		RegionIssuedAggregate             func(childComplexity int, distinctOn []model.RegionIssuedSelectColumn, limit *int, offset *int, orderBy []*model.RegionIssuedOrderBy, where *model.RegionIssuedBoolExp) int
		RegionIssuedByPk                  func(childComplexity int, id int64) int
		RegionManagement                  func(childComplexity int, distinctOn []model.RegionManagementSelectColumn, limit *int, offset *int, orderBy []*model.RegionManagementOrderBy, where *model.RegionManagementBoolExp) int
		RegionManagementAggregate         func(childComplexity int, distinctOn []model.RegionManagementSelectColumn, limit *int, offset *int, orderBy []*model.RegionManagementOrderBy, where *model.RegionManagementBoolExp) int
		RegionManagementByPk              func(childComplexity int, id int64) int
		VehicleAlarmSupervision           func(childComplexity int, distinctOn []model.VehicleAlarmSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmSupervisionOrderBy, where *model.VehicleAlarmSupervisionBoolExp) int
		VehicleAlarmSupervisionAggregate  func(childComplexity int, distinctOn []model.VehicleAlarmSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmSupervisionOrderBy, where *model.VehicleAlarmSupervisionBoolExp) int
		VehicleAlarmSupervisionByPk       func(childComplexity int, id int64) int
		VehicleAlarmTimesRecord           func(childComplexity int, distinctOn []model.VehicleAlarmTimesRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmTimesRecordOrderBy, where *model.VehicleAlarmTimesRecordBoolExp) int
		VehicleAlarmTimesRecordAggregate  func(childComplexity int, distinctOn []model.VehicleAlarmTimesRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmTimesRecordOrderBy, where *model.VehicleAlarmTimesRecordBoolExp) int
		VehicleAlarmTimesRecordByPk       func(childComplexity int, id int64) int
		VehicleOfflineDisposal            func(childComplexity int, distinctOn []model.VehicleOfflineDisposalSelectColumn, limit *int, offset *int, orderBy []*model.VehicleOfflineDisposalOrderBy, where *model.VehicleOfflineDisposalBoolExp) int
		VehicleOfflineDisposalAggregate   func(childComplexity int, distinctOn []model.VehicleOfflineDisposalSelectColumn, limit *int, offset *int, orderBy []*model.VehicleOfflineDisposalOrderBy, where *model.VehicleOfflineDisposalBoolExp) int
		VehicleOfflineDisposalByPk        func(childComplexity int, id int64) int
	}

	RegionIssued struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		DeletedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		Imel           func(childComplexity int) int
		RegionIssuedID func(childComplexity int) int
		RegionName     func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	RegionIssuedAggregate struct {
		Aggregate func(childComplexity int) int
	}

	RegionIssuedAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	RegionIssuedAvgFields struct {
		ID func(childComplexity int) int
	}

	RegionIssuedMaxFields struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		DeletedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		Imel           func(childComplexity int) int
		RegionIssuedID func(childComplexity int) int
		RegionName     func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	RegionIssuedMinFields struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		DeletedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		Imel           func(childComplexity int) int
		RegionIssuedID func(childComplexity int) int
		RegionName     func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		UpdatedBy      func(childComplexity int) int
	}

	RegionIssuedMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	RegionIssuedStddevFields struct {
		ID func(childComplexity int) int
	}

	RegionIssuedStddevPopFields struct {
		ID func(childComplexity int) int
	}

	RegionIssuedStddevSampFields struct {
		ID func(childComplexity int) int
	}

	RegionIssuedSumFields struct {
		ID func(childComplexity int) int
	}

	RegionIssuedVarPopFields struct {
		ID func(childComplexity int) int
	}

	RegionIssuedVarSampFields struct {
		ID func(childComplexity int) int
	}

	RegionIssuedVarianceFields struct {
		ID func(childComplexity int) int
	}

	RegionManagement struct {
		AlarmBeginTime     func(childComplexity int) int
		AlarmEndTime       func(childComplexity int) int
		CircleRadius       func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		Duration           func(childComplexity int) int
		EnterpriseName     func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsDeleted          func(childComplexity int) int
		IsSuperRegion      func(childComplexity int) int
		MaxSpeed           func(childComplexity int) int
		RegionCoordinate   func(childComplexity int) int
		RegionID           func(childComplexity int) int
		RegionManagementID func(childComplexity int) int
		RegionName         func(childComplexity int) int
		RegionNature       func(childComplexity int) int
		RegionType         func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
	}

	RegionManagementAggregate struct {
		Aggregate func(childComplexity int) int
	}

	RegionManagementAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	RegionManagementAvgFields struct {
		CircleRadius func(childComplexity int) int
		Duration     func(childComplexity int) int
		ID           func(childComplexity int) int
		MaxSpeed     func(childComplexity int) int
	}

	RegionManagementMaxFields struct {
		AlarmBeginTime     func(childComplexity int) int
		AlarmEndTime       func(childComplexity int) int
		CircleRadius       func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		Duration           func(childComplexity int) int
		EnterpriseName     func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsDeleted          func(childComplexity int) int
		IsSuperRegion      func(childComplexity int) int
		MaxSpeed           func(childComplexity int) int
		RegionCoordinate   func(childComplexity int) int
		RegionID           func(childComplexity int) int
		RegionManagementID func(childComplexity int) int
		RegionName         func(childComplexity int) int
		RegionNature       func(childComplexity int) int
		RegionType         func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
	}

	RegionManagementMinFields struct {
		AlarmBeginTime     func(childComplexity int) int
		AlarmEndTime       func(childComplexity int) int
		CircleRadius       func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		DeletedBy          func(childComplexity int) int
		Duration           func(childComplexity int) int
		EnterpriseName     func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsDeleted          func(childComplexity int) int
		IsSuperRegion      func(childComplexity int) int
		MaxSpeed           func(childComplexity int) int
		RegionCoordinate   func(childComplexity int) int
		RegionID           func(childComplexity int) int
		RegionManagementID func(childComplexity int) int
		RegionName         func(childComplexity int) int
		RegionNature       func(childComplexity int) int
		RegionType         func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		UpdatedBy          func(childComplexity int) int
	}

	RegionManagementMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	RegionManagementStddevFields struct {
		CircleRadius func(childComplexity int) int
		Duration     func(childComplexity int) int
		ID           func(childComplexity int) int
		MaxSpeed     func(childComplexity int) int
	}

	RegionManagementStddevPopFields struct {
		CircleRadius func(childComplexity int) int
		Duration     func(childComplexity int) int
		ID           func(childComplexity int) int
		MaxSpeed     func(childComplexity int) int
	}

	RegionManagementStddevSampFields struct {
		CircleRadius func(childComplexity int) int
		Duration     func(childComplexity int) int
		ID           func(childComplexity int) int
		MaxSpeed     func(childComplexity int) int
	}

	RegionManagementSumFields struct {
		CircleRadius func(childComplexity int) int
		Duration     func(childComplexity int) int
		ID           func(childComplexity int) int
		MaxSpeed     func(childComplexity int) int
	}

	RegionManagementVarPopFields struct {
		CircleRadius func(childComplexity int) int
		Duration     func(childComplexity int) int
		ID           func(childComplexity int) int
		MaxSpeed     func(childComplexity int) int
	}

	RegionManagementVarSampFields struct {
		CircleRadius func(childComplexity int) int
		Duration     func(childComplexity int) int
		ID           func(childComplexity int) int
		MaxSpeed     func(childComplexity int) int
	}

	RegionManagementVarianceFields struct {
		CircleRadius func(childComplexity int) int
		Duration     func(childComplexity int) int
		ID           func(childComplexity int) int
		MaxSpeed     func(childComplexity int) int
	}

	VehicleAlarmSupervision struct {
		AbnormalDisposalNumber            func(childComplexity int) int
		AbnormalDisposalRate              func(childComplexity int) int
		ActualCheckVechicleNumber         func(childComplexity int) int
		ActualSupervisionEnterpriseNumber func(childComplexity int) int
		AlarmDisposalRate                 func(childComplexity int) int
		AlarmTimes                        func(childComplexity int) int
		AlarmType                         func(childComplexity int) int
		AreaID                            func(childComplexity int) int
		BusinessScope                     func(childComplexity int) int
		CheckAbnormalVehicleNumber        func(childComplexity int) int
		CityRectification                 func(childComplexity int) int
		CountryRectification              func(childComplexity int) int
		CreatedAt                         func(childComplexity int) int
		CreatedBy                         func(childComplexity int) int
		DeletedAt                         func(childComplexity int) int
		DeletedBy                         func(childComplexity int) int
		DisposalTimes                     func(childComplexity int) int
		DistrictRectification             func(childComplexity int) int
		ID                                func(childComplexity int) int
		ProvinceRectification             func(childComplexity int) int
		RegistrationTime                  func(childComplexity int) int
		ShouldCheckVehicleNumber          func(childComplexity int) int
		ShouldSupervisionEnterpriseNumber func(childComplexity int) int
		StatisticsDate                    func(childComplexity int) int
		SuperivisionAuthorityID           func(childComplexity int) int
		SuperivisionType                  func(childComplexity int) int
		SupervisionRate                   func(childComplexity int) int
		UpdatedAt                         func(childComplexity int) int
		UpdatedBy                         func(childComplexity int) int
		VehicleAlarmNumber                func(childComplexity int) int
		VehicleAlarmSupervisionID         func(childComplexity int) int
	}

	VehicleAlarmSupervisionAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleAlarmSupervisionAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleAlarmSupervisionAvgFields struct {
		AbnormalDisposalNumber            func(childComplexity int) int
		AbnormalDisposalRate              func(childComplexity int) int
		ActualCheckVechicleNumber         func(childComplexity int) int
		ActualSupervisionEnterpriseNumber func(childComplexity int) int
		AlarmDisposalRate                 func(childComplexity int) int
		AlarmTimes                        func(childComplexity int) int
		BusinessScope                     func(childComplexity int) int
		CheckAbnormalVehicleNumber        func(childComplexity int) int
		DisposalTimes                     func(childComplexity int) int
		ID                                func(childComplexity int) int
		ShouldCheckVehicleNumber          func(childComplexity int) int
		ShouldSupervisionEnterpriseNumber func(childComplexity int) int
		SupervisionRate                   func(childComplexity int) int
		VehicleAlarmNumber                func(childComplexity int) int
	}

	VehicleAlarmSupervisionMaxFields struct {
		AbnormalDisposalNumber            func(childComplexity int) int
		AbnormalDisposalRate              func(childComplexity int) int
		ActualCheckVechicleNumber         func(childComplexity int) int
		ActualSupervisionEnterpriseNumber func(childComplexity int) int
		AlarmDisposalRate                 func(childComplexity int) int
		AlarmTimes                        func(childComplexity int) int
		AlarmType                         func(childComplexity int) int
		AreaID                            func(childComplexity int) int
		BusinessScope                     func(childComplexity int) int
		CheckAbnormalVehicleNumber        func(childComplexity int) int
		CityRectification                 func(childComplexity int) int
		CountryRectification              func(childComplexity int) int
		CreatedAt                         func(childComplexity int) int
		CreatedBy                         func(childComplexity int) int
		DeletedAt                         func(childComplexity int) int
		DeletedBy                         func(childComplexity int) int
		DisposalTimes                     func(childComplexity int) int
		DistrictRectification             func(childComplexity int) int
		ID                                func(childComplexity int) int
		ProvinceRectification             func(childComplexity int) int
		RegistrationTime                  func(childComplexity int) int
		ShouldCheckVehicleNumber          func(childComplexity int) int
		ShouldSupervisionEnterpriseNumber func(childComplexity int) int
		StatisticsDate                    func(childComplexity int) int
		SuperivisionAuthorityID           func(childComplexity int) int
		SuperivisionType                  func(childComplexity int) int
		SupervisionRate                   func(childComplexity int) int
		UpdatedAt                         func(childComplexity int) int
		UpdatedBy                         func(childComplexity int) int
		VehicleAlarmNumber                func(childComplexity int) int
		VehicleAlarmSupervisionID         func(childComplexity int) int
	}

	VehicleAlarmSupervisionMinFields struct {
		AbnormalDisposalNumber            func(childComplexity int) int
		AbnormalDisposalRate              func(childComplexity int) int
		ActualCheckVechicleNumber         func(childComplexity int) int
		ActualSupervisionEnterpriseNumber func(childComplexity int) int
		AlarmDisposalRate                 func(childComplexity int) int
		AlarmTimes                        func(childComplexity int) int
		AlarmType                         func(childComplexity int) int
		AreaID                            func(childComplexity int) int
		BusinessScope                     func(childComplexity int) int
		CheckAbnormalVehicleNumber        func(childComplexity int) int
		CityRectification                 func(childComplexity int) int
		CountryRectification              func(childComplexity int) int
		CreatedAt                         func(childComplexity int) int
		CreatedBy                         func(childComplexity int) int
		DeletedAt                         func(childComplexity int) int
		DeletedBy                         func(childComplexity int) int
		DisposalTimes                     func(childComplexity int) int
		DistrictRectification             func(childComplexity int) int
		ID                                func(childComplexity int) int
		ProvinceRectification             func(childComplexity int) int
		RegistrationTime                  func(childComplexity int) int
		ShouldCheckVehicleNumber          func(childComplexity int) int
		ShouldSupervisionEnterpriseNumber func(childComplexity int) int
		StatisticsDate                    func(childComplexity int) int
		SuperivisionAuthorityID           func(childComplexity int) int
		SuperivisionType                  func(childComplexity int) int
		SupervisionRate                   func(childComplexity int) int
		UpdatedAt                         func(childComplexity int) int
		UpdatedBy                         func(childComplexity int) int
		VehicleAlarmNumber                func(childComplexity int) int
		VehicleAlarmSupervisionID         func(childComplexity int) int
	}

	VehicleAlarmSupervisionMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleAlarmSupervisionStddevFields struct {
		AbnormalDisposalNumber            func(childComplexity int) int
		AbnormalDisposalRate              func(childComplexity int) int
		ActualCheckVechicleNumber         func(childComplexity int) int
		ActualSupervisionEnterpriseNumber func(childComplexity int) int
		AlarmDisposalRate                 func(childComplexity int) int
		AlarmTimes                        func(childComplexity int) int
		BusinessScope                     func(childComplexity int) int
		CheckAbnormalVehicleNumber        func(childComplexity int) int
		DisposalTimes                     func(childComplexity int) int
		ID                                func(childComplexity int) int
		ShouldCheckVehicleNumber          func(childComplexity int) int
		ShouldSupervisionEnterpriseNumber func(childComplexity int) int
		SupervisionRate                   func(childComplexity int) int
		VehicleAlarmNumber                func(childComplexity int) int
	}

	VehicleAlarmSupervisionStddevPopFields struct {
		AbnormalDisposalNumber            func(childComplexity int) int
		AbnormalDisposalRate              func(childComplexity int) int
		ActualCheckVechicleNumber         func(childComplexity int) int
		ActualSupervisionEnterpriseNumber func(childComplexity int) int
		AlarmDisposalRate                 func(childComplexity int) int
		AlarmTimes                        func(childComplexity int) int
		BusinessScope                     func(childComplexity int) int
		CheckAbnormalVehicleNumber        func(childComplexity int) int
		DisposalTimes                     func(childComplexity int) int
		ID                                func(childComplexity int) int
		ShouldCheckVehicleNumber          func(childComplexity int) int
		ShouldSupervisionEnterpriseNumber func(childComplexity int) int
		SupervisionRate                   func(childComplexity int) int
		VehicleAlarmNumber                func(childComplexity int) int
	}

	VehicleAlarmSupervisionStddevSampFields struct {
		AbnormalDisposalNumber            func(childComplexity int) int
		AbnormalDisposalRate              func(childComplexity int) int
		ActualCheckVechicleNumber         func(childComplexity int) int
		ActualSupervisionEnterpriseNumber func(childComplexity int) int
		AlarmDisposalRate                 func(childComplexity int) int
		AlarmTimes                        func(childComplexity int) int
		BusinessScope                     func(childComplexity int) int
		CheckAbnormalVehicleNumber        func(childComplexity int) int
		DisposalTimes                     func(childComplexity int) int
		ID                                func(childComplexity int) int
		ShouldCheckVehicleNumber          func(childComplexity int) int
		ShouldSupervisionEnterpriseNumber func(childComplexity int) int
		SupervisionRate                   func(childComplexity int) int
		VehicleAlarmNumber                func(childComplexity int) int
	}

	VehicleAlarmSupervisionSumFields struct {
		AbnormalDisposalNumber            func(childComplexity int) int
		AbnormalDisposalRate              func(childComplexity int) int
		ActualCheckVechicleNumber         func(childComplexity int) int
		ActualSupervisionEnterpriseNumber func(childComplexity int) int
		AlarmDisposalRate                 func(childComplexity int) int
		AlarmTimes                        func(childComplexity int) int
		BusinessScope                     func(childComplexity int) int
		CheckAbnormalVehicleNumber        func(childComplexity int) int
		DisposalTimes                     func(childComplexity int) int
		ID                                func(childComplexity int) int
		ShouldCheckVehicleNumber          func(childComplexity int) int
		ShouldSupervisionEnterpriseNumber func(childComplexity int) int
		SupervisionRate                   func(childComplexity int) int
		VehicleAlarmNumber                func(childComplexity int) int
	}

	VehicleAlarmSupervisionVarPopFields struct {
		AbnormalDisposalNumber            func(childComplexity int) int
		AbnormalDisposalRate              func(childComplexity int) int
		ActualCheckVechicleNumber         func(childComplexity int) int
		ActualSupervisionEnterpriseNumber func(childComplexity int) int
		AlarmDisposalRate                 func(childComplexity int) int
		AlarmTimes                        func(childComplexity int) int
		BusinessScope                     func(childComplexity int) int
		CheckAbnormalVehicleNumber        func(childComplexity int) int
		DisposalTimes                     func(childComplexity int) int
		ID                                func(childComplexity int) int
		ShouldCheckVehicleNumber          func(childComplexity int) int
		ShouldSupervisionEnterpriseNumber func(childComplexity int) int
		SupervisionRate                   func(childComplexity int) int
		VehicleAlarmNumber                func(childComplexity int) int
	}

	VehicleAlarmSupervisionVarSampFields struct {
		AbnormalDisposalNumber            func(childComplexity int) int
		AbnormalDisposalRate              func(childComplexity int) int
		ActualCheckVechicleNumber         func(childComplexity int) int
		ActualSupervisionEnterpriseNumber func(childComplexity int) int
		AlarmDisposalRate                 func(childComplexity int) int
		AlarmTimes                        func(childComplexity int) int
		BusinessScope                     func(childComplexity int) int
		CheckAbnormalVehicleNumber        func(childComplexity int) int
		DisposalTimes                     func(childComplexity int) int
		ID                                func(childComplexity int) int
		ShouldCheckVehicleNumber          func(childComplexity int) int
		ShouldSupervisionEnterpriseNumber func(childComplexity int) int
		SupervisionRate                   func(childComplexity int) int
		VehicleAlarmNumber                func(childComplexity int) int
	}

	VehicleAlarmSupervisionVarianceFields struct {
		AbnormalDisposalNumber            func(childComplexity int) int
		AbnormalDisposalRate              func(childComplexity int) int
		ActualCheckVechicleNumber         func(childComplexity int) int
		ActualSupervisionEnterpriseNumber func(childComplexity int) int
		AlarmDisposalRate                 func(childComplexity int) int
		AlarmTimes                        func(childComplexity int) int
		BusinessScope                     func(childComplexity int) int
		CheckAbnormalVehicleNumber        func(childComplexity int) int
		DisposalTimes                     func(childComplexity int) int
		ID                                func(childComplexity int) int
		ShouldCheckVehicleNumber          func(childComplexity int) int
		ShouldSupervisionEnterpriseNumber func(childComplexity int) int
		SupervisionRate                   func(childComplexity int) int
		VehicleAlarmNumber                func(childComplexity int) int
	}

	VehicleAlarmTimesRecord struct {
		AlarmTimes                func(childComplexity int) int
		AlarmType                 func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DisposalMeasure           func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		DisposalResult            func(childComplexity int) int
		DisposalTime              func(childComplexity int) int
		DutyPerson                func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsDisposal                func(childComplexity int) int
		RecordTime                func(childComplexity int) int
		Remarks                   func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
		VehicleAlarmTimesRecordID func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	VehicleAlarmTimesRecordAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleAlarmTimesRecordAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleAlarmTimesRecordAvgFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	VehicleAlarmTimesRecordMaxFields struct {
		AlarmTimes                func(childComplexity int) int
		AlarmType                 func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DisposalMeasure           func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		DisposalResult            func(childComplexity int) int
		DisposalTime              func(childComplexity int) int
		DutyPerson                func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsDisposal                func(childComplexity int) int
		RecordTime                func(childComplexity int) int
		Remarks                   func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
		VehicleAlarmTimesRecordID func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	VehicleAlarmTimesRecordMinFields struct {
		AlarmTimes                func(childComplexity int) int
		AlarmType                 func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		CreatedBy                 func(childComplexity int) int
		DeletedAt                 func(childComplexity int) int
		DeletedBy                 func(childComplexity int) int
		DisposalMeasure           func(childComplexity int) int
		DisposalMethod            func(childComplexity int) int
		DisposalResult            func(childComplexity int) int
		DisposalTime              func(childComplexity int) int
		DutyPerson                func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsDisposal                func(childComplexity int) int
		RecordTime                func(childComplexity int) int
		Remarks                   func(childComplexity int) int
		UpdatedAt                 func(childComplexity int) int
		UpdatedBy                 func(childComplexity int) int
		VehicleAlarmTimesRecordID func(childComplexity int) int
		VehicleID                 func(childComplexity int) int
	}

	VehicleAlarmTimesRecordMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleAlarmTimesRecordStddevFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	VehicleAlarmTimesRecordStddevPopFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	VehicleAlarmTimesRecordStddevSampFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	VehicleAlarmTimesRecordSumFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	VehicleAlarmTimesRecordVarPopFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	VehicleAlarmTimesRecordVarSampFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	VehicleAlarmTimesRecordVarianceFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	VehicleOfflineDisposal struct {
		AppPushContent           func(childComplexity int) int
		Content                  func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		DisposalMethod           func(childComplexity int) int
		EnterpriseID             func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsAppPush                func(childComplexity int) int
		IsDeleted                func(childComplexity int) int
		IsReport                 func(childComplexity int) int
		IsSmsPush                func(childComplexity int) int
		IsVoiceNotification      func(childComplexity int) int
		NotificationContent      func(childComplexity int) int
		SendTime                 func(childComplexity int) int
		SupervisionDetailID      func(childComplexity int) int
		Telephone                func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		UserID                   func(childComplexity int) int
		VehicleOfflineDisposalID func(childComplexity int) int
		VoiceContent             func(childComplexity int) int
	}

	VehicleOfflineDisposalAggregate struct {
		Aggregate func(childComplexity int) int
	}

	VehicleOfflineDisposalAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleOfflineDisposalAvgFields struct {
		ID func(childComplexity int) int
	}

	VehicleOfflineDisposalMaxFields struct {
		AppPushContent           func(childComplexity int) int
		Content                  func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		DisposalMethod           func(childComplexity int) int
		EnterpriseID             func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsAppPush                func(childComplexity int) int
		IsDeleted                func(childComplexity int) int
		IsReport                 func(childComplexity int) int
		IsSmsPush                func(childComplexity int) int
		IsVoiceNotification      func(childComplexity int) int
		NotificationContent      func(childComplexity int) int
		SendTime                 func(childComplexity int) int
		SupervisionDetailID      func(childComplexity int) int
		Telephone                func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		UserID                   func(childComplexity int) int
		VehicleOfflineDisposalID func(childComplexity int) int
		VoiceContent             func(childComplexity int) int
	}

	VehicleOfflineDisposalMinFields struct {
		AppPushContent           func(childComplexity int) int
		Content                  func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CreatedBy                func(childComplexity int) int
		DeletedAt                func(childComplexity int) int
		DeletedBy                func(childComplexity int) int
		DisposalMethod           func(childComplexity int) int
		EnterpriseID             func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsAppPush                func(childComplexity int) int
		IsDeleted                func(childComplexity int) int
		IsReport                 func(childComplexity int) int
		IsSmsPush                func(childComplexity int) int
		IsVoiceNotification      func(childComplexity int) int
		NotificationContent      func(childComplexity int) int
		SendTime                 func(childComplexity int) int
		SupervisionDetailID      func(childComplexity int) int
		Telephone                func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
		UpdatedBy                func(childComplexity int) int
		UserID                   func(childComplexity int) int
		VehicleOfflineDisposalID func(childComplexity int) int
		VoiceContent             func(childComplexity int) int
	}

	VehicleOfflineDisposalMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleOfflineDisposalStddevFields struct {
		ID func(childComplexity int) int
	}

	VehicleOfflineDisposalStddevPopFields struct {
		ID func(childComplexity int) int
	}

	VehicleOfflineDisposalStddevSampFields struct {
		ID func(childComplexity int) int
	}

	VehicleOfflineDisposalSumFields struct {
		ID func(childComplexity int) int
	}

	VehicleOfflineDisposalVarPopFields struct {
		ID func(childComplexity int) int
	}

	VehicleOfflineDisposalVarSampFields struct {
		ID func(childComplexity int) int
	}

	VehicleOfflineDisposalVarianceFields struct {
		ID func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteDynamicSpotCheckDisposal(ctx context.Context, where model.DynamicSpotCheckDisposalBoolExp) (*model.DynamicSpotCheckDisposalMutationResponse, error)
	DeleteDynamicSpotCheckDisposalByPk(ctx context.Context, id int64) (*model1.DynamicSpotCheckDisposal, error)
	InsertDynamicSpotCheckDisposal(ctx context.Context, objects []*model.DynamicSpotCheckDisposalInsertInput) (*model.DynamicSpotCheckDisposalMutationResponse, error)
	InsertDynamicSpotCheckDisposalOne(ctx context.Context, objects model.DynamicSpotCheckDisposalInsertInput) (*model1.DynamicSpotCheckDisposal, error)
	UpdateDynamicSpotCheckDisposal(ctx context.Context, inc *model.DynamicSpotCheckDisposalIncInput, set *model.DynamicSpotCheckDisposalSetInput, where model.DynamicSpotCheckDisposalBoolExp) (*model.DynamicSpotCheckDisposalMutationResponse, error)
	UpdateDynamicSpotCheckDisposalByPk(ctx context.Context, inc *model.DynamicSpotCheckDisposalIncInput, set *model.DynamicSpotCheckDisposalSetInput, id int64) (*model1.DynamicSpotCheckDisposal, error)
	DeleteDynamicSupervision(ctx context.Context, where model.DynamicSupervisionBoolExp) (*model.DynamicSupervisionMutationResponse, error)
	DeleteDynamicSupervisionByPk(ctx context.Context, id int64) (*model1.DynamicSupervision, error)
	InsertDynamicSupervision(ctx context.Context, objects []*model.DynamicSupervisionInsertInput) (*model.DynamicSupervisionMutationResponse, error)
	InsertDynamicSupervisionOne(ctx context.Context, objects model.DynamicSupervisionInsertInput) (*model1.DynamicSupervision, error)
	UpdateDynamicSupervision(ctx context.Context, inc *model.DynamicSupervisionIncInput, set *model.DynamicSupervisionSetInput, where model.DynamicSupervisionBoolExp) (*model.DynamicSupervisionMutationResponse, error)
	UpdateDynamicSupervisionByPk(ctx context.Context, inc *model.DynamicSupervisionIncInput, set *model.DynamicSupervisionSetInput, id int64) (*model1.DynamicSupervision, error)
	DeleteDynamicSupervisionDetail(ctx context.Context, where model.DynamicSupervisionDetailBoolExp) (*model.DynamicSupervisionDetailMutationResponse, error)
	DeleteDynamicSupervisionDetailByPk(ctx context.Context, id int64) (*model1.DynamicSupervisionDetail, error)
	InsertDynamicSupervisionDetail(ctx context.Context, objects []*model.DynamicSupervisionDetailInsertInput) (*model.DynamicSupervisionDetailMutationResponse, error)
	InsertDynamicSupervisionDetailOne(ctx context.Context, objects model.DynamicSupervisionDetailInsertInput) (*model1.DynamicSupervisionDetail, error)
	UpdateDynamicSupervisionDetail(ctx context.Context, inc *model.DynamicSupervisionDetailIncInput, set *model.DynamicSupervisionDetailSetInput, where model.DynamicSupervisionDetailBoolExp) (*model.DynamicSupervisionDetailMutationResponse, error)
	UpdateDynamicSupervisionDetailByPk(ctx context.Context, inc *model.DynamicSupervisionDetailIncInput, set *model.DynamicSupervisionDetailSetInput, id int64) (*model1.DynamicSupervisionDetail, error)
	DeleteMuckTruckOnline(ctx context.Context, where model.MuckTruckOnlineBoolExp) (*model.MuckTruckOnlineMutationResponse, error)
	DeleteMuckTruckOnlineByPk(ctx context.Context, id int64) (*model1.MuckTruckOnline, error)
	InsertMuckTruckOnline(ctx context.Context, objects []*model.MuckTruckOnlineInsertInput) (*model.MuckTruckOnlineMutationResponse, error)
	InsertMuckTruckOnlineOne(ctx context.Context, objects model.MuckTruckOnlineInsertInput) (*model1.MuckTruckOnline, error)
	UpdateMuckTruckOnline(ctx context.Context, inc *model.MuckTruckOnlineIncInput, set *model.MuckTruckOnlineSetInput, where model.MuckTruckOnlineBoolExp) (*model.MuckTruckOnlineMutationResponse, error)
	UpdateMuckTruckOnlineByPk(ctx context.Context, inc *model.MuckTruckOnlineIncInput, set *model.MuckTruckOnlineSetInput, id int64) (*model1.MuckTruckOnline, error)
	DeleteRegionIssued(ctx context.Context, where model.RegionIssuedBoolExp) (*model.RegionIssuedMutationResponse, error)
	DeleteRegionIssuedByPk(ctx context.Context, id int64) (*model1.RegionIssued, error)
	InsertRegionIssued(ctx context.Context, objects []*model.RegionIssuedInsertInput) (*model.RegionIssuedMutationResponse, error)
	InsertRegionIssuedOne(ctx context.Context, objects model.RegionIssuedInsertInput) (*model1.RegionIssued, error)
	UpdateRegionIssued(ctx context.Context, inc *model.RegionIssuedIncInput, set *model.RegionIssuedSetInput, where model.RegionIssuedBoolExp) (*model.RegionIssuedMutationResponse, error)
	UpdateRegionIssuedByPk(ctx context.Context, inc *model.RegionIssuedIncInput, set *model.RegionIssuedSetInput, id int64) (*model1.RegionIssued, error)
	DeleteRegionManagement(ctx context.Context, where model.RegionManagementBoolExp) (*model.RegionManagementMutationResponse, error)
	DeleteRegionManagementByPk(ctx context.Context, id int64) (*model1.RegionManagement, error)
	InsertRegionManagement(ctx context.Context, objects []*model.RegionManagementInsertInput) (*model.RegionManagementMutationResponse, error)
	InsertRegionManagementOne(ctx context.Context, objects model.RegionManagementInsertInput) (*model1.RegionManagement, error)
	UpdateRegionManagement(ctx context.Context, inc *model.RegionManagementIncInput, set *model.RegionManagementSetInput, where model.RegionManagementBoolExp) (*model.RegionManagementMutationResponse, error)
	UpdateRegionManagementByPk(ctx context.Context, inc *model.RegionManagementIncInput, set *model.RegionManagementSetInput, id int64) (*model1.RegionManagement, error)
	DeleteVehicleAlarmSupervision(ctx context.Context, where model.VehicleAlarmSupervisionBoolExp) (*model.VehicleAlarmSupervisionMutationResponse, error)
	DeleteVehicleAlarmSupervisionByPk(ctx context.Context, id int64) (*model1.VehicleAlarmSupervision, error)
	InsertVehicleAlarmSupervision(ctx context.Context, objects []*model.VehicleAlarmSupervisionInsertInput) (*model.VehicleAlarmSupervisionMutationResponse, error)
	InsertVehicleAlarmSupervisionOne(ctx context.Context, objects model.VehicleAlarmSupervisionInsertInput) (*model1.VehicleAlarmSupervision, error)
	UpdateVehicleAlarmSupervision(ctx context.Context, inc *model.VehicleAlarmSupervisionIncInput, set *model.VehicleAlarmSupervisionSetInput, where model.VehicleAlarmSupervisionBoolExp) (*model.VehicleAlarmSupervisionMutationResponse, error)
	UpdateVehicleAlarmSupervisionByPk(ctx context.Context, inc *model.VehicleAlarmSupervisionIncInput, set *model.VehicleAlarmSupervisionSetInput, id int64) (*model1.VehicleAlarmSupervision, error)
	DeleteVehicleAlarmTimesRecord(ctx context.Context, where model.VehicleAlarmTimesRecordBoolExp) (*model.VehicleAlarmTimesRecordMutationResponse, error)
	DeleteVehicleAlarmTimesRecordByPk(ctx context.Context, id int64) (*model1.VehicleAlarmTimesRecord, error)
	InsertVehicleAlarmTimesRecord(ctx context.Context, objects []*model.VehicleAlarmTimesRecordInsertInput) (*model.VehicleAlarmTimesRecordMutationResponse, error)
	InsertVehicleAlarmTimesRecordOne(ctx context.Context, objects model.VehicleAlarmTimesRecordInsertInput) (*model1.VehicleAlarmTimesRecord, error)
	UpdateVehicleAlarmTimesRecord(ctx context.Context, inc *model.VehicleAlarmTimesRecordIncInput, set *model.VehicleAlarmTimesRecordSetInput, where model.VehicleAlarmTimesRecordBoolExp) (*model.VehicleAlarmTimesRecordMutationResponse, error)
	UpdateVehicleAlarmTimesRecordByPk(ctx context.Context, inc *model.VehicleAlarmTimesRecordIncInput, set *model.VehicleAlarmTimesRecordSetInput, id int64) (*model1.VehicleAlarmTimesRecord, error)
	DeleteVehicleOfflineDisposal(ctx context.Context, where model.VehicleOfflineDisposalBoolExp) (*model.VehicleOfflineDisposalMutationResponse, error)
	DeleteVehicleOfflineDisposalByPk(ctx context.Context, id int64) (*model1.VehicleOfflineDisposal, error)
	InsertVehicleOfflineDisposal(ctx context.Context, objects []*model.VehicleOfflineDisposalInsertInput) (*model.VehicleOfflineDisposalMutationResponse, error)
	InsertVehicleOfflineDisposalOne(ctx context.Context, objects model.VehicleOfflineDisposalInsertInput) (*model1.VehicleOfflineDisposal, error)
	UpdateVehicleOfflineDisposal(ctx context.Context, inc *model.VehicleOfflineDisposalIncInput, set *model.VehicleOfflineDisposalSetInput, where model.VehicleOfflineDisposalBoolExp) (*model.VehicleOfflineDisposalMutationResponse, error)
	UpdateVehicleOfflineDisposalByPk(ctx context.Context, inc *model.VehicleOfflineDisposalIncInput, set *model.VehicleOfflineDisposalSetInput, id int64) (*model1.VehicleOfflineDisposal, error)
}
type QueryResolver interface {
	DynamicSpotCheckDisposal(ctx context.Context, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) ([]*model1.DynamicSpotCheckDisposal, error)
	DynamicSpotCheckDisposalAggregate(ctx context.Context, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) (*model.DynamicSpotCheckDisposalAggregate, error)
	DynamicSpotCheckDisposalByPk(ctx context.Context, id int64) (*model1.DynamicSpotCheckDisposal, error)
	DynamicSupervision(ctx context.Context, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) ([]*model1.DynamicSupervision, error)
	DynamicSupervisionAggregate(ctx context.Context, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) (*model.DynamicSupervisionAggregate, error)
	DynamicSupervisionByPk(ctx context.Context, id int64) (*model1.DynamicSupervision, error)
	DynamicSupervisionDetail(ctx context.Context, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) ([]*model1.DynamicSupervisionDetail, error)
	DynamicSupervisionDetailAggregate(ctx context.Context, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) (*model.DynamicSupervisionDetailAggregate, error)
	DynamicSupervisionDetailByPk(ctx context.Context, id int64) (*model1.DynamicSupervisionDetail, error)
	MuckTruckOnline(ctx context.Context, distinctOn []model.MuckTruckOnlineSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckOnlineOrderBy, where *model.MuckTruckOnlineBoolExp) ([]*model1.MuckTruckOnline, error)
	MuckTruckOnlineAggregate(ctx context.Context, distinctOn []model.MuckTruckOnlineSelectColumn, limit *int, offset *int, orderBy []*model.MuckTruckOnlineOrderBy, where *model.MuckTruckOnlineBoolExp) (*model.MuckTruckOnlineAggregate, error)
	MuckTruckOnlineByPk(ctx context.Context, id int64) (*model1.MuckTruckOnline, error)
	RegionIssued(ctx context.Context, distinctOn []model.RegionIssuedSelectColumn, limit *int, offset *int, orderBy []*model.RegionIssuedOrderBy, where *model.RegionIssuedBoolExp) ([]*model1.RegionIssued, error)
	RegionIssuedAggregate(ctx context.Context, distinctOn []model.RegionIssuedSelectColumn, limit *int, offset *int, orderBy []*model.RegionIssuedOrderBy, where *model.RegionIssuedBoolExp) (*model.RegionIssuedAggregate, error)
	RegionIssuedByPk(ctx context.Context, id int64) (*model1.RegionIssued, error)
	RegionManagement(ctx context.Context, distinctOn []model.RegionManagementSelectColumn, limit *int, offset *int, orderBy []*model.RegionManagementOrderBy, where *model.RegionManagementBoolExp) ([]*model1.RegionManagement, error)
	RegionManagementAggregate(ctx context.Context, distinctOn []model.RegionManagementSelectColumn, limit *int, offset *int, orderBy []*model.RegionManagementOrderBy, where *model.RegionManagementBoolExp) (*model.RegionManagementAggregate, error)
	RegionManagementByPk(ctx context.Context, id int64) (*model1.RegionManagement, error)
	VehicleAlarmSupervision(ctx context.Context, distinctOn []model.VehicleAlarmSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmSupervisionOrderBy, where *model.VehicleAlarmSupervisionBoolExp) ([]*model1.VehicleAlarmSupervision, error)
	VehicleAlarmSupervisionAggregate(ctx context.Context, distinctOn []model.VehicleAlarmSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmSupervisionOrderBy, where *model.VehicleAlarmSupervisionBoolExp) (*model.VehicleAlarmSupervisionAggregate, error)
	VehicleAlarmSupervisionByPk(ctx context.Context, id int64) (*model1.VehicleAlarmSupervision, error)
	VehicleAlarmTimesRecord(ctx context.Context, distinctOn []model.VehicleAlarmTimesRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmTimesRecordOrderBy, where *model.VehicleAlarmTimesRecordBoolExp) ([]*model1.VehicleAlarmTimesRecord, error)
	VehicleAlarmTimesRecordAggregate(ctx context.Context, distinctOn []model.VehicleAlarmTimesRecordSelectColumn, limit *int, offset *int, orderBy []*model.VehicleAlarmTimesRecordOrderBy, where *model.VehicleAlarmTimesRecordBoolExp) (*model.VehicleAlarmTimesRecordAggregate, error)
	VehicleAlarmTimesRecordByPk(ctx context.Context, id int64) (*model1.VehicleAlarmTimesRecord, error)
	VehicleOfflineDisposal(ctx context.Context, distinctOn []model.VehicleOfflineDisposalSelectColumn, limit *int, offset *int, orderBy []*model.VehicleOfflineDisposalOrderBy, where *model.VehicleOfflineDisposalBoolExp) ([]*model1.VehicleOfflineDisposal, error)
	VehicleOfflineDisposalAggregate(ctx context.Context, distinctOn []model.VehicleOfflineDisposalSelectColumn, limit *int, offset *int, orderBy []*model.VehicleOfflineDisposalOrderBy, where *model.VehicleOfflineDisposalBoolExp) (*model.VehicleOfflineDisposalAggregate, error)
	VehicleOfflineDisposalByPk(ctx context.Context, id int64) (*model1.VehicleOfflineDisposal, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "DynamicSpotCheckDisposal.announce_content":
		if e.complexity.DynamicSpotCheckDisposal.AnnounceContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.AnnounceContent(childComplexity), true

	case "DynamicSpotCheckDisposal.app_push_content":
		if e.complexity.DynamicSpotCheckDisposal.AppPushContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.AppPushContent(childComplexity), true

	case "DynamicSpotCheckDisposal.created_at":
		if e.complexity.DynamicSpotCheckDisposal.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.CreatedAt(childComplexity), true

	case "DynamicSpotCheckDisposal.created_by":
		if e.complexity.DynamicSpotCheckDisposal.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.CreatedBy(childComplexity), true

	case "DynamicSpotCheckDisposal.deleted_at":
		if e.complexity.DynamicSpotCheckDisposal.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.DeletedAt(childComplexity), true

	case "DynamicSpotCheckDisposal.deleted_by":
		if e.complexity.DynamicSpotCheckDisposal.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.DeletedBy(childComplexity), true

	case "DynamicSpotCheckDisposal.disposal_content":
		if e.complexity.DynamicSpotCheckDisposal.DisposalContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.DisposalContent(childComplexity), true

	case "DynamicSpotCheckDisposal.disposal_method":
		if e.complexity.DynamicSpotCheckDisposal.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.DisposalMethod(childComplexity), true

	case "DynamicSpotCheckDisposal.disposal_result":
		if e.complexity.DynamicSpotCheckDisposal.DisposalResult == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.DisposalResult(childComplexity), true

	case "DynamicSpotCheckDisposal.enterprise_id":
		if e.complexity.DynamicSpotCheckDisposal.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.EnterpriseID(childComplexity), true

	case "DynamicSpotCheckDisposal.feedback_time":
		if e.complexity.DynamicSpotCheckDisposal.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.FeedbackTime(childComplexity), true

	case "DynamicSpotCheckDisposal.id":
		if e.complexity.DynamicSpotCheckDisposal.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.ID(childComplexity), true

	case "DynamicSpotCheckDisposal.image_abnormal_handing_measure":
		if e.complexity.DynamicSpotCheckDisposal.ImageAbnormalHandingMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.ImageAbnormalHandingMeasure(childComplexity), true

	case "DynamicSpotCheckDisposal.is_announce":
		if e.complexity.DynamicSpotCheckDisposal.IsAnnounce == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.IsAnnounce(childComplexity), true

	case "DynamicSpotCheckDisposal.is_app_push":
		if e.complexity.DynamicSpotCheckDisposal.IsAppPush == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.IsAppPush(childComplexity), true

	case "DynamicSpotCheckDisposal.is_deleted":
		if e.complexity.DynamicSpotCheckDisposal.IsDeleted == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.IsDeleted(childComplexity), true

	case "DynamicSpotCheckDisposal.is_notify":
		if e.complexity.DynamicSpotCheckDisposal.IsNotify == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.IsNotify(childComplexity), true

	case "DynamicSpotCheckDisposal.is_sms_push":
		if e.complexity.DynamicSpotCheckDisposal.IsSmsPush == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.IsSmsPush(childComplexity), true

	case "DynamicSpotCheckDisposal.notify_content":
		if e.complexity.DynamicSpotCheckDisposal.NotifyContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.NotifyContent(childComplexity), true

	case "DynamicSpotCheckDisposal.operation_user":
		if e.complexity.DynamicSpotCheckDisposal.OperationUser == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.OperationUser(childComplexity), true

	case "DynamicSpotCheckDisposal.send_time":
		if e.complexity.DynamicSpotCheckDisposal.SendTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.SendTime(childComplexity), true

	case "DynamicSpotCheckDisposal.supervision_detail_id":
		if e.complexity.DynamicSpotCheckDisposal.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.SupervisionDetailID(childComplexity), true

	case "DynamicSpotCheckDisposal.tachograph_data_disposal_measure":
		if e.complexity.DynamicSpotCheckDisposal.TachographDataDisposalMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.TachographDataDisposalMeasure(childComplexity), true

	case "DynamicSpotCheckDisposal.telephone":
		if e.complexity.DynamicSpotCheckDisposal.Telephone == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.Telephone(childComplexity), true

	case "DynamicSpotCheckDisposal.updated_at":
		if e.complexity.DynamicSpotCheckDisposal.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.UpdatedAt(childComplexity), true

	case "DynamicSpotCheckDisposal.updated_by":
		if e.complexity.DynamicSpotCheckDisposal.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.UpdatedBy(childComplexity), true

	case "DynamicSpotCheckDisposal.vehicle_id":
		if e.complexity.DynamicSpotCheckDisposal.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.VehicleID(childComplexity), true

	case "DynamicSpotCheckDisposalAggregate.aggregate":
		if e.complexity.DynamicSpotCheckDisposalAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregate.Aggregate(childComplexity), true

	case "DynamicSpotCheckDisposalAggregateFields.avg":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Avg(childComplexity), true

	case "DynamicSpotCheckDisposalAggregateFields.count":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Count == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Count(childComplexity), true

	case "DynamicSpotCheckDisposalAggregateFields.max":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Max == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Max(childComplexity), true

	case "DynamicSpotCheckDisposalAggregateFields.min":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Min == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Min(childComplexity), true

	case "DynamicSpotCheckDisposalAggregateFields.stddev":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Stddev(childComplexity), true

	case "DynamicSpotCheckDisposalAggregateFields.stddev_pop":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.StddevPop(childComplexity), true

	case "DynamicSpotCheckDisposalAggregateFields.stddev_samp":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.StddevSamp(childComplexity), true

	case "DynamicSpotCheckDisposalAggregateFields.sum":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Sum(childComplexity), true

	case "DynamicSpotCheckDisposalAggregateFields.var_pop":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.VarPop(childComplexity), true

	case "DynamicSpotCheckDisposalAggregateFields.var_samp":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.VarSamp(childComplexity), true

	case "DynamicSpotCheckDisposalAggregateFields.variance":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Variance(childComplexity), true

	case "DynamicSpotCheckDisposalAvgFields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalAvgFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAvgFields.DisposalMethod(childComplexity), true

	case "DynamicSpotCheckDisposalAvgFields.id":
		if e.complexity.DynamicSpotCheckDisposalAvgFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAvgFields.ID(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.announce_content":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.AnnounceContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.AnnounceContent(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.app_push_content":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.AppPushContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.AppPushContent(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.created_at":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.CreatedAt(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.created_by":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.CreatedBy(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.deleted_at":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.DeletedAt(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.deleted_by":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.DeletedBy(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.disposal_content":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalContent(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalMethod(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.disposal_result":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalResult == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalResult(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.enterprise_id":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.EnterpriseID(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.feedback_time":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.FeedbackTime(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.id":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.ID(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.image_abnormal_handing_measure":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.ImageAbnormalHandingMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.ImageAbnormalHandingMeasure(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.is_announce":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.IsAnnounce == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.IsAnnounce(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.is_app_push":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.IsAppPush == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.IsAppPush(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.is_deleted":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.IsDeleted(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.is_notify":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.IsNotify == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.IsNotify(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.is_sms_push":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.IsSmsPush == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.IsSmsPush(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.notify_content":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.NotifyContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.NotifyContent(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.operation_user":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.OperationUser == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.OperationUser(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.send_time":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.SendTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.SendTime(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.supervision_detail_id":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.SupervisionDetailID(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.tachograph_data_disposal_measure":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.TachographDataDisposalMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.TachographDataDisposalMeasure(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.telephone":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.Telephone == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.Telephone(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.updated_at":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.UpdatedAt(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.updated_by":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.UpdatedBy(childComplexity), true

	case "DynamicSpotCheckDisposalMaxFields.vehicle_id":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.VehicleID(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.announce_content":
		if e.complexity.DynamicSpotCheckDisposalMinFields.AnnounceContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.AnnounceContent(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.app_push_content":
		if e.complexity.DynamicSpotCheckDisposalMinFields.AppPushContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.AppPushContent(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.created_at":
		if e.complexity.DynamicSpotCheckDisposalMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.CreatedAt(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.created_by":
		if e.complexity.DynamicSpotCheckDisposalMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.CreatedBy(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.deleted_at":
		if e.complexity.DynamicSpotCheckDisposalMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.DeletedAt(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.deleted_by":
		if e.complexity.DynamicSpotCheckDisposalMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.DeletedBy(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.disposal_content":
		if e.complexity.DynamicSpotCheckDisposalMinFields.DisposalContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.DisposalContent(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalMinFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.DisposalMethod(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.disposal_result":
		if e.complexity.DynamicSpotCheckDisposalMinFields.DisposalResult == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.DisposalResult(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.enterprise_id":
		if e.complexity.DynamicSpotCheckDisposalMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.EnterpriseID(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.feedback_time":
		if e.complexity.DynamicSpotCheckDisposalMinFields.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.FeedbackTime(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.id":
		if e.complexity.DynamicSpotCheckDisposalMinFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.ID(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.image_abnormal_handing_measure":
		if e.complexity.DynamicSpotCheckDisposalMinFields.ImageAbnormalHandingMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.ImageAbnormalHandingMeasure(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.is_announce":
		if e.complexity.DynamicSpotCheckDisposalMinFields.IsAnnounce == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.IsAnnounce(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.is_app_push":
		if e.complexity.DynamicSpotCheckDisposalMinFields.IsAppPush == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.IsAppPush(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.is_deleted":
		if e.complexity.DynamicSpotCheckDisposalMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.IsDeleted(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.is_notify":
		if e.complexity.DynamicSpotCheckDisposalMinFields.IsNotify == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.IsNotify(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.is_sms_push":
		if e.complexity.DynamicSpotCheckDisposalMinFields.IsSmsPush == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.IsSmsPush(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.notify_content":
		if e.complexity.DynamicSpotCheckDisposalMinFields.NotifyContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.NotifyContent(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.operation_user":
		if e.complexity.DynamicSpotCheckDisposalMinFields.OperationUser == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.OperationUser(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.send_time":
		if e.complexity.DynamicSpotCheckDisposalMinFields.SendTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.SendTime(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.supervision_detail_id":
		if e.complexity.DynamicSpotCheckDisposalMinFields.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.SupervisionDetailID(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.tachograph_data_disposal_measure":
		if e.complexity.DynamicSpotCheckDisposalMinFields.TachographDataDisposalMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.TachographDataDisposalMeasure(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.telephone":
		if e.complexity.DynamicSpotCheckDisposalMinFields.Telephone == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.Telephone(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.updated_at":
		if e.complexity.DynamicSpotCheckDisposalMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.UpdatedAt(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.updated_by":
		if e.complexity.DynamicSpotCheckDisposalMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.UpdatedBy(childComplexity), true

	case "DynamicSpotCheckDisposalMinFields.vehicle_id":
		if e.complexity.DynamicSpotCheckDisposalMinFields.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.VehicleID(childComplexity), true

	case "DynamicSpotCheckDisposalMutationResponse.affected_rows":
		if e.complexity.DynamicSpotCheckDisposalMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMutationResponse.AffectedRows(childComplexity), true

	case "DynamicSpotCheckDisposalMutationResponse.returning":
		if e.complexity.DynamicSpotCheckDisposalMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMutationResponse.Returning(childComplexity), true

	case "DynamicSpotCheckDisposalStddevFields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalStddevFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevFields.DisposalMethod(childComplexity), true

	case "DynamicSpotCheckDisposalStddevFields.id":
		if e.complexity.DynamicSpotCheckDisposalStddevFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevFields.ID(childComplexity), true

	case "DynamicSpotCheckDisposalStddevPopFields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalStddevPopFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevPopFields.DisposalMethod(childComplexity), true

	case "DynamicSpotCheckDisposalStddevPopFields.id":
		if e.complexity.DynamicSpotCheckDisposalStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevPopFields.ID(childComplexity), true

	case "DynamicSpotCheckDisposalStddevSampFields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalStddevSampFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevSampFields.DisposalMethod(childComplexity), true

	case "DynamicSpotCheckDisposalStddevSampFields.id":
		if e.complexity.DynamicSpotCheckDisposalStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevSampFields.ID(childComplexity), true

	case "DynamicSpotCheckDisposalSumFields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalSumFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalSumFields.DisposalMethod(childComplexity), true

	case "DynamicSpotCheckDisposalSumFields.id":
		if e.complexity.DynamicSpotCheckDisposalSumFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalSumFields.ID(childComplexity), true

	case "DynamicSpotCheckDisposalVarPopFields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalVarPopFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarPopFields.DisposalMethod(childComplexity), true

	case "DynamicSpotCheckDisposalVarPopFields.id":
		if e.complexity.DynamicSpotCheckDisposalVarPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarPopFields.ID(childComplexity), true

	case "DynamicSpotCheckDisposalVarSampFields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalVarSampFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarSampFields.DisposalMethod(childComplexity), true

	case "DynamicSpotCheckDisposalVarSampFields.id":
		if e.complexity.DynamicSpotCheckDisposalVarSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarSampFields.ID(childComplexity), true

	case "DynamicSpotCheckDisposalVarianceFields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalVarianceFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarianceFields.DisposalMethod(childComplexity), true

	case "DynamicSpotCheckDisposalVarianceFields.id":
		if e.complexity.DynamicSpotCheckDisposalVarianceFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarianceFields.ID(childComplexity), true

	case "DynamicSupervision.check_user_id":
		if e.complexity.DynamicSupervision.CheckUserID == nil {
			break
		}

		return e.complexity.DynamicSupervision.CheckUserID(childComplexity), true

	case "DynamicSupervision.city_id":
		if e.complexity.DynamicSupervision.CityID == nil {
			break
		}

		return e.complexity.DynamicSupervision.CityID(childComplexity), true

	case "DynamicSupervision.created_at":
		if e.complexity.DynamicSupervision.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervision.CreatedAt(childComplexity), true

	case "DynamicSupervision.created_by":
		if e.complexity.DynamicSupervision.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervision.CreatedBy(childComplexity), true

	case "DynamicSupervision.day":
		if e.complexity.DynamicSupervision.Day == nil {
			break
		}

		return e.complexity.DynamicSupervision.Day(childComplexity), true

	case "DynamicSupervision.deleted_at":
		if e.complexity.DynamicSupervision.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervision.DeletedAt(childComplexity), true

	case "DynamicSupervision.deleted_by":
		if e.complexity.DynamicSupervision.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervision.DeletedBy(childComplexity), true

	case "DynamicSupervision.district_id":
		if e.complexity.DynamicSupervision.DistrictID == nil {
			break
		}

		return e.complexity.DynamicSupervision.DistrictID(childComplexity), true

	case "DynamicSupervision.id":
		if e.complexity.DynamicSupervision.ID == nil {
			break
		}

		return e.complexity.DynamicSupervision.ID(childComplexity), true

	case "DynamicSupervision.is_deleted":
		if e.complexity.DynamicSupervision.IsDeleted == nil {
			break
		}

		return e.complexity.DynamicSupervision.IsDeleted(childComplexity), true

	case "DynamicSupervision.month":
		if e.complexity.DynamicSupervision.Month == nil {
			break
		}

		return e.complexity.DynamicSupervision.Month(childComplexity), true

	case "DynamicSupervision.province_id":
		if e.complexity.DynamicSupervision.ProvinceID == nil {
			break
		}

		return e.complexity.DynamicSupervision.ProvinceID(childComplexity), true

	case "DynamicSupervision.spot_check_date":
		if e.complexity.DynamicSupervision.SpotCheckDate == nil {
			break
		}

		return e.complexity.DynamicSupervision.SpotCheckDate(childComplexity), true

	case "DynamicSupervision.spot_check_number":
		if e.complexity.DynamicSupervision.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervision.SpotCheckNumber(childComplexity), true

	case "DynamicSupervision.spot_check_ratio":
		if e.complexity.DynamicSupervision.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervision.SpotCheckRatio(childComplexity), true

	case "DynamicSupervision.spot_check_total_number":
		if e.complexity.DynamicSupervision.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervision.SpotCheckTotalNumber(childComplexity), true

	case "DynamicSupervision.supervision_id":
		if e.complexity.DynamicSupervision.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervision.SupervisionID(childComplexity), true

	case "DynamicSupervision.total_number_vehicle":
		if e.complexity.DynamicSupervision.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervision.TotalNumberVehicle(childComplexity), true

	case "DynamicSupervision.updated_at":
		if e.complexity.DynamicSupervision.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervision.UpdatedAt(childComplexity), true

	case "DynamicSupervision.updated_by":
		if e.complexity.DynamicSupervision.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervision.UpdatedBy(childComplexity), true

	case "DynamicSupervision.year":
		if e.complexity.DynamicSupervision.Year == nil {
			break
		}

		return e.complexity.DynamicSupervision.Year(childComplexity), true

	case "DynamicSupervisionAggregate.aggregate":
		if e.complexity.DynamicSupervisionAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregate.Aggregate(childComplexity), true

	case "DynamicSupervisionAggregateFields.avg":
		if e.complexity.DynamicSupervisionAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Avg(childComplexity), true

	case "DynamicSupervisionAggregateFields.count":
		if e.complexity.DynamicSupervisionAggregateFields.Count == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Count(childComplexity), true

	case "DynamicSupervisionAggregateFields.max":
		if e.complexity.DynamicSupervisionAggregateFields.Max == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Max(childComplexity), true

	case "DynamicSupervisionAggregateFields.min":
		if e.complexity.DynamicSupervisionAggregateFields.Min == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Min(childComplexity), true

	case "DynamicSupervisionAggregateFields.stddev":
		if e.complexity.DynamicSupervisionAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Stddev(childComplexity), true

	case "DynamicSupervisionAggregateFields.stddev_pop":
		if e.complexity.DynamicSupervisionAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.StddevPop(childComplexity), true

	case "DynamicSupervisionAggregateFields.stddev_samp":
		if e.complexity.DynamicSupervisionAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.StddevSamp(childComplexity), true

	case "DynamicSupervisionAggregateFields.sum":
		if e.complexity.DynamicSupervisionAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Sum(childComplexity), true

	case "DynamicSupervisionAggregateFields.var_pop":
		if e.complexity.DynamicSupervisionAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.VarPop(childComplexity), true

	case "DynamicSupervisionAggregateFields.var_samp":
		if e.complexity.DynamicSupervisionAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.VarSamp(childComplexity), true

	case "DynamicSupervisionAggregateFields.variance":
		if e.complexity.DynamicSupervisionAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Variance(childComplexity), true

	case "DynamicSupervisionAvgFields.day":
		if e.complexity.DynamicSupervisionAvgFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.Day(childComplexity), true

	case "DynamicSupervisionAvgFields.id":
		if e.complexity.DynamicSupervisionAvgFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.ID(childComplexity), true

	case "DynamicSupervisionAvgFields.month":
		if e.complexity.DynamicSupervisionAvgFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.Month(childComplexity), true

	case "DynamicSupervisionAvgFields.spot_check_number":
		if e.complexity.DynamicSupervisionAvgFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.SpotCheckNumber(childComplexity), true

	case "DynamicSupervisionAvgFields.spot_check_ratio":
		if e.complexity.DynamicSupervisionAvgFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.SpotCheckRatio(childComplexity), true

	case "DynamicSupervisionAvgFields.spot_check_total_number":
		if e.complexity.DynamicSupervisionAvgFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.SpotCheckTotalNumber(childComplexity), true

	case "DynamicSupervisionAvgFields.total_number_vehicle":
		if e.complexity.DynamicSupervisionAvgFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.TotalNumberVehicle(childComplexity), true

	case "DynamicSupervisionAvgFields.year":
		if e.complexity.DynamicSupervisionAvgFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.Year(childComplexity), true

	case "DynamicSupervisionDetail.assignee":
		if e.complexity.DynamicSupervisionDetail.Assignee == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Assignee(childComplexity), true

	case "DynamicSupervisionDetail.business_scope":
		if e.complexity.DynamicSupervisionDetail.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.BusinessScope(childComplexity), true

	case "DynamicSupervisionDetail.coordinate":
		if e.complexity.DynamicSupervisionDetail.Coordinate == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Coordinate(childComplexity), true

	case "DynamicSupervisionDetail.created_at":
		if e.complexity.DynamicSupervisionDetail.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.CreatedAt(childComplexity), true

	case "DynamicSupervisionDetail.created_by":
		if e.complexity.DynamicSupervisionDetail.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.CreatedBy(childComplexity), true

	case "DynamicSupervisionDetail.curve":
		if e.complexity.DynamicSupervisionDetail.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Curve(childComplexity), true

	case "DynamicSupervisionDetail.deleted_at":
		if e.complexity.DynamicSupervisionDetail.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DeletedAt(childComplexity), true

	case "DynamicSupervisionDetail.deleted_by":
		if e.complexity.DynamicSupervisionDetail.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DeletedBy(childComplexity), true

	case "DynamicSupervisionDetail.disposal_measures":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures(childComplexity), true

	case "DynamicSupervisionDetail.disposal_measures1":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures1(childComplexity), true

	case "DynamicSupervisionDetail.disposal_measures2":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures2(childComplexity), true

	case "DynamicSupervisionDetail.disposal_measures3":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures3(childComplexity), true

	case "DynamicSupervisionDetail.disposal_measures4":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures4(childComplexity), true

	case "DynamicSupervisionDetail.disposal_measures5":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures5(childComplexity), true

	case "DynamicSupervisionDetail.disposal_measures6":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures6(childComplexity), true

	case "DynamicSupervisionDetail.disposal_measures7":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures7(childComplexity), true

	case "DynamicSupervisionDetail.disposal_results":
		if e.complexity.DynamicSupervisionDetail.DisposalResults == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults(childComplexity), true

	case "DynamicSupervisionDetail.disposal_results1":
		if e.complexity.DynamicSupervisionDetail.DisposalResults1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults1(childComplexity), true

	case "DynamicSupervisionDetail.disposal_results2":
		if e.complexity.DynamicSupervisionDetail.DisposalResults2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults2(childComplexity), true

	case "DynamicSupervisionDetail.disposal_results3":
		if e.complexity.DynamicSupervisionDetail.DisposalResults3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults3(childComplexity), true

	case "DynamicSupervisionDetail.disposal_results4":
		if e.complexity.DynamicSupervisionDetail.DisposalResults4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults4(childComplexity), true

	case "DynamicSupervisionDetail.disposal_results5":
		if e.complexity.DynamicSupervisionDetail.DisposalResults5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults5(childComplexity), true

	case "DynamicSupervisionDetail.disposal_results6":
		if e.complexity.DynamicSupervisionDetail.DisposalResults6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults6(childComplexity), true

	case "DynamicSupervisionDetail.disposal_results7":
		if e.complexity.DynamicSupervisionDetail.DisposalResults7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults7(childComplexity), true

	case "DynamicSupervisionDetail.driver_id":
		if e.complexity.DynamicSupervisionDetail.DriverID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DriverID(childComplexity), true

	case "DynamicSupervisionDetail.enterprise_id":
		if e.complexity.DynamicSupervisionDetail.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.EnterpriseID(childComplexity), true

	case "DynamicSupervisionDetail.equipment":
		if e.complexity.DynamicSupervisionDetail.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Equipment(childComplexity), true

	case "DynamicSupervisionDetail.fatigue_alarm_time":
		if e.complexity.DynamicSupervisionDetail.FatigueAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.FatigueAlarmTime(childComplexity), true

	case "DynamicSupervisionDetail.feedback_time":
		if e.complexity.DynamicSupervisionDetail.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.FeedbackTime(childComplexity), true

	case "DynamicSupervisionDetail.gps_speed":
		if e.complexity.DynamicSupervisionDetail.GpsSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.GpsSpeed(childComplexity), true

	case "DynamicSupervisionDetail.id":
		if e.complexity.DynamicSupervisionDetail.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.ID(childComplexity), true

	case "DynamicSupervisionDetail.is_deleted":
		if e.complexity.DynamicSupervisionDetail.IsDeleted == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsDeleted(childComplexity), true

	case "DynamicSupervisionDetail.is_fatigue_driving":
		if e.complexity.DynamicSupervisionDetail.IsFatigueDriving == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsFatigueDriving(childComplexity), true

	case "DynamicSupervisionDetail.is_locate":
		if e.complexity.DynamicSupervisionDetail.IsLocate == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsLocate(childComplexity), true

	case "DynamicSupervisionDetail.is_morning_outage":
		if e.complexity.DynamicSupervisionDetail.IsMorningOutage == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsMorningOutage(childComplexity), true

	case "DynamicSupervisionDetail.is_online":
		if e.complexity.DynamicSupervisionDetail.IsOnline == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsOnline(childComplexity), true

	case "DynamicSupervisionDetail.is_send":
		if e.complexity.DynamicSupervisionDetail.IsSend == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsSend(childComplexity), true

	case "DynamicSupervisionDetail.is_speeding":
		if e.complexity.DynamicSupervisionDetail.IsSpeeding == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsSpeeding(childComplexity), true

	case "DynamicSupervisionDetail.is_tachograph_record_normal":
		if e.complexity.DynamicSupervisionDetail.IsTachographRecordNormal == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsTachographRecordNormal(childComplexity), true

	case "DynamicSupervisionDetail.latitude_longitude_description":
		if e.complexity.DynamicSupervisionDetail.LatitudeLongitudeDescription == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.LatitudeLongitudeDescription(childComplexity), true

	case "DynamicSupervisionDetail.lens_on":
		if e.complexity.DynamicSupervisionDetail.LensOn == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.LensOn(childComplexity), true

	case "DynamicSupervisionDetail.lens_position":
		if e.complexity.DynamicSupervisionDetail.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.LensPosition(childComplexity), true

	case "DynamicSupervisionDetail.monitor_end_time":
		if e.complexity.DynamicSupervisionDetail.MonitorEndTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.MonitorEndTime(childComplexity), true

	case "DynamicSupervisionDetail.monitoring_location":
		if e.complexity.DynamicSupervisionDetail.MonitoringLocation == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.MonitoringLocation(childComplexity), true

	case "DynamicSupervisionDetail.monitoring_time":
		if e.complexity.DynamicSupervisionDetail.MonitoringTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.MonitoringTime(childComplexity), true

	case "DynamicSupervisionDetail.other_infraction":
		if e.complexity.DynamicSupervisionDetail.OtherInfraction == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.OtherInfraction(childComplexity), true

	case "DynamicSupervisionDetail.others":
		if e.complexity.DynamicSupervisionDetail.Others == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Others(childComplexity), true

	case "DynamicSupervisionDetail.outage_alarm_time":
		if e.complexity.DynamicSupervisionDetail.OutageAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.OutageAlarmTime(childComplexity), true

	case "DynamicSupervisionDetail.remarks":
		if e.complexity.DynamicSupervisionDetail.Remarks == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Remarks(childComplexity), true

	case "DynamicSupervisionDetail.speed_alarm_time":
		if e.complexity.DynamicSupervisionDetail.SpeedAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.SpeedAlarmTime(childComplexity), true

	case "DynamicSupervisionDetail.speeding_speed":
		if e.complexity.DynamicSupervisionDetail.SpeedingSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.SpeedingSpeed(childComplexity), true

	case "DynamicSupervisionDetail.supervision_detail_id":
		if e.complexity.DynamicSupervisionDetail.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.SupervisionDetailID(childComplexity), true

	case "DynamicSupervisionDetail.supervision_id":
		if e.complexity.DynamicSupervisionDetail.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.SupervisionID(childComplexity), true

	case "DynamicSupervisionDetail.tachograph_data_exception":
		if e.complexity.DynamicSupervisionDetail.TachographDataException == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.TachographDataException(childComplexity), true

	case "DynamicSupervisionDetail.tachograph_speed":
		if e.complexity.DynamicSupervisionDetail.TachographSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.TachographSpeed(childComplexity), true

	case "DynamicSupervisionDetail.taxi_state":
		if e.complexity.DynamicSupervisionDetail.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.TaxiState(childComplexity), true

	case "DynamicSupervisionDetail.trail":
		if e.complexity.DynamicSupervisionDetail.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Trail(childComplexity), true

	case "DynamicSupervisionDetail.treatment_time":
		if e.complexity.DynamicSupervisionDetail.TreatmentTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.TreatmentTime(childComplexity), true

	case "DynamicSupervisionDetail.updated_at":
		if e.complexity.DynamicSupervisionDetail.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.UpdatedAt(childComplexity), true

	case "DynamicSupervisionDetail.updated_by":
		if e.complexity.DynamicSupervisionDetail.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.UpdatedBy(childComplexity), true

	case "DynamicSupervisionDetail.vehicle_id":
		if e.complexity.DynamicSupervisionDetail.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.VehicleID(childComplexity), true

	case "DynamicSupervisionDetailAggregate.aggregate":
		if e.complexity.DynamicSupervisionDetailAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregate.Aggregate(childComplexity), true

	case "DynamicSupervisionDetailAggregateFields.avg":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Avg(childComplexity), true

	case "DynamicSupervisionDetailAggregateFields.count":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Count == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Count(childComplexity), true

	case "DynamicSupervisionDetailAggregateFields.max":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Max == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Max(childComplexity), true

	case "DynamicSupervisionDetailAggregateFields.min":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Min == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Min(childComplexity), true

	case "DynamicSupervisionDetailAggregateFields.stddev":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Stddev(childComplexity), true

	case "DynamicSupervisionDetailAggregateFields.stddev_pop":
		if e.complexity.DynamicSupervisionDetailAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.StddevPop(childComplexity), true

	case "DynamicSupervisionDetailAggregateFields.stddev_samp":
		if e.complexity.DynamicSupervisionDetailAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.StddevSamp(childComplexity), true

	case "DynamicSupervisionDetailAggregateFields.sum":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Sum(childComplexity), true

	case "DynamicSupervisionDetailAggregateFields.var_pop":
		if e.complexity.DynamicSupervisionDetailAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.VarPop(childComplexity), true

	case "DynamicSupervisionDetailAggregateFields.var_samp":
		if e.complexity.DynamicSupervisionDetailAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.VarSamp(childComplexity), true

	case "DynamicSupervisionDetailAggregateFields.variance":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Variance(childComplexity), true

	case "DynamicSupervisionDetailAvgFields.business_scope":
		if e.complexity.DynamicSupervisionDetailAvgFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.BusinessScope(childComplexity), true

	case "DynamicSupervisionDetailAvgFields.curve":
		if e.complexity.DynamicSupervisionDetailAvgFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.Curve(childComplexity), true

	case "DynamicSupervisionDetailAvgFields.equipment":
		if e.complexity.DynamicSupervisionDetailAvgFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.Equipment(childComplexity), true

	case "DynamicSupervisionDetailAvgFields.id":
		if e.complexity.DynamicSupervisionDetailAvgFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.ID(childComplexity), true

	case "DynamicSupervisionDetailAvgFields.lens_position":
		if e.complexity.DynamicSupervisionDetailAvgFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.LensPosition(childComplexity), true

	case "DynamicSupervisionDetailAvgFields.taxi_state":
		if e.complexity.DynamicSupervisionDetailAvgFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.TaxiState(childComplexity), true

	case "DynamicSupervisionDetailAvgFields.trail":
		if e.complexity.DynamicSupervisionDetailAvgFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.Trail(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.assignee":
		if e.complexity.DynamicSupervisionDetailMaxFields.Assignee == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Assignee(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.business_scope":
		if e.complexity.DynamicSupervisionDetailMaxFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.BusinessScope(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.coordinate":
		if e.complexity.DynamicSupervisionDetailMaxFields.Coordinate == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Coordinate(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.created_at":
		if e.complexity.DynamicSupervisionDetailMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.CreatedAt(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.created_by":
		if e.complexity.DynamicSupervisionDetailMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.CreatedBy(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.curve":
		if e.complexity.DynamicSupervisionDetailMaxFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Curve(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.deleted_at":
		if e.complexity.DynamicSupervisionDetailMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DeletedAt(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.deleted_by":
		if e.complexity.DynamicSupervisionDetailMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DeletedBy(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_measures":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_measures1":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures1(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_measures2":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures2(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_measures3":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures3(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_measures4":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures4(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_measures5":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures5(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_measures6":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures6(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_measures7":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures7(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_results":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_results1":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults1(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_results2":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults2(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_results3":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults3(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_results4":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults4(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_results5":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults5(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_results6":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults6(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.disposal_results7":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults7(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.driver_id":
		if e.complexity.DynamicSupervisionDetailMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DriverID(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.enterprise_id":
		if e.complexity.DynamicSupervisionDetailMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.EnterpriseID(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.equipment":
		if e.complexity.DynamicSupervisionDetailMaxFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Equipment(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.fatigue_alarm_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.FatigueAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.FatigueAlarmTime(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.feedback_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.FeedbackTime(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.gps_speed":
		if e.complexity.DynamicSupervisionDetailMaxFields.GpsSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.GpsSpeed(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.id":
		if e.complexity.DynamicSupervisionDetailMaxFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.ID(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.is_deleted":
		if e.complexity.DynamicSupervisionDetailMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.IsDeleted(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.is_fatigue_driving":
		if e.complexity.DynamicSupervisionDetailMaxFields.IsFatigueDriving == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.IsFatigueDriving(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.is_locate":
		if e.complexity.DynamicSupervisionDetailMaxFields.IsLocate == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.IsLocate(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.is_morning_outage":
		if e.complexity.DynamicSupervisionDetailMaxFields.IsMorningOutage == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.IsMorningOutage(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.is_online":
		if e.complexity.DynamicSupervisionDetailMaxFields.IsOnline == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.IsOnline(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.is_send":
		if e.complexity.DynamicSupervisionDetailMaxFields.IsSend == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.IsSend(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.is_speeding":
		if e.complexity.DynamicSupervisionDetailMaxFields.IsSpeeding == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.IsSpeeding(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.is_tachograph_record_normal":
		if e.complexity.DynamicSupervisionDetailMaxFields.IsTachographRecordNormal == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.IsTachographRecordNormal(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.latitude_longitude_description":
		if e.complexity.DynamicSupervisionDetailMaxFields.LatitudeLongitudeDescription == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.LatitudeLongitudeDescription(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.lens_on":
		if e.complexity.DynamicSupervisionDetailMaxFields.LensOn == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.LensOn(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.lens_position":
		if e.complexity.DynamicSupervisionDetailMaxFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.LensPosition(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.monitor_end_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.MonitorEndTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.MonitorEndTime(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.monitoring_location":
		if e.complexity.DynamicSupervisionDetailMaxFields.MonitoringLocation == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.MonitoringLocation(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.monitoring_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.MonitoringTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.MonitoringTime(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.other_infraction":
		if e.complexity.DynamicSupervisionDetailMaxFields.OtherInfraction == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.OtherInfraction(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.others":
		if e.complexity.DynamicSupervisionDetailMaxFields.Others == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Others(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.outage_alarm_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.OutageAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.OutageAlarmTime(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.remarks":
		if e.complexity.DynamicSupervisionDetailMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Remarks(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.speed_alarm_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.SpeedAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.SpeedAlarmTime(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.speeding_speed":
		if e.complexity.DynamicSupervisionDetailMaxFields.SpeedingSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.SpeedingSpeed(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.supervision_detail_id":
		if e.complexity.DynamicSupervisionDetailMaxFields.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.SupervisionDetailID(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.supervision_id":
		if e.complexity.DynamicSupervisionDetailMaxFields.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.SupervisionID(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.tachograph_data_exception":
		if e.complexity.DynamicSupervisionDetailMaxFields.TachographDataException == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.TachographDataException(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.tachograph_speed":
		if e.complexity.DynamicSupervisionDetailMaxFields.TachographSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.TachographSpeed(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.taxi_state":
		if e.complexity.DynamicSupervisionDetailMaxFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.TaxiState(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.trail":
		if e.complexity.DynamicSupervisionDetailMaxFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Trail(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.treatment_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.TreatmentTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.TreatmentTime(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.updated_at":
		if e.complexity.DynamicSupervisionDetailMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.UpdatedAt(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.updated_by":
		if e.complexity.DynamicSupervisionDetailMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.UpdatedBy(childComplexity), true

	case "DynamicSupervisionDetailMaxFields.vehicle_id":
		if e.complexity.DynamicSupervisionDetailMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.VehicleID(childComplexity), true

	case "DynamicSupervisionDetailMinFields.assignee":
		if e.complexity.DynamicSupervisionDetailMinFields.Assignee == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Assignee(childComplexity), true

	case "DynamicSupervisionDetailMinFields.business_scope":
		if e.complexity.DynamicSupervisionDetailMinFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.BusinessScope(childComplexity), true

	case "DynamicSupervisionDetailMinFields.coordinate":
		if e.complexity.DynamicSupervisionDetailMinFields.Coordinate == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Coordinate(childComplexity), true

	case "DynamicSupervisionDetailMinFields.created_at":
		if e.complexity.DynamicSupervisionDetailMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.CreatedAt(childComplexity), true

	case "DynamicSupervisionDetailMinFields.created_by":
		if e.complexity.DynamicSupervisionDetailMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.CreatedBy(childComplexity), true

	case "DynamicSupervisionDetailMinFields.curve":
		if e.complexity.DynamicSupervisionDetailMinFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Curve(childComplexity), true

	case "DynamicSupervisionDetailMinFields.deleted_at":
		if e.complexity.DynamicSupervisionDetailMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DeletedAt(childComplexity), true

	case "DynamicSupervisionDetailMinFields.deleted_by":
		if e.complexity.DynamicSupervisionDetailMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DeletedBy(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_measures":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_measures1":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures1(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_measures2":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures2(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_measures3":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures3(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_measures4":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures4(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_measures5":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures5(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_measures6":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures6(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_measures7":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures7(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_results":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_results1":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults1(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_results2":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults2(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_results3":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults3(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_results4":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults4(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_results5":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults5(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_results6":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults6(childComplexity), true

	case "DynamicSupervisionDetailMinFields.disposal_results7":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults7(childComplexity), true

	case "DynamicSupervisionDetailMinFields.driver_id":
		if e.complexity.DynamicSupervisionDetailMinFields.DriverID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DriverID(childComplexity), true

	case "DynamicSupervisionDetailMinFields.enterprise_id":
		if e.complexity.DynamicSupervisionDetailMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.EnterpriseID(childComplexity), true

	case "DynamicSupervisionDetailMinFields.equipment":
		if e.complexity.DynamicSupervisionDetailMinFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Equipment(childComplexity), true

	case "DynamicSupervisionDetailMinFields.fatigue_alarm_time":
		if e.complexity.DynamicSupervisionDetailMinFields.FatigueAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.FatigueAlarmTime(childComplexity), true

	case "DynamicSupervisionDetailMinFields.feedback_time":
		if e.complexity.DynamicSupervisionDetailMinFields.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.FeedbackTime(childComplexity), true

	case "DynamicSupervisionDetailMinFields.gps_speed":
		if e.complexity.DynamicSupervisionDetailMinFields.GpsSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.GpsSpeed(childComplexity), true

	case "DynamicSupervisionDetailMinFields.id":
		if e.complexity.DynamicSupervisionDetailMinFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.ID(childComplexity), true

	case "DynamicSupervisionDetailMinFields.is_deleted":
		if e.complexity.DynamicSupervisionDetailMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.IsDeleted(childComplexity), true

	case "DynamicSupervisionDetailMinFields.is_fatigue_driving":
		if e.complexity.DynamicSupervisionDetailMinFields.IsFatigueDriving == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.IsFatigueDriving(childComplexity), true

	case "DynamicSupervisionDetailMinFields.is_locate":
		if e.complexity.DynamicSupervisionDetailMinFields.IsLocate == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.IsLocate(childComplexity), true

	case "DynamicSupervisionDetailMinFields.is_morning_outage":
		if e.complexity.DynamicSupervisionDetailMinFields.IsMorningOutage == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.IsMorningOutage(childComplexity), true

	case "DynamicSupervisionDetailMinFields.is_online":
		if e.complexity.DynamicSupervisionDetailMinFields.IsOnline == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.IsOnline(childComplexity), true

	case "DynamicSupervisionDetailMinFields.is_send":
		if e.complexity.DynamicSupervisionDetailMinFields.IsSend == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.IsSend(childComplexity), true

	case "DynamicSupervisionDetailMinFields.is_speeding":
		if e.complexity.DynamicSupervisionDetailMinFields.IsSpeeding == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.IsSpeeding(childComplexity), true

	case "DynamicSupervisionDetailMinFields.is_tachograph_record_normal":
		if e.complexity.DynamicSupervisionDetailMinFields.IsTachographRecordNormal == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.IsTachographRecordNormal(childComplexity), true

	case "DynamicSupervisionDetailMinFields.latitude_longitude_description":
		if e.complexity.DynamicSupervisionDetailMinFields.LatitudeLongitudeDescription == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.LatitudeLongitudeDescription(childComplexity), true

	case "DynamicSupervisionDetailMinFields.lens_on":
		if e.complexity.DynamicSupervisionDetailMinFields.LensOn == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.LensOn(childComplexity), true

	case "DynamicSupervisionDetailMinFields.lens_position":
		if e.complexity.DynamicSupervisionDetailMinFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.LensPosition(childComplexity), true

	case "DynamicSupervisionDetailMinFields.monitor_end_time":
		if e.complexity.DynamicSupervisionDetailMinFields.MonitorEndTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.MonitorEndTime(childComplexity), true

	case "DynamicSupervisionDetailMinFields.monitoring_location":
		if e.complexity.DynamicSupervisionDetailMinFields.MonitoringLocation == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.MonitoringLocation(childComplexity), true

	case "DynamicSupervisionDetailMinFields.monitoring_time":
		if e.complexity.DynamicSupervisionDetailMinFields.MonitoringTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.MonitoringTime(childComplexity), true

	case "DynamicSupervisionDetailMinFields.other_infraction":
		if e.complexity.DynamicSupervisionDetailMinFields.OtherInfraction == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.OtherInfraction(childComplexity), true

	case "DynamicSupervisionDetailMinFields.others":
		if e.complexity.DynamicSupervisionDetailMinFields.Others == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Others(childComplexity), true

	case "DynamicSupervisionDetailMinFields.outage_alarm_time":
		if e.complexity.DynamicSupervisionDetailMinFields.OutageAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.OutageAlarmTime(childComplexity), true

	case "DynamicSupervisionDetailMinFields.remarks":
		if e.complexity.DynamicSupervisionDetailMinFields.Remarks == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Remarks(childComplexity), true

	case "DynamicSupervisionDetailMinFields.speed_alarm_time":
		if e.complexity.DynamicSupervisionDetailMinFields.SpeedAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.SpeedAlarmTime(childComplexity), true

	case "DynamicSupervisionDetailMinFields.speeding_speed":
		if e.complexity.DynamicSupervisionDetailMinFields.SpeedingSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.SpeedingSpeed(childComplexity), true

	case "DynamicSupervisionDetailMinFields.supervision_detail_id":
		if e.complexity.DynamicSupervisionDetailMinFields.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.SupervisionDetailID(childComplexity), true

	case "DynamicSupervisionDetailMinFields.supervision_id":
		if e.complexity.DynamicSupervisionDetailMinFields.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.SupervisionID(childComplexity), true

	case "DynamicSupervisionDetailMinFields.tachograph_data_exception":
		if e.complexity.DynamicSupervisionDetailMinFields.TachographDataException == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.TachographDataException(childComplexity), true

	case "DynamicSupervisionDetailMinFields.tachograph_speed":
		if e.complexity.DynamicSupervisionDetailMinFields.TachographSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.TachographSpeed(childComplexity), true

	case "DynamicSupervisionDetailMinFields.taxi_state":
		if e.complexity.DynamicSupervisionDetailMinFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.TaxiState(childComplexity), true

	case "DynamicSupervisionDetailMinFields.trail":
		if e.complexity.DynamicSupervisionDetailMinFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Trail(childComplexity), true

	case "DynamicSupervisionDetailMinFields.treatment_time":
		if e.complexity.DynamicSupervisionDetailMinFields.TreatmentTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.TreatmentTime(childComplexity), true

	case "DynamicSupervisionDetailMinFields.updated_at":
		if e.complexity.DynamicSupervisionDetailMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.UpdatedAt(childComplexity), true

	case "DynamicSupervisionDetailMinFields.updated_by":
		if e.complexity.DynamicSupervisionDetailMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.UpdatedBy(childComplexity), true

	case "DynamicSupervisionDetailMinFields.vehicle_id":
		if e.complexity.DynamicSupervisionDetailMinFields.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.VehicleID(childComplexity), true

	case "DynamicSupervisionDetailMutationResponse.affected_rows":
		if e.complexity.DynamicSupervisionDetailMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMutationResponse.AffectedRows(childComplexity), true

	case "DynamicSupervisionDetailMutationResponse.returning":
		if e.complexity.DynamicSupervisionDetailMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMutationResponse.Returning(childComplexity), true

	case "DynamicSupervisionDetailStddevFields.business_scope":
		if e.complexity.DynamicSupervisionDetailStddevFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.BusinessScope(childComplexity), true

	case "DynamicSupervisionDetailStddevFields.curve":
		if e.complexity.DynamicSupervisionDetailStddevFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.Curve(childComplexity), true

	case "DynamicSupervisionDetailStddevFields.equipment":
		if e.complexity.DynamicSupervisionDetailStddevFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.Equipment(childComplexity), true

	case "DynamicSupervisionDetailStddevFields.id":
		if e.complexity.DynamicSupervisionDetailStddevFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.ID(childComplexity), true

	case "DynamicSupervisionDetailStddevFields.lens_position":
		if e.complexity.DynamicSupervisionDetailStddevFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.LensPosition(childComplexity), true

	case "DynamicSupervisionDetailStddevFields.taxi_state":
		if e.complexity.DynamicSupervisionDetailStddevFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.TaxiState(childComplexity), true

	case "DynamicSupervisionDetailStddevFields.trail":
		if e.complexity.DynamicSupervisionDetailStddevFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.Trail(childComplexity), true

	case "DynamicSupervisionDetailStddevPopFields.business_scope":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.BusinessScope(childComplexity), true

	case "DynamicSupervisionDetailStddevPopFields.curve":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.Curve(childComplexity), true

	case "DynamicSupervisionDetailStddevPopFields.equipment":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.Equipment(childComplexity), true

	case "DynamicSupervisionDetailStddevPopFields.id":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.ID(childComplexity), true

	case "DynamicSupervisionDetailStddevPopFields.lens_position":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.LensPosition(childComplexity), true

	case "DynamicSupervisionDetailStddevPopFields.taxi_state":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.TaxiState(childComplexity), true

	case "DynamicSupervisionDetailStddevPopFields.trail":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.Trail(childComplexity), true

	case "DynamicSupervisionDetailStddevSampFields.business_scope":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.BusinessScope(childComplexity), true

	case "DynamicSupervisionDetailStddevSampFields.curve":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.Curve(childComplexity), true

	case "DynamicSupervisionDetailStddevSampFields.equipment":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.Equipment(childComplexity), true

	case "DynamicSupervisionDetailStddevSampFields.id":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.ID(childComplexity), true

	case "DynamicSupervisionDetailStddevSampFields.lens_position":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.LensPosition(childComplexity), true

	case "DynamicSupervisionDetailStddevSampFields.taxi_state":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.TaxiState(childComplexity), true

	case "DynamicSupervisionDetailStddevSampFields.trail":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.Trail(childComplexity), true

	case "DynamicSupervisionDetailSumFields.business_scope":
		if e.complexity.DynamicSupervisionDetailSumFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.BusinessScope(childComplexity), true

	case "DynamicSupervisionDetailSumFields.curve":
		if e.complexity.DynamicSupervisionDetailSumFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.Curve(childComplexity), true

	case "DynamicSupervisionDetailSumFields.equipment":
		if e.complexity.DynamicSupervisionDetailSumFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.Equipment(childComplexity), true

	case "DynamicSupervisionDetailSumFields.id":
		if e.complexity.DynamicSupervisionDetailSumFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.ID(childComplexity), true

	case "DynamicSupervisionDetailSumFields.lens_position":
		if e.complexity.DynamicSupervisionDetailSumFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.LensPosition(childComplexity), true

	case "DynamicSupervisionDetailSumFields.taxi_state":
		if e.complexity.DynamicSupervisionDetailSumFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.TaxiState(childComplexity), true

	case "DynamicSupervisionDetailSumFields.trail":
		if e.complexity.DynamicSupervisionDetailSumFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.Trail(childComplexity), true

	case "DynamicSupervisionDetailVarPopFields.business_scope":
		if e.complexity.DynamicSupervisionDetailVarPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.BusinessScope(childComplexity), true

	case "DynamicSupervisionDetailVarPopFields.curve":
		if e.complexity.DynamicSupervisionDetailVarPopFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.Curve(childComplexity), true

	case "DynamicSupervisionDetailVarPopFields.equipment":
		if e.complexity.DynamicSupervisionDetailVarPopFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.Equipment(childComplexity), true

	case "DynamicSupervisionDetailVarPopFields.id":
		if e.complexity.DynamicSupervisionDetailVarPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.ID(childComplexity), true

	case "DynamicSupervisionDetailVarPopFields.lens_position":
		if e.complexity.DynamicSupervisionDetailVarPopFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.LensPosition(childComplexity), true

	case "DynamicSupervisionDetailVarPopFields.taxi_state":
		if e.complexity.DynamicSupervisionDetailVarPopFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.TaxiState(childComplexity), true

	case "DynamicSupervisionDetailVarPopFields.trail":
		if e.complexity.DynamicSupervisionDetailVarPopFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.Trail(childComplexity), true

	case "DynamicSupervisionDetailVarSampFields.business_scope":
		if e.complexity.DynamicSupervisionDetailVarSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.BusinessScope(childComplexity), true

	case "DynamicSupervisionDetailVarSampFields.curve":
		if e.complexity.DynamicSupervisionDetailVarSampFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.Curve(childComplexity), true

	case "DynamicSupervisionDetailVarSampFields.equipment":
		if e.complexity.DynamicSupervisionDetailVarSampFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.Equipment(childComplexity), true

	case "DynamicSupervisionDetailVarSampFields.id":
		if e.complexity.DynamicSupervisionDetailVarSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.ID(childComplexity), true

	case "DynamicSupervisionDetailVarSampFields.lens_position":
		if e.complexity.DynamicSupervisionDetailVarSampFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.LensPosition(childComplexity), true

	case "DynamicSupervisionDetailVarSampFields.taxi_state":
		if e.complexity.DynamicSupervisionDetailVarSampFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.TaxiState(childComplexity), true

	case "DynamicSupervisionDetailVarSampFields.trail":
		if e.complexity.DynamicSupervisionDetailVarSampFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.Trail(childComplexity), true

	case "DynamicSupervisionDetailVarianceFields.business_scope":
		if e.complexity.DynamicSupervisionDetailVarianceFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.BusinessScope(childComplexity), true

	case "DynamicSupervisionDetailVarianceFields.curve":
		if e.complexity.DynamicSupervisionDetailVarianceFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.Curve(childComplexity), true

	case "DynamicSupervisionDetailVarianceFields.equipment":
		if e.complexity.DynamicSupervisionDetailVarianceFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.Equipment(childComplexity), true

	case "DynamicSupervisionDetailVarianceFields.id":
		if e.complexity.DynamicSupervisionDetailVarianceFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.ID(childComplexity), true

	case "DynamicSupervisionDetailVarianceFields.lens_position":
		if e.complexity.DynamicSupervisionDetailVarianceFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.LensPosition(childComplexity), true

	case "DynamicSupervisionDetailVarianceFields.taxi_state":
		if e.complexity.DynamicSupervisionDetailVarianceFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.TaxiState(childComplexity), true

	case "DynamicSupervisionDetailVarianceFields.trail":
		if e.complexity.DynamicSupervisionDetailVarianceFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.Trail(childComplexity), true

	case "DynamicSupervisionMaxFields.check_user_id":
		if e.complexity.DynamicSupervisionMaxFields.CheckUserID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.CheckUserID(childComplexity), true

	case "DynamicSupervisionMaxFields.city_id":
		if e.complexity.DynamicSupervisionMaxFields.CityID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.CityID(childComplexity), true

	case "DynamicSupervisionMaxFields.created_at":
		if e.complexity.DynamicSupervisionMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.CreatedAt(childComplexity), true

	case "DynamicSupervisionMaxFields.created_by":
		if e.complexity.DynamicSupervisionMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.CreatedBy(childComplexity), true

	case "DynamicSupervisionMaxFields.day":
		if e.complexity.DynamicSupervisionMaxFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.Day(childComplexity), true

	case "DynamicSupervisionMaxFields.deleted_at":
		if e.complexity.DynamicSupervisionMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.DeletedAt(childComplexity), true

	case "DynamicSupervisionMaxFields.deleted_by":
		if e.complexity.DynamicSupervisionMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.DeletedBy(childComplexity), true

	case "DynamicSupervisionMaxFields.district_id":
		if e.complexity.DynamicSupervisionMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.DistrictID(childComplexity), true

	case "DynamicSupervisionMaxFields.id":
		if e.complexity.DynamicSupervisionMaxFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.ID(childComplexity), true

	case "DynamicSupervisionMaxFields.is_deleted":
		if e.complexity.DynamicSupervisionMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.IsDeleted(childComplexity), true

	case "DynamicSupervisionMaxFields.month":
		if e.complexity.DynamicSupervisionMaxFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.Month(childComplexity), true

	case "DynamicSupervisionMaxFields.province_id":
		if e.complexity.DynamicSupervisionMaxFields.ProvinceID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.ProvinceID(childComplexity), true

	case "DynamicSupervisionMaxFields.spot_check_date":
		if e.complexity.DynamicSupervisionMaxFields.SpotCheckDate == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.SpotCheckDate(childComplexity), true

	case "DynamicSupervisionMaxFields.spot_check_number":
		if e.complexity.DynamicSupervisionMaxFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.SpotCheckNumber(childComplexity), true

	case "DynamicSupervisionMaxFields.spot_check_ratio":
		if e.complexity.DynamicSupervisionMaxFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.SpotCheckRatio(childComplexity), true

	case "DynamicSupervisionMaxFields.spot_check_total_number":
		if e.complexity.DynamicSupervisionMaxFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.SpotCheckTotalNumber(childComplexity), true

	case "DynamicSupervisionMaxFields.supervision_id":
		if e.complexity.DynamicSupervisionMaxFields.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.SupervisionID(childComplexity), true

	case "DynamicSupervisionMaxFields.total_number_vehicle":
		if e.complexity.DynamicSupervisionMaxFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.TotalNumberVehicle(childComplexity), true

	case "DynamicSupervisionMaxFields.updated_at":
		if e.complexity.DynamicSupervisionMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.UpdatedAt(childComplexity), true

	case "DynamicSupervisionMaxFields.updated_by":
		if e.complexity.DynamicSupervisionMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.UpdatedBy(childComplexity), true

	case "DynamicSupervisionMaxFields.year":
		if e.complexity.DynamicSupervisionMaxFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.Year(childComplexity), true

	case "DynamicSupervisionMinFields.check_user_id":
		if e.complexity.DynamicSupervisionMinFields.CheckUserID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.CheckUserID(childComplexity), true

	case "DynamicSupervisionMinFields.city_id":
		if e.complexity.DynamicSupervisionMinFields.CityID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.CityID(childComplexity), true

	case "DynamicSupervisionMinFields.created_at":
		if e.complexity.DynamicSupervisionMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.CreatedAt(childComplexity), true

	case "DynamicSupervisionMinFields.created_by":
		if e.complexity.DynamicSupervisionMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.CreatedBy(childComplexity), true

	case "DynamicSupervisionMinFields.day":
		if e.complexity.DynamicSupervisionMinFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.Day(childComplexity), true

	case "DynamicSupervisionMinFields.deleted_at":
		if e.complexity.DynamicSupervisionMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.DeletedAt(childComplexity), true

	case "DynamicSupervisionMinFields.deleted_by":
		if e.complexity.DynamicSupervisionMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.DeletedBy(childComplexity), true

	case "DynamicSupervisionMinFields.district_id":
		if e.complexity.DynamicSupervisionMinFields.DistrictID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.DistrictID(childComplexity), true

	case "DynamicSupervisionMinFields.id":
		if e.complexity.DynamicSupervisionMinFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.ID(childComplexity), true

	case "DynamicSupervisionMinFields.is_deleted":
		if e.complexity.DynamicSupervisionMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.IsDeleted(childComplexity), true

	case "DynamicSupervisionMinFields.month":
		if e.complexity.DynamicSupervisionMinFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.Month(childComplexity), true

	case "DynamicSupervisionMinFields.province_id":
		if e.complexity.DynamicSupervisionMinFields.ProvinceID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.ProvinceID(childComplexity), true

	case "DynamicSupervisionMinFields.spot_check_date":
		if e.complexity.DynamicSupervisionMinFields.SpotCheckDate == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.SpotCheckDate(childComplexity), true

	case "DynamicSupervisionMinFields.spot_check_number":
		if e.complexity.DynamicSupervisionMinFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.SpotCheckNumber(childComplexity), true

	case "DynamicSupervisionMinFields.spot_check_ratio":
		if e.complexity.DynamicSupervisionMinFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.SpotCheckRatio(childComplexity), true

	case "DynamicSupervisionMinFields.spot_check_total_number":
		if e.complexity.DynamicSupervisionMinFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.SpotCheckTotalNumber(childComplexity), true

	case "DynamicSupervisionMinFields.supervision_id":
		if e.complexity.DynamicSupervisionMinFields.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.SupervisionID(childComplexity), true

	case "DynamicSupervisionMinFields.total_number_vehicle":
		if e.complexity.DynamicSupervisionMinFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.TotalNumberVehicle(childComplexity), true

	case "DynamicSupervisionMinFields.updated_at":
		if e.complexity.DynamicSupervisionMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.UpdatedAt(childComplexity), true

	case "DynamicSupervisionMinFields.updated_by":
		if e.complexity.DynamicSupervisionMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.UpdatedBy(childComplexity), true

	case "DynamicSupervisionMinFields.year":
		if e.complexity.DynamicSupervisionMinFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.Year(childComplexity), true

	case "DynamicSupervisionMutationResponse.affected_rows":
		if e.complexity.DynamicSupervisionMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DynamicSupervisionMutationResponse.AffectedRows(childComplexity), true

	case "DynamicSupervisionMutationResponse.returning":
		if e.complexity.DynamicSupervisionMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DynamicSupervisionMutationResponse.Returning(childComplexity), true

	case "DynamicSupervisionStddevFields.day":
		if e.complexity.DynamicSupervisionStddevFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.Day(childComplexity), true

	case "DynamicSupervisionStddevFields.id":
		if e.complexity.DynamicSupervisionStddevFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.ID(childComplexity), true

	case "DynamicSupervisionStddevFields.month":
		if e.complexity.DynamicSupervisionStddevFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.Month(childComplexity), true

	case "DynamicSupervisionStddevFields.spot_check_number":
		if e.complexity.DynamicSupervisionStddevFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.SpotCheckNumber(childComplexity), true

	case "DynamicSupervisionStddevFields.spot_check_ratio":
		if e.complexity.DynamicSupervisionStddevFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.SpotCheckRatio(childComplexity), true

	case "DynamicSupervisionStddevFields.spot_check_total_number":
		if e.complexity.DynamicSupervisionStddevFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.SpotCheckTotalNumber(childComplexity), true

	case "DynamicSupervisionStddevFields.total_number_vehicle":
		if e.complexity.DynamicSupervisionStddevFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.TotalNumberVehicle(childComplexity), true

	case "DynamicSupervisionStddevFields.year":
		if e.complexity.DynamicSupervisionStddevFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.Year(childComplexity), true

	case "DynamicSupervisionStddevPopFields.day":
		if e.complexity.DynamicSupervisionStddevPopFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.Day(childComplexity), true

	case "DynamicSupervisionStddevPopFields.id":
		if e.complexity.DynamicSupervisionStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.ID(childComplexity), true

	case "DynamicSupervisionStddevPopFields.month":
		if e.complexity.DynamicSupervisionStddevPopFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.Month(childComplexity), true

	case "DynamicSupervisionStddevPopFields.spot_check_number":
		if e.complexity.DynamicSupervisionStddevPopFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.SpotCheckNumber(childComplexity), true

	case "DynamicSupervisionStddevPopFields.spot_check_ratio":
		if e.complexity.DynamicSupervisionStddevPopFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.SpotCheckRatio(childComplexity), true

	case "DynamicSupervisionStddevPopFields.spot_check_total_number":
		if e.complexity.DynamicSupervisionStddevPopFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.SpotCheckTotalNumber(childComplexity), true

	case "DynamicSupervisionStddevPopFields.total_number_vehicle":
		if e.complexity.DynamicSupervisionStddevPopFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.TotalNumberVehicle(childComplexity), true

	case "DynamicSupervisionStddevPopFields.year":
		if e.complexity.DynamicSupervisionStddevPopFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.Year(childComplexity), true

	case "DynamicSupervisionStddevSampFields.day":
		if e.complexity.DynamicSupervisionStddevSampFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.Day(childComplexity), true

	case "DynamicSupervisionStddevSampFields.id":
		if e.complexity.DynamicSupervisionStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.ID(childComplexity), true

	case "DynamicSupervisionStddevSampFields.month":
		if e.complexity.DynamicSupervisionStddevSampFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.Month(childComplexity), true

	case "DynamicSupervisionStddevSampFields.spot_check_number":
		if e.complexity.DynamicSupervisionStddevSampFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.SpotCheckNumber(childComplexity), true

	case "DynamicSupervisionStddevSampFields.spot_check_ratio":
		if e.complexity.DynamicSupervisionStddevSampFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.SpotCheckRatio(childComplexity), true

	case "DynamicSupervisionStddevSampFields.spot_check_total_number":
		if e.complexity.DynamicSupervisionStddevSampFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.SpotCheckTotalNumber(childComplexity), true

	case "DynamicSupervisionStddevSampFields.total_number_vehicle":
		if e.complexity.DynamicSupervisionStddevSampFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.TotalNumberVehicle(childComplexity), true

	case "DynamicSupervisionStddevSampFields.year":
		if e.complexity.DynamicSupervisionStddevSampFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.Year(childComplexity), true

	case "DynamicSupervisionSumFields.day":
		if e.complexity.DynamicSupervisionSumFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.Day(childComplexity), true

	case "DynamicSupervisionSumFields.id":
		if e.complexity.DynamicSupervisionSumFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.ID(childComplexity), true

	case "DynamicSupervisionSumFields.month":
		if e.complexity.DynamicSupervisionSumFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.Month(childComplexity), true

	case "DynamicSupervisionSumFields.spot_check_number":
		if e.complexity.DynamicSupervisionSumFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.SpotCheckNumber(childComplexity), true

	case "DynamicSupervisionSumFields.spot_check_ratio":
		if e.complexity.DynamicSupervisionSumFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.SpotCheckRatio(childComplexity), true

	case "DynamicSupervisionSumFields.spot_check_total_number":
		if e.complexity.DynamicSupervisionSumFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.SpotCheckTotalNumber(childComplexity), true

	case "DynamicSupervisionSumFields.total_number_vehicle":
		if e.complexity.DynamicSupervisionSumFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.TotalNumberVehicle(childComplexity), true

	case "DynamicSupervisionSumFields.year":
		if e.complexity.DynamicSupervisionSumFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.Year(childComplexity), true

	case "DynamicSupervisionVarPopFields.day":
		if e.complexity.DynamicSupervisionVarPopFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.Day(childComplexity), true

	case "DynamicSupervisionVarPopFields.id":
		if e.complexity.DynamicSupervisionVarPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.ID(childComplexity), true

	case "DynamicSupervisionVarPopFields.month":
		if e.complexity.DynamicSupervisionVarPopFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.Month(childComplexity), true

	case "DynamicSupervisionVarPopFields.spot_check_number":
		if e.complexity.DynamicSupervisionVarPopFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.SpotCheckNumber(childComplexity), true

	case "DynamicSupervisionVarPopFields.spot_check_ratio":
		if e.complexity.DynamicSupervisionVarPopFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.SpotCheckRatio(childComplexity), true

	case "DynamicSupervisionVarPopFields.spot_check_total_number":
		if e.complexity.DynamicSupervisionVarPopFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.SpotCheckTotalNumber(childComplexity), true

	case "DynamicSupervisionVarPopFields.total_number_vehicle":
		if e.complexity.DynamicSupervisionVarPopFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.TotalNumberVehicle(childComplexity), true

	case "DynamicSupervisionVarPopFields.year":
		if e.complexity.DynamicSupervisionVarPopFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.Year(childComplexity), true

	case "DynamicSupervisionVarSampFields.day":
		if e.complexity.DynamicSupervisionVarSampFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.Day(childComplexity), true

	case "DynamicSupervisionVarSampFields.id":
		if e.complexity.DynamicSupervisionVarSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.ID(childComplexity), true

	case "DynamicSupervisionVarSampFields.month":
		if e.complexity.DynamicSupervisionVarSampFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.Month(childComplexity), true

	case "DynamicSupervisionVarSampFields.spot_check_number":
		if e.complexity.DynamicSupervisionVarSampFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.SpotCheckNumber(childComplexity), true

	case "DynamicSupervisionVarSampFields.spot_check_ratio":
		if e.complexity.DynamicSupervisionVarSampFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.SpotCheckRatio(childComplexity), true

	case "DynamicSupervisionVarSampFields.spot_check_total_number":
		if e.complexity.DynamicSupervisionVarSampFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.SpotCheckTotalNumber(childComplexity), true

	case "DynamicSupervisionVarSampFields.total_number_vehicle":
		if e.complexity.DynamicSupervisionVarSampFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.TotalNumberVehicle(childComplexity), true

	case "DynamicSupervisionVarSampFields.year":
		if e.complexity.DynamicSupervisionVarSampFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.Year(childComplexity), true

	case "DynamicSupervisionVarianceFields.day":
		if e.complexity.DynamicSupervisionVarianceFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.Day(childComplexity), true

	case "DynamicSupervisionVarianceFields.id":
		if e.complexity.DynamicSupervisionVarianceFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.ID(childComplexity), true

	case "DynamicSupervisionVarianceFields.month":
		if e.complexity.DynamicSupervisionVarianceFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.Month(childComplexity), true

	case "DynamicSupervisionVarianceFields.spot_check_number":
		if e.complexity.DynamicSupervisionVarianceFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.SpotCheckNumber(childComplexity), true

	case "DynamicSupervisionVarianceFields.spot_check_ratio":
		if e.complexity.DynamicSupervisionVarianceFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.SpotCheckRatio(childComplexity), true

	case "DynamicSupervisionVarianceFields.spot_check_total_number":
		if e.complexity.DynamicSupervisionVarianceFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.SpotCheckTotalNumber(childComplexity), true

	case "DynamicSupervisionVarianceFields.total_number_vehicle":
		if e.complexity.DynamicSupervisionVarianceFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.TotalNumberVehicle(childComplexity), true

	case "DynamicSupervisionVarianceFields.year":
		if e.complexity.DynamicSupervisionVarianceFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.Year(childComplexity), true

	case "MuckTruckOnline.area":
		if e.complexity.MuckTruckOnline.Area == nil {
			break
		}

		return e.complexity.MuckTruckOnline.Area(childComplexity), true

	case "MuckTruckOnline.created_at":
		if e.complexity.MuckTruckOnline.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckOnline.CreatedAt(childComplexity), true

	case "MuckTruckOnline.created_by":
		if e.complexity.MuckTruckOnline.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckOnline.CreatedBy(childComplexity), true

	case "MuckTruckOnline.deleted_at":
		if e.complexity.MuckTruckOnline.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckOnline.DeletedAt(childComplexity), true

	case "MuckTruckOnline.deleted_by":
		if e.complexity.MuckTruckOnline.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckOnline.DeletedBy(childComplexity), true

	case "MuckTruckOnline.id":
		if e.complexity.MuckTruckOnline.ID == nil {
			break
		}

		return e.complexity.MuckTruckOnline.ID(childComplexity), true

	case "MuckTruckOnline.is_catalog_library":
		if e.complexity.MuckTruckOnline.IsCatalogLibrary == nil {
			break
		}

		return e.complexity.MuckTruckOnline.IsCatalogLibrary(childComplexity), true

	case "MuckTruckOnline.is_gps_online":
		if e.complexity.MuckTruckOnline.IsGpsOnline == nil {
			break
		}

		return e.complexity.MuckTruckOnline.IsGpsOnline(childComplexity), true

	case "MuckTruckOnline.is_install":
		if e.complexity.MuckTruckOnline.IsInstall == nil {
			break
		}

		return e.complexity.MuckTruckOnline.IsInstall(childComplexity), true

	case "MuckTruckOnline.is_new_vehicle":
		if e.complexity.MuckTruckOnline.IsNewVehicle == nil {
			break
		}

		return e.complexity.MuckTruckOnline.IsNewVehicle(childComplexity), true

	case "MuckTruckOnline.is_online":
		if e.complexity.MuckTruckOnline.IsOnline == nil {
			break
		}

		return e.complexity.MuckTruckOnline.IsOnline(childComplexity), true

	case "MuckTruckOnline.is_pay":
		if e.complexity.MuckTruckOnline.IsPay == nil {
			break
		}

		return e.complexity.MuckTruckOnline.IsPay(childComplexity), true

	case "MuckTruckOnline.is_vehicle_pass_inspection":
		if e.complexity.MuckTruckOnline.IsVehiclePassInspection == nil {
			break
		}

		return e.complexity.MuckTruckOnline.IsVehiclePassInspection(childComplexity), true

	case "MuckTruckOnline.location_time":
		if e.complexity.MuckTruckOnline.LocationTime == nil {
			break
		}

		return e.complexity.MuckTruckOnline.LocationTime(childComplexity), true

	case "MuckTruckOnline.muck_truck_online_id":
		if e.complexity.MuckTruckOnline.MuckTruckOnlineID == nil {
			break
		}

		return e.complexity.MuckTruckOnline.MuckTruckOnlineID(childComplexity), true

	case "MuckTruckOnline.self_number":
		if e.complexity.MuckTruckOnline.SelfNumber == nil {
			break
		}

		return e.complexity.MuckTruckOnline.SelfNumber(childComplexity), true

	case "MuckTruckOnline.updated_at":
		if e.complexity.MuckTruckOnline.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckOnline.UpdatedAt(childComplexity), true

	case "MuckTruckOnline.updated_by":
		if e.complexity.MuckTruckOnline.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckOnline.UpdatedBy(childComplexity), true

	case "MuckTruckOnline.vehicle_id":
		if e.complexity.MuckTruckOnline.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckOnline.VehicleID(childComplexity), true

	case "MuckTruckOnlineAggregate.aggregate":
		if e.complexity.MuckTruckOnlineAggregate.Aggregate == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregate.Aggregate(childComplexity), true

	case "MuckTruckOnlineAggregateFields.avg":
		if e.complexity.MuckTruckOnlineAggregateFields.Avg == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregateFields.Avg(childComplexity), true

	case "MuckTruckOnlineAggregateFields.count":
		if e.complexity.MuckTruckOnlineAggregateFields.Count == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregateFields.Count(childComplexity), true

	case "MuckTruckOnlineAggregateFields.max":
		if e.complexity.MuckTruckOnlineAggregateFields.Max == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregateFields.Max(childComplexity), true

	case "MuckTruckOnlineAggregateFields.min":
		if e.complexity.MuckTruckOnlineAggregateFields.Min == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregateFields.Min(childComplexity), true

	case "MuckTruckOnlineAggregateFields.stddev":
		if e.complexity.MuckTruckOnlineAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregateFields.Stddev(childComplexity), true

	case "MuckTruckOnlineAggregateFields.stddev_pop":
		if e.complexity.MuckTruckOnlineAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregateFields.StddevPop(childComplexity), true

	case "MuckTruckOnlineAggregateFields.stddev_samp":
		if e.complexity.MuckTruckOnlineAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregateFields.StddevSamp(childComplexity), true

	case "MuckTruckOnlineAggregateFields.sum":
		if e.complexity.MuckTruckOnlineAggregateFields.Sum == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregateFields.Sum(childComplexity), true

	case "MuckTruckOnlineAggregateFields.var_pop":
		if e.complexity.MuckTruckOnlineAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregateFields.VarPop(childComplexity), true

	case "MuckTruckOnlineAggregateFields.var_samp":
		if e.complexity.MuckTruckOnlineAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregateFields.VarSamp(childComplexity), true

	case "MuckTruckOnlineAggregateFields.variance":
		if e.complexity.MuckTruckOnlineAggregateFields.Variance == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAggregateFields.Variance(childComplexity), true

	case "MuckTruckOnlineAvgFields.id":
		if e.complexity.MuckTruckOnlineAvgFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineAvgFields.ID(childComplexity), true

	case "MuckTruckOnlineMaxFields.area":
		if e.complexity.MuckTruckOnlineMaxFields.Area == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.Area(childComplexity), true

	case "MuckTruckOnlineMaxFields.created_at":
		if e.complexity.MuckTruckOnlineMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.CreatedAt(childComplexity), true

	case "MuckTruckOnlineMaxFields.created_by":
		if e.complexity.MuckTruckOnlineMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.CreatedBy(childComplexity), true

	case "MuckTruckOnlineMaxFields.deleted_at":
		if e.complexity.MuckTruckOnlineMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.DeletedAt(childComplexity), true

	case "MuckTruckOnlineMaxFields.deleted_by":
		if e.complexity.MuckTruckOnlineMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.DeletedBy(childComplexity), true

	case "MuckTruckOnlineMaxFields.id":
		if e.complexity.MuckTruckOnlineMaxFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.ID(childComplexity), true

	case "MuckTruckOnlineMaxFields.is_catalog_library":
		if e.complexity.MuckTruckOnlineMaxFields.IsCatalogLibrary == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.IsCatalogLibrary(childComplexity), true

	case "MuckTruckOnlineMaxFields.is_gps_online":
		if e.complexity.MuckTruckOnlineMaxFields.IsGpsOnline == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.IsGpsOnline(childComplexity), true

	case "MuckTruckOnlineMaxFields.is_install":
		if e.complexity.MuckTruckOnlineMaxFields.IsInstall == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.IsInstall(childComplexity), true

	case "MuckTruckOnlineMaxFields.is_new_vehicle":
		if e.complexity.MuckTruckOnlineMaxFields.IsNewVehicle == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.IsNewVehicle(childComplexity), true

	case "MuckTruckOnlineMaxFields.is_online":
		if e.complexity.MuckTruckOnlineMaxFields.IsOnline == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.IsOnline(childComplexity), true

	case "MuckTruckOnlineMaxFields.is_pay":
		if e.complexity.MuckTruckOnlineMaxFields.IsPay == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.IsPay(childComplexity), true

	case "MuckTruckOnlineMaxFields.is_vehicle_pass_inspection":
		if e.complexity.MuckTruckOnlineMaxFields.IsVehiclePassInspection == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.IsVehiclePassInspection(childComplexity), true

	case "MuckTruckOnlineMaxFields.location_time":
		if e.complexity.MuckTruckOnlineMaxFields.LocationTime == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.LocationTime(childComplexity), true

	case "MuckTruckOnlineMaxFields.muck_truck_online_id":
		if e.complexity.MuckTruckOnlineMaxFields.MuckTruckOnlineID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.MuckTruckOnlineID(childComplexity), true

	case "MuckTruckOnlineMaxFields.self_number":
		if e.complexity.MuckTruckOnlineMaxFields.SelfNumber == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.SelfNumber(childComplexity), true

	case "MuckTruckOnlineMaxFields.updated_at":
		if e.complexity.MuckTruckOnlineMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.UpdatedAt(childComplexity), true

	case "MuckTruckOnlineMaxFields.updated_by":
		if e.complexity.MuckTruckOnlineMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.UpdatedBy(childComplexity), true

	case "MuckTruckOnlineMaxFields.vehicle_id":
		if e.complexity.MuckTruckOnlineMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMaxFields.VehicleID(childComplexity), true

	case "MuckTruckOnlineMinFields.area":
		if e.complexity.MuckTruckOnlineMinFields.Area == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.Area(childComplexity), true

	case "MuckTruckOnlineMinFields.created_at":
		if e.complexity.MuckTruckOnlineMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.CreatedAt(childComplexity), true

	case "MuckTruckOnlineMinFields.created_by":
		if e.complexity.MuckTruckOnlineMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.CreatedBy(childComplexity), true

	case "MuckTruckOnlineMinFields.deleted_at":
		if e.complexity.MuckTruckOnlineMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.DeletedAt(childComplexity), true

	case "MuckTruckOnlineMinFields.deleted_by":
		if e.complexity.MuckTruckOnlineMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.DeletedBy(childComplexity), true

	case "MuckTruckOnlineMinFields.id":
		if e.complexity.MuckTruckOnlineMinFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.ID(childComplexity), true

	case "MuckTruckOnlineMinFields.is_catalog_library":
		if e.complexity.MuckTruckOnlineMinFields.IsCatalogLibrary == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.IsCatalogLibrary(childComplexity), true

	case "MuckTruckOnlineMinFields.is_gps_online":
		if e.complexity.MuckTruckOnlineMinFields.IsGpsOnline == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.IsGpsOnline(childComplexity), true

	case "MuckTruckOnlineMinFields.is_install":
		if e.complexity.MuckTruckOnlineMinFields.IsInstall == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.IsInstall(childComplexity), true

	case "MuckTruckOnlineMinFields.is_new_vehicle":
		if e.complexity.MuckTruckOnlineMinFields.IsNewVehicle == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.IsNewVehicle(childComplexity), true

	case "MuckTruckOnlineMinFields.is_online":
		if e.complexity.MuckTruckOnlineMinFields.IsOnline == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.IsOnline(childComplexity), true

	case "MuckTruckOnlineMinFields.is_pay":
		if e.complexity.MuckTruckOnlineMinFields.IsPay == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.IsPay(childComplexity), true

	case "MuckTruckOnlineMinFields.is_vehicle_pass_inspection":
		if e.complexity.MuckTruckOnlineMinFields.IsVehiclePassInspection == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.IsVehiclePassInspection(childComplexity), true

	case "MuckTruckOnlineMinFields.location_time":
		if e.complexity.MuckTruckOnlineMinFields.LocationTime == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.LocationTime(childComplexity), true

	case "MuckTruckOnlineMinFields.muck_truck_online_id":
		if e.complexity.MuckTruckOnlineMinFields.MuckTruckOnlineID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.MuckTruckOnlineID(childComplexity), true

	case "MuckTruckOnlineMinFields.self_number":
		if e.complexity.MuckTruckOnlineMinFields.SelfNumber == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.SelfNumber(childComplexity), true

	case "MuckTruckOnlineMinFields.updated_at":
		if e.complexity.MuckTruckOnlineMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.UpdatedAt(childComplexity), true

	case "MuckTruckOnlineMinFields.updated_by":
		if e.complexity.MuckTruckOnlineMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.UpdatedBy(childComplexity), true

	case "MuckTruckOnlineMinFields.vehicle_id":
		if e.complexity.MuckTruckOnlineMinFields.VehicleID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMinFields.VehicleID(childComplexity), true

	case "MuckTruckOnlineMutationResponse.affected_rows":
		if e.complexity.MuckTruckOnlineMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMutationResponse.AffectedRows(childComplexity), true

	case "MuckTruckOnlineMutationResponse.returning":
		if e.complexity.MuckTruckOnlineMutationResponse.Returning == nil {
			break
		}

		return e.complexity.MuckTruckOnlineMutationResponse.Returning(childComplexity), true

	case "MuckTruckOnlineStddevFields.id":
		if e.complexity.MuckTruckOnlineStddevFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineStddevFields.ID(childComplexity), true

	case "MuckTruckOnlineStddevPopFields.id":
		if e.complexity.MuckTruckOnlineStddevPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineStddevPopFields.ID(childComplexity), true

	case "MuckTruckOnlineStddevSampFields.id":
		if e.complexity.MuckTruckOnlineStddevSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineStddevSampFields.ID(childComplexity), true

	case "MuckTruckOnlineSumFields.id":
		if e.complexity.MuckTruckOnlineSumFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineSumFields.ID(childComplexity), true

	case "MuckTruckOnlineVarPopFields.id":
		if e.complexity.MuckTruckOnlineVarPopFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineVarPopFields.ID(childComplexity), true

	case "MuckTruckOnlineVarSampFields.id":
		if e.complexity.MuckTruckOnlineVarSampFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineVarSampFields.ID(childComplexity), true

	case "MuckTruckOnlineVarianceFields.id":
		if e.complexity.MuckTruckOnlineVarianceFields.ID == nil {
			break
		}

		return e.complexity.MuckTruckOnlineVarianceFields.ID(childComplexity), true

	case "Mutation.delete_dynamic_spot_check_disposal":
		if e.complexity.Mutation.DeleteDynamicSpotCheckDisposal == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_spot_check_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSpotCheckDisposal(childComplexity, args["where"].(model.DynamicSpotCheckDisposalBoolExp)), true

	case "Mutation.delete_dynamic_spot_check_disposal_by_pk":
		if e.complexity.Mutation.DeleteDynamicSpotCheckDisposalByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_spot_check_disposal_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSpotCheckDisposalByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_dynamic_supervision":
		if e.complexity.Mutation.DeleteDynamicSupervision == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSupervision(childComplexity, args["where"].(model.DynamicSupervisionBoolExp)), true

	case "Mutation.delete_dynamic_supervision_by_pk":
		if e.complexity.Mutation.DeleteDynamicSupervisionByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_supervision_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSupervisionByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_dynamic_supervision_detail":
		if e.complexity.Mutation.DeleteDynamicSupervisionDetail == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_supervision_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSupervisionDetail(childComplexity, args["where"].(model.DynamicSupervisionDetailBoolExp)), true

	case "Mutation.delete_dynamic_supervision_detail_by_pk":
		if e.complexity.Mutation.DeleteDynamicSupervisionDetailByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_supervision_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSupervisionDetailByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_muck_truck_online":
		if e.complexity.Mutation.DeleteMuckTruckOnline == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_online_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckOnline(childComplexity, args["where"].(model.MuckTruckOnlineBoolExp)), true

	case "Mutation.delete_muck_truck_online_by_pk":
		if e.complexity.Mutation.DeleteMuckTruckOnlineByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_muck_truck_online_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMuckTruckOnlineByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_region_issued":
		if e.complexity.Mutation.DeleteRegionIssued == nil {
			break
		}

		args, err := ec.field_Mutation_delete_region_issued_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRegionIssued(childComplexity, args["where"].(model.RegionIssuedBoolExp)), true

	case "Mutation.delete_region_issued_by_pk":
		if e.complexity.Mutation.DeleteRegionIssuedByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_region_issued_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRegionIssuedByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_region_management":
		if e.complexity.Mutation.DeleteRegionManagement == nil {
			break
		}

		args, err := ec.field_Mutation_delete_region_management_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRegionManagement(childComplexity, args["where"].(model.RegionManagementBoolExp)), true

	case "Mutation.delete_region_management_by_pk":
		if e.complexity.Mutation.DeleteRegionManagementByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_region_management_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRegionManagementByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_alarm_supervision":
		if e.complexity.Mutation.DeleteVehicleAlarmSupervision == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_alarm_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleAlarmSupervision(childComplexity, args["where"].(model.VehicleAlarmSupervisionBoolExp)), true

	case "Mutation.delete_vehicle_alarm_supervision_by_pk":
		if e.complexity.Mutation.DeleteVehicleAlarmSupervisionByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_alarm_supervision_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleAlarmSupervisionByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_alarm_times_record":
		if e.complexity.Mutation.DeleteVehicleAlarmTimesRecord == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_alarm_times_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleAlarmTimesRecord(childComplexity, args["where"].(model.VehicleAlarmTimesRecordBoolExp)), true

	case "Mutation.delete_vehicle_alarm_times_record_by_pk":
		if e.complexity.Mutation.DeleteVehicleAlarmTimesRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_alarm_times_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleAlarmTimesRecordByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_vehicle_offline_disposal":
		if e.complexity.Mutation.DeleteVehicleOfflineDisposal == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_offline_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleOfflineDisposal(childComplexity, args["where"].(model.VehicleOfflineDisposalBoolExp)), true

	case "Mutation.delete_vehicle_offline_disposal_by_pk":
		if e.complexity.Mutation.DeleteVehicleOfflineDisposalByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_offline_disposal_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleOfflineDisposalByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.insert_dynamic_spot_check_disposal":
		if e.complexity.Mutation.InsertDynamicSpotCheckDisposal == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_spot_check_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSpotCheckDisposal(childComplexity, args["objects"].([]*model.DynamicSpotCheckDisposalInsertInput)), true

	case "Mutation.insert_dynamic_spot_check_disposal_one":
		if e.complexity.Mutation.InsertDynamicSpotCheckDisposalOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_spot_check_disposal_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSpotCheckDisposalOne(childComplexity, args["objects"].(model.DynamicSpotCheckDisposalInsertInput)), true

	case "Mutation.insert_dynamic_supervision":
		if e.complexity.Mutation.InsertDynamicSupervision == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSupervision(childComplexity, args["objects"].([]*model.DynamicSupervisionInsertInput)), true

	case "Mutation.insert_dynamic_supervision_detail":
		if e.complexity.Mutation.InsertDynamicSupervisionDetail == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_supervision_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSupervisionDetail(childComplexity, args["objects"].([]*model.DynamicSupervisionDetailInsertInput)), true

	case "Mutation.insert_dynamic_supervision_detail_one":
		if e.complexity.Mutation.InsertDynamicSupervisionDetailOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_supervision_detail_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSupervisionDetailOne(childComplexity, args["objects"].(model.DynamicSupervisionDetailInsertInput)), true

	case "Mutation.insert_dynamic_supervision_one":
		if e.complexity.Mutation.InsertDynamicSupervisionOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_supervision_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSupervisionOne(childComplexity, args["objects"].(model.DynamicSupervisionInsertInput)), true

	case "Mutation.insert_muck_truck_online":
		if e.complexity.Mutation.InsertMuckTruckOnline == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_online_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckOnline(childComplexity, args["objects"].([]*model.MuckTruckOnlineInsertInput)), true

	case "Mutation.insert_muck_truck_online_one":
		if e.complexity.Mutation.InsertMuckTruckOnlineOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_muck_truck_online_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertMuckTruckOnlineOne(childComplexity, args["objects"].(model.MuckTruckOnlineInsertInput)), true

	case "Mutation.insert_region_issued":
		if e.complexity.Mutation.InsertRegionIssued == nil {
			break
		}

		args, err := ec.field_Mutation_insert_region_issued_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRegionIssued(childComplexity, args["objects"].([]*model.RegionIssuedInsertInput)), true

	case "Mutation.insert_region_issued_one":
		if e.complexity.Mutation.InsertRegionIssuedOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_region_issued_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRegionIssuedOne(childComplexity, args["objects"].(model.RegionIssuedInsertInput)), true

	case "Mutation.insert_region_management":
		if e.complexity.Mutation.InsertRegionManagement == nil {
			break
		}

		args, err := ec.field_Mutation_insert_region_management_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRegionManagement(childComplexity, args["objects"].([]*model.RegionManagementInsertInput)), true

	case "Mutation.insert_region_management_one":
		if e.complexity.Mutation.InsertRegionManagementOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_region_management_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertRegionManagementOne(childComplexity, args["objects"].(model.RegionManagementInsertInput)), true

	case "Mutation.insert_vehicle_alarm_supervision":
		if e.complexity.Mutation.InsertVehicleAlarmSupervision == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_alarm_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleAlarmSupervision(childComplexity, args["objects"].([]*model.VehicleAlarmSupervisionInsertInput)), true

	case "Mutation.insert_vehicle_alarm_supervision_one":
		if e.complexity.Mutation.InsertVehicleAlarmSupervisionOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_alarm_supervision_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleAlarmSupervisionOne(childComplexity, args["objects"].(model.VehicleAlarmSupervisionInsertInput)), true

	case "Mutation.insert_vehicle_alarm_times_record":
		if e.complexity.Mutation.InsertVehicleAlarmTimesRecord == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_alarm_times_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleAlarmTimesRecord(childComplexity, args["objects"].([]*model.VehicleAlarmTimesRecordInsertInput)), true

	case "Mutation.insert_vehicle_alarm_times_record_one":
		if e.complexity.Mutation.InsertVehicleAlarmTimesRecordOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_alarm_times_record_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleAlarmTimesRecordOne(childComplexity, args["objects"].(model.VehicleAlarmTimesRecordInsertInput)), true

	case "Mutation.insert_vehicle_offline_disposal":
		if e.complexity.Mutation.InsertVehicleOfflineDisposal == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_offline_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleOfflineDisposal(childComplexity, args["objects"].([]*model.VehicleOfflineDisposalInsertInput)), true

	case "Mutation.insert_vehicle_offline_disposal_one":
		if e.complexity.Mutation.InsertVehicleOfflineDisposalOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_offline_disposal_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleOfflineDisposalOne(childComplexity, args["objects"].(model.VehicleOfflineDisposalInsertInput)), true

	case "Mutation.update_dynamic_spot_check_disposal":
		if e.complexity.Mutation.UpdateDynamicSpotCheckDisposal == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_spot_check_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSpotCheckDisposal(childComplexity, args["_inc"].(*model.DynamicSpotCheckDisposalIncInput), args["_set"].(*model.DynamicSpotCheckDisposalSetInput), args["where"].(model.DynamicSpotCheckDisposalBoolExp)), true

	case "Mutation.update_dynamic_spot_check_disposal_by_pk":
		if e.complexity.Mutation.UpdateDynamicSpotCheckDisposalByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_spot_check_disposal_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSpotCheckDisposalByPk(childComplexity, args["_inc"].(*model.DynamicSpotCheckDisposalIncInput), args["_set"].(*model.DynamicSpotCheckDisposalSetInput), args["id"].(int64)), true

	case "Mutation.update_dynamic_supervision":
		if e.complexity.Mutation.UpdateDynamicSupervision == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSupervision(childComplexity, args["_inc"].(*model.DynamicSupervisionIncInput), args["_set"].(*model.DynamicSupervisionSetInput), args["where"].(model.DynamicSupervisionBoolExp)), true

	case "Mutation.update_dynamic_supervision_by_pk":
		if e.complexity.Mutation.UpdateDynamicSupervisionByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_supervision_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSupervisionByPk(childComplexity, args["_inc"].(*model.DynamicSupervisionIncInput), args["_set"].(*model.DynamicSupervisionSetInput), args["id"].(int64)), true

	case "Mutation.update_dynamic_supervision_detail":
		if e.complexity.Mutation.UpdateDynamicSupervisionDetail == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_supervision_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSupervisionDetail(childComplexity, args["_inc"].(*model.DynamicSupervisionDetailIncInput), args["_set"].(*model.DynamicSupervisionDetailSetInput), args["where"].(model.DynamicSupervisionDetailBoolExp)), true

	case "Mutation.update_dynamic_supervision_detail_by_pk":
		if e.complexity.Mutation.UpdateDynamicSupervisionDetailByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_supervision_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSupervisionDetailByPk(childComplexity, args["_inc"].(*model.DynamicSupervisionDetailIncInput), args["_set"].(*model.DynamicSupervisionDetailSetInput), args["id"].(int64)), true

	case "Mutation.update_muck_truck_online":
		if e.complexity.Mutation.UpdateMuckTruckOnline == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_online_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckOnline(childComplexity, args["_inc"].(*model.MuckTruckOnlineIncInput), args["_set"].(*model.MuckTruckOnlineSetInput), args["where"].(model.MuckTruckOnlineBoolExp)), true

	case "Mutation.update_muck_truck_online_by_pk":
		if e.complexity.Mutation.UpdateMuckTruckOnlineByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_muck_truck_online_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMuckTruckOnlineByPk(childComplexity, args["_inc"].(*model.MuckTruckOnlineIncInput), args["_set"].(*model.MuckTruckOnlineSetInput), args["id"].(int64)), true

	case "Mutation.update_region_issued":
		if e.complexity.Mutation.UpdateRegionIssued == nil {
			break
		}

		args, err := ec.field_Mutation_update_region_issued_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegionIssued(childComplexity, args["_inc"].(*model.RegionIssuedIncInput), args["_set"].(*model.RegionIssuedSetInput), args["where"].(model.RegionIssuedBoolExp)), true

	case "Mutation.update_region_issued_by_pk":
		if e.complexity.Mutation.UpdateRegionIssuedByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_region_issued_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegionIssuedByPk(childComplexity, args["_inc"].(*model.RegionIssuedIncInput), args["_set"].(*model.RegionIssuedSetInput), args["id"].(int64)), true

	case "Mutation.update_region_management":
		if e.complexity.Mutation.UpdateRegionManagement == nil {
			break
		}

		args, err := ec.field_Mutation_update_region_management_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegionManagement(childComplexity, args["_inc"].(*model.RegionManagementIncInput), args["_set"].(*model.RegionManagementSetInput), args["where"].(model.RegionManagementBoolExp)), true

	case "Mutation.update_region_management_by_pk":
		if e.complexity.Mutation.UpdateRegionManagementByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_region_management_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegionManagementByPk(childComplexity, args["_inc"].(*model.RegionManagementIncInput), args["_set"].(*model.RegionManagementSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_alarm_supervision":
		if e.complexity.Mutation.UpdateVehicleAlarmSupervision == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_alarm_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleAlarmSupervision(childComplexity, args["_inc"].(*model.VehicleAlarmSupervisionIncInput), args["_set"].(*model.VehicleAlarmSupervisionSetInput), args["where"].(model.VehicleAlarmSupervisionBoolExp)), true

	case "Mutation.update_vehicle_alarm_supervision_by_pk":
		if e.complexity.Mutation.UpdateVehicleAlarmSupervisionByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_alarm_supervision_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleAlarmSupervisionByPk(childComplexity, args["_inc"].(*model.VehicleAlarmSupervisionIncInput), args["_set"].(*model.VehicleAlarmSupervisionSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_alarm_times_record":
		if e.complexity.Mutation.UpdateVehicleAlarmTimesRecord == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_alarm_times_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleAlarmTimesRecord(childComplexity, args["_inc"].(*model.VehicleAlarmTimesRecordIncInput), args["_set"].(*model.VehicleAlarmTimesRecordSetInput), args["where"].(model.VehicleAlarmTimesRecordBoolExp)), true

	case "Mutation.update_vehicle_alarm_times_record_by_pk":
		if e.complexity.Mutation.UpdateVehicleAlarmTimesRecordByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_alarm_times_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleAlarmTimesRecordByPk(childComplexity, args["_inc"].(*model.VehicleAlarmTimesRecordIncInput), args["_set"].(*model.VehicleAlarmTimesRecordSetInput), args["id"].(int64)), true

	case "Mutation.update_vehicle_offline_disposal":
		if e.complexity.Mutation.UpdateVehicleOfflineDisposal == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_offline_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleOfflineDisposal(childComplexity, args["_inc"].(*model.VehicleOfflineDisposalIncInput), args["_set"].(*model.VehicleOfflineDisposalSetInput), args["where"].(model.VehicleOfflineDisposalBoolExp)), true

	case "Mutation.update_vehicle_offline_disposal_by_pk":
		if e.complexity.Mutation.UpdateVehicleOfflineDisposalByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_offline_disposal_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleOfflineDisposalByPk(childComplexity, args["_inc"].(*model.VehicleOfflineDisposalIncInput), args["_set"].(*model.VehicleOfflineDisposalSetInput), args["id"].(int64)), true

	case "Query.dynamic_spot_check_disposal":
		if e.complexity.Query.DynamicSpotCheckDisposal == nil {
			break
		}

		args, err := ec.field_Query_dynamic_spot_check_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSpotCheckDisposal(childComplexity, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp)), true

	case "Query.dynamic_spot_check_disposal_aggregate":
		if e.complexity.Query.DynamicSpotCheckDisposalAggregate == nil {
			break
		}

		args, err := ec.field_Query_dynamic_spot_check_disposal_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSpotCheckDisposalAggregate(childComplexity, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp)), true

	case "Query.dynamic_spot_check_disposal_by_pk":
		if e.complexity.Query.DynamicSpotCheckDisposalByPk == nil {
			break
		}

		args, err := ec.field_Query_dynamic_spot_check_disposal_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSpotCheckDisposalByPk(childComplexity, args["id"].(int64)), true

	case "Query.dynamic_supervision":
		if e.complexity.Query.DynamicSupervision == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervision(childComplexity, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp)), true

	case "Query.dynamic_supervision_aggregate":
		if e.complexity.Query.DynamicSupervisionAggregate == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervisionAggregate(childComplexity, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp)), true

	case "Query.dynamic_supervision_by_pk":
		if e.complexity.Query.DynamicSupervisionByPk == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervisionByPk(childComplexity, args["id"].(int64)), true

	case "Query.dynamic_supervision_detail":
		if e.complexity.Query.DynamicSupervisionDetail == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervisionDetail(childComplexity, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp)), true

	case "Query.dynamic_supervision_detail_aggregate":
		if e.complexity.Query.DynamicSupervisionDetailAggregate == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_detail_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervisionDetailAggregate(childComplexity, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp)), true

	case "Query.dynamic_supervision_detail_by_pk":
		if e.complexity.Query.DynamicSupervisionDetailByPk == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervisionDetailByPk(childComplexity, args["id"].(int64)), true

	case "Query.muck_truck_online":
		if e.complexity.Query.MuckTruckOnline == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_online_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckOnline(childComplexity, args["distinct_on"].([]model.MuckTruckOnlineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckOnlineOrderBy), args["where"].(*model.MuckTruckOnlineBoolExp)), true

	case "Query.muck_truck_online_aggregate":
		if e.complexity.Query.MuckTruckOnlineAggregate == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_online_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckOnlineAggregate(childComplexity, args["distinct_on"].([]model.MuckTruckOnlineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckOnlineOrderBy), args["where"].(*model.MuckTruckOnlineBoolExp)), true

	case "Query.muck_truck_online_by_pk":
		if e.complexity.Query.MuckTruckOnlineByPk == nil {
			break
		}

		args, err := ec.field_Query_muck_truck_online_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MuckTruckOnlineByPk(childComplexity, args["id"].(int64)), true

	case "Query.region_issued":
		if e.complexity.Query.RegionIssued == nil {
			break
		}

		args, err := ec.field_Query_region_issued_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionIssued(childComplexity, args["distinct_on"].([]model.RegionIssuedSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionIssuedOrderBy), args["where"].(*model.RegionIssuedBoolExp)), true

	case "Query.region_issued_aggregate":
		if e.complexity.Query.RegionIssuedAggregate == nil {
			break
		}

		args, err := ec.field_Query_region_issued_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionIssuedAggregate(childComplexity, args["distinct_on"].([]model.RegionIssuedSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionIssuedOrderBy), args["where"].(*model.RegionIssuedBoolExp)), true

	case "Query.region_issued_by_pk":
		if e.complexity.Query.RegionIssuedByPk == nil {
			break
		}

		args, err := ec.field_Query_region_issued_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionIssuedByPk(childComplexity, args["id"].(int64)), true

	case "Query.region_management":
		if e.complexity.Query.RegionManagement == nil {
			break
		}

		args, err := ec.field_Query_region_management_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionManagement(childComplexity, args["distinct_on"].([]model.RegionManagementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionManagementOrderBy), args["where"].(*model.RegionManagementBoolExp)), true

	case "Query.region_management_aggregate":
		if e.complexity.Query.RegionManagementAggregate == nil {
			break
		}

		args, err := ec.field_Query_region_management_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionManagementAggregate(childComplexity, args["distinct_on"].([]model.RegionManagementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionManagementOrderBy), args["where"].(*model.RegionManagementBoolExp)), true

	case "Query.region_management_by_pk":
		if e.complexity.Query.RegionManagementByPk == nil {
			break
		}

		args, err := ec.field_Query_region_management_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegionManagementByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_alarm_supervision":
		if e.complexity.Query.VehicleAlarmSupervision == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmSupervision(childComplexity, args["distinct_on"].([]model.VehicleAlarmSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmSupervisionOrderBy), args["where"].(*model.VehicleAlarmSupervisionBoolExp)), true

	case "Query.vehicle_alarm_supervision_aggregate":
		if e.complexity.Query.VehicleAlarmSupervisionAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_supervision_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmSupervisionAggregate(childComplexity, args["distinct_on"].([]model.VehicleAlarmSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmSupervisionOrderBy), args["where"].(*model.VehicleAlarmSupervisionBoolExp)), true

	case "Query.vehicle_alarm_supervision_by_pk":
		if e.complexity.Query.VehicleAlarmSupervisionByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_supervision_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmSupervisionByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_alarm_times_record":
		if e.complexity.Query.VehicleAlarmTimesRecord == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_times_record_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmTimesRecord(childComplexity, args["distinct_on"].([]model.VehicleAlarmTimesRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmTimesRecordOrderBy), args["where"].(*model.VehicleAlarmTimesRecordBoolExp)), true

	case "Query.vehicle_alarm_times_record_aggregate":
		if e.complexity.Query.VehicleAlarmTimesRecordAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_times_record_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmTimesRecordAggregate(childComplexity, args["distinct_on"].([]model.VehicleAlarmTimesRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmTimesRecordOrderBy), args["where"].(*model.VehicleAlarmTimesRecordBoolExp)), true

	case "Query.vehicle_alarm_times_record_by_pk":
		if e.complexity.Query.VehicleAlarmTimesRecordByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_alarm_times_record_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleAlarmTimesRecordByPk(childComplexity, args["id"].(int64)), true

	case "Query.vehicle_offline_disposal":
		if e.complexity.Query.VehicleOfflineDisposal == nil {
			break
		}

		args, err := ec.field_Query_vehicle_offline_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleOfflineDisposal(childComplexity, args["distinct_on"].([]model.VehicleOfflineDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleOfflineDisposalOrderBy), args["where"].(*model.VehicleOfflineDisposalBoolExp)), true

	case "Query.vehicle_offline_disposal_aggregate":
		if e.complexity.Query.VehicleOfflineDisposalAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_offline_disposal_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleOfflineDisposalAggregate(childComplexity, args["distinct_on"].([]model.VehicleOfflineDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleOfflineDisposalOrderBy), args["where"].(*model.VehicleOfflineDisposalBoolExp)), true

	case "Query.vehicle_offline_disposal_by_pk":
		if e.complexity.Query.VehicleOfflineDisposalByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_offline_disposal_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleOfflineDisposalByPk(childComplexity, args["id"].(int64)), true

	case "RegionIssued.created_at":
		if e.complexity.RegionIssued.CreatedAt == nil {
			break
		}

		return e.complexity.RegionIssued.CreatedAt(childComplexity), true

	case "RegionIssued.created_by":
		if e.complexity.RegionIssued.CreatedBy == nil {
			break
		}

		return e.complexity.RegionIssued.CreatedBy(childComplexity), true

	case "RegionIssued.deleted_at":
		if e.complexity.RegionIssued.DeletedAt == nil {
			break
		}

		return e.complexity.RegionIssued.DeletedAt(childComplexity), true

	case "RegionIssued.deleted_by":
		if e.complexity.RegionIssued.DeletedBy == nil {
			break
		}

		return e.complexity.RegionIssued.DeletedBy(childComplexity), true

	case "RegionIssued.id":
		if e.complexity.RegionIssued.ID == nil {
			break
		}

		return e.complexity.RegionIssued.ID(childComplexity), true

	case "RegionIssued.imel":
		if e.complexity.RegionIssued.Imel == nil {
			break
		}

		return e.complexity.RegionIssued.Imel(childComplexity), true

	case "RegionIssued.region_issued_id":
		if e.complexity.RegionIssued.RegionIssuedID == nil {
			break
		}

		return e.complexity.RegionIssued.RegionIssuedID(childComplexity), true

	case "RegionIssued.region_name":
		if e.complexity.RegionIssued.RegionName == nil {
			break
		}

		return e.complexity.RegionIssued.RegionName(childComplexity), true

	case "RegionIssued.updated_at":
		if e.complexity.RegionIssued.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionIssued.UpdatedAt(childComplexity), true

	case "RegionIssued.updated_by":
		if e.complexity.RegionIssued.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionIssued.UpdatedBy(childComplexity), true

	case "RegionIssuedAggregate.aggregate":
		if e.complexity.RegionIssuedAggregate.Aggregate == nil {
			break
		}

		return e.complexity.RegionIssuedAggregate.Aggregate(childComplexity), true

	case "RegionIssuedAggregateFields.avg":
		if e.complexity.RegionIssuedAggregateFields.Avg == nil {
			break
		}

		return e.complexity.RegionIssuedAggregateFields.Avg(childComplexity), true

	case "RegionIssuedAggregateFields.count":
		if e.complexity.RegionIssuedAggregateFields.Count == nil {
			break
		}

		return e.complexity.RegionIssuedAggregateFields.Count(childComplexity), true

	case "RegionIssuedAggregateFields.max":
		if e.complexity.RegionIssuedAggregateFields.Max == nil {
			break
		}

		return e.complexity.RegionIssuedAggregateFields.Max(childComplexity), true

	case "RegionIssuedAggregateFields.min":
		if e.complexity.RegionIssuedAggregateFields.Min == nil {
			break
		}

		return e.complexity.RegionIssuedAggregateFields.Min(childComplexity), true

	case "RegionIssuedAggregateFields.stddev":
		if e.complexity.RegionIssuedAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.RegionIssuedAggregateFields.Stddev(childComplexity), true

	case "RegionIssuedAggregateFields.stddev_pop":
		if e.complexity.RegionIssuedAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.RegionIssuedAggregateFields.StddevPop(childComplexity), true

	case "RegionIssuedAggregateFields.stddev_samp":
		if e.complexity.RegionIssuedAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.RegionIssuedAggregateFields.StddevSamp(childComplexity), true

	case "RegionIssuedAggregateFields.sum":
		if e.complexity.RegionIssuedAggregateFields.Sum == nil {
			break
		}

		return e.complexity.RegionIssuedAggregateFields.Sum(childComplexity), true

	case "RegionIssuedAggregateFields.var_pop":
		if e.complexity.RegionIssuedAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.RegionIssuedAggregateFields.VarPop(childComplexity), true

	case "RegionIssuedAggregateFields.var_samp":
		if e.complexity.RegionIssuedAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.RegionIssuedAggregateFields.VarSamp(childComplexity), true

	case "RegionIssuedAggregateFields.variance":
		if e.complexity.RegionIssuedAggregateFields.Variance == nil {
			break
		}

		return e.complexity.RegionIssuedAggregateFields.Variance(childComplexity), true

	case "RegionIssuedAvgFields.id":
		if e.complexity.RegionIssuedAvgFields.ID == nil {
			break
		}

		return e.complexity.RegionIssuedAvgFields.ID(childComplexity), true

	case "RegionIssuedMaxFields.created_at":
		if e.complexity.RegionIssuedMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.RegionIssuedMaxFields.CreatedAt(childComplexity), true

	case "RegionIssuedMaxFields.created_by":
		if e.complexity.RegionIssuedMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.RegionIssuedMaxFields.CreatedBy(childComplexity), true

	case "RegionIssuedMaxFields.deleted_at":
		if e.complexity.RegionIssuedMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.RegionIssuedMaxFields.DeletedAt(childComplexity), true

	case "RegionIssuedMaxFields.deleted_by":
		if e.complexity.RegionIssuedMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.RegionIssuedMaxFields.DeletedBy(childComplexity), true

	case "RegionIssuedMaxFields.id":
		if e.complexity.RegionIssuedMaxFields.ID == nil {
			break
		}

		return e.complexity.RegionIssuedMaxFields.ID(childComplexity), true

	case "RegionIssuedMaxFields.imel":
		if e.complexity.RegionIssuedMaxFields.Imel == nil {
			break
		}

		return e.complexity.RegionIssuedMaxFields.Imel(childComplexity), true

	case "RegionIssuedMaxFields.region_issued_id":
		if e.complexity.RegionIssuedMaxFields.RegionIssuedID == nil {
			break
		}

		return e.complexity.RegionIssuedMaxFields.RegionIssuedID(childComplexity), true

	case "RegionIssuedMaxFields.region_name":
		if e.complexity.RegionIssuedMaxFields.RegionName == nil {
			break
		}

		return e.complexity.RegionIssuedMaxFields.RegionName(childComplexity), true

	case "RegionIssuedMaxFields.updated_at":
		if e.complexity.RegionIssuedMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionIssuedMaxFields.UpdatedAt(childComplexity), true

	case "RegionIssuedMaxFields.updated_by":
		if e.complexity.RegionIssuedMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionIssuedMaxFields.UpdatedBy(childComplexity), true

	case "RegionIssuedMinFields.created_at":
		if e.complexity.RegionIssuedMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.RegionIssuedMinFields.CreatedAt(childComplexity), true

	case "RegionIssuedMinFields.created_by":
		if e.complexity.RegionIssuedMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.RegionIssuedMinFields.CreatedBy(childComplexity), true

	case "RegionIssuedMinFields.deleted_at":
		if e.complexity.RegionIssuedMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.RegionIssuedMinFields.DeletedAt(childComplexity), true

	case "RegionIssuedMinFields.deleted_by":
		if e.complexity.RegionIssuedMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.RegionIssuedMinFields.DeletedBy(childComplexity), true

	case "RegionIssuedMinFields.id":
		if e.complexity.RegionIssuedMinFields.ID == nil {
			break
		}

		return e.complexity.RegionIssuedMinFields.ID(childComplexity), true

	case "RegionIssuedMinFields.imel":
		if e.complexity.RegionIssuedMinFields.Imel == nil {
			break
		}

		return e.complexity.RegionIssuedMinFields.Imel(childComplexity), true

	case "RegionIssuedMinFields.region_issued_id":
		if e.complexity.RegionIssuedMinFields.RegionIssuedID == nil {
			break
		}

		return e.complexity.RegionIssuedMinFields.RegionIssuedID(childComplexity), true

	case "RegionIssuedMinFields.region_name":
		if e.complexity.RegionIssuedMinFields.RegionName == nil {
			break
		}

		return e.complexity.RegionIssuedMinFields.RegionName(childComplexity), true

	case "RegionIssuedMinFields.updated_at":
		if e.complexity.RegionIssuedMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionIssuedMinFields.UpdatedAt(childComplexity), true

	case "RegionIssuedMinFields.updated_by":
		if e.complexity.RegionIssuedMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionIssuedMinFields.UpdatedBy(childComplexity), true

	case "RegionIssuedMutationResponse.affected_rows":
		if e.complexity.RegionIssuedMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.RegionIssuedMutationResponse.AffectedRows(childComplexity), true

	case "RegionIssuedMutationResponse.returning":
		if e.complexity.RegionIssuedMutationResponse.Returning == nil {
			break
		}

		return e.complexity.RegionIssuedMutationResponse.Returning(childComplexity), true

	case "RegionIssuedStddevFields.id":
		if e.complexity.RegionIssuedStddevFields.ID == nil {
			break
		}

		return e.complexity.RegionIssuedStddevFields.ID(childComplexity), true

	case "RegionIssuedStddevPopFields.id":
		if e.complexity.RegionIssuedStddevPopFields.ID == nil {
			break
		}

		return e.complexity.RegionIssuedStddevPopFields.ID(childComplexity), true

	case "RegionIssuedStddevSampFields.id":
		if e.complexity.RegionIssuedStddevSampFields.ID == nil {
			break
		}

		return e.complexity.RegionIssuedStddevSampFields.ID(childComplexity), true

	case "RegionIssuedSumFields.id":
		if e.complexity.RegionIssuedSumFields.ID == nil {
			break
		}

		return e.complexity.RegionIssuedSumFields.ID(childComplexity), true

	case "RegionIssuedVarPopFields.id":
		if e.complexity.RegionIssuedVarPopFields.ID == nil {
			break
		}

		return e.complexity.RegionIssuedVarPopFields.ID(childComplexity), true

	case "RegionIssuedVarSampFields.id":
		if e.complexity.RegionIssuedVarSampFields.ID == nil {
			break
		}

		return e.complexity.RegionIssuedVarSampFields.ID(childComplexity), true

	case "RegionIssuedVarianceFields.id":
		if e.complexity.RegionIssuedVarianceFields.ID == nil {
			break
		}

		return e.complexity.RegionIssuedVarianceFields.ID(childComplexity), true

	case "RegionManagement.alarm_begin_time":
		if e.complexity.RegionManagement.AlarmBeginTime == nil {
			break
		}

		return e.complexity.RegionManagement.AlarmBeginTime(childComplexity), true

	case "RegionManagement.alarm_end_time":
		if e.complexity.RegionManagement.AlarmEndTime == nil {
			break
		}

		return e.complexity.RegionManagement.AlarmEndTime(childComplexity), true

	case "RegionManagement.circle_radius":
		if e.complexity.RegionManagement.CircleRadius == nil {
			break
		}

		return e.complexity.RegionManagement.CircleRadius(childComplexity), true

	case "RegionManagement.created_at":
		if e.complexity.RegionManagement.CreatedAt == nil {
			break
		}

		return e.complexity.RegionManagement.CreatedAt(childComplexity), true

	case "RegionManagement.created_by":
		if e.complexity.RegionManagement.CreatedBy == nil {
			break
		}

		return e.complexity.RegionManagement.CreatedBy(childComplexity), true

	case "RegionManagement.deleted_at":
		if e.complexity.RegionManagement.DeletedAt == nil {
			break
		}

		return e.complexity.RegionManagement.DeletedAt(childComplexity), true

	case "RegionManagement.deleted_by":
		if e.complexity.RegionManagement.DeletedBy == nil {
			break
		}

		return e.complexity.RegionManagement.DeletedBy(childComplexity), true

	case "RegionManagement.duration_":
		if e.complexity.RegionManagement.Duration == nil {
			break
		}

		return e.complexity.RegionManagement.Duration(childComplexity), true

	case "RegionManagement.enterprise_name":
		if e.complexity.RegionManagement.EnterpriseName == nil {
			break
		}

		return e.complexity.RegionManagement.EnterpriseName(childComplexity), true

	case "RegionManagement.id":
		if e.complexity.RegionManagement.ID == nil {
			break
		}

		return e.complexity.RegionManagement.ID(childComplexity), true

	case "RegionManagement.is_deleted":
		if e.complexity.RegionManagement.IsDeleted == nil {
			break
		}

		return e.complexity.RegionManagement.IsDeleted(childComplexity), true

	case "RegionManagement.is_super_region":
		if e.complexity.RegionManagement.IsSuperRegion == nil {
			break
		}

		return e.complexity.RegionManagement.IsSuperRegion(childComplexity), true

	case "RegionManagement.max_speed":
		if e.complexity.RegionManagement.MaxSpeed == nil {
			break
		}

		return e.complexity.RegionManagement.MaxSpeed(childComplexity), true

	case "RegionManagement.region_coordinate":
		if e.complexity.RegionManagement.RegionCoordinate == nil {
			break
		}

		return e.complexity.RegionManagement.RegionCoordinate(childComplexity), true

	case "RegionManagement.region_id":
		if e.complexity.RegionManagement.RegionID == nil {
			break
		}

		return e.complexity.RegionManagement.RegionID(childComplexity), true

	case "RegionManagement.region_management_id":
		if e.complexity.RegionManagement.RegionManagementID == nil {
			break
		}

		return e.complexity.RegionManagement.RegionManagementID(childComplexity), true

	case "RegionManagement.region_name":
		if e.complexity.RegionManagement.RegionName == nil {
			break
		}

		return e.complexity.RegionManagement.RegionName(childComplexity), true

	case "RegionManagement.region_nature":
		if e.complexity.RegionManagement.RegionNature == nil {
			break
		}

		return e.complexity.RegionManagement.RegionNature(childComplexity), true

	case "RegionManagement.region_type":
		if e.complexity.RegionManagement.RegionType == nil {
			break
		}

		return e.complexity.RegionManagement.RegionType(childComplexity), true

	case "RegionManagement.updated_at":
		if e.complexity.RegionManagement.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionManagement.UpdatedAt(childComplexity), true

	case "RegionManagement.updated_by":
		if e.complexity.RegionManagement.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionManagement.UpdatedBy(childComplexity), true

	case "RegionManagementAggregate.aggregate":
		if e.complexity.RegionManagementAggregate.Aggregate == nil {
			break
		}

		return e.complexity.RegionManagementAggregate.Aggregate(childComplexity), true

	case "RegionManagementAggregateFields.avg":
		if e.complexity.RegionManagementAggregateFields.Avg == nil {
			break
		}

		return e.complexity.RegionManagementAggregateFields.Avg(childComplexity), true

	case "RegionManagementAggregateFields.count":
		if e.complexity.RegionManagementAggregateFields.Count == nil {
			break
		}

		return e.complexity.RegionManagementAggregateFields.Count(childComplexity), true

	case "RegionManagementAggregateFields.max":
		if e.complexity.RegionManagementAggregateFields.Max == nil {
			break
		}

		return e.complexity.RegionManagementAggregateFields.Max(childComplexity), true

	case "RegionManagementAggregateFields.min":
		if e.complexity.RegionManagementAggregateFields.Min == nil {
			break
		}

		return e.complexity.RegionManagementAggregateFields.Min(childComplexity), true

	case "RegionManagementAggregateFields.stddev":
		if e.complexity.RegionManagementAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.RegionManagementAggregateFields.Stddev(childComplexity), true

	case "RegionManagementAggregateFields.stddev_pop":
		if e.complexity.RegionManagementAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.RegionManagementAggregateFields.StddevPop(childComplexity), true

	case "RegionManagementAggregateFields.stddev_samp":
		if e.complexity.RegionManagementAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.RegionManagementAggregateFields.StddevSamp(childComplexity), true

	case "RegionManagementAggregateFields.sum":
		if e.complexity.RegionManagementAggregateFields.Sum == nil {
			break
		}

		return e.complexity.RegionManagementAggregateFields.Sum(childComplexity), true

	case "RegionManagementAggregateFields.var_pop":
		if e.complexity.RegionManagementAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.RegionManagementAggregateFields.VarPop(childComplexity), true

	case "RegionManagementAggregateFields.var_samp":
		if e.complexity.RegionManagementAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.RegionManagementAggregateFields.VarSamp(childComplexity), true

	case "RegionManagementAggregateFields.variance":
		if e.complexity.RegionManagementAggregateFields.Variance == nil {
			break
		}

		return e.complexity.RegionManagementAggregateFields.Variance(childComplexity), true

	case "RegionManagementAvgFields.circle_radius":
		if e.complexity.RegionManagementAvgFields.CircleRadius == nil {
			break
		}

		return e.complexity.RegionManagementAvgFields.CircleRadius(childComplexity), true

	case "RegionManagementAvgFields.duration_":
		if e.complexity.RegionManagementAvgFields.Duration == nil {
			break
		}

		return e.complexity.RegionManagementAvgFields.Duration(childComplexity), true

	case "RegionManagementAvgFields.id":
		if e.complexity.RegionManagementAvgFields.ID == nil {
			break
		}

		return e.complexity.RegionManagementAvgFields.ID(childComplexity), true

	case "RegionManagementAvgFields.max_speed":
		if e.complexity.RegionManagementAvgFields.MaxSpeed == nil {
			break
		}

		return e.complexity.RegionManagementAvgFields.MaxSpeed(childComplexity), true

	case "RegionManagementMaxFields.alarm_begin_time":
		if e.complexity.RegionManagementMaxFields.AlarmBeginTime == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.AlarmBeginTime(childComplexity), true

	case "RegionManagementMaxFields.alarm_end_time":
		if e.complexity.RegionManagementMaxFields.AlarmEndTime == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.AlarmEndTime(childComplexity), true

	case "RegionManagementMaxFields.circle_radius":
		if e.complexity.RegionManagementMaxFields.CircleRadius == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.CircleRadius(childComplexity), true

	case "RegionManagementMaxFields.created_at":
		if e.complexity.RegionManagementMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.CreatedAt(childComplexity), true

	case "RegionManagementMaxFields.created_by":
		if e.complexity.RegionManagementMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.CreatedBy(childComplexity), true

	case "RegionManagementMaxFields.deleted_at":
		if e.complexity.RegionManagementMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.DeletedAt(childComplexity), true

	case "RegionManagementMaxFields.deleted_by":
		if e.complexity.RegionManagementMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.DeletedBy(childComplexity), true

	case "RegionManagementMaxFields.duration_":
		if e.complexity.RegionManagementMaxFields.Duration == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.Duration(childComplexity), true

	case "RegionManagementMaxFields.enterprise_name":
		if e.complexity.RegionManagementMaxFields.EnterpriseName == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.EnterpriseName(childComplexity), true

	case "RegionManagementMaxFields.id":
		if e.complexity.RegionManagementMaxFields.ID == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.ID(childComplexity), true

	case "RegionManagementMaxFields.is_deleted":
		if e.complexity.RegionManagementMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.IsDeleted(childComplexity), true

	case "RegionManagementMaxFields.is_super_region":
		if e.complexity.RegionManagementMaxFields.IsSuperRegion == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.IsSuperRegion(childComplexity), true

	case "RegionManagementMaxFields.max_speed":
		if e.complexity.RegionManagementMaxFields.MaxSpeed == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.MaxSpeed(childComplexity), true

	case "RegionManagementMaxFields.region_coordinate":
		if e.complexity.RegionManagementMaxFields.RegionCoordinate == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.RegionCoordinate(childComplexity), true

	case "RegionManagementMaxFields.region_id":
		if e.complexity.RegionManagementMaxFields.RegionID == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.RegionID(childComplexity), true

	case "RegionManagementMaxFields.region_management_id":
		if e.complexity.RegionManagementMaxFields.RegionManagementID == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.RegionManagementID(childComplexity), true

	case "RegionManagementMaxFields.region_name":
		if e.complexity.RegionManagementMaxFields.RegionName == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.RegionName(childComplexity), true

	case "RegionManagementMaxFields.region_nature":
		if e.complexity.RegionManagementMaxFields.RegionNature == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.RegionNature(childComplexity), true

	case "RegionManagementMaxFields.region_type":
		if e.complexity.RegionManagementMaxFields.RegionType == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.RegionType(childComplexity), true

	case "RegionManagementMaxFields.updated_at":
		if e.complexity.RegionManagementMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.UpdatedAt(childComplexity), true

	case "RegionManagementMaxFields.updated_by":
		if e.complexity.RegionManagementMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionManagementMaxFields.UpdatedBy(childComplexity), true

	case "RegionManagementMinFields.alarm_begin_time":
		if e.complexity.RegionManagementMinFields.AlarmBeginTime == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.AlarmBeginTime(childComplexity), true

	case "RegionManagementMinFields.alarm_end_time":
		if e.complexity.RegionManagementMinFields.AlarmEndTime == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.AlarmEndTime(childComplexity), true

	case "RegionManagementMinFields.circle_radius":
		if e.complexity.RegionManagementMinFields.CircleRadius == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.CircleRadius(childComplexity), true

	case "RegionManagementMinFields.created_at":
		if e.complexity.RegionManagementMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.CreatedAt(childComplexity), true

	case "RegionManagementMinFields.created_by":
		if e.complexity.RegionManagementMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.CreatedBy(childComplexity), true

	case "RegionManagementMinFields.deleted_at":
		if e.complexity.RegionManagementMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.DeletedAt(childComplexity), true

	case "RegionManagementMinFields.deleted_by":
		if e.complexity.RegionManagementMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.DeletedBy(childComplexity), true

	case "RegionManagementMinFields.duration_":
		if e.complexity.RegionManagementMinFields.Duration == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.Duration(childComplexity), true

	case "RegionManagementMinFields.enterprise_name":
		if e.complexity.RegionManagementMinFields.EnterpriseName == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.EnterpriseName(childComplexity), true

	case "RegionManagementMinFields.id":
		if e.complexity.RegionManagementMinFields.ID == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.ID(childComplexity), true

	case "RegionManagementMinFields.is_deleted":
		if e.complexity.RegionManagementMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.IsDeleted(childComplexity), true

	case "RegionManagementMinFields.is_super_region":
		if e.complexity.RegionManagementMinFields.IsSuperRegion == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.IsSuperRegion(childComplexity), true

	case "RegionManagementMinFields.max_speed":
		if e.complexity.RegionManagementMinFields.MaxSpeed == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.MaxSpeed(childComplexity), true

	case "RegionManagementMinFields.region_coordinate":
		if e.complexity.RegionManagementMinFields.RegionCoordinate == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.RegionCoordinate(childComplexity), true

	case "RegionManagementMinFields.region_id":
		if e.complexity.RegionManagementMinFields.RegionID == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.RegionID(childComplexity), true

	case "RegionManagementMinFields.region_management_id":
		if e.complexity.RegionManagementMinFields.RegionManagementID == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.RegionManagementID(childComplexity), true

	case "RegionManagementMinFields.region_name":
		if e.complexity.RegionManagementMinFields.RegionName == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.RegionName(childComplexity), true

	case "RegionManagementMinFields.region_nature":
		if e.complexity.RegionManagementMinFields.RegionNature == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.RegionNature(childComplexity), true

	case "RegionManagementMinFields.region_type":
		if e.complexity.RegionManagementMinFields.RegionType == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.RegionType(childComplexity), true

	case "RegionManagementMinFields.updated_at":
		if e.complexity.RegionManagementMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.UpdatedAt(childComplexity), true

	case "RegionManagementMinFields.updated_by":
		if e.complexity.RegionManagementMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.RegionManagementMinFields.UpdatedBy(childComplexity), true

	case "RegionManagementMutationResponse.affected_rows":
		if e.complexity.RegionManagementMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.RegionManagementMutationResponse.AffectedRows(childComplexity), true

	case "RegionManagementMutationResponse.returning":
		if e.complexity.RegionManagementMutationResponse.Returning == nil {
			break
		}

		return e.complexity.RegionManagementMutationResponse.Returning(childComplexity), true

	case "RegionManagementStddevFields.circle_radius":
		if e.complexity.RegionManagementStddevFields.CircleRadius == nil {
			break
		}

		return e.complexity.RegionManagementStddevFields.CircleRadius(childComplexity), true

	case "RegionManagementStddevFields.duration_":
		if e.complexity.RegionManagementStddevFields.Duration == nil {
			break
		}

		return e.complexity.RegionManagementStddevFields.Duration(childComplexity), true

	case "RegionManagementStddevFields.id":
		if e.complexity.RegionManagementStddevFields.ID == nil {
			break
		}

		return e.complexity.RegionManagementStddevFields.ID(childComplexity), true

	case "RegionManagementStddevFields.max_speed":
		if e.complexity.RegionManagementStddevFields.MaxSpeed == nil {
			break
		}

		return e.complexity.RegionManagementStddevFields.MaxSpeed(childComplexity), true

	case "RegionManagementStddevPopFields.circle_radius":
		if e.complexity.RegionManagementStddevPopFields.CircleRadius == nil {
			break
		}

		return e.complexity.RegionManagementStddevPopFields.CircleRadius(childComplexity), true

	case "RegionManagementStddevPopFields.duration_":
		if e.complexity.RegionManagementStddevPopFields.Duration == nil {
			break
		}

		return e.complexity.RegionManagementStddevPopFields.Duration(childComplexity), true

	case "RegionManagementStddevPopFields.id":
		if e.complexity.RegionManagementStddevPopFields.ID == nil {
			break
		}

		return e.complexity.RegionManagementStddevPopFields.ID(childComplexity), true

	case "RegionManagementStddevPopFields.max_speed":
		if e.complexity.RegionManagementStddevPopFields.MaxSpeed == nil {
			break
		}

		return e.complexity.RegionManagementStddevPopFields.MaxSpeed(childComplexity), true

	case "RegionManagementStddevSampFields.circle_radius":
		if e.complexity.RegionManagementStddevSampFields.CircleRadius == nil {
			break
		}

		return e.complexity.RegionManagementStddevSampFields.CircleRadius(childComplexity), true

	case "RegionManagementStddevSampFields.duration_":
		if e.complexity.RegionManagementStddevSampFields.Duration == nil {
			break
		}

		return e.complexity.RegionManagementStddevSampFields.Duration(childComplexity), true

	case "RegionManagementStddevSampFields.id":
		if e.complexity.RegionManagementStddevSampFields.ID == nil {
			break
		}

		return e.complexity.RegionManagementStddevSampFields.ID(childComplexity), true

	case "RegionManagementStddevSampFields.max_speed":
		if e.complexity.RegionManagementStddevSampFields.MaxSpeed == nil {
			break
		}

		return e.complexity.RegionManagementStddevSampFields.MaxSpeed(childComplexity), true

	case "RegionManagementSumFields.circle_radius":
		if e.complexity.RegionManagementSumFields.CircleRadius == nil {
			break
		}

		return e.complexity.RegionManagementSumFields.CircleRadius(childComplexity), true

	case "RegionManagementSumFields.duration_":
		if e.complexity.RegionManagementSumFields.Duration == nil {
			break
		}

		return e.complexity.RegionManagementSumFields.Duration(childComplexity), true

	case "RegionManagementSumFields.id":
		if e.complexity.RegionManagementSumFields.ID == nil {
			break
		}

		return e.complexity.RegionManagementSumFields.ID(childComplexity), true

	case "RegionManagementSumFields.max_speed":
		if e.complexity.RegionManagementSumFields.MaxSpeed == nil {
			break
		}

		return e.complexity.RegionManagementSumFields.MaxSpeed(childComplexity), true

	case "RegionManagementVarPopFields.circle_radius":
		if e.complexity.RegionManagementVarPopFields.CircleRadius == nil {
			break
		}

		return e.complexity.RegionManagementVarPopFields.CircleRadius(childComplexity), true

	case "RegionManagementVarPopFields.duration_":
		if e.complexity.RegionManagementVarPopFields.Duration == nil {
			break
		}

		return e.complexity.RegionManagementVarPopFields.Duration(childComplexity), true

	case "RegionManagementVarPopFields.id":
		if e.complexity.RegionManagementVarPopFields.ID == nil {
			break
		}

		return e.complexity.RegionManagementVarPopFields.ID(childComplexity), true

	case "RegionManagementVarPopFields.max_speed":
		if e.complexity.RegionManagementVarPopFields.MaxSpeed == nil {
			break
		}

		return e.complexity.RegionManagementVarPopFields.MaxSpeed(childComplexity), true

	case "RegionManagementVarSampFields.circle_radius":
		if e.complexity.RegionManagementVarSampFields.CircleRadius == nil {
			break
		}

		return e.complexity.RegionManagementVarSampFields.CircleRadius(childComplexity), true

	case "RegionManagementVarSampFields.duration_":
		if e.complexity.RegionManagementVarSampFields.Duration == nil {
			break
		}

		return e.complexity.RegionManagementVarSampFields.Duration(childComplexity), true

	case "RegionManagementVarSampFields.id":
		if e.complexity.RegionManagementVarSampFields.ID == nil {
			break
		}

		return e.complexity.RegionManagementVarSampFields.ID(childComplexity), true

	case "RegionManagementVarSampFields.max_speed":
		if e.complexity.RegionManagementVarSampFields.MaxSpeed == nil {
			break
		}

		return e.complexity.RegionManagementVarSampFields.MaxSpeed(childComplexity), true

	case "RegionManagementVarianceFields.circle_radius":
		if e.complexity.RegionManagementVarianceFields.CircleRadius == nil {
			break
		}

		return e.complexity.RegionManagementVarianceFields.CircleRadius(childComplexity), true

	case "RegionManagementVarianceFields.duration_":
		if e.complexity.RegionManagementVarianceFields.Duration == nil {
			break
		}

		return e.complexity.RegionManagementVarianceFields.Duration(childComplexity), true

	case "RegionManagementVarianceFields.id":
		if e.complexity.RegionManagementVarianceFields.ID == nil {
			break
		}

		return e.complexity.RegionManagementVarianceFields.ID(childComplexity), true

	case "RegionManagementVarianceFields.max_speed":
		if e.complexity.RegionManagementVarianceFields.MaxSpeed == nil {
			break
		}

		return e.complexity.RegionManagementVarianceFields.MaxSpeed(childComplexity), true

	case "VehicleAlarmSupervision.abnormal_disposal_number":
		if e.complexity.VehicleAlarmSupervision.AbnormalDisposalNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.AbnormalDisposalNumber(childComplexity), true

	case "VehicleAlarmSupervision.abnormal_disposal_rate":
		if e.complexity.VehicleAlarmSupervision.AbnormalDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.AbnormalDisposalRate(childComplexity), true

	case "VehicleAlarmSupervision.actual_check_vechicle_number":
		if e.complexity.VehicleAlarmSupervision.ActualCheckVechicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.ActualCheckVechicleNumber(childComplexity), true

	case "VehicleAlarmSupervision.actual_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervision.ActualSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.ActualSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervision.alarm_disposal_rate":
		if e.complexity.VehicleAlarmSupervision.AlarmDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.AlarmDisposalRate(childComplexity), true

	case "VehicleAlarmSupervision.alarm_times":
		if e.complexity.VehicleAlarmSupervision.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.AlarmTimes(childComplexity), true

	case "VehicleAlarmSupervision.alarm_type":
		if e.complexity.VehicleAlarmSupervision.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.AlarmType(childComplexity), true

	case "VehicleAlarmSupervision.area_id":
		if e.complexity.VehicleAlarmSupervision.AreaID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.AreaID(childComplexity), true

	case "VehicleAlarmSupervision.business_scope":
		if e.complexity.VehicleAlarmSupervision.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.BusinessScope(childComplexity), true

	case "VehicleAlarmSupervision.check_abnormal_vehicle_number":
		if e.complexity.VehicleAlarmSupervision.CheckAbnormalVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.CheckAbnormalVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervision.city_rectification":
		if e.complexity.VehicleAlarmSupervision.CityRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.CityRectification(childComplexity), true

	case "VehicleAlarmSupervision.country_rectification":
		if e.complexity.VehicleAlarmSupervision.CountryRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.CountryRectification(childComplexity), true

	case "VehicleAlarmSupervision.created_at":
		if e.complexity.VehicleAlarmSupervision.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.CreatedAt(childComplexity), true

	case "VehicleAlarmSupervision.created_by":
		if e.complexity.VehicleAlarmSupervision.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.CreatedBy(childComplexity), true

	case "VehicleAlarmSupervision.deleted_at":
		if e.complexity.VehicleAlarmSupervision.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.DeletedAt(childComplexity), true

	case "VehicleAlarmSupervision.deleted_by":
		if e.complexity.VehicleAlarmSupervision.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.DeletedBy(childComplexity), true

	case "VehicleAlarmSupervision.disposal_times":
		if e.complexity.VehicleAlarmSupervision.DisposalTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.DisposalTimes(childComplexity), true

	case "VehicleAlarmSupervision.district_rectification":
		if e.complexity.VehicleAlarmSupervision.DistrictRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.DistrictRectification(childComplexity), true

	case "VehicleAlarmSupervision.id":
		if e.complexity.VehicleAlarmSupervision.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.ID(childComplexity), true

	case "VehicleAlarmSupervision.province_rectification":
		if e.complexity.VehicleAlarmSupervision.ProvinceRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.ProvinceRectification(childComplexity), true

	case "VehicleAlarmSupervision.registration_time":
		if e.complexity.VehicleAlarmSupervision.RegistrationTime == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.RegistrationTime(childComplexity), true

	case "VehicleAlarmSupervision.should_check_vehicle_number":
		if e.complexity.VehicleAlarmSupervision.ShouldCheckVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.ShouldCheckVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervision.should_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervision.ShouldSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.ShouldSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervision.statistics_date":
		if e.complexity.VehicleAlarmSupervision.StatisticsDate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.StatisticsDate(childComplexity), true

	case "VehicleAlarmSupervision.superivision_authority_id":
		if e.complexity.VehicleAlarmSupervision.SuperivisionAuthorityID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.SuperivisionAuthorityID(childComplexity), true

	case "VehicleAlarmSupervision.superivision_type":
		if e.complexity.VehicleAlarmSupervision.SuperivisionType == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.SuperivisionType(childComplexity), true

	case "VehicleAlarmSupervision.supervision_rate":
		if e.complexity.VehicleAlarmSupervision.SupervisionRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.SupervisionRate(childComplexity), true

	case "VehicleAlarmSupervision.updated_at":
		if e.complexity.VehicleAlarmSupervision.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.UpdatedAt(childComplexity), true

	case "VehicleAlarmSupervision.updated_by":
		if e.complexity.VehicleAlarmSupervision.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.UpdatedBy(childComplexity), true

	case "VehicleAlarmSupervision.vehicle_alarm_number":
		if e.complexity.VehicleAlarmSupervision.VehicleAlarmNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.VehicleAlarmNumber(childComplexity), true

	case "VehicleAlarmSupervision.vehicle_alarm_supervision_id":
		if e.complexity.VehicleAlarmSupervision.VehicleAlarmSupervisionID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervision.VehicleAlarmSupervisionID(childComplexity), true

	case "VehicleAlarmSupervisionAggregate.aggregate":
		if e.complexity.VehicleAlarmSupervisionAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregate.Aggregate(childComplexity), true

	case "VehicleAlarmSupervisionAggregateFields.avg":
		if e.complexity.VehicleAlarmSupervisionAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregateFields.Avg(childComplexity), true

	case "VehicleAlarmSupervisionAggregateFields.count":
		if e.complexity.VehicleAlarmSupervisionAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregateFields.Count(childComplexity), true

	case "VehicleAlarmSupervisionAggregateFields.max":
		if e.complexity.VehicleAlarmSupervisionAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregateFields.Max(childComplexity), true

	case "VehicleAlarmSupervisionAggregateFields.min":
		if e.complexity.VehicleAlarmSupervisionAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregateFields.Min(childComplexity), true

	case "VehicleAlarmSupervisionAggregateFields.stddev":
		if e.complexity.VehicleAlarmSupervisionAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregateFields.Stddev(childComplexity), true

	case "VehicleAlarmSupervisionAggregateFields.stddev_pop":
		if e.complexity.VehicleAlarmSupervisionAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregateFields.StddevPop(childComplexity), true

	case "VehicleAlarmSupervisionAggregateFields.stddev_samp":
		if e.complexity.VehicleAlarmSupervisionAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregateFields.StddevSamp(childComplexity), true

	case "VehicleAlarmSupervisionAggregateFields.sum":
		if e.complexity.VehicleAlarmSupervisionAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregateFields.Sum(childComplexity), true

	case "VehicleAlarmSupervisionAggregateFields.var_pop":
		if e.complexity.VehicleAlarmSupervisionAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregateFields.VarPop(childComplexity), true

	case "VehicleAlarmSupervisionAggregateFields.var_samp":
		if e.complexity.VehicleAlarmSupervisionAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregateFields.VarSamp(childComplexity), true

	case "VehicleAlarmSupervisionAggregateFields.variance":
		if e.complexity.VehicleAlarmSupervisionAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAggregateFields.Variance(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.abnormal_disposal_number":
		if e.complexity.VehicleAlarmSupervisionAvgFields.AbnormalDisposalNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.AbnormalDisposalNumber(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.abnormal_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionAvgFields.AbnormalDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.AbnormalDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.actual_check_vechicle_number":
		if e.complexity.VehicleAlarmSupervisionAvgFields.ActualCheckVechicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.ActualCheckVechicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.actual_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionAvgFields.ActualSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.ActualSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.alarm_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionAvgFields.AlarmDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.AlarmDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.alarm_times":
		if e.complexity.VehicleAlarmSupervisionAvgFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.business_scope":
		if e.complexity.VehicleAlarmSupervisionAvgFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.BusinessScope(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.check_abnormal_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionAvgFields.CheckAbnormalVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.CheckAbnormalVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.disposal_times":
		if e.complexity.VehicleAlarmSupervisionAvgFields.DisposalTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.DisposalTimes(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.id":
		if e.complexity.VehicleAlarmSupervisionAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.ID(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.should_check_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionAvgFields.ShouldCheckVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.ShouldCheckVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.should_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionAvgFields.ShouldSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.ShouldSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.supervision_rate":
		if e.complexity.VehicleAlarmSupervisionAvgFields.SupervisionRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.SupervisionRate(childComplexity), true

	case "VehicleAlarmSupervisionAvgFields.vehicle_alarm_number":
		if e.complexity.VehicleAlarmSupervisionAvgFields.VehicleAlarmNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionAvgFields.VehicleAlarmNumber(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.abnormal_disposal_number":
		if e.complexity.VehicleAlarmSupervisionMaxFields.AbnormalDisposalNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.AbnormalDisposalNumber(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.abnormal_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionMaxFields.AbnormalDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.AbnormalDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.actual_check_vechicle_number":
		if e.complexity.VehicleAlarmSupervisionMaxFields.ActualCheckVechicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.ActualCheckVechicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.actual_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionMaxFields.ActualSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.ActualSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.alarm_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionMaxFields.AlarmDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.AlarmDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.alarm_times":
		if e.complexity.VehicleAlarmSupervisionMaxFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.alarm_type":
		if e.complexity.VehicleAlarmSupervisionMaxFields.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.AlarmType(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.area_id":
		if e.complexity.VehicleAlarmSupervisionMaxFields.AreaID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.AreaID(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.business_scope":
		if e.complexity.VehicleAlarmSupervisionMaxFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.BusinessScope(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.check_abnormal_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionMaxFields.CheckAbnormalVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.CheckAbnormalVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.city_rectification":
		if e.complexity.VehicleAlarmSupervisionMaxFields.CityRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.CityRectification(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.country_rectification":
		if e.complexity.VehicleAlarmSupervisionMaxFields.CountryRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.CountryRectification(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.created_at":
		if e.complexity.VehicleAlarmSupervisionMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.CreatedAt(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.created_by":
		if e.complexity.VehicleAlarmSupervisionMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.CreatedBy(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.deleted_at":
		if e.complexity.VehicleAlarmSupervisionMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.DeletedAt(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.deleted_by":
		if e.complexity.VehicleAlarmSupervisionMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.DeletedBy(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.disposal_times":
		if e.complexity.VehicleAlarmSupervisionMaxFields.DisposalTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.DisposalTimes(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.district_rectification":
		if e.complexity.VehicleAlarmSupervisionMaxFields.DistrictRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.DistrictRectification(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.id":
		if e.complexity.VehicleAlarmSupervisionMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.ID(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.province_rectification":
		if e.complexity.VehicleAlarmSupervisionMaxFields.ProvinceRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.ProvinceRectification(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.registration_time":
		if e.complexity.VehicleAlarmSupervisionMaxFields.RegistrationTime == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.RegistrationTime(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.should_check_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionMaxFields.ShouldCheckVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.ShouldCheckVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.should_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionMaxFields.ShouldSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.ShouldSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.statistics_date":
		if e.complexity.VehicleAlarmSupervisionMaxFields.StatisticsDate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.StatisticsDate(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.superivision_authority_id":
		if e.complexity.VehicleAlarmSupervisionMaxFields.SuperivisionAuthorityID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.SuperivisionAuthorityID(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.superivision_type":
		if e.complexity.VehicleAlarmSupervisionMaxFields.SuperivisionType == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.SuperivisionType(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.supervision_rate":
		if e.complexity.VehicleAlarmSupervisionMaxFields.SupervisionRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.SupervisionRate(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.updated_at":
		if e.complexity.VehicleAlarmSupervisionMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.UpdatedAt(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.updated_by":
		if e.complexity.VehicleAlarmSupervisionMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.UpdatedBy(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.vehicle_alarm_number":
		if e.complexity.VehicleAlarmSupervisionMaxFields.VehicleAlarmNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.VehicleAlarmNumber(childComplexity), true

	case "VehicleAlarmSupervisionMaxFields.vehicle_alarm_supervision_id":
		if e.complexity.VehicleAlarmSupervisionMaxFields.VehicleAlarmSupervisionID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMaxFields.VehicleAlarmSupervisionID(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.abnormal_disposal_number":
		if e.complexity.VehicleAlarmSupervisionMinFields.AbnormalDisposalNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.AbnormalDisposalNumber(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.abnormal_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionMinFields.AbnormalDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.AbnormalDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.actual_check_vechicle_number":
		if e.complexity.VehicleAlarmSupervisionMinFields.ActualCheckVechicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.ActualCheckVechicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.actual_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionMinFields.ActualSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.ActualSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.alarm_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionMinFields.AlarmDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.AlarmDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.alarm_times":
		if e.complexity.VehicleAlarmSupervisionMinFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.alarm_type":
		if e.complexity.VehicleAlarmSupervisionMinFields.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.AlarmType(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.area_id":
		if e.complexity.VehicleAlarmSupervisionMinFields.AreaID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.AreaID(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.business_scope":
		if e.complexity.VehicleAlarmSupervisionMinFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.BusinessScope(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.check_abnormal_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionMinFields.CheckAbnormalVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.CheckAbnormalVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.city_rectification":
		if e.complexity.VehicleAlarmSupervisionMinFields.CityRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.CityRectification(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.country_rectification":
		if e.complexity.VehicleAlarmSupervisionMinFields.CountryRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.CountryRectification(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.created_at":
		if e.complexity.VehicleAlarmSupervisionMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.CreatedAt(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.created_by":
		if e.complexity.VehicleAlarmSupervisionMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.CreatedBy(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.deleted_at":
		if e.complexity.VehicleAlarmSupervisionMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.DeletedAt(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.deleted_by":
		if e.complexity.VehicleAlarmSupervisionMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.DeletedBy(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.disposal_times":
		if e.complexity.VehicleAlarmSupervisionMinFields.DisposalTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.DisposalTimes(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.district_rectification":
		if e.complexity.VehicleAlarmSupervisionMinFields.DistrictRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.DistrictRectification(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.id":
		if e.complexity.VehicleAlarmSupervisionMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.ID(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.province_rectification":
		if e.complexity.VehicleAlarmSupervisionMinFields.ProvinceRectification == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.ProvinceRectification(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.registration_time":
		if e.complexity.VehicleAlarmSupervisionMinFields.RegistrationTime == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.RegistrationTime(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.should_check_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionMinFields.ShouldCheckVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.ShouldCheckVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.should_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionMinFields.ShouldSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.ShouldSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.statistics_date":
		if e.complexity.VehicleAlarmSupervisionMinFields.StatisticsDate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.StatisticsDate(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.superivision_authority_id":
		if e.complexity.VehicleAlarmSupervisionMinFields.SuperivisionAuthorityID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.SuperivisionAuthorityID(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.superivision_type":
		if e.complexity.VehicleAlarmSupervisionMinFields.SuperivisionType == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.SuperivisionType(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.supervision_rate":
		if e.complexity.VehicleAlarmSupervisionMinFields.SupervisionRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.SupervisionRate(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.updated_at":
		if e.complexity.VehicleAlarmSupervisionMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.UpdatedAt(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.updated_by":
		if e.complexity.VehicleAlarmSupervisionMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.UpdatedBy(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.vehicle_alarm_number":
		if e.complexity.VehicleAlarmSupervisionMinFields.VehicleAlarmNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.VehicleAlarmNumber(childComplexity), true

	case "VehicleAlarmSupervisionMinFields.vehicle_alarm_supervision_id":
		if e.complexity.VehicleAlarmSupervisionMinFields.VehicleAlarmSupervisionID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMinFields.VehicleAlarmSupervisionID(childComplexity), true

	case "VehicleAlarmSupervisionMutationResponse.affected_rows":
		if e.complexity.VehicleAlarmSupervisionMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMutationResponse.AffectedRows(childComplexity), true

	case "VehicleAlarmSupervisionMutationResponse.returning":
		if e.complexity.VehicleAlarmSupervisionMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionMutationResponse.Returning(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.abnormal_disposal_number":
		if e.complexity.VehicleAlarmSupervisionStddevFields.AbnormalDisposalNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.AbnormalDisposalNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.abnormal_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionStddevFields.AbnormalDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.AbnormalDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.actual_check_vechicle_number":
		if e.complexity.VehicleAlarmSupervisionStddevFields.ActualCheckVechicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.ActualCheckVechicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.actual_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionStddevFields.ActualSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.ActualSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.alarm_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionStddevFields.AlarmDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.AlarmDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.alarm_times":
		if e.complexity.VehicleAlarmSupervisionStddevFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.business_scope":
		if e.complexity.VehicleAlarmSupervisionStddevFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.BusinessScope(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.check_abnormal_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionStddevFields.CheckAbnormalVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.CheckAbnormalVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.disposal_times":
		if e.complexity.VehicleAlarmSupervisionStddevFields.DisposalTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.DisposalTimes(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.id":
		if e.complexity.VehicleAlarmSupervisionStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.ID(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.should_check_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionStddevFields.ShouldCheckVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.ShouldCheckVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.should_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionStddevFields.ShouldSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.ShouldSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.supervision_rate":
		if e.complexity.VehicleAlarmSupervisionStddevFields.SupervisionRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.SupervisionRate(childComplexity), true

	case "VehicleAlarmSupervisionStddevFields.vehicle_alarm_number":
		if e.complexity.VehicleAlarmSupervisionStddevFields.VehicleAlarmNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevFields.VehicleAlarmNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.abnormal_disposal_number":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.AbnormalDisposalNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.AbnormalDisposalNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.abnormal_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.AbnormalDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.AbnormalDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.actual_check_vechicle_number":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.ActualCheckVechicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.ActualCheckVechicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.actual_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.ActualSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.ActualSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.alarm_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.AlarmDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.AlarmDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.alarm_times":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.business_scope":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.BusinessScope(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.check_abnormal_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.CheckAbnormalVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.CheckAbnormalVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.disposal_times":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.DisposalTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.DisposalTimes(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.id":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.ID(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.should_check_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.ShouldCheckVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.ShouldCheckVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.should_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.ShouldSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.ShouldSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.supervision_rate":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.SupervisionRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.SupervisionRate(childComplexity), true

	case "VehicleAlarmSupervisionStddevPopFields.vehicle_alarm_number":
		if e.complexity.VehicleAlarmSupervisionStddevPopFields.VehicleAlarmNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevPopFields.VehicleAlarmNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.abnormal_disposal_number":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.AbnormalDisposalNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.AbnormalDisposalNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.abnormal_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.AbnormalDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.AbnormalDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.actual_check_vechicle_number":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.ActualCheckVechicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.ActualCheckVechicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.actual_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.ActualSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.ActualSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.alarm_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.AlarmDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.AlarmDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.alarm_times":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.business_scope":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.BusinessScope(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.check_abnormal_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.CheckAbnormalVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.CheckAbnormalVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.disposal_times":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.DisposalTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.DisposalTimes(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.id":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.ID(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.should_check_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.ShouldCheckVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.ShouldCheckVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.should_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.ShouldSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.ShouldSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.supervision_rate":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.SupervisionRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.SupervisionRate(childComplexity), true

	case "VehicleAlarmSupervisionStddevSampFields.vehicle_alarm_number":
		if e.complexity.VehicleAlarmSupervisionStddevSampFields.VehicleAlarmNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionStddevSampFields.VehicleAlarmNumber(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.abnormal_disposal_number":
		if e.complexity.VehicleAlarmSupervisionSumFields.AbnormalDisposalNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.AbnormalDisposalNumber(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.abnormal_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionSumFields.AbnormalDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.AbnormalDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.actual_check_vechicle_number":
		if e.complexity.VehicleAlarmSupervisionSumFields.ActualCheckVechicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.ActualCheckVechicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.actual_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionSumFields.ActualSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.ActualSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.alarm_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionSumFields.AlarmDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.AlarmDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.alarm_times":
		if e.complexity.VehicleAlarmSupervisionSumFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.business_scope":
		if e.complexity.VehicleAlarmSupervisionSumFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.BusinessScope(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.check_abnormal_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionSumFields.CheckAbnormalVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.CheckAbnormalVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.disposal_times":
		if e.complexity.VehicleAlarmSupervisionSumFields.DisposalTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.DisposalTimes(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.id":
		if e.complexity.VehicleAlarmSupervisionSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.ID(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.should_check_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionSumFields.ShouldCheckVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.ShouldCheckVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.should_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionSumFields.ShouldSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.ShouldSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.supervision_rate":
		if e.complexity.VehicleAlarmSupervisionSumFields.SupervisionRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.SupervisionRate(childComplexity), true

	case "VehicleAlarmSupervisionSumFields.vehicle_alarm_number":
		if e.complexity.VehicleAlarmSupervisionSumFields.VehicleAlarmNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionSumFields.VehicleAlarmNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.abnormal_disposal_number":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.AbnormalDisposalNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.AbnormalDisposalNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.abnormal_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.AbnormalDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.AbnormalDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.actual_check_vechicle_number":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.ActualCheckVechicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.ActualCheckVechicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.actual_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.ActualSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.ActualSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.alarm_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.AlarmDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.AlarmDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.alarm_times":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.business_scope":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.BusinessScope(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.check_abnormal_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.CheckAbnormalVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.CheckAbnormalVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.disposal_times":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.DisposalTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.DisposalTimes(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.id":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.ID(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.should_check_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.ShouldCheckVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.ShouldCheckVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.should_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.ShouldSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.ShouldSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.supervision_rate":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.SupervisionRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.SupervisionRate(childComplexity), true

	case "VehicleAlarmSupervisionVarPopFields.vehicle_alarm_number":
		if e.complexity.VehicleAlarmSupervisionVarPopFields.VehicleAlarmNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarPopFields.VehicleAlarmNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.abnormal_disposal_number":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.AbnormalDisposalNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.AbnormalDisposalNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.abnormal_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.AbnormalDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.AbnormalDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.actual_check_vechicle_number":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.ActualCheckVechicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.ActualCheckVechicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.actual_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.ActualSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.ActualSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.alarm_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.AlarmDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.AlarmDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.alarm_times":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.business_scope":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.BusinessScope(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.check_abnormal_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.CheckAbnormalVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.CheckAbnormalVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.disposal_times":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.DisposalTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.DisposalTimes(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.id":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.ID(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.should_check_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.ShouldCheckVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.ShouldCheckVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.should_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.ShouldSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.ShouldSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.supervision_rate":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.SupervisionRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.SupervisionRate(childComplexity), true

	case "VehicleAlarmSupervisionVarSampFields.vehicle_alarm_number":
		if e.complexity.VehicleAlarmSupervisionVarSampFields.VehicleAlarmNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarSampFields.VehicleAlarmNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.abnormal_disposal_number":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.AbnormalDisposalNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.AbnormalDisposalNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.abnormal_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.AbnormalDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.AbnormalDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.actual_check_vechicle_number":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.ActualCheckVechicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.ActualCheckVechicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.actual_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.ActualSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.ActualSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.alarm_disposal_rate":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.AlarmDisposalRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.AlarmDisposalRate(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.alarm_times":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.business_scope":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.BusinessScope(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.check_abnormal_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.CheckAbnormalVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.CheckAbnormalVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.disposal_times":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.DisposalTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.DisposalTimes(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.id":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.ID(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.should_check_vehicle_number":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.ShouldCheckVehicleNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.ShouldCheckVehicleNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.should_supervision_enterprise_number":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.ShouldSupervisionEnterpriseNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.ShouldSupervisionEnterpriseNumber(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.supervision_rate":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.SupervisionRate == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.SupervisionRate(childComplexity), true

	case "VehicleAlarmSupervisionVarianceFields.vehicle_alarm_number":
		if e.complexity.VehicleAlarmSupervisionVarianceFields.VehicleAlarmNumber == nil {
			break
		}

		return e.complexity.VehicleAlarmSupervisionVarianceFields.VehicleAlarmNumber(childComplexity), true

	case "VehicleAlarmTimesRecord.alarm_times":
		if e.complexity.VehicleAlarmTimesRecord.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.AlarmTimes(childComplexity), true

	case "VehicleAlarmTimesRecord.alarm_type":
		if e.complexity.VehicleAlarmTimesRecord.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.AlarmType(childComplexity), true

	case "VehicleAlarmTimesRecord.created_at":
		if e.complexity.VehicleAlarmTimesRecord.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.CreatedAt(childComplexity), true

	case "VehicleAlarmTimesRecord.created_by":
		if e.complexity.VehicleAlarmTimesRecord.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.CreatedBy(childComplexity), true

	case "VehicleAlarmTimesRecord.deleted_at":
		if e.complexity.VehicleAlarmTimesRecord.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.DeletedAt(childComplexity), true

	case "VehicleAlarmTimesRecord.deleted_by":
		if e.complexity.VehicleAlarmTimesRecord.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.DeletedBy(childComplexity), true

	case "VehicleAlarmTimesRecord.disposal_measure":
		if e.complexity.VehicleAlarmTimesRecord.DisposalMeasure == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.DisposalMeasure(childComplexity), true

	case "VehicleAlarmTimesRecord.disposal_method":
		if e.complexity.VehicleAlarmTimesRecord.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.DisposalMethod(childComplexity), true

	case "VehicleAlarmTimesRecord.disposal_result":
		if e.complexity.VehicleAlarmTimesRecord.DisposalResult == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.DisposalResult(childComplexity), true

	case "VehicleAlarmTimesRecord.disposal_time":
		if e.complexity.VehicleAlarmTimesRecord.DisposalTime == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.DisposalTime(childComplexity), true

	case "VehicleAlarmTimesRecord.duty_person":
		if e.complexity.VehicleAlarmTimesRecord.DutyPerson == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.DutyPerson(childComplexity), true

	case "VehicleAlarmTimesRecord.id":
		if e.complexity.VehicleAlarmTimesRecord.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.ID(childComplexity), true

	case "VehicleAlarmTimesRecord.is_disposal":
		if e.complexity.VehicleAlarmTimesRecord.IsDisposal == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.IsDisposal(childComplexity), true

	case "VehicleAlarmTimesRecord.record_time":
		if e.complexity.VehicleAlarmTimesRecord.RecordTime == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.RecordTime(childComplexity), true

	case "VehicleAlarmTimesRecord.remarks":
		if e.complexity.VehicleAlarmTimesRecord.Remarks == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.Remarks(childComplexity), true

	case "VehicleAlarmTimesRecord.updated_at":
		if e.complexity.VehicleAlarmTimesRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.UpdatedAt(childComplexity), true

	case "VehicleAlarmTimesRecord.updated_by":
		if e.complexity.VehicleAlarmTimesRecord.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.UpdatedBy(childComplexity), true

	case "VehicleAlarmTimesRecord.vehicle_alarm_times_record_id":
		if e.complexity.VehicleAlarmTimesRecord.VehicleAlarmTimesRecordID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.VehicleAlarmTimesRecordID(childComplexity), true

	case "VehicleAlarmTimesRecord.vehicle_id":
		if e.complexity.VehicleAlarmTimesRecord.VehicleID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecord.VehicleID(childComplexity), true

	case "VehicleAlarmTimesRecordAggregate.aggregate":
		if e.complexity.VehicleAlarmTimesRecordAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregate.Aggregate(childComplexity), true

	case "VehicleAlarmTimesRecordAggregateFields.avg":
		if e.complexity.VehicleAlarmTimesRecordAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregateFields.Avg(childComplexity), true

	case "VehicleAlarmTimesRecordAggregateFields.count":
		if e.complexity.VehicleAlarmTimesRecordAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregateFields.Count(childComplexity), true

	case "VehicleAlarmTimesRecordAggregateFields.max":
		if e.complexity.VehicleAlarmTimesRecordAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregateFields.Max(childComplexity), true

	case "VehicleAlarmTimesRecordAggregateFields.min":
		if e.complexity.VehicleAlarmTimesRecordAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregateFields.Min(childComplexity), true

	case "VehicleAlarmTimesRecordAggregateFields.stddev":
		if e.complexity.VehicleAlarmTimesRecordAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregateFields.Stddev(childComplexity), true

	case "VehicleAlarmTimesRecordAggregateFields.stddev_pop":
		if e.complexity.VehicleAlarmTimesRecordAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregateFields.StddevPop(childComplexity), true

	case "VehicleAlarmTimesRecordAggregateFields.stddev_samp":
		if e.complexity.VehicleAlarmTimesRecordAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregateFields.StddevSamp(childComplexity), true

	case "VehicleAlarmTimesRecordAggregateFields.sum":
		if e.complexity.VehicleAlarmTimesRecordAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregateFields.Sum(childComplexity), true

	case "VehicleAlarmTimesRecordAggregateFields.var_pop":
		if e.complexity.VehicleAlarmTimesRecordAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregateFields.VarPop(childComplexity), true

	case "VehicleAlarmTimesRecordAggregateFields.var_samp":
		if e.complexity.VehicleAlarmTimesRecordAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregateFields.VarSamp(childComplexity), true

	case "VehicleAlarmTimesRecordAggregateFields.variance":
		if e.complexity.VehicleAlarmTimesRecordAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAggregateFields.Variance(childComplexity), true

	case "VehicleAlarmTimesRecordAvgFields.disposal_method":
		if e.complexity.VehicleAlarmTimesRecordAvgFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAvgFields.DisposalMethod(childComplexity), true

	case "VehicleAlarmTimesRecordAvgFields.id":
		if e.complexity.VehicleAlarmTimesRecordAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordAvgFields.ID(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.alarm_times":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.alarm_type":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.AlarmType(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.created_at":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.CreatedAt(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.created_by":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.CreatedBy(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.deleted_at":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.DeletedAt(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.deleted_by":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.DeletedBy(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.disposal_measure":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.DisposalMeasure == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.DisposalMeasure(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.disposal_method":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.DisposalMethod(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.disposal_result":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.DisposalResult == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.DisposalResult(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.disposal_time":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.DisposalTime == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.DisposalTime(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.duty_person":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.DutyPerson == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.DutyPerson(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.id":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.ID(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.is_disposal":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.IsDisposal == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.IsDisposal(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.record_time":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.RecordTime == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.RecordTime(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.remarks":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.Remarks(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.updated_at":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.UpdatedAt(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.updated_by":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.UpdatedBy(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.vehicle_alarm_times_record_id":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.VehicleAlarmTimesRecordID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.VehicleAlarmTimesRecordID(childComplexity), true

	case "VehicleAlarmTimesRecordMaxFields.vehicle_id":
		if e.complexity.VehicleAlarmTimesRecordMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMaxFields.VehicleID(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.alarm_times":
		if e.complexity.VehicleAlarmTimesRecordMinFields.AlarmTimes == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.AlarmTimes(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.alarm_type":
		if e.complexity.VehicleAlarmTimesRecordMinFields.AlarmType == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.AlarmType(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.created_at":
		if e.complexity.VehicleAlarmTimesRecordMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.CreatedAt(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.created_by":
		if e.complexity.VehicleAlarmTimesRecordMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.CreatedBy(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.deleted_at":
		if e.complexity.VehicleAlarmTimesRecordMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.DeletedAt(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.deleted_by":
		if e.complexity.VehicleAlarmTimesRecordMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.DeletedBy(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.disposal_measure":
		if e.complexity.VehicleAlarmTimesRecordMinFields.DisposalMeasure == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.DisposalMeasure(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.disposal_method":
		if e.complexity.VehicleAlarmTimesRecordMinFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.DisposalMethod(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.disposal_result":
		if e.complexity.VehicleAlarmTimesRecordMinFields.DisposalResult == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.DisposalResult(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.disposal_time":
		if e.complexity.VehicleAlarmTimesRecordMinFields.DisposalTime == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.DisposalTime(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.duty_person":
		if e.complexity.VehicleAlarmTimesRecordMinFields.DutyPerson == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.DutyPerson(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.id":
		if e.complexity.VehicleAlarmTimesRecordMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.ID(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.is_disposal":
		if e.complexity.VehicleAlarmTimesRecordMinFields.IsDisposal == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.IsDisposal(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.record_time":
		if e.complexity.VehicleAlarmTimesRecordMinFields.RecordTime == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.RecordTime(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.remarks":
		if e.complexity.VehicleAlarmTimesRecordMinFields.Remarks == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.Remarks(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.updated_at":
		if e.complexity.VehicleAlarmTimesRecordMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.UpdatedAt(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.updated_by":
		if e.complexity.VehicleAlarmTimesRecordMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.UpdatedBy(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.vehicle_alarm_times_record_id":
		if e.complexity.VehicleAlarmTimesRecordMinFields.VehicleAlarmTimesRecordID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.VehicleAlarmTimesRecordID(childComplexity), true

	case "VehicleAlarmTimesRecordMinFields.vehicle_id":
		if e.complexity.VehicleAlarmTimesRecordMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMinFields.VehicleID(childComplexity), true

	case "VehicleAlarmTimesRecordMutationResponse.affected_rows":
		if e.complexity.VehicleAlarmTimesRecordMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMutationResponse.AffectedRows(childComplexity), true

	case "VehicleAlarmTimesRecordMutationResponse.returning":
		if e.complexity.VehicleAlarmTimesRecordMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordMutationResponse.Returning(childComplexity), true

	case "VehicleAlarmTimesRecordStddevFields.disposal_method":
		if e.complexity.VehicleAlarmTimesRecordStddevFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordStddevFields.DisposalMethod(childComplexity), true

	case "VehicleAlarmTimesRecordStddevFields.id":
		if e.complexity.VehicleAlarmTimesRecordStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordStddevFields.ID(childComplexity), true

	case "VehicleAlarmTimesRecordStddevPopFields.disposal_method":
		if e.complexity.VehicleAlarmTimesRecordStddevPopFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordStddevPopFields.DisposalMethod(childComplexity), true

	case "VehicleAlarmTimesRecordStddevPopFields.id":
		if e.complexity.VehicleAlarmTimesRecordStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordStddevPopFields.ID(childComplexity), true

	case "VehicleAlarmTimesRecordStddevSampFields.disposal_method":
		if e.complexity.VehicleAlarmTimesRecordStddevSampFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordStddevSampFields.DisposalMethod(childComplexity), true

	case "VehicleAlarmTimesRecordStddevSampFields.id":
		if e.complexity.VehicleAlarmTimesRecordStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordStddevSampFields.ID(childComplexity), true

	case "VehicleAlarmTimesRecordSumFields.disposal_method":
		if e.complexity.VehicleAlarmTimesRecordSumFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordSumFields.DisposalMethod(childComplexity), true

	case "VehicleAlarmTimesRecordSumFields.id":
		if e.complexity.VehicleAlarmTimesRecordSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordSumFields.ID(childComplexity), true

	case "VehicleAlarmTimesRecordVarPopFields.disposal_method":
		if e.complexity.VehicleAlarmTimesRecordVarPopFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordVarPopFields.DisposalMethod(childComplexity), true

	case "VehicleAlarmTimesRecordVarPopFields.id":
		if e.complexity.VehicleAlarmTimesRecordVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordVarPopFields.ID(childComplexity), true

	case "VehicleAlarmTimesRecordVarSampFields.disposal_method":
		if e.complexity.VehicleAlarmTimesRecordVarSampFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordVarSampFields.DisposalMethod(childComplexity), true

	case "VehicleAlarmTimesRecordVarSampFields.id":
		if e.complexity.VehicleAlarmTimesRecordVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordVarSampFields.ID(childComplexity), true

	case "VehicleAlarmTimesRecordVarianceFields.disposal_method":
		if e.complexity.VehicleAlarmTimesRecordVarianceFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordVarianceFields.DisposalMethod(childComplexity), true

	case "VehicleAlarmTimesRecordVarianceFields.id":
		if e.complexity.VehicleAlarmTimesRecordVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleAlarmTimesRecordVarianceFields.ID(childComplexity), true

	case "VehicleOfflineDisposal.app_push_content":
		if e.complexity.VehicleOfflineDisposal.AppPushContent == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.AppPushContent(childComplexity), true

	case "VehicleOfflineDisposal.content":
		if e.complexity.VehicleOfflineDisposal.Content == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.Content(childComplexity), true

	case "VehicleOfflineDisposal.created_at":
		if e.complexity.VehicleOfflineDisposal.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.CreatedAt(childComplexity), true

	case "VehicleOfflineDisposal.created_by":
		if e.complexity.VehicleOfflineDisposal.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.CreatedBy(childComplexity), true

	case "VehicleOfflineDisposal.deleted_at":
		if e.complexity.VehicleOfflineDisposal.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.DeletedAt(childComplexity), true

	case "VehicleOfflineDisposal.deleted_by":
		if e.complexity.VehicleOfflineDisposal.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.DeletedBy(childComplexity), true

	case "VehicleOfflineDisposal.disposal_method":
		if e.complexity.VehicleOfflineDisposal.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.DisposalMethod(childComplexity), true

	case "VehicleOfflineDisposal.enterprise_id":
		if e.complexity.VehicleOfflineDisposal.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.EnterpriseID(childComplexity), true

	case "VehicleOfflineDisposal.id":
		if e.complexity.VehicleOfflineDisposal.ID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.ID(childComplexity), true

	case "VehicleOfflineDisposal.is_app_push":
		if e.complexity.VehicleOfflineDisposal.IsAppPush == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.IsAppPush(childComplexity), true

	case "VehicleOfflineDisposal.is_deleted":
		if e.complexity.VehicleOfflineDisposal.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.IsDeleted(childComplexity), true

	case "VehicleOfflineDisposal.is_report":
		if e.complexity.VehicleOfflineDisposal.IsReport == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.IsReport(childComplexity), true

	case "VehicleOfflineDisposal.is_sms_push":
		if e.complexity.VehicleOfflineDisposal.IsSmsPush == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.IsSmsPush(childComplexity), true

	case "VehicleOfflineDisposal.is_voice_notification":
		if e.complexity.VehicleOfflineDisposal.IsVoiceNotification == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.IsVoiceNotification(childComplexity), true

	case "VehicleOfflineDisposal.notification_content":
		if e.complexity.VehicleOfflineDisposal.NotificationContent == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.NotificationContent(childComplexity), true

	case "VehicleOfflineDisposal.send_time":
		if e.complexity.VehicleOfflineDisposal.SendTime == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.SendTime(childComplexity), true

	case "VehicleOfflineDisposal.supervision_detail_id":
		if e.complexity.VehicleOfflineDisposal.SupervisionDetailID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.SupervisionDetailID(childComplexity), true

	case "VehicleOfflineDisposal.telephone":
		if e.complexity.VehicleOfflineDisposal.Telephone == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.Telephone(childComplexity), true

	case "VehicleOfflineDisposal.updated_at":
		if e.complexity.VehicleOfflineDisposal.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.UpdatedAt(childComplexity), true

	case "VehicleOfflineDisposal.updated_by":
		if e.complexity.VehicleOfflineDisposal.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.UpdatedBy(childComplexity), true

	case "VehicleOfflineDisposal.user_id":
		if e.complexity.VehicleOfflineDisposal.UserID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.UserID(childComplexity), true

	case "VehicleOfflineDisposal.vehicle_offline_disposal_id":
		if e.complexity.VehicleOfflineDisposal.VehicleOfflineDisposalID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.VehicleOfflineDisposalID(childComplexity), true

	case "VehicleOfflineDisposal.voice_content":
		if e.complexity.VehicleOfflineDisposal.VoiceContent == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposal.VoiceContent(childComplexity), true

	case "VehicleOfflineDisposalAggregate.aggregate":
		if e.complexity.VehicleOfflineDisposalAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregate.Aggregate(childComplexity), true

	case "VehicleOfflineDisposalAggregateFields.avg":
		if e.complexity.VehicleOfflineDisposalAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregateFields.Avg(childComplexity), true

	case "VehicleOfflineDisposalAggregateFields.count":
		if e.complexity.VehicleOfflineDisposalAggregateFields.Count == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregateFields.Count(childComplexity), true

	case "VehicleOfflineDisposalAggregateFields.max":
		if e.complexity.VehicleOfflineDisposalAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregateFields.Max(childComplexity), true

	case "VehicleOfflineDisposalAggregateFields.min":
		if e.complexity.VehicleOfflineDisposalAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregateFields.Min(childComplexity), true

	case "VehicleOfflineDisposalAggregateFields.stddev":
		if e.complexity.VehicleOfflineDisposalAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregateFields.Stddev(childComplexity), true

	case "VehicleOfflineDisposalAggregateFields.stddev_pop":
		if e.complexity.VehicleOfflineDisposalAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregateFields.StddevPop(childComplexity), true

	case "VehicleOfflineDisposalAggregateFields.stddev_samp":
		if e.complexity.VehicleOfflineDisposalAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregateFields.StddevSamp(childComplexity), true

	case "VehicleOfflineDisposalAggregateFields.sum":
		if e.complexity.VehicleOfflineDisposalAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregateFields.Sum(childComplexity), true

	case "VehicleOfflineDisposalAggregateFields.var_pop":
		if e.complexity.VehicleOfflineDisposalAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregateFields.VarPop(childComplexity), true

	case "VehicleOfflineDisposalAggregateFields.var_samp":
		if e.complexity.VehicleOfflineDisposalAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregateFields.VarSamp(childComplexity), true

	case "VehicleOfflineDisposalAggregateFields.variance":
		if e.complexity.VehicleOfflineDisposalAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAggregateFields.Variance(childComplexity), true

	case "VehicleOfflineDisposalAvgFields.id":
		if e.complexity.VehicleOfflineDisposalAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalAvgFields.ID(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.app_push_content":
		if e.complexity.VehicleOfflineDisposalMaxFields.AppPushContent == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.AppPushContent(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.content":
		if e.complexity.VehicleOfflineDisposalMaxFields.Content == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.Content(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.created_at":
		if e.complexity.VehicleOfflineDisposalMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.CreatedAt(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.created_by":
		if e.complexity.VehicleOfflineDisposalMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.CreatedBy(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.deleted_at":
		if e.complexity.VehicleOfflineDisposalMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.DeletedAt(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.deleted_by":
		if e.complexity.VehicleOfflineDisposalMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.DeletedBy(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.disposal_method":
		if e.complexity.VehicleOfflineDisposalMaxFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.DisposalMethod(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.enterprise_id":
		if e.complexity.VehicleOfflineDisposalMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.EnterpriseID(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.id":
		if e.complexity.VehicleOfflineDisposalMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.ID(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.is_app_push":
		if e.complexity.VehicleOfflineDisposalMaxFields.IsAppPush == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.IsAppPush(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.is_deleted":
		if e.complexity.VehicleOfflineDisposalMaxFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.IsDeleted(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.is_report":
		if e.complexity.VehicleOfflineDisposalMaxFields.IsReport == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.IsReport(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.is_sms_push":
		if e.complexity.VehicleOfflineDisposalMaxFields.IsSmsPush == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.IsSmsPush(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.is_voice_notification":
		if e.complexity.VehicleOfflineDisposalMaxFields.IsVoiceNotification == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.IsVoiceNotification(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.notification_content":
		if e.complexity.VehicleOfflineDisposalMaxFields.NotificationContent == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.NotificationContent(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.send_time":
		if e.complexity.VehicleOfflineDisposalMaxFields.SendTime == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.SendTime(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.supervision_detail_id":
		if e.complexity.VehicleOfflineDisposalMaxFields.SupervisionDetailID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.SupervisionDetailID(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.telephone":
		if e.complexity.VehicleOfflineDisposalMaxFields.Telephone == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.Telephone(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.updated_at":
		if e.complexity.VehicleOfflineDisposalMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.UpdatedAt(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.updated_by":
		if e.complexity.VehicleOfflineDisposalMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.UpdatedBy(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.user_id":
		if e.complexity.VehicleOfflineDisposalMaxFields.UserID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.UserID(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.vehicle_offline_disposal_id":
		if e.complexity.VehicleOfflineDisposalMaxFields.VehicleOfflineDisposalID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.VehicleOfflineDisposalID(childComplexity), true

	case "VehicleOfflineDisposalMaxFields.voice_content":
		if e.complexity.VehicleOfflineDisposalMaxFields.VoiceContent == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMaxFields.VoiceContent(childComplexity), true

	case "VehicleOfflineDisposalMinFields.app_push_content":
		if e.complexity.VehicleOfflineDisposalMinFields.AppPushContent == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.AppPushContent(childComplexity), true

	case "VehicleOfflineDisposalMinFields.content":
		if e.complexity.VehicleOfflineDisposalMinFields.Content == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.Content(childComplexity), true

	case "VehicleOfflineDisposalMinFields.created_at":
		if e.complexity.VehicleOfflineDisposalMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.CreatedAt(childComplexity), true

	case "VehicleOfflineDisposalMinFields.created_by":
		if e.complexity.VehicleOfflineDisposalMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.CreatedBy(childComplexity), true

	case "VehicleOfflineDisposalMinFields.deleted_at":
		if e.complexity.VehicleOfflineDisposalMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.DeletedAt(childComplexity), true

	case "VehicleOfflineDisposalMinFields.deleted_by":
		if e.complexity.VehicleOfflineDisposalMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.DeletedBy(childComplexity), true

	case "VehicleOfflineDisposalMinFields.disposal_method":
		if e.complexity.VehicleOfflineDisposalMinFields.DisposalMethod == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.DisposalMethod(childComplexity), true

	case "VehicleOfflineDisposalMinFields.enterprise_id":
		if e.complexity.VehicleOfflineDisposalMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.EnterpriseID(childComplexity), true

	case "VehicleOfflineDisposalMinFields.id":
		if e.complexity.VehicleOfflineDisposalMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.ID(childComplexity), true

	case "VehicleOfflineDisposalMinFields.is_app_push":
		if e.complexity.VehicleOfflineDisposalMinFields.IsAppPush == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.IsAppPush(childComplexity), true

	case "VehicleOfflineDisposalMinFields.is_deleted":
		if e.complexity.VehicleOfflineDisposalMinFields.IsDeleted == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.IsDeleted(childComplexity), true

	case "VehicleOfflineDisposalMinFields.is_report":
		if e.complexity.VehicleOfflineDisposalMinFields.IsReport == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.IsReport(childComplexity), true

	case "VehicleOfflineDisposalMinFields.is_sms_push":
		if e.complexity.VehicleOfflineDisposalMinFields.IsSmsPush == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.IsSmsPush(childComplexity), true

	case "VehicleOfflineDisposalMinFields.is_voice_notification":
		if e.complexity.VehicleOfflineDisposalMinFields.IsVoiceNotification == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.IsVoiceNotification(childComplexity), true

	case "VehicleOfflineDisposalMinFields.notification_content":
		if e.complexity.VehicleOfflineDisposalMinFields.NotificationContent == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.NotificationContent(childComplexity), true

	case "VehicleOfflineDisposalMinFields.send_time":
		if e.complexity.VehicleOfflineDisposalMinFields.SendTime == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.SendTime(childComplexity), true

	case "VehicleOfflineDisposalMinFields.supervision_detail_id":
		if e.complexity.VehicleOfflineDisposalMinFields.SupervisionDetailID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.SupervisionDetailID(childComplexity), true

	case "VehicleOfflineDisposalMinFields.telephone":
		if e.complexity.VehicleOfflineDisposalMinFields.Telephone == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.Telephone(childComplexity), true

	case "VehicleOfflineDisposalMinFields.updated_at":
		if e.complexity.VehicleOfflineDisposalMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.UpdatedAt(childComplexity), true

	case "VehicleOfflineDisposalMinFields.updated_by":
		if e.complexity.VehicleOfflineDisposalMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.UpdatedBy(childComplexity), true

	case "VehicleOfflineDisposalMinFields.user_id":
		if e.complexity.VehicleOfflineDisposalMinFields.UserID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.UserID(childComplexity), true

	case "VehicleOfflineDisposalMinFields.vehicle_offline_disposal_id":
		if e.complexity.VehicleOfflineDisposalMinFields.VehicleOfflineDisposalID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.VehicleOfflineDisposalID(childComplexity), true

	case "VehicleOfflineDisposalMinFields.voice_content":
		if e.complexity.VehicleOfflineDisposalMinFields.VoiceContent == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMinFields.VoiceContent(childComplexity), true

	case "VehicleOfflineDisposalMutationResponse.affected_rows":
		if e.complexity.VehicleOfflineDisposalMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMutationResponse.AffectedRows(childComplexity), true

	case "VehicleOfflineDisposalMutationResponse.returning":
		if e.complexity.VehicleOfflineDisposalMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalMutationResponse.Returning(childComplexity), true

	case "VehicleOfflineDisposalStddevFields.id":
		if e.complexity.VehicleOfflineDisposalStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalStddevFields.ID(childComplexity), true

	case "VehicleOfflineDisposalStddevPopFields.id":
		if e.complexity.VehicleOfflineDisposalStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalStddevPopFields.ID(childComplexity), true

	case "VehicleOfflineDisposalStddevSampFields.id":
		if e.complexity.VehicleOfflineDisposalStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalStddevSampFields.ID(childComplexity), true

	case "VehicleOfflineDisposalSumFields.id":
		if e.complexity.VehicleOfflineDisposalSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalSumFields.ID(childComplexity), true

	case "VehicleOfflineDisposalVarPopFields.id":
		if e.complexity.VehicleOfflineDisposalVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalVarPopFields.ID(childComplexity), true

	case "VehicleOfflineDisposalVarSampFields.id":
		if e.complexity.VehicleOfflineDisposalVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalVarSampFields.ID(childComplexity), true

	case "VehicleOfflineDisposalVarianceFields.id":
		if e.complexity.VehicleOfflineDisposalVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleOfflineDisposalVarianceFields.ID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `
"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input JsonbComparisonExp {
	_eq: Jsonb
	_gt: Jsonb
	_gte: Jsonb
	_in: [Jsonb!]
	_is_null: Boolean
	_lt: Jsonb
	_lte: Jsonb
	_neq: Jsonb
	_nin: [Jsonb!]
}
"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
	_eq: Bigint
	_gt: Bigint
	_gte: Bigint
	_in: [Bigint!]
	_is_null: Boolean
	_lt: Bigint
	_lte: Bigint
	_neq: Bigint
	_nin: [Bigint!]
}
"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
	_eq: Boolean
	_gt: Boolean
	_gte: Boolean
	_in: [Boolean!]
	_is_null: Boolean
	_lt: Boolean
	_lte: Boolean
	_neq: Boolean
	_nin: [Boolean!]
}
"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
	_eq: Int
	_gt: Int
	_gte: Int
	_in: [Int!]
	_is_null: Boolean
	_lt: Int
	_lte: Int
	_neq: Int
	_nin: [Int!]
}
"""
expression to compare columns of type Float. All fields are combined with logical 'AND'.
"""
input FloatComparisonExp{
	_eq: Float
	_gt: Float
	_gte: Float
	_in: [Float!]
	_is_null: Boolean
	_lt: Float
	_lte: Float
	_neq: Float
	_nin: [Float!]
}
"""
column ordering options
"""
enum OrderBy {
	"""
	in the ascending order, nulls last
	"""
	asc
	"""
	in the ascending order, nulls first
	"""
	asc_nulls_first
	"""
	in the ascending order, nulls last
	"""
	asc_nulls_last
	"""
	in the descending order, nulls first
	"""
	desc
	"""
	in the descending order, nulls first
	"""
	desc_nulls_first
	"""
	in the descending order, nulls last
	"""
	desc_nulls_last
}
"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
	_eq: String
	_gt: String
	_gte: String
	_ilike: String
	_in: [String!]
	_is_null: Boolean
	_like: String
	_lt: String
	_lte: String
	_neq: String
	_nilike: String
	_nin: [String!]
	_nlike: String
	_nsimilar: String
	_similar: String
}
"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
	_eq: Timestamptz
	_gt: Timestamptz
	_gte: Timestamptz
	_in: [Timestamptz!]
	_is_null: Boolean
	_lt: Timestamptz
	_lte: Timestamptz
	_neq: Timestamptz
	_nin: [Timestamptz!]
}
"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
	_eq: Numeric
	_gt: Numeric
	_gte: Numeric
	_in: [Numeric!]
	_is_null: Boolean
	_lt: Numeric
	_lte: Numeric
	_neq: Numeric
	_nin: [Numeric!]
}
"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input PointComparisonExp {
	_eq: Point
	_gt: Point
	_gte: Point
	_in: [Point!]
	_is_null: Boolean
	_lt: Point
	_lte: Point
	_neq: Point
	_nin: [Point!]
}
scalar Jsonb
scalar Bigint
scalar Timestamptz
scalar Point
scalar Numeric

`, BuiltIn: false},
	{Name: "graph/graphqls/dynamic_spot_check_disposal.graphqls", Input: `"""
动态抽查处置表
"""
type DynamicSpotCheckDisposal {
	"""
	 按指定方法生成                           ( 主键                                                         )
	"""
	id: Bigint!
	"""
	 vehicle_info 车辆信息表 的vehicle_id 
	"""
	vehicle_id: String!
	"""
	 所在企业id                               ( enterprise_info表的enterprise_id                         )
	"""
	enterprise_id: String
	"""
	 手机号码                                 
	"""
	telephone: String
	"""
	 发送时间                                 
	"""
	send_time: Timestamptz
	"""
	 动态监管抽查明细表id                     ( dynamic_supervision_ detail 动态监管抽查明细表的supervision_detail_id )
	"""
	supervision_detail_id: String
	"""
	 图像异常处置措施                         
	"""
	image_abnormal_handing_measure: String
	"""
	 反馈时间                                 
	"""
	feedback_time: Timestamptz
	"""
	 行车记录仪数据处置措施                   
	"""
	tachograph_data_disposal_measure: String
	"""
	 操作用户                                 ( system_user表的user_id                                   )
	"""
	operation_user: String
	"""
	 是否短信推送                             
	"""
	is_sms_push: Boolean
	"""
	 是否通报                                 
	"""
	is_notify: Boolean
	"""
	 是否语音通知                             
	"""
	is_announce: Boolean
	"""
	 是否APP推送                              
	"""
	is_app_push: Boolean
	"""
	 通报内容                                 
	"""
	notify_content: String
	"""
	 语音内容                                 
	"""
	announce_content: String
	"""
	 APP推送内容                              
	"""
	app_push_content: String
	"""
	 处置内容                                 
	"""
	disposal_content: String
	"""
	 处置方式                                 ( 处置方式字典                                             )
	"""
	disposal_method: Int
	"""
	 处置结果                                 
	"""
	disposal_result: String
	"""
	 是否删除                                 ( false                                                        )
	"""
	is_deleted: Boolean
	"""
	 创建时间                                 
	"""
	created_at: Timestamptz!
	"""
	 创建人                                   ( system_user表的user_id                                   )
	"""
	created_by: String!
	"""
	 修改时间                                 
	"""
	updated_at: Timestamptz
	"""
	 修改人                                   ( system_user表的user_id                                   )
	"""
	updated_by: String
	"""
	 删除时间                                 
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                   ( system_user表的user_id                                   )
	"""
	deleted_by: String
}
"""
aggregated selection of "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalAggregate {
	aggregate: DynamicSpotCheckDisposalAggregateFields
}
"""
aggregate fields of "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalAggregateFields {
	avg: DynamicSpotCheckDisposalAvgFields
	count: Int
	max: DynamicSpotCheckDisposalMaxFields
	min: DynamicSpotCheckDisposalMinFields
	stddev: DynamicSpotCheckDisposalStddevFields
	stddev_pop: DynamicSpotCheckDisposalStddevPopFields
	stddev_samp: DynamicSpotCheckDisposalStddevSampFields
	sum: DynamicSpotCheckDisposalSumFields
	var_pop: DynamicSpotCheckDisposalVarPopFields
	var_samp: DynamicSpotCheckDisposalVarSampFields
	variance: DynamicSpotCheckDisposalVarianceFields
}
"""
aggregate avg on columns of table "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalAvgFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate max on columns of table "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalMaxFields {
	id: Bigint
	vehicle_id: String
	enterprise_id: String
	telephone: String
	send_time: Timestamptz
	supervision_detail_id: String
	image_abnormal_handing_measure: String
	feedback_time: Timestamptz
	tachograph_data_disposal_measure: String
	operation_user: String
	is_sms_push: Boolean
	is_notify: Boolean
	is_announce: Boolean
	is_app_push: Boolean
	notify_content: String
	announce_content: String
	app_push_content: String
	disposal_content: String
	disposal_method: Int
	disposal_result: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalMinFields {
	id: Bigint
	vehicle_id: String
	enterprise_id: String
	telephone: String
	send_time: Timestamptz
	supervision_detail_id: String
	image_abnormal_handing_measure: String
	feedback_time: Timestamptz
	tachograph_data_disposal_measure: String
	operation_user: String
	is_sms_push: Boolean
	is_notify: Boolean
	is_announce: Boolean
	is_app_push: Boolean
	notify_content: String
	announce_content: String
	app_push_content: String
	disposal_content: String
	disposal_method: Int
	disposal_result: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalStddevFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate stddev_pop on columns of table "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalStddevPopFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate stddev_samp on columns of table "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalStddevSampFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate sum on columns of table "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalSumFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate var_pop on columns of table "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalVarPopFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate var_samp on columns of table "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalVarSampFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate variance on columns of table "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalVarianceFields {
	id: Bigint
	disposal_method: Int
}
"""
response of any mutation on the table "dynamic_spot_check_disposal"
"""
type DynamicSpotCheckDisposalMutationResponse {
	affected_rows: Int!
	returning: [DynamicSpotCheckDisposal!]!
}
"""
ordering options when selecting data from "dynamic_spot_check_disposal"
"""
input DynamicSpotCheckDisposalOrderBy {
	id: OrderBy
	vehicle_id: OrderBy
	enterprise_id: OrderBy
	telephone: OrderBy
	send_time: OrderBy
	supervision_detail_id: OrderBy
	image_abnormal_handing_measure: OrderBy
	feedback_time: OrderBy
	tachograph_data_disposal_measure: OrderBy
	operation_user: OrderBy
	is_sms_push: OrderBy
	is_notify: OrderBy
	is_announce: OrderBy
	is_app_push: OrderBy
	notify_content: OrderBy
	announce_content: OrderBy
	app_push_content: OrderBy
	disposal_content: OrderBy
	disposal_method: OrderBy
	disposal_result: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'dynamic_spot_check_disposal'.
"""
input DynamicSpotCheckDisposalBoolExp {
	_and: [DynamicSpotCheckDisposalBoolExp]
	_not: DynamicSpotCheckDisposalBoolExp
	_or: [DynamicSpotCheckDisposalBoolExp]
	id: BigintComparisonExp
	vehicle_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	telephone: StringComparisonExp
	send_time: TimestamptzComparisonExp
	supervision_detail_id: StringComparisonExp
	image_abnormal_handing_measure: StringComparisonExp
	feedback_time: TimestamptzComparisonExp
	tachograph_data_disposal_measure: StringComparisonExp
	operation_user: StringComparisonExp
	is_sms_push: BooleanComparisonExp
	is_notify: BooleanComparisonExp
	is_announce: BooleanComparisonExp
	is_app_push: BooleanComparisonExp
	notify_content: StringComparisonExp
	announce_content: StringComparisonExp
	app_push_content: StringComparisonExp
	disposal_content: StringComparisonExp
	disposal_method: IntComparisonExp
	disposal_result: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "dynamic_spot_check_disposal"
"""
input DynamicSpotCheckDisposalInsertInput {
	enterprise_id: String
	telephone: String
	send_time: Timestamptz
	supervision_detail_id: String
	image_abnormal_handing_measure: String
	feedback_time: Timestamptz
	tachograph_data_disposal_measure: String
	operation_user: String
	is_sms_push: Boolean
	is_notify: Boolean
	is_announce: Boolean
	is_app_push: Boolean
	notify_content: String
	announce_content: String
	app_push_content: String
	disposal_content: String
	disposal_method: Int
	disposal_result: String
	is_deleted: Boolean
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "dynamic_spot_check_disposal"
"""
input DynamicSpotCheckDisposalIncInput {
	id: Bigint
	disposal_method: Int
}
"""
input type for updating data in table "dynamic_spot_check_disposal"
"""
input DynamicSpotCheckDisposalSetInput {
	id: Bigint
	vehicle_id: String
	enterprise_id: String
	telephone: String
	send_time: Timestamptz
	supervision_detail_id: String
	image_abnormal_handing_measure: String
	feedback_time: Timestamptz
	tachograph_data_disposal_measure: String
	operation_user: String
	is_sms_push: Boolean
	is_notify: Boolean
	is_announce: Boolean
	is_app_push: Boolean
	notify_content: String
	announce_content: String
	app_push_content: String
	disposal_content: String
	disposal_method: Int
	disposal_result: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum DynamicSpotCheckDisposalSelectColumn {
	"""
	 按指定方法生成                           ( 主键                                                         )
	"""
	id
	"""
	 vehicle_info 车辆信息表 的vehicle_id 
	"""
	vehicle_id
	"""
	 所在企业id                               ( enterprise_info表的enterprise_id                         )
	"""
	enterprise_id
	"""
	 手机号码                                 
	"""
	telephone
	"""
	 发送时间                                 
	"""
	send_time
	"""
	 动态监管抽查明细表id                     ( dynamic_supervision_ detail 动态监管抽查明细表的supervision_detail_id )
	"""
	supervision_detail_id
	"""
	 图像异常处置措施                         
	"""
	image_abnormal_handing_measure
	"""
	 反馈时间                                 
	"""
	feedback_time
	"""
	 行车记录仪数据处置措施                   
	"""
	tachograph_data_disposal_measure
	"""
	 操作用户                                 ( system_user表的user_id                                   )
	"""
	operation_user
	"""
	 是否短信推送                             
	"""
	is_sms_push
	"""
	 是否通报                                 
	"""
	is_notify
	"""
	 是否语音通知                             
	"""
	is_announce
	"""
	 是否APP推送                              
	"""
	is_app_push
	"""
	 通报内容                                 
	"""
	notify_content
	"""
	 语音内容                                 
	"""
	announce_content
	"""
	 APP推送内容                              
	"""
	app_push_content
	"""
	 处置内容                                 
	"""
	disposal_content
	"""
	 处置方式                                 ( 处置方式字典                                             )
	"""
	disposal_method
	"""
	 处置结果                                 
	"""
	disposal_result
	"""
	 是否删除                                 ( false                                                        )
	"""
	is_deleted
	"""
	 创建时间                                 
	"""
	created_at
	"""
	 创建人                                   ( system_user表的user_id                                   )
	"""
	created_by
	"""
	 修改时间                                 
	"""
	updated_at
	"""
	 修改人                                   ( system_user表的user_id                                   )
	"""
	updated_by
	"""
	 删除时间                                 
	"""
	deleted_at
	"""
	 删除人                                   ( system_user表的user_id                                   )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	dynamic_spot_check_disposal(distinct_on: [DynamicSpotCheckDisposalSelectColumn!], limit: Int, offset: Int, order_by: [DynamicSpotCheckDisposalOrderBy!], where: DynamicSpotCheckDisposalBoolExp): [DynamicSpotCheckDisposal!]!
	"""
	聚合查询
	"""
	dynamic_spot_check_disposal_aggregate(distinct_on: [DynamicSpotCheckDisposalSelectColumn!], limit: Int, offset: Int, order_by: [DynamicSpotCheckDisposalOrderBy!], where: DynamicSpotCheckDisposalBoolExp): DynamicSpotCheckDisposalAggregate!
	"""
	主键查询
	"""
	dynamic_spot_check_disposal_by_pk(id: Bigint!): DynamicSpotCheckDisposal!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_dynamic_spot_check_disposal(where: DynamicSpotCheckDisposalBoolExp!): DynamicSpotCheckDisposalMutationResponse
	"""
	根据主键删除记录
	"""
	delete_dynamic_spot_check_disposal_by_pk(id: Bigint!): DynamicSpotCheckDisposal
	"""
	插入
	"""
	insert_dynamic_spot_check_disposal(objects: [DynamicSpotCheckDisposalInsertInput!]!): DynamicSpotCheckDisposalMutationResponse
	"""
	插入一条记录
	"""
	insert_dynamic_spot_check_disposal_one(objects: DynamicSpotCheckDisposalInsertInput!): DynamicSpotCheckDisposal
	"""
	更新
	"""
	update_dynamic_spot_check_disposal(_inc: DynamicSpotCheckDisposalIncInput, _set: DynamicSpotCheckDisposalSetInput, where: DynamicSpotCheckDisposalBoolExp!): DynamicSpotCheckDisposalMutationResponse
	"""
	更新
	"""
	update_dynamic_spot_check_disposal_by_pk(_inc: DynamicSpotCheckDisposalIncInput, _set: DynamicSpotCheckDisposalSetInput, id: Bigint!): DynamicSpotCheckDisposal
}
`, BuiltIn: false},
	{Name: "graph/graphqls/dynamic_supervision.graphqls", Input: `"""
动态监管抽查主表
"""
type DynamicSupervision {
	"""
	 按指定方法生成                                               ( 主键                           )
	"""
	id: Bigint!
	"""
	 动态监管抽查主表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	supervision_id: String!
	"""
	 抽查日期                                                     
	"""
	spot_check_date: Timestamptz
	"""
	 抽查总数                                                     
	"""
	spot_check_total_number: Int
	"""
	 抽查数量                                                     
	"""
	spot_check_number: Int
	"""
	 抽查比例                                                     
	"""
	spot_check_ratio: Numeric
	"""
	 抽查人员                                                     ( 引用system_user表的user_id )
	"""
	check_user_id: String
	"""
	 总车辆数                                                     
	"""
	total_number_vehicle: Int
	"""
	 抽查人员位置的省份ID                                         ( 省份表province_id              )
	"""
	province_id: String
	"""
	 抽查人员位置的城市ID                                         ( 城市表city_id                  )
	"""
	city_id: String
	"""
	 抽查人员位置的区域ID                                         ( 区域表district_id              )
	"""
	district_id: String
	"""
	 年                                                           
	"""
	year: Int
	"""
	 月                                                           
	"""
	month: Int
	"""
	 日                                                           
	"""
	day: Int
	"""
	 创建时间                                                     
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                       ( system_user表的user_id     )
	"""
	created_by: String!
	"""
	 修改时间                                                     
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                       ( system_user表的user_id     )
	"""
	updated_by: String
	"""
	 删除时间                                                     
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                       ( system_user表的user_id     )
	"""
	deleted_by: String
	"""
	 是否被删除                                                   
	"""
	is_deleted: Boolean
}
"""
aggregated selection of "dynamic_supervision"
"""
type DynamicSupervisionAggregate {
	aggregate: DynamicSupervisionAggregateFields
}
"""
aggregate fields of "dynamic_supervision"
"""
type DynamicSupervisionAggregateFields {
	avg: DynamicSupervisionAvgFields
	count: Int
	max: DynamicSupervisionMaxFields
	min: DynamicSupervisionMinFields
	stddev: DynamicSupervisionStddevFields
	stddev_pop: DynamicSupervisionStddevPopFields
	stddev_samp: DynamicSupervisionStddevSampFields
	sum: DynamicSupervisionSumFields
	var_pop: DynamicSupervisionVarPopFields
	var_samp: DynamicSupervisionVarSampFields
	variance: DynamicSupervisionVarianceFields
}
"""
aggregate avg on columns of table "dynamic_supervision"
"""
type DynamicSupervisionAvgFields {
	id: Bigint
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	total_number_vehicle: Int
	year: Int
	month: Int
	day: Int
}
"""
aggregate max on columns of table "dynamic_supervision"
"""
type DynamicSupervisionMaxFields {
	id: Bigint
	supervision_id: String
	spot_check_date: Timestamptz
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	check_user_id: String
	total_number_vehicle: Int
	province_id: String
	city_id: String
	district_id: String
	year: Int
	month: Int
	day: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate min on columns of table "dynamic_supervision"
"""
type DynamicSupervisionMinFields {
	id: Bigint
	supervision_id: String
	spot_check_date: Timestamptz
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	check_user_id: String
	total_number_vehicle: Int
	province_id: String
	city_id: String
	district_id: String
	year: Int
	month: Int
	day: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
aggregate stddev on columns of table "dynamic_supervision"
"""
type DynamicSupervisionStddevFields {
	id: Bigint
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	total_number_vehicle: Int
	year: Int
	month: Int
	day: Int
}
"""
aggregate stddev_pop on columns of table "dynamic_supervision"
"""
type DynamicSupervisionStddevPopFields {
	id: Bigint
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	total_number_vehicle: Int
	year: Int
	month: Int
	day: Int
}
"""
aggregate stddev_samp on columns of table "dynamic_supervision"
"""
type DynamicSupervisionStddevSampFields {
	id: Bigint
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	total_number_vehicle: Int
	year: Int
	month: Int
	day: Int
}
"""
aggregate sum on columns of table "dynamic_supervision"
"""
type DynamicSupervisionSumFields {
	id: Bigint
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	total_number_vehicle: Int
	year: Int
	month: Int
	day: Int
}
"""
aggregate var_pop on columns of table "dynamic_supervision"
"""
type DynamicSupervisionVarPopFields {
	id: Bigint
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	total_number_vehicle: Int
	year: Int
	month: Int
	day: Int
}
"""
aggregate var_samp on columns of table "dynamic_supervision"
"""
type DynamicSupervisionVarSampFields {
	id: Bigint
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	total_number_vehicle: Int
	year: Int
	month: Int
	day: Int
}
"""
aggregate variance on columns of table "dynamic_supervision"
"""
type DynamicSupervisionVarianceFields {
	id: Bigint
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	total_number_vehicle: Int
	year: Int
	month: Int
	day: Int
}
"""
response of any mutation on the table "dynamic_supervision"
"""
type DynamicSupervisionMutationResponse {
	affected_rows: Int!
	returning: [DynamicSupervision!]!
}
"""
ordering options when selecting data from "dynamic_supervision"
"""
input DynamicSupervisionOrderBy {
	id: OrderBy
	supervision_id: OrderBy
	spot_check_date: OrderBy
	spot_check_total_number: OrderBy
	spot_check_number: OrderBy
	spot_check_ratio: OrderBy
	check_user_id: OrderBy
	total_number_vehicle: OrderBy
	province_id: OrderBy
	city_id: OrderBy
	district_id: OrderBy
	year: OrderBy
	month: OrderBy
	day: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
	is_deleted: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'dynamic_supervision'.
"""
input DynamicSupervisionBoolExp {
	_and: [DynamicSupervisionBoolExp]
	_not: DynamicSupervisionBoolExp
	_or: [DynamicSupervisionBoolExp]
	id: BigintComparisonExp
	supervision_id: StringComparisonExp
	spot_check_date: TimestamptzComparisonExp
	spot_check_total_number: IntComparisonExp
	spot_check_number: IntComparisonExp
	spot_check_ratio: NumericComparisonExp
	check_user_id: StringComparisonExp
	total_number_vehicle: IntComparisonExp
	province_id: StringComparisonExp
	city_id: StringComparisonExp
	district_id: StringComparisonExp
	year: IntComparisonExp
	month: IntComparisonExp
	day: IntComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
	is_deleted: BooleanComparisonExp
}
"""
input type for inserting data into table "dynamic_supervision"
"""
input DynamicSupervisionInsertInput {
	spot_check_date: Timestamptz
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	check_user_id: String
	total_number_vehicle: Int
	province_id: String
	city_id: String
	district_id: String
	year: Int
	month: Int
	day: Int
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
input type for incrementing integer column in table "dynamic_supervision"
"""
input DynamicSupervisionIncInput {
	id: Bigint
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	total_number_vehicle: Int
	year: Int
	month: Int
	day: Int
}
"""
input type for updating data in table "dynamic_supervision"
"""
input DynamicSupervisionSetInput {
	id: Bigint
	supervision_id: String
	spot_check_date: Timestamptz
	spot_check_total_number: Int
	spot_check_number: Int
	spot_check_ratio: Numeric
	check_user_id: String
	total_number_vehicle: Int
	province_id: String
	city_id: String
	district_id: String
	year: Int
	month: Int
	day: Int
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
	is_deleted: Boolean
}
"""
可选select
"""
enum DynamicSupervisionSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                           )
	"""
	id
	"""
	 动态监管抽查主表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                       )
	"""
	supervision_id
	"""
	 抽查日期                                                     
	"""
	spot_check_date
	"""
	 抽查总数                                                     
	"""
	spot_check_total_number
	"""
	 抽查数量                                                     
	"""
	spot_check_number
	"""
	 抽查比例                                                     
	"""
	spot_check_ratio
	"""
	 抽查人员                                                     ( 引用system_user表的user_id )
	"""
	check_user_id
	"""
	 总车辆数                                                     
	"""
	total_number_vehicle
	"""
	 抽查人员位置的省份ID                                         ( 省份表province_id              )
	"""
	province_id
	"""
	 抽查人员位置的城市ID                                         ( 城市表city_id                  )
	"""
	city_id
	"""
	 抽查人员位置的区域ID                                         ( 区域表district_id              )
	"""
	district_id
	"""
	 年                                                           
	"""
	year
	"""
	 月                                                           
	"""
	month
	"""
	 日                                                           
	"""
	day
	"""
	 创建时间                                                     
	"""
	created_at
	"""
	 创建人                                                       ( system_user表的user_id     )
	"""
	created_by
	"""
	 修改时间                                                     
	"""
	updated_at
	"""
	 修改人                                                       ( system_user表的user_id     )
	"""
	updated_by
	"""
	 删除时间                                                     
	"""
	deleted_at
	"""
	 删除人                                                       ( system_user表的user_id     )
	"""
	deleted_by
	"""
	 是否被删除                                                   
	"""
	is_deleted
}
extend type Query {
	"""
	列表查询
	"""
	dynamic_supervision(distinct_on: [DynamicSupervisionSelectColumn!], limit: Int, offset: Int, order_by: [DynamicSupervisionOrderBy!], where: DynamicSupervisionBoolExp): [DynamicSupervision!]!
	"""
	聚合查询
	"""
	dynamic_supervision_aggregate(distinct_on: [DynamicSupervisionSelectColumn!], limit: Int, offset: Int, order_by: [DynamicSupervisionOrderBy!], where: DynamicSupervisionBoolExp): DynamicSupervisionAggregate!
	"""
	主键查询
	"""
	dynamic_supervision_by_pk(id: Bigint!): DynamicSupervision!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_dynamic_supervision(where: DynamicSupervisionBoolExp!): DynamicSupervisionMutationResponse
	"""
	根据主键删除记录
	"""
	delete_dynamic_supervision_by_pk(id: Bigint!): DynamicSupervision
	"""
	插入
	"""
	insert_dynamic_supervision(objects: [DynamicSupervisionInsertInput!]!): DynamicSupervisionMutationResponse
	"""
	插入一条记录
	"""
	insert_dynamic_supervision_one(objects: DynamicSupervisionInsertInput!): DynamicSupervision
	"""
	更新
	"""
	update_dynamic_supervision(_inc: DynamicSupervisionIncInput, _set: DynamicSupervisionSetInput, where: DynamicSupervisionBoolExp!): DynamicSupervisionMutationResponse
	"""
	更新
	"""
	update_dynamic_supervision_by_pk(_inc: DynamicSupervisionIncInput, _set: DynamicSupervisionSetInput, id: Bigint!): DynamicSupervision
}
`, BuiltIn: false},
	{Name: "graph/graphqls/dynamic_supervision_detail.graphqls", Input: `"""
动态监管抽查明细表
"""
type DynamicSupervisionDetail {
	"""
	 按指定方法生成                                               ( 主键                                                    )
	"""
	id: Bigint!
	"""
	 动态监管抽查明细表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                )
	"""
	supervision_detail_id: String!
	"""
	 动态监管抽查主表的ID                                         ( 动态监管抽查主表dynamic_supervision的supervision_id )
	"""
	supervision_id: String
	"""
	 驾驶员id                                                     ( driver_info 表的driver_id                           )
	"""
	driver_id: String
	"""
	 车辆所在企业id                                               ( enterprise_info表的enterprise_id                    )
	"""
	enterprise_id: String
	"""
	 车辆id                                                       ( vehicle_info 表的vehicle_id                         )
	"""
	vehicle_id: String
	"""
	 监控平台时间                                                 
	"""
	monitoring_time: Timestamptz
	"""
	 监控平台显示位置                                             
	"""
	monitoring_location: String
	"""
	 是否在线（是/否）                                            
	"""
	is_online: Boolean
	"""
	 行车记录仪数据（是否异常）                                   
	"""
	is_tachograph_record_normal: Boolean
	"""
	 行车记录仪异常数据项                                         
	"""
	tachograph_data_exception: String
	"""
	 行车记录仪速度                                               
	"""
	tachograph_speed: String
	"""
	 卫星定位速度                                                 
	"""
	gps_speed: String
	"""
	 是否超速（是/否）                                            
	"""
	is_speeding: Boolean
	"""
	 出租空/重车状态（空/重）                                     ( 出租车空/重车状态字典                               )
	"""
	taxi_state: Int
	"""
	 客运疲劳驾驶（是/否）                                        
	"""
	is_fatigue_driving: Boolean
	"""
	 客运凌晨2-5时停运（是/否）                                   
	"""
	is_morning_outage: Boolean
	"""
	 曲线情况（曲线完整/回传异常/零速度）                         ( 曲线情况字典                                        )
	"""
	curve: Int
	"""
	 轨迹情况（正常/漂移/其他）                                   ( GPS轨迹情况字典                                     )
	"""
	trail: Int
	"""
	 镜头位置（正/偏）                                            ( 镜头位置字典                                        )
	"""
	lens_position: Int
	"""
	 设备情况（图像正常/无图像/摄像头 号损坏）                    ( 设备情况字典                                        )
	"""
	equipment: Int
	"""
	 其他违规                                                     
	"""
	other_infraction: String
	"""
	 处置措施                                                     
	"""
	disposal_measures: String
	"""
	 处置结果                                                     
	"""
	disposal_results: String
	"""
	 处置时间                                                     
	"""
	treatment_time: Timestamptz
	"""
	 受理人                                                       
	"""
	assignee: String
	"""
	 反馈时间                                                     
	"""
	feedback_time: Timestamptz
	"""
	 备注                                                         
	"""
	remarks: String
	"""
	 轨迹其他情况                                                 
	"""
	others: String
	"""
	 摄像头损坏号                                                 
	"""
	lens_on: String
	"""
	 监管费到期时间                                               
	"""
	monitor_end_time: Timestamptz
	"""
	 是否定位                                                     
	"""
	is_locate: Boolean
	"""
	 空间数据类型point表示经纬度                                  
	"""
	coordinate: Point
	"""
	 经纬度描述                                                   
	"""
	latitude_longitude_description: String
	"""
	 是否发送                                                     
	"""
	is_send: Boolean
	"""
	 经营范围                                                     ( 经营范围字典                                        )
	"""
	business_scope: Int
	"""
	 凌晨2点到5点停运报警时间                                     
	"""
	outage_alarm_time: Timestamptz
	"""
	 超速报警时间                                                 
	"""
	speed_alarm_time: Timestamptz
	"""
	 超速速度                                                     
	"""
	speeding_speed: String
	"""
	 疲劳驾驶报警时间                                             
	"""
	fatigue_alarm_time: Timestamptz
	"""
	 是否在线处置措施                                             
	"""
	disposal_measures1: String
	"""
	 是否超速处置措施                                             
	"""
	disposal_measures2: String
	"""
	 曲线情况处置措施                                             
	"""
	disposal_measures3: String
	"""
	 客运疲劳驾驶处置措施                                         
	"""
	disposal_measures4: String
	"""
	 客运凌晨停运处置措施                                         
	"""
	disposal_measures5: String
	"""
	 行车记录仪数据处置措施                                       
	"""
	disposal_measures6: String
	"""
	 轨迹情况处置措施                                             
	"""
	disposal_measures7: String
	"""
	 是否在线处置结果                                             
	"""
	disposal_results1: String
	"""
	 是否超速处置结果                                             
	"""
	disposal_results2: String
	"""
	 曲线情况处置结果                                             
	"""
	disposal_results3: String
	"""
	 客运疲劳驾驶处置结果                                         
	"""
	disposal_results4: String
	"""
	 客运疲劳驾驶处置结果                                         
	"""
	disposal_results5: String
	"""
	 行车记录仪数据处置结果                                       
	"""
	disposal_results6: String
	"""
	 轨迹情况处置结果                                             
	"""
	disposal_results7: String
	"""
	 是否被删除                                                   
	"""
	is_deleted: Boolean
	"""
	 创建时间                                                     
	"""
	created_at: Timestamptz!
	"""
	 创建人                                                       ( system_user表的user_id                              )
	"""
	created_by: String!
	"""
	 修改时间                                                     
	"""
	updated_at: Timestamptz
	"""
	 修改人                                                       ( system_user表的user_id                              )
	"""
	updated_by: String
	"""
	 删除时间                                                     
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                                       ( system_user表的user_id                              )
	"""
	deleted_by: String
}
"""
aggregated selection of "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailAggregate {
	aggregate: DynamicSupervisionDetailAggregateFields
}
"""
aggregate fields of "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailAggregateFields {
	avg: DynamicSupervisionDetailAvgFields
	count: Int
	max: DynamicSupervisionDetailMaxFields
	min: DynamicSupervisionDetailMinFields
	stddev: DynamicSupervisionDetailStddevFields
	stddev_pop: DynamicSupervisionDetailStddevPopFields
	stddev_samp: DynamicSupervisionDetailStddevSampFields
	sum: DynamicSupervisionDetailSumFields
	var_pop: DynamicSupervisionDetailVarPopFields
	var_samp: DynamicSupervisionDetailVarSampFields
	variance: DynamicSupervisionDetailVarianceFields
}
"""
aggregate avg on columns of table "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailAvgFields {
	id: Bigint
	taxi_state: Int
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	business_scope: Int
}
"""
aggregate max on columns of table "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailMaxFields {
	id: Bigint
	supervision_detail_id: String
	supervision_id: String
	driver_id: String
	enterprise_id: String
	vehicle_id: String
	monitoring_time: Timestamptz
	monitoring_location: String
	is_online: Boolean
	is_tachograph_record_normal: Boolean
	tachograph_data_exception: String
	tachograph_speed: String
	gps_speed: String
	is_speeding: Boolean
	taxi_state: Int
	is_fatigue_driving: Boolean
	is_morning_outage: Boolean
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	other_infraction: String
	disposal_measures: String
	disposal_results: String
	treatment_time: Timestamptz
	assignee: String
	feedback_time: Timestamptz
	remarks: String
	others: String
	lens_on: String
	monitor_end_time: Timestamptz
	is_locate: Boolean
	coordinate: Point
	latitude_longitude_description: String
	is_send: Boolean
	business_scope: Int
	outage_alarm_time: Timestamptz
	speed_alarm_time: Timestamptz
	speeding_speed: String
	fatigue_alarm_time: Timestamptz
	disposal_measures1: String
	disposal_measures2: String
	disposal_measures3: String
	disposal_measures4: String
	disposal_measures5: String
	disposal_measures6: String
	disposal_measures7: String
	disposal_results1: String
	disposal_results2: String
	disposal_results3: String
	disposal_results4: String
	disposal_results5: String
	disposal_results6: String
	disposal_results7: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailMinFields {
	id: Bigint
	supervision_detail_id: String
	supervision_id: String
	driver_id: String
	enterprise_id: String
	vehicle_id: String
	monitoring_time: Timestamptz
	monitoring_location: String
	is_online: Boolean
	is_tachograph_record_normal: Boolean
	tachograph_data_exception: String
	tachograph_speed: String
	gps_speed: String
	is_speeding: Boolean
	taxi_state: Int
	is_fatigue_driving: Boolean
	is_morning_outage: Boolean
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	other_infraction: String
	disposal_measures: String
	disposal_results: String
	treatment_time: Timestamptz
	assignee: String
	feedback_time: Timestamptz
	remarks: String
	others: String
	lens_on: String
	monitor_end_time: Timestamptz
	is_locate: Boolean
	coordinate: Point
	latitude_longitude_description: String
	is_send: Boolean
	business_scope: Int
	outage_alarm_time: Timestamptz
	speed_alarm_time: Timestamptz
	speeding_speed: String
	fatigue_alarm_time: Timestamptz
	disposal_measures1: String
	disposal_measures2: String
	disposal_measures3: String
	disposal_measures4: String
	disposal_measures5: String
	disposal_measures6: String
	disposal_measures7: String
	disposal_results1: String
	disposal_results2: String
	disposal_results3: String
	disposal_results4: String
	disposal_results5: String
	disposal_results6: String
	disposal_results7: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailStddevFields {
	id: Bigint
	taxi_state: Int
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	business_scope: Int
}
"""
aggregate stddev_pop on columns of table "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailStddevPopFields {
	id: Bigint
	taxi_state: Int
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	business_scope: Int
}
"""
aggregate stddev_samp on columns of table "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailStddevSampFields {
	id: Bigint
	taxi_state: Int
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	business_scope: Int
}
"""
aggregate sum on columns of table "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailSumFields {
	id: Bigint
	taxi_state: Int
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	business_scope: Int
}
"""
aggregate var_pop on columns of table "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailVarPopFields {
	id: Bigint
	taxi_state: Int
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	business_scope: Int
}
"""
aggregate var_samp on columns of table "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailVarSampFields {
	id: Bigint
	taxi_state: Int
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	business_scope: Int
}
"""
aggregate variance on columns of table "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailVarianceFields {
	id: Bigint
	taxi_state: Int
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	business_scope: Int
}
"""
response of any mutation on the table "dynamic_supervision_detail"
"""
type DynamicSupervisionDetailMutationResponse {
	affected_rows: Int!
	returning: [DynamicSupervisionDetail!]!
}
"""
ordering options when selecting data from "dynamic_supervision_detail"
"""
input DynamicSupervisionDetailOrderBy {
	id: OrderBy
	supervision_detail_id: OrderBy
	supervision_id: OrderBy
	driver_id: OrderBy
	enterprise_id: OrderBy
	vehicle_id: OrderBy
	monitoring_time: OrderBy
	monitoring_location: OrderBy
	is_online: OrderBy
	is_tachograph_record_normal: OrderBy
	tachograph_data_exception: OrderBy
	tachograph_speed: OrderBy
	gps_speed: OrderBy
	is_speeding: OrderBy
	taxi_state: OrderBy
	is_fatigue_driving: OrderBy
	is_morning_outage: OrderBy
	curve: OrderBy
	trail: OrderBy
	lens_position: OrderBy
	equipment: OrderBy
	other_infraction: OrderBy
	disposal_measures: OrderBy
	disposal_results: OrderBy
	treatment_time: OrderBy
	assignee: OrderBy
	feedback_time: OrderBy
	remarks: OrderBy
	others: OrderBy
	lens_on: OrderBy
	monitor_end_time: OrderBy
	is_locate: OrderBy
	coordinate: OrderBy
	latitude_longitude_description: OrderBy
	is_send: OrderBy
	business_scope: OrderBy
	outage_alarm_time: OrderBy
	speed_alarm_time: OrderBy
	speeding_speed: OrderBy
	fatigue_alarm_time: OrderBy
	disposal_measures1: OrderBy
	disposal_measures2: OrderBy
	disposal_measures3: OrderBy
	disposal_measures4: OrderBy
	disposal_measures5: OrderBy
	disposal_measures6: OrderBy
	disposal_measures7: OrderBy
	disposal_results1: OrderBy
	disposal_results2: OrderBy
	disposal_results3: OrderBy
	disposal_results4: OrderBy
	disposal_results5: OrderBy
	disposal_results6: OrderBy
	disposal_results7: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'dynamic_supervision_detail'.
"""
input DynamicSupervisionDetailBoolExp {
	_and: [DynamicSupervisionDetailBoolExp]
	_not: DynamicSupervisionDetailBoolExp
	_or: [DynamicSupervisionDetailBoolExp]
	id: BigintComparisonExp
	supervision_detail_id: StringComparisonExp
	supervision_id: StringComparisonExp
	driver_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	monitoring_time: TimestamptzComparisonExp
	monitoring_location: StringComparisonExp
	is_online: BooleanComparisonExp
	is_tachograph_record_normal: BooleanComparisonExp
	tachograph_data_exception: StringComparisonExp
	tachograph_speed: StringComparisonExp
	gps_speed: StringComparisonExp
	is_speeding: BooleanComparisonExp
	taxi_state: IntComparisonExp
	is_fatigue_driving: BooleanComparisonExp
	is_morning_outage: BooleanComparisonExp
	curve: IntComparisonExp
	trail: IntComparisonExp
	lens_position: IntComparisonExp
	equipment: IntComparisonExp
	other_infraction: StringComparisonExp
	disposal_measures: StringComparisonExp
	disposal_results: StringComparisonExp
	treatment_time: TimestamptzComparisonExp
	assignee: StringComparisonExp
	feedback_time: TimestamptzComparisonExp
	remarks: StringComparisonExp
	others: StringComparisonExp
	lens_on: StringComparisonExp
	monitor_end_time: TimestamptzComparisonExp
	is_locate: BooleanComparisonExp
	coordinate: PointComparisonExp
	latitude_longitude_description: StringComparisonExp
	is_send: BooleanComparisonExp
	business_scope: IntComparisonExp
	outage_alarm_time: TimestamptzComparisonExp
	speed_alarm_time: TimestamptzComparisonExp
	speeding_speed: StringComparisonExp
	fatigue_alarm_time: TimestamptzComparisonExp
	disposal_measures1: StringComparisonExp
	disposal_measures2: StringComparisonExp
	disposal_measures3: StringComparisonExp
	disposal_measures4: StringComparisonExp
	disposal_measures5: StringComparisonExp
	disposal_measures6: StringComparisonExp
	disposal_measures7: StringComparisonExp
	disposal_results1: StringComparisonExp
	disposal_results2: StringComparisonExp
	disposal_results3: StringComparisonExp
	disposal_results4: StringComparisonExp
	disposal_results5: StringComparisonExp
	disposal_results6: StringComparisonExp
	disposal_results7: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "dynamic_supervision_detail"
"""
input DynamicSupervisionDetailInsertInput {
	supervision_id: String
	driver_id: String
	enterprise_id: String
	vehicle_id: String
	monitoring_time: Timestamptz
	monitoring_location: String
	is_online: Boolean
	is_tachograph_record_normal: Boolean
	tachograph_data_exception: String
	tachograph_speed: String
	gps_speed: String
	is_speeding: Boolean
	taxi_state: Int
	is_fatigue_driving: Boolean
	is_morning_outage: Boolean
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	other_infraction: String
	disposal_measures: String
	disposal_results: String
	treatment_time: Timestamptz
	assignee: String
	feedback_time: Timestamptz
	remarks: String
	others: String
	lens_on: String
	monitor_end_time: Timestamptz
	is_locate: Boolean
	coordinate: Point
	latitude_longitude_description: String
	is_send: Boolean
	business_scope: Int
	outage_alarm_time: Timestamptz
	speed_alarm_time: Timestamptz
	speeding_speed: String
	fatigue_alarm_time: Timestamptz
	disposal_measures1: String
	disposal_measures2: String
	disposal_measures3: String
	disposal_measures4: String
	disposal_measures5: String
	disposal_measures6: String
	disposal_measures7: String
	disposal_results1: String
	disposal_results2: String
	disposal_results3: String
	disposal_results4: String
	disposal_results5: String
	disposal_results6: String
	disposal_results7: String
	is_deleted: Boolean
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "dynamic_supervision_detail"
"""
input DynamicSupervisionDetailIncInput {
	id: Bigint
	taxi_state: Int
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	business_scope: Int
}
"""
input type for updating data in table "dynamic_supervision_detail"
"""
input DynamicSupervisionDetailSetInput {
	id: Bigint
	supervision_detail_id: String
	supervision_id: String
	driver_id: String
	enterprise_id: String
	vehicle_id: String
	monitoring_time: Timestamptz
	monitoring_location: String
	is_online: Boolean
	is_tachograph_record_normal: Boolean
	tachograph_data_exception: String
	tachograph_speed: String
	gps_speed: String
	is_speeding: Boolean
	taxi_state: Int
	is_fatigue_driving: Boolean
	is_morning_outage: Boolean
	curve: Int
	trail: Int
	lens_position: Int
	equipment: Int
	other_infraction: String
	disposal_measures: String
	disposal_results: String
	treatment_time: Timestamptz
	assignee: String
	feedback_time: Timestamptz
	remarks: String
	others: String
	lens_on: String
	monitor_end_time: Timestamptz
	is_locate: Boolean
	coordinate: Point
	latitude_longitude_description: String
	is_send: Boolean
	business_scope: Int
	outage_alarm_time: Timestamptz
	speed_alarm_time: Timestamptz
	speeding_speed: String
	fatigue_alarm_time: Timestamptz
	disposal_measures1: String
	disposal_measures2: String
	disposal_measures3: String
	disposal_measures4: String
	disposal_measures5: String
	disposal_measures6: String
	disposal_measures7: String
	disposal_results1: String
	disposal_results2: String
	disposal_results3: String
	disposal_results4: String
	disposal_results5: String
	disposal_results6: String
	disposal_results7: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum DynamicSupervisionDetailSelectColumn {
	"""
	 按指定方法生成                                               ( 主键                                                    )
	"""
	id
	"""
	 动态监管抽查明细表外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                )
	"""
	supervision_detail_id
	"""
	 动态监管抽查主表的ID                                         ( 动态监管抽查主表dynamic_supervision的supervision_id )
	"""
	supervision_id
	"""
	 驾驶员id                                                     ( driver_info 表的driver_id                           )
	"""
	driver_id
	"""
	 车辆所在企业id                                               ( enterprise_info表的enterprise_id                    )
	"""
	enterprise_id
	"""
	 车辆id                                                       ( vehicle_info 表的vehicle_id                         )
	"""
	vehicle_id
	"""
	 监控平台时间                                                 
	"""
	monitoring_time
	"""
	 监控平台显示位置                                             
	"""
	monitoring_location
	"""
	 是否在线（是/否）                                            
	"""
	is_online
	"""
	 行车记录仪数据（是否异常）                                   
	"""
	is_tachograph_record_normal
	"""
	 行车记录仪异常数据项                                         
	"""
	tachograph_data_exception
	"""
	 行车记录仪速度                                               
	"""
	tachograph_speed
	"""
	 卫星定位速度                                                 
	"""
	gps_speed
	"""
	 是否超速（是/否）                                            
	"""
	is_speeding
	"""
	 出租空/重车状态（空/重）                                     ( 出租车空/重车状态字典                               )
	"""
	taxi_state
	"""
	 客运疲劳驾驶（是/否）                                        
	"""
	is_fatigue_driving
	"""
	 客运凌晨2-5时停运（是/否）                                   
	"""
	is_morning_outage
	"""
	 曲线情况（曲线完整/回传异常/零速度）                         ( 曲线情况字典                                        )
	"""
	curve
	"""
	 轨迹情况（正常/漂移/其他）                                   ( GPS轨迹情况字典                                     )
	"""
	trail
	"""
	 镜头位置（正/偏）                                            ( 镜头位置字典                                        )
	"""
	lens_position
	"""
	 设备情况（图像正常/无图像/摄像头 号损坏）                    ( 设备情况字典                                        )
	"""
	equipment
	"""
	 其他违规                                                     
	"""
	other_infraction
	"""
	 处置措施                                                     
	"""
	disposal_measures
	"""
	 处置结果                                                     
	"""
	disposal_results
	"""
	 处置时间                                                     
	"""
	treatment_time
	"""
	 受理人                                                       
	"""
	assignee
	"""
	 反馈时间                                                     
	"""
	feedback_time
	"""
	 备注                                                         
	"""
	remarks
	"""
	 轨迹其他情况                                                 
	"""
	others
	"""
	 摄像头损坏号                                                 
	"""
	lens_on
	"""
	 监管费到期时间                                               
	"""
	monitor_end_time
	"""
	 是否定位                                                     
	"""
	is_locate
	"""
	 空间数据类型point表示经纬度                                  
	"""
	coordinate
	"""
	 经纬度描述                                                   
	"""
	latitude_longitude_description
	"""
	 是否发送                                                     
	"""
	is_send
	"""
	 经营范围                                                     ( 经营范围字典                                        )
	"""
	business_scope
	"""
	 凌晨2点到5点停运报警时间                                     
	"""
	outage_alarm_time
	"""
	 超速报警时间                                                 
	"""
	speed_alarm_time
	"""
	 超速速度                                                     
	"""
	speeding_speed
	"""
	 疲劳驾驶报警时间                                             
	"""
	fatigue_alarm_time
	"""
	 是否在线处置措施                                             
	"""
	disposal_measures1
	"""
	 是否超速处置措施                                             
	"""
	disposal_measures2
	"""
	 曲线情况处置措施                                             
	"""
	disposal_measures3
	"""
	 客运疲劳驾驶处置措施                                         
	"""
	disposal_measures4
	"""
	 客运凌晨停运处置措施                                         
	"""
	disposal_measures5
	"""
	 行车记录仪数据处置措施                                       
	"""
	disposal_measures6
	"""
	 轨迹情况处置措施                                             
	"""
	disposal_measures7
	"""
	 是否在线处置结果                                             
	"""
	disposal_results1
	"""
	 是否超速处置结果                                             
	"""
	disposal_results2
	"""
	 曲线情况处置结果                                             
	"""
	disposal_results3
	"""
	 客运疲劳驾驶处置结果                                         
	"""
	disposal_results4
	"""
	 客运疲劳驾驶处置结果                                         
	"""
	disposal_results5
	"""
	 行车记录仪数据处置结果                                       
	"""
	disposal_results6
	"""
	 轨迹情况处置结果                                             
	"""
	disposal_results7
	"""
	 是否被删除                                                   
	"""
	is_deleted
	"""
	 创建时间                                                     
	"""
	created_at
	"""
	 创建人                                                       ( system_user表的user_id                              )
	"""
	created_by
	"""
	 修改时间                                                     
	"""
	updated_at
	"""
	 修改人                                                       ( system_user表的user_id                              )
	"""
	updated_by
	"""
	 删除时间                                                     
	"""
	deleted_at
	"""
	 删除人                                                       ( system_user表的user_id                              )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	dynamic_supervision_detail(distinct_on: [DynamicSupervisionDetailSelectColumn!], limit: Int, offset: Int, order_by: [DynamicSupervisionDetailOrderBy!], where: DynamicSupervisionDetailBoolExp): [DynamicSupervisionDetail!]!
	"""
	聚合查询
	"""
	dynamic_supervision_detail_aggregate(distinct_on: [DynamicSupervisionDetailSelectColumn!], limit: Int, offset: Int, order_by: [DynamicSupervisionDetailOrderBy!], where: DynamicSupervisionDetailBoolExp): DynamicSupervisionDetailAggregate!
	"""
	主键查询
	"""
	dynamic_supervision_detail_by_pk(id: Bigint!): DynamicSupervisionDetail!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_dynamic_supervision_detail(where: DynamicSupervisionDetailBoolExp!): DynamicSupervisionDetailMutationResponse
	"""
	根据主键删除记录
	"""
	delete_dynamic_supervision_detail_by_pk(id: Bigint!): DynamicSupervisionDetail
	"""
	插入
	"""
	insert_dynamic_supervision_detail(objects: [DynamicSupervisionDetailInsertInput!]!): DynamicSupervisionDetailMutationResponse
	"""
	插入一条记录
	"""
	insert_dynamic_supervision_detail_one(objects: DynamicSupervisionDetailInsertInput!): DynamicSupervisionDetail
	"""
	更新
	"""
	update_dynamic_supervision_detail(_inc: DynamicSupervisionDetailIncInput, _set: DynamicSupervisionDetailSetInput, where: DynamicSupervisionDetailBoolExp!): DynamicSupervisionDetailMutationResponse
	"""
	更新
	"""
	update_dynamic_supervision_detail_by_pk(_inc: DynamicSupervisionDetailIncInput, _set: DynamicSupervisionDetailSetInput, id: Bigint!): DynamicSupervisionDetail
}
`, BuiltIn: false},
	{Name: "graph/graphqls/muck_truck_online.graphqls", Input: `"""
渣土车在线
"""
type MuckTruckOnline {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	muck_truck_online_id: String!
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id: String!
	"""
	 是否在线                                        
	"""
	is_online: Boolean
	"""
	 是否缴费                                        
	"""
	is_pay: Boolean
	"""
	 是否GPS在线                                     
	"""
	is_gps_online: Boolean
	"""
	 是否目录库                                      
	"""
	is_catalog_library: Boolean
	"""
	 是否安装                                        
	"""
	is_install: Boolean
	"""
	 是否验车通过                                    
	"""
	is_vehicle_pass_inspection: Boolean
	"""
	 是否新型渣土车                                  
	"""
	is_new_vehicle: Boolean
	"""
	 定位时间                                        
	"""
	location_time: Timestamptz
	"""
	 自编号                                          
	"""
	self_number: String
	"""
	 地区                                            
	"""
	area: String
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "muck_truck_online"
"""
type MuckTruckOnlineAggregate {
	aggregate: MuckTruckOnlineAggregateFields
}
"""
aggregate fields of "muck_truck_online"
"""
type MuckTruckOnlineAggregateFields {
	avg: MuckTruckOnlineAvgFields
	count: Int
	max: MuckTruckOnlineMaxFields
	min: MuckTruckOnlineMinFields
	stddev: MuckTruckOnlineStddevFields
	stddev_pop: MuckTruckOnlineStddevPopFields
	stddev_samp: MuckTruckOnlineStddevSampFields
	sum: MuckTruckOnlineSumFields
	var_pop: MuckTruckOnlineVarPopFields
	var_samp: MuckTruckOnlineVarSampFields
	variance: MuckTruckOnlineVarianceFields
}
"""
aggregate avg on columns of table "muck_truck_online"
"""
type MuckTruckOnlineAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "muck_truck_online"
"""
type MuckTruckOnlineMaxFields {
	id: Bigint
	muck_truck_online_id: String
	vehicle_id: String
	is_online: Boolean
	is_pay: Boolean
	is_gps_online: Boolean
	is_catalog_library: Boolean
	is_install: Boolean
	is_vehicle_pass_inspection: Boolean
	is_new_vehicle: Boolean
	location_time: Timestamptz
	self_number: String
	area: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "muck_truck_online"
"""
type MuckTruckOnlineMinFields {
	id: Bigint
	muck_truck_online_id: String
	vehicle_id: String
	is_online: Boolean
	is_pay: Boolean
	is_gps_online: Boolean
	is_catalog_library: Boolean
	is_install: Boolean
	is_vehicle_pass_inspection: Boolean
	is_new_vehicle: Boolean
	location_time: Timestamptz
	self_number: String
	area: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "muck_truck_online"
"""
type MuckTruckOnlineStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "muck_truck_online"
"""
type MuckTruckOnlineStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "muck_truck_online"
"""
type MuckTruckOnlineStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "muck_truck_online"
"""
type MuckTruckOnlineSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "muck_truck_online"
"""
type MuckTruckOnlineVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "muck_truck_online"
"""
type MuckTruckOnlineVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "muck_truck_online"
"""
type MuckTruckOnlineVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "muck_truck_online"
"""
type MuckTruckOnlineMutationResponse {
	affected_rows: Int!
	returning: [MuckTruckOnline!]!
}
"""
ordering options when selecting data from "muck_truck_online"
"""
input MuckTruckOnlineOrderBy {
	id: OrderBy
	muck_truck_online_id: OrderBy
	vehicle_id: OrderBy
	is_online: OrderBy
	is_pay: OrderBy
	is_gps_online: OrderBy
	is_catalog_library: OrderBy
	is_install: OrderBy
	is_vehicle_pass_inspection: OrderBy
	is_new_vehicle: OrderBy
	location_time: OrderBy
	self_number: OrderBy
	area: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'muck_truck_online'.
"""
input MuckTruckOnlineBoolExp {
	_and: [MuckTruckOnlineBoolExp]
	_not: MuckTruckOnlineBoolExp
	_or: [MuckTruckOnlineBoolExp]
	id: BigintComparisonExp
	muck_truck_online_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	is_online: BooleanComparisonExp
	is_pay: BooleanComparisonExp
	is_gps_online: BooleanComparisonExp
	is_catalog_library: BooleanComparisonExp
	is_install: BooleanComparisonExp
	is_vehicle_pass_inspection: BooleanComparisonExp
	is_new_vehicle: BooleanComparisonExp
	location_time: TimestamptzComparisonExp
	self_number: StringComparisonExp
	area: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "muck_truck_online"
"""
input MuckTruckOnlineInsertInput {
	is_online: Boolean
	is_pay: Boolean
	is_gps_online: Boolean
	is_catalog_library: Boolean
	is_install: Boolean
	is_vehicle_pass_inspection: Boolean
	is_new_vehicle: Boolean
	location_time: Timestamptz
	self_number: String
	area: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "muck_truck_online"
"""
input MuckTruckOnlineIncInput {
	id: Bigint
}
"""
input type for updating data in table "muck_truck_online"
"""
input MuckTruckOnlineSetInput {
	id: Bigint
	muck_truck_online_id: String
	vehicle_id: String
	is_online: Boolean
	is_pay: Boolean
	is_gps_online: Boolean
	is_catalog_library: Boolean
	is_install: Boolean
	is_vehicle_pass_inspection: Boolean
	is_new_vehicle: Boolean
	location_time: Timestamptz
	self_number: String
	area: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum MuckTruckOnlineSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	muck_truck_online_id
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id
	"""
	 是否在线                                        
	"""
	is_online
	"""
	 是否缴费                                        
	"""
	is_pay
	"""
	 是否GPS在线                                     
	"""
	is_gps_online
	"""
	 是否目录库                                      
	"""
	is_catalog_library
	"""
	 是否安装                                        
	"""
	is_install
	"""
	 是否验车通过                                    
	"""
	is_vehicle_pass_inspection
	"""
	 是否新型渣土车                                  
	"""
	is_new_vehicle
	"""
	 定位时间                                        
	"""
	location_time
	"""
	 自编号                                          
	"""
	self_number
	"""
	 地区                                            
	"""
	area
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	muck_truck_online(distinct_on: [MuckTruckOnlineSelectColumn!], limit: Int, offset: Int, order_by: [MuckTruckOnlineOrderBy!], where: MuckTruckOnlineBoolExp): [MuckTruckOnline!]!
	"""
	聚合查询
	"""
	muck_truck_online_aggregate(distinct_on: [MuckTruckOnlineSelectColumn!], limit: Int, offset: Int, order_by: [MuckTruckOnlineOrderBy!], where: MuckTruckOnlineBoolExp): MuckTruckOnlineAggregate!
	"""
	主键查询
	"""
	muck_truck_online_by_pk(id: Bigint!): MuckTruckOnline!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_muck_truck_online(where: MuckTruckOnlineBoolExp!): MuckTruckOnlineMutationResponse
	"""
	根据主键删除记录
	"""
	delete_muck_truck_online_by_pk(id: Bigint!): MuckTruckOnline
	"""
	插入
	"""
	insert_muck_truck_online(objects: [MuckTruckOnlineInsertInput!]!): MuckTruckOnlineMutationResponse
	"""
	插入一条记录
	"""
	insert_muck_truck_online_one(objects: MuckTruckOnlineInsertInput!): MuckTruckOnline
	"""
	更新
	"""
	update_muck_truck_online(_inc: MuckTruckOnlineIncInput, _set: MuckTruckOnlineSetInput, where: MuckTruckOnlineBoolExp!): MuckTruckOnlineMutationResponse
	"""
	更新
	"""
	update_muck_truck_online_by_pk(_inc: MuckTruckOnlineIncInput, _set: MuckTruckOnlineSetInput, id: Bigint!): MuckTruckOnline
}
`, BuiltIn: false},
	{Name: "graph/graphqls/region_issued.graphqls", Input: `"""
进出区域报警--区域下发
"""
type RegionIssued {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	region_issued_id: String!
	"""
	 区域名称                                        
	"""
	region_name: String
	"""
	 终端IMEI                                        
	"""
	imel: String
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "region_issued"
"""
type RegionIssuedAggregate {
	aggregate: RegionIssuedAggregateFields
}
"""
aggregate fields of "region_issued"
"""
type RegionIssuedAggregateFields {
	avg: RegionIssuedAvgFields
	count: Int
	max: RegionIssuedMaxFields
	min: RegionIssuedMinFields
	stddev: RegionIssuedStddevFields
	stddev_pop: RegionIssuedStddevPopFields
	stddev_samp: RegionIssuedStddevSampFields
	sum: RegionIssuedSumFields
	var_pop: RegionIssuedVarPopFields
	var_samp: RegionIssuedVarSampFields
	variance: RegionIssuedVarianceFields
}
"""
aggregate avg on columns of table "region_issued"
"""
type RegionIssuedAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "region_issued"
"""
type RegionIssuedMaxFields {
	id: Bigint
	region_issued_id: String
	region_name: String
	imel: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "region_issued"
"""
type RegionIssuedMinFields {
	id: Bigint
	region_issued_id: String
	region_name: String
	imel: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "region_issued"
"""
type RegionIssuedStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "region_issued"
"""
type RegionIssuedStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "region_issued"
"""
type RegionIssuedStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "region_issued"
"""
type RegionIssuedSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "region_issued"
"""
type RegionIssuedVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "region_issued"
"""
type RegionIssuedVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "region_issued"
"""
type RegionIssuedVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "region_issued"
"""
type RegionIssuedMutationResponse {
	affected_rows: Int!
	returning: [RegionIssued!]!
}
"""
ordering options when selecting data from "region_issued"
"""
input RegionIssuedOrderBy {
	id: OrderBy
	region_issued_id: OrderBy
	region_name: OrderBy
	imel: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'region_issued'.
"""
input RegionIssuedBoolExp {
	_and: [RegionIssuedBoolExp]
	_not: RegionIssuedBoolExp
	_or: [RegionIssuedBoolExp]
	id: BigintComparisonExp
	region_issued_id: StringComparisonExp
	region_name: StringComparisonExp
	imel: StringComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "region_issued"
"""
input RegionIssuedInsertInput {
	region_name: String
	imel: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "region_issued"
"""
input RegionIssuedIncInput {
	id: Bigint
}
"""
input type for updating data in table "region_issued"
"""
input RegionIssuedSetInput {
	id: Bigint
	region_issued_id: String
	region_name: String
	imel: String
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum RegionIssuedSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	region_issued_id
	"""
	 区域名称                                        
	"""
	region_name
	"""
	 终端IMEI                                        
	"""
	imel
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	region_issued(distinct_on: [RegionIssuedSelectColumn!], limit: Int, offset: Int, order_by: [RegionIssuedOrderBy!], where: RegionIssuedBoolExp): [RegionIssued!]!
	"""
	聚合查询
	"""
	region_issued_aggregate(distinct_on: [RegionIssuedSelectColumn!], limit: Int, offset: Int, order_by: [RegionIssuedOrderBy!], where: RegionIssuedBoolExp): RegionIssuedAggregate!
	"""
	主键查询
	"""
	region_issued_by_pk(id: Bigint!): RegionIssued!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_region_issued(where: RegionIssuedBoolExp!): RegionIssuedMutationResponse
	"""
	根据主键删除记录
	"""
	delete_region_issued_by_pk(id: Bigint!): RegionIssued
	"""
	插入
	"""
	insert_region_issued(objects: [RegionIssuedInsertInput!]!): RegionIssuedMutationResponse
	"""
	插入一条记录
	"""
	insert_region_issued_one(objects: RegionIssuedInsertInput!): RegionIssued
	"""
	更新
	"""
	update_region_issued(_inc: RegionIssuedIncInput, _set: RegionIssuedSetInput, where: RegionIssuedBoolExp!): RegionIssuedMutationResponse
	"""
	更新
	"""
	update_region_issued_by_pk(_inc: RegionIssuedIncInput, _set: RegionIssuedSetInput, id: Bigint!): RegionIssued
}
`, BuiltIn: false},
	{Name: "graph/graphqls/region_management.graphqls", Input: `"""
进出区域报警--区域管理
"""
type RegionManagement {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	region_management_id: String!
	"""
	 区域ID                                          
	"""
	region_id: String
	"""
	 区域名称                                        
	"""
	region_name: String
	"""
	 区域类型                                        
	"""
	region_type: String
	"""
	 区域性质                                        
	"""
	region_nature: String
	"""
	 报警开始时间                                    
	"""
	alarm_begin_time: Timestamptz
	"""
	 报警截止时间                                    
	"""
	alarm_end_time: Timestamptz
	"""
	 企业名称                                        
	"""
	enterprise_name: String
	"""
	 持续时间                                        
	"""
	duration_: Int
	"""
	 最高速度                                        
	"""
	max_speed: Int
	"""
	 圆形半径                                        
	"""
	circle_radius: Int
	"""
	 区域经纬度                                      
	"""
	region_coordinate: Point
	"""
	 是否超级区域                                    
	"""
	is_super_region: Boolean
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "region_management"
"""
type RegionManagementAggregate {
	aggregate: RegionManagementAggregateFields
}
"""
aggregate fields of "region_management"
"""
type RegionManagementAggregateFields {
	avg: RegionManagementAvgFields
	count: Int
	max: RegionManagementMaxFields
	min: RegionManagementMinFields
	stddev: RegionManagementStddevFields
	stddev_pop: RegionManagementStddevPopFields
	stddev_samp: RegionManagementStddevSampFields
	sum: RegionManagementSumFields
	var_pop: RegionManagementVarPopFields
	var_samp: RegionManagementVarSampFields
	variance: RegionManagementVarianceFields
}
"""
aggregate avg on columns of table "region_management"
"""
type RegionManagementAvgFields {
	id: Bigint
	duration_: Int
	max_speed: Int
	circle_radius: Int
}
"""
aggregate max on columns of table "region_management"
"""
type RegionManagementMaxFields {
	id: Bigint
	region_management_id: String
	region_id: String
	region_name: String
	region_type: String
	region_nature: String
	alarm_begin_time: Timestamptz
	alarm_end_time: Timestamptz
	enterprise_name: String
	duration_: Int
	max_speed: Int
	circle_radius: Int
	region_coordinate: Point
	is_super_region: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "region_management"
"""
type RegionManagementMinFields {
	id: Bigint
	region_management_id: String
	region_id: String
	region_name: String
	region_type: String
	region_nature: String
	alarm_begin_time: Timestamptz
	alarm_end_time: Timestamptz
	enterprise_name: String
	duration_: Int
	max_speed: Int
	circle_radius: Int
	region_coordinate: Point
	is_super_region: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "region_management"
"""
type RegionManagementStddevFields {
	id: Bigint
	duration_: Int
	max_speed: Int
	circle_radius: Int
}
"""
aggregate stddev_pop on columns of table "region_management"
"""
type RegionManagementStddevPopFields {
	id: Bigint
	duration_: Int
	max_speed: Int
	circle_radius: Int
}
"""
aggregate stddev_samp on columns of table "region_management"
"""
type RegionManagementStddevSampFields {
	id: Bigint
	duration_: Int
	max_speed: Int
	circle_radius: Int
}
"""
aggregate sum on columns of table "region_management"
"""
type RegionManagementSumFields {
	id: Bigint
	duration_: Int
	max_speed: Int
	circle_radius: Int
}
"""
aggregate var_pop on columns of table "region_management"
"""
type RegionManagementVarPopFields {
	id: Bigint
	duration_: Int
	max_speed: Int
	circle_radius: Int
}
"""
aggregate var_samp on columns of table "region_management"
"""
type RegionManagementVarSampFields {
	id: Bigint
	duration_: Int
	max_speed: Int
	circle_radius: Int
}
"""
aggregate variance on columns of table "region_management"
"""
type RegionManagementVarianceFields {
	id: Bigint
	duration_: Int
	max_speed: Int
	circle_radius: Int
}
"""
response of any mutation on the table "region_management"
"""
type RegionManagementMutationResponse {
	affected_rows: Int!
	returning: [RegionManagement!]!
}
"""
ordering options when selecting data from "region_management"
"""
input RegionManagementOrderBy {
	id: OrderBy
	region_management_id: OrderBy
	region_id: OrderBy
	region_name: OrderBy
	region_type: OrderBy
	region_nature: OrderBy
	alarm_begin_time: OrderBy
	alarm_end_time: OrderBy
	enterprise_name: OrderBy
	duration_: OrderBy
	max_speed: OrderBy
	circle_radius: OrderBy
	region_coordinate: OrderBy
	is_super_region: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'region_management'.
"""
input RegionManagementBoolExp {
	_and: [RegionManagementBoolExp]
	_not: RegionManagementBoolExp
	_or: [RegionManagementBoolExp]
	id: BigintComparisonExp
	region_management_id: StringComparisonExp
	region_id: StringComparisonExp
	region_name: StringComparisonExp
	region_type: StringComparisonExp
	region_nature: StringComparisonExp
	alarm_begin_time: TimestamptzComparisonExp
	alarm_end_time: TimestamptzComparisonExp
	enterprise_name: StringComparisonExp
	duration_: IntComparisonExp
	max_speed: IntComparisonExp
	circle_radius: IntComparisonExp
	region_coordinate: PointComparisonExp
	is_super_region: BooleanComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "region_management"
"""
input RegionManagementInsertInput {
	region_id: String
	region_name: String
	region_type: String
	region_nature: String
	alarm_begin_time: Timestamptz
	alarm_end_time: Timestamptz
	enterprise_name: String
	duration_: Int
	max_speed: Int
	circle_radius: Int
	region_coordinate: Point
	is_super_region: Boolean
	is_deleted: Boolean
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "region_management"
"""
input RegionManagementIncInput {
	id: Bigint
	duration_: Int
	max_speed: Int
	circle_radius: Int
}
"""
input type for updating data in table "region_management"
"""
input RegionManagementSetInput {
	id: Bigint
	region_management_id: String
	region_id: String
	region_name: String
	region_type: String
	region_nature: String
	alarm_begin_time: Timestamptz
	alarm_end_time: Timestamptz
	enterprise_name: String
	duration_: Int
	max_speed: Int
	circle_radius: Int
	region_coordinate: Point
	is_super_region: Boolean
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum RegionManagementSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	region_management_id
	"""
	 区域ID                                          
	"""
	region_id
	"""
	 区域名称                                        
	"""
	region_name
	"""
	 区域类型                                        
	"""
	region_type
	"""
	 区域性质                                        
	"""
	region_nature
	"""
	 报警开始时间                                    
	"""
	alarm_begin_time
	"""
	 报警截止时间                                    
	"""
	alarm_end_time
	"""
	 企业名称                                        
	"""
	enterprise_name
	"""
	 持续时间                                        
	"""
	duration_
	"""
	 最高速度                                        
	"""
	max_speed
	"""
	 圆形半径                                        
	"""
	circle_radius
	"""
	 区域经纬度                                      
	"""
	region_coordinate
	"""
	 是否超级区域                                    
	"""
	is_super_region
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	region_management(distinct_on: [RegionManagementSelectColumn!], limit: Int, offset: Int, order_by: [RegionManagementOrderBy!], where: RegionManagementBoolExp): [RegionManagement!]!
	"""
	聚合查询
	"""
	region_management_aggregate(distinct_on: [RegionManagementSelectColumn!], limit: Int, offset: Int, order_by: [RegionManagementOrderBy!], where: RegionManagementBoolExp): RegionManagementAggregate!
	"""
	主键查询
	"""
	region_management_by_pk(id: Bigint!): RegionManagement!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_region_management(where: RegionManagementBoolExp!): RegionManagementMutationResponse
	"""
	根据主键删除记录
	"""
	delete_region_management_by_pk(id: Bigint!): RegionManagement
	"""
	插入
	"""
	insert_region_management(objects: [RegionManagementInsertInput!]!): RegionManagementMutationResponse
	"""
	插入一条记录
	"""
	insert_region_management_one(objects: RegionManagementInsertInput!): RegionManagement
	"""
	更新
	"""
	update_region_management(_inc: RegionManagementIncInput, _set: RegionManagementSetInput, where: RegionManagementBoolExp!): RegionManagementMutationResponse
	"""
	更新
	"""
	update_region_management_by_pk(_inc: RegionManagementIncInput, _set: RegionManagementSetInput, id: Bigint!): RegionManagement
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_alarm_supervision.graphqls", Input: `"""
车辆报警监管
"""
type VehicleAlarmSupervision {
	"""
	 按指定方法生成                                  ( 主键                                                         )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	vehicle_alarm_supervision_id: String!
	"""
	 监管单位id                                      
	"""
	superivision_authority_id: String
	"""
	 监管类型                                        ( 地区机构监管，企业监管，执法机构监管，执法人员监管，地区抽查机构监管 )
	"""
	superivision_type: String
	"""
	 区域ID                                          
	"""
	area_id: String
	"""
	 报警车辆数                                      
	"""
	vehicle_alarm_number: Int
	"""
	 报警类型                                        
	"""
	alarm_type: String
	"""
	 报警次数                                        
	"""
	alarm_times: Int
	"""
	 处置次数                                        
	"""
	disposal_times: Int
	"""
	 报警处置率                                      
	"""
	alarm_disposal_rate: Numeric
	"""
	 县级提出的整改                                  
	"""
	district_rectification: String
	"""
	 市级提出的整改                                  
	"""
	city_rectification: String
	"""
	 省级提出的整改                                  
	"""
	province_rectification: String
	"""
	 部级提出的整改                                  
	"""
	country_rectification: String
	"""
	 登记时间                                        
	"""
	registration_time: Timestamptz
	"""
	 统计日期                                        
	"""
	statistics_date: String
	"""
	 应监管企业数                                    
	"""
	should_supervision_enterprise_number: Int
	"""
	 实监管企业数                                    
	"""
	actual_supervision_enterprise_number: Int
	"""
	 监管率                                          
	"""
	supervision_rate: Numeric
	"""
	 经营范围                                        ( 经营范围字典                                             )
	"""
	business_scope: Int
	"""
	 应检查车辆数                                    
	"""
	should_check_vehicle_number: Int
	"""
	 实检查车辆数                                    
	"""
	actual_check_vechicle_number: Int
	"""
	 检查异常车辆数                                  
	"""
	check_abnormal_vehicle_number: Int
	"""
	 异常处置数                                      
	"""
	abnormal_disposal_number: Int
	"""
	 异常处置率                                      
	"""
	abnormal_disposal_rate: Numeric
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id                                   )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id                                   )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id                                   )
	"""
	deleted_by: String
}
"""
aggregated selection of "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionAggregate {
	aggregate: VehicleAlarmSupervisionAggregateFields
}
"""
aggregate fields of "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionAggregateFields {
	avg: VehicleAlarmSupervisionAvgFields
	count: Int
	max: VehicleAlarmSupervisionMaxFields
	min: VehicleAlarmSupervisionMinFields
	stddev: VehicleAlarmSupervisionStddevFields
	stddev_pop: VehicleAlarmSupervisionStddevPopFields
	stddev_samp: VehicleAlarmSupervisionStddevSampFields
	sum: VehicleAlarmSupervisionSumFields
	var_pop: VehicleAlarmSupervisionVarPopFields
	var_samp: VehicleAlarmSupervisionVarSampFields
	variance: VehicleAlarmSupervisionVarianceFields
}
"""
aggregate avg on columns of table "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionAvgFields {
	id: Bigint
	vehicle_alarm_number: Int
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
}
"""
aggregate max on columns of table "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionMaxFields {
	id: Bigint
	vehicle_alarm_supervision_id: String
	superivision_authority_id: String
	superivision_type: String
	area_id: String
	vehicle_alarm_number: Int
	alarm_type: String
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	district_rectification: String
	city_rectification: String
	province_rectification: String
	country_rectification: String
	registration_time: Timestamptz
	statistics_date: String
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionMinFields {
	id: Bigint
	vehicle_alarm_supervision_id: String
	superivision_authority_id: String
	superivision_type: String
	area_id: String
	vehicle_alarm_number: Int
	alarm_type: String
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	district_rectification: String
	city_rectification: String
	province_rectification: String
	country_rectification: String
	registration_time: Timestamptz
	statistics_date: String
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionStddevFields {
	id: Bigint
	vehicle_alarm_number: Int
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
}
"""
aggregate stddev_pop on columns of table "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionStddevPopFields {
	id: Bigint
	vehicle_alarm_number: Int
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
}
"""
aggregate stddev_samp on columns of table "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionStddevSampFields {
	id: Bigint
	vehicle_alarm_number: Int
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
}
"""
aggregate sum on columns of table "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionSumFields {
	id: Bigint
	vehicle_alarm_number: Int
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
}
"""
aggregate var_pop on columns of table "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionVarPopFields {
	id: Bigint
	vehicle_alarm_number: Int
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
}
"""
aggregate var_samp on columns of table "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionVarSampFields {
	id: Bigint
	vehicle_alarm_number: Int
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
}
"""
aggregate variance on columns of table "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionVarianceFields {
	id: Bigint
	vehicle_alarm_number: Int
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
}
"""
response of any mutation on the table "vehicle_alarm_supervision"
"""
type VehicleAlarmSupervisionMutationResponse {
	affected_rows: Int!
	returning: [VehicleAlarmSupervision!]!
}
"""
ordering options when selecting data from "vehicle_alarm_supervision"
"""
input VehicleAlarmSupervisionOrderBy {
	id: OrderBy
	vehicle_alarm_supervision_id: OrderBy
	superivision_authority_id: OrderBy
	superivision_type: OrderBy
	area_id: OrderBy
	vehicle_alarm_number: OrderBy
	alarm_type: OrderBy
	alarm_times: OrderBy
	disposal_times: OrderBy
	alarm_disposal_rate: OrderBy
	district_rectification: OrderBy
	city_rectification: OrderBy
	province_rectification: OrderBy
	country_rectification: OrderBy
	registration_time: OrderBy
	statistics_date: OrderBy
	should_supervision_enterprise_number: OrderBy
	actual_supervision_enterprise_number: OrderBy
	supervision_rate: OrderBy
	business_scope: OrderBy
	should_check_vehicle_number: OrderBy
	actual_check_vechicle_number: OrderBy
	check_abnormal_vehicle_number: OrderBy
	abnormal_disposal_number: OrderBy
	abnormal_disposal_rate: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_alarm_supervision'.
"""
input VehicleAlarmSupervisionBoolExp {
	_and: [VehicleAlarmSupervisionBoolExp]
	_not: VehicleAlarmSupervisionBoolExp
	_or: [VehicleAlarmSupervisionBoolExp]
	id: BigintComparisonExp
	vehicle_alarm_supervision_id: StringComparisonExp
	superivision_authority_id: StringComparisonExp
	superivision_type: StringComparisonExp
	area_id: StringComparisonExp
	vehicle_alarm_number: IntComparisonExp
	alarm_type: StringComparisonExp
	alarm_times: IntComparisonExp
	disposal_times: IntComparisonExp
	alarm_disposal_rate: NumericComparisonExp
	district_rectification: StringComparisonExp
	city_rectification: StringComparisonExp
	province_rectification: StringComparisonExp
	country_rectification: StringComparisonExp
	registration_time: TimestamptzComparisonExp
	statistics_date: StringComparisonExp
	should_supervision_enterprise_number: IntComparisonExp
	actual_supervision_enterprise_number: IntComparisonExp
	supervision_rate: NumericComparisonExp
	business_scope: IntComparisonExp
	should_check_vehicle_number: IntComparisonExp
	actual_check_vechicle_number: IntComparisonExp
	check_abnormal_vehicle_number: IntComparisonExp
	abnormal_disposal_number: IntComparisonExp
	abnormal_disposal_rate: NumericComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_alarm_supervision"
"""
input VehicleAlarmSupervisionInsertInput {
	superivision_authority_id: String
	superivision_type: String
	area_id: String
	vehicle_alarm_number: Int
	alarm_type: String
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	district_rectification: String
	city_rectification: String
	province_rectification: String
	country_rectification: String
	registration_time: Timestamptz
	statistics_date: String
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "vehicle_alarm_supervision"
"""
input VehicleAlarmSupervisionIncInput {
	id: Bigint
	vehicle_alarm_number: Int
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
}
"""
input type for updating data in table "vehicle_alarm_supervision"
"""
input VehicleAlarmSupervisionSetInput {
	id: Bigint
	vehicle_alarm_supervision_id: String
	superivision_authority_id: String
	superivision_type: String
	area_id: String
	vehicle_alarm_number: Int
	alarm_type: String
	alarm_times: Int
	disposal_times: Int
	alarm_disposal_rate: Numeric
	district_rectification: String
	city_rectification: String
	province_rectification: String
	country_rectification: String
	registration_time: Timestamptz
	statistics_date: String
	should_supervision_enterprise_number: Int
	actual_supervision_enterprise_number: Int
	supervision_rate: Numeric
	business_scope: Int
	should_check_vehicle_number: Int
	actual_check_vechicle_number: Int
	check_abnormal_vehicle_number: Int
	abnormal_disposal_number: Int
	abnormal_disposal_rate: Numeric
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum VehicleAlarmSupervisionSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                                         )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	vehicle_alarm_supervision_id
	"""
	 监管单位id                                      
	"""
	superivision_authority_id
	"""
	 监管类型                                        ( 地区机构监管，企业监管，执法机构监管，执法人员监管，地区抽查机构监管 )
	"""
	superivision_type
	"""
	 区域ID                                          
	"""
	area_id
	"""
	 报警车辆数                                      
	"""
	vehicle_alarm_number
	"""
	 报警类型                                        
	"""
	alarm_type
	"""
	 报警次数                                        
	"""
	alarm_times
	"""
	 处置次数                                        
	"""
	disposal_times
	"""
	 报警处置率                                      
	"""
	alarm_disposal_rate
	"""
	 县级提出的整改                                  
	"""
	district_rectification
	"""
	 市级提出的整改                                  
	"""
	city_rectification
	"""
	 省级提出的整改                                  
	"""
	province_rectification
	"""
	 部级提出的整改                                  
	"""
	country_rectification
	"""
	 登记时间                                        
	"""
	registration_time
	"""
	 统计日期                                        
	"""
	statistics_date
	"""
	 应监管企业数                                    
	"""
	should_supervision_enterprise_number
	"""
	 实监管企业数                                    
	"""
	actual_supervision_enterprise_number
	"""
	 监管率                                          
	"""
	supervision_rate
	"""
	 经营范围                                        ( 经营范围字典                                             )
	"""
	business_scope
	"""
	 应检查车辆数                                    
	"""
	should_check_vehicle_number
	"""
	 实检查车辆数                                    
	"""
	actual_check_vechicle_number
	"""
	 检查异常车辆数                                  
	"""
	check_abnormal_vehicle_number
	"""
	 异常处置数                                      
	"""
	abnormal_disposal_number
	"""
	 异常处置率                                      
	"""
	abnormal_disposal_rate
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id                                   )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id                                   )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id                                   )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_alarm_supervision(distinct_on: [VehicleAlarmSupervisionSelectColumn!], limit: Int, offset: Int, order_by: [VehicleAlarmSupervisionOrderBy!], where: VehicleAlarmSupervisionBoolExp): [VehicleAlarmSupervision!]!
	"""
	聚合查询
	"""
	vehicle_alarm_supervision_aggregate(distinct_on: [VehicleAlarmSupervisionSelectColumn!], limit: Int, offset: Int, order_by: [VehicleAlarmSupervisionOrderBy!], where: VehicleAlarmSupervisionBoolExp): VehicleAlarmSupervisionAggregate!
	"""
	主键查询
	"""
	vehicle_alarm_supervision_by_pk(id: Bigint!): VehicleAlarmSupervision!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_alarm_supervision(where: VehicleAlarmSupervisionBoolExp!): VehicleAlarmSupervisionMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_alarm_supervision_by_pk(id: Bigint!): VehicleAlarmSupervision
	"""
	插入
	"""
	insert_vehicle_alarm_supervision(objects: [VehicleAlarmSupervisionInsertInput!]!): VehicleAlarmSupervisionMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_alarm_supervision_one(objects: VehicleAlarmSupervisionInsertInput!): VehicleAlarmSupervision
	"""
	更新
	"""
	update_vehicle_alarm_supervision(_inc: VehicleAlarmSupervisionIncInput, _set: VehicleAlarmSupervisionSetInput, where: VehicleAlarmSupervisionBoolExp!): VehicleAlarmSupervisionMutationResponse
	"""
	更新
	"""
	update_vehicle_alarm_supervision_by_pk(_inc: VehicleAlarmSupervisionIncInput, _set: VehicleAlarmSupervisionSetInput, id: Bigint!): VehicleAlarmSupervision
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_alarm_times_record.graphqls", Input: `"""
同一车辆报警次数记录表
"""
type VehicleAlarmTimesRecord {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	vehicle_alarm_times_record_id: String!
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id: String!
	"""
	 报警类型                                        ( 报警类型字典           )
	"""
	alarm_type: String
	"""
	 处置措施                                        
	"""
	disposal_measure: String
	"""
	 处置时间                                        
	"""
	disposal_time: Timestamptz
	"""
	 处置结果                                        
	"""
	disposal_result: String
	"""
	 是否处置                                        
	"""
	is_disposal: Boolean
	"""
	 处置方式                                        ( 处置方式字典           )
	"""
	disposal_method: Int
	"""
	 值班人                                          
	"""
	duty_person: String
	"""
	 报警次数                                        
	"""
	alarm_times: String
	"""
	 备注                                            
	"""
	remarks: String
	"""
	 记录时间                                        
	"""
	record_time: Timestamptz
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by: String
}
"""
aggregated selection of "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordAggregate {
	aggregate: VehicleAlarmTimesRecordAggregateFields
}
"""
aggregate fields of "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordAggregateFields {
	avg: VehicleAlarmTimesRecordAvgFields
	count: Int
	max: VehicleAlarmTimesRecordMaxFields
	min: VehicleAlarmTimesRecordMinFields
	stddev: VehicleAlarmTimesRecordStddevFields
	stddev_pop: VehicleAlarmTimesRecordStddevPopFields
	stddev_samp: VehicleAlarmTimesRecordStddevSampFields
	sum: VehicleAlarmTimesRecordSumFields
	var_pop: VehicleAlarmTimesRecordVarPopFields
	var_samp: VehicleAlarmTimesRecordVarSampFields
	variance: VehicleAlarmTimesRecordVarianceFields
}
"""
aggregate avg on columns of table "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordAvgFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate max on columns of table "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordMaxFields {
	id: Bigint
	vehicle_alarm_times_record_id: String
	vehicle_id: String
	alarm_type: String
	disposal_measure: String
	disposal_time: Timestamptz
	disposal_result: String
	is_disposal: Boolean
	disposal_method: Int
	duty_person: String
	alarm_times: String
	remarks: String
	record_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordMinFields {
	id: Bigint
	vehicle_alarm_times_record_id: String
	vehicle_id: String
	alarm_type: String
	disposal_measure: String
	disposal_time: Timestamptz
	disposal_result: String
	is_disposal: Boolean
	disposal_method: Int
	duty_person: String
	alarm_times: String
	remarks: String
	record_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordStddevFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate stddev_pop on columns of table "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordStddevPopFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate stddev_samp on columns of table "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordStddevSampFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate sum on columns of table "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordSumFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate var_pop on columns of table "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordVarPopFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate var_samp on columns of table "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordVarSampFields {
	id: Bigint
	disposal_method: Int
}
"""
aggregate variance on columns of table "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordVarianceFields {
	id: Bigint
	disposal_method: Int
}
"""
response of any mutation on the table "vehicle_alarm_times_record"
"""
type VehicleAlarmTimesRecordMutationResponse {
	affected_rows: Int!
	returning: [VehicleAlarmTimesRecord!]!
}
"""
ordering options when selecting data from "vehicle_alarm_times_record"
"""
input VehicleAlarmTimesRecordOrderBy {
	id: OrderBy
	vehicle_alarm_times_record_id: OrderBy
	vehicle_id: OrderBy
	alarm_type: OrderBy
	disposal_measure: OrderBy
	disposal_time: OrderBy
	disposal_result: OrderBy
	is_disposal: OrderBy
	disposal_method: OrderBy
	duty_person: OrderBy
	alarm_times: OrderBy
	remarks: OrderBy
	record_time: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_alarm_times_record'.
"""
input VehicleAlarmTimesRecordBoolExp {
	_and: [VehicleAlarmTimesRecordBoolExp]
	_not: VehicleAlarmTimesRecordBoolExp
	_or: [VehicleAlarmTimesRecordBoolExp]
	id: BigintComparisonExp
	vehicle_alarm_times_record_id: StringComparisonExp
	vehicle_id: StringComparisonExp
	alarm_type: StringComparisonExp
	disposal_measure: StringComparisonExp
	disposal_time: TimestamptzComparisonExp
	disposal_result: StringComparisonExp
	is_disposal: BooleanComparisonExp
	disposal_method: IntComparisonExp
	duty_person: StringComparisonExp
	alarm_times: StringComparisonExp
	remarks: StringComparisonExp
	record_time: TimestamptzComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_alarm_times_record"
"""
input VehicleAlarmTimesRecordInsertInput {
	alarm_type: String
	disposal_measure: String
	disposal_time: Timestamptz
	disposal_result: String
	is_disposal: Boolean
	disposal_method: Int
	duty_person: String
	alarm_times: String
	remarks: String
	record_time: Timestamptz
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "vehicle_alarm_times_record"
"""
input VehicleAlarmTimesRecordIncInput {
	id: Bigint
	disposal_method: Int
}
"""
input type for updating data in table "vehicle_alarm_times_record"
"""
input VehicleAlarmTimesRecordSetInput {
	id: Bigint
	vehicle_alarm_times_record_id: String
	vehicle_id: String
	alarm_type: String
	disposal_measure: String
	disposal_time: Timestamptz
	disposal_result: String
	is_disposal: Boolean
	disposal_method: Int
	duty_person: String
	alarm_times: String
	remarks: String
	record_time: Timestamptz
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum VehicleAlarmTimesRecordSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                       )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                   )
	"""
	vehicle_alarm_times_record_id
	"""
	 vehicle_info 车辆信息表 的vehicle_id        
	"""
	vehicle_id
	"""
	 报警类型                                        ( 报警类型字典           )
	"""
	alarm_type
	"""
	 处置措施                                        
	"""
	disposal_measure
	"""
	 处置时间                                        
	"""
	disposal_time
	"""
	 处置结果                                        
	"""
	disposal_result
	"""
	 是否处置                                        
	"""
	is_disposal
	"""
	 处置方式                                        ( 处置方式字典           )
	"""
	disposal_method
	"""
	 值班人                                          
	"""
	duty_person
	"""
	 报警次数                                        
	"""
	alarm_times
	"""
	 备注                                            
	"""
	remarks
	"""
	 记录时间                                        
	"""
	record_time
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_alarm_times_record(distinct_on: [VehicleAlarmTimesRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehicleAlarmTimesRecordOrderBy!], where: VehicleAlarmTimesRecordBoolExp): [VehicleAlarmTimesRecord!]!
	"""
	聚合查询
	"""
	vehicle_alarm_times_record_aggregate(distinct_on: [VehicleAlarmTimesRecordSelectColumn!], limit: Int, offset: Int, order_by: [VehicleAlarmTimesRecordOrderBy!], where: VehicleAlarmTimesRecordBoolExp): VehicleAlarmTimesRecordAggregate!
	"""
	主键查询
	"""
	vehicle_alarm_times_record_by_pk(id: Bigint!): VehicleAlarmTimesRecord!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_alarm_times_record(where: VehicleAlarmTimesRecordBoolExp!): VehicleAlarmTimesRecordMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_alarm_times_record_by_pk(id: Bigint!): VehicleAlarmTimesRecord
	"""
	插入
	"""
	insert_vehicle_alarm_times_record(objects: [VehicleAlarmTimesRecordInsertInput!]!): VehicleAlarmTimesRecordMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_alarm_times_record_one(objects: VehicleAlarmTimesRecordInsertInput!): VehicleAlarmTimesRecord
	"""
	更新
	"""
	update_vehicle_alarm_times_record(_inc: VehicleAlarmTimesRecordIncInput, _set: VehicleAlarmTimesRecordSetInput, where: VehicleAlarmTimesRecordBoolExp!): VehicleAlarmTimesRecordMutationResponse
	"""
	更新
	"""
	update_vehicle_alarm_times_record_by_pk(_inc: VehicleAlarmTimesRecordIncInput, _set: VehicleAlarmTimesRecordSetInput, id: Bigint!): VehicleAlarmTimesRecord
}
`, BuiltIn: false},
	{Name: "graph/graphqls/vehicle_offline_disposal.graphqls", Input: `"""
离线车辆处置表
"""
type VehicleOfflineDisposal {
	"""
	 按指定方法生成                                  ( 主键                                                         )
	"""
	id: Bigint!
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	vehicle_offline_disposal_id: String!
	"""
	 所在企业id                                      ( enterprise_info表的enterprise_id                         )
	"""
	enterprise_id: String
	"""
	 手机号码                                        
	"""
	telephone: String
	"""
	 内容                                            
	"""
	content: String
	"""
	 发送时间                                        
	"""
	send_time: Timestamptz
	"""
	 用户ID                                          ( system_user表的user_id                                   )
	"""
	user_id: String
	"""
	 是否短信推送                                    
	"""
	is_sms_push: Boolean
	"""
	 是否通报                                        
	"""
	is_report: Boolean
	"""
	 是否语音通知                                    
	"""
	is_voice_notification: Boolean
	"""
	 是否APP推送                                     
	"""
	is_app_push: Boolean
	"""
	 通报内容                                        
	"""
	notification_content: String
	"""
	 语音内容                                        
	"""
	voice_content: String
	"""
	 APP推送内容                                     
	"""
	app_push_content: String
	"""
	 抽查表ID                                        ( dynamic_supervision_detail 动态监管抽查明细表的supervision_detail_id )
	"""
	supervision_detail_id: String
	"""
	 处置方式                                        
	"""
	disposal_method: String
	"""
	 是否删除                                        
	"""
	is_deleted: Boolean
	"""
	 创建时间                                        
	"""
	created_at: Timestamptz!
	"""
	 创建人                                          ( system_user表的user_id                                   )
	"""
	created_by: String!
	"""
	 修改时间                                        
	"""
	updated_at: Timestamptz
	"""
	 修改人                                          ( system_user表的user_id                                   )
	"""
	updated_by: String
	"""
	 删除时间                                        
	"""
	deleted_at: Timestamptz
	"""
	 删除人                                          ( system_user表的user_id                                   )
	"""
	deleted_by: String
}
"""
aggregated selection of "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalAggregate {
	aggregate: VehicleOfflineDisposalAggregateFields
}
"""
aggregate fields of "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalAggregateFields {
	avg: VehicleOfflineDisposalAvgFields
	count: Int
	max: VehicleOfflineDisposalMaxFields
	min: VehicleOfflineDisposalMinFields
	stddev: VehicleOfflineDisposalStddevFields
	stddev_pop: VehicleOfflineDisposalStddevPopFields
	stddev_samp: VehicleOfflineDisposalStddevSampFields
	sum: VehicleOfflineDisposalSumFields
	var_pop: VehicleOfflineDisposalVarPopFields
	var_samp: VehicleOfflineDisposalVarSampFields
	variance: VehicleOfflineDisposalVarianceFields
}
"""
aggregate avg on columns of table "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalAvgFields {
	id: Bigint
}
"""
aggregate max on columns of table "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalMaxFields {
	id: Bigint
	vehicle_offline_disposal_id: String
	enterprise_id: String
	telephone: String
	content: String
	send_time: Timestamptz
	user_id: String
	is_sms_push: Boolean
	is_report: Boolean
	is_voice_notification: Boolean
	is_app_push: Boolean
	notification_content: String
	voice_content: String
	app_push_content: String
	supervision_detail_id: String
	disposal_method: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate min on columns of table "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalMinFields {
	id: Bigint
	vehicle_offline_disposal_id: String
	enterprise_id: String
	telephone: String
	content: String
	send_time: Timestamptz
	user_id: String
	is_sms_push: Boolean
	is_report: Boolean
	is_voice_notification: Boolean
	is_app_push: Boolean
	notification_content: String
	voice_content: String
	app_push_content: String
	supervision_detail_id: String
	disposal_method: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
aggregate stddev on columns of table "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalStddevFields {
	id: Bigint
}
"""
aggregate stddev_pop on columns of table "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalStddevPopFields {
	id: Bigint
}
"""
aggregate stddev_samp on columns of table "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalStddevSampFields {
	id: Bigint
}
"""
aggregate sum on columns of table "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalSumFields {
	id: Bigint
}
"""
aggregate var_pop on columns of table "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalVarPopFields {
	id: Bigint
}
"""
aggregate var_samp on columns of table "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalVarSampFields {
	id: Bigint
}
"""
aggregate variance on columns of table "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalVarianceFields {
	id: Bigint
}
"""
response of any mutation on the table "vehicle_offline_disposal"
"""
type VehicleOfflineDisposalMutationResponse {
	affected_rows: Int!
	returning: [VehicleOfflineDisposal!]!
}
"""
ordering options when selecting data from "vehicle_offline_disposal"
"""
input VehicleOfflineDisposalOrderBy {
	id: OrderBy
	vehicle_offline_disposal_id: OrderBy
	enterprise_id: OrderBy
	telephone: OrderBy
	content: OrderBy
	send_time: OrderBy
	user_id: OrderBy
	is_sms_push: OrderBy
	is_report: OrderBy
	is_voice_notification: OrderBy
	is_app_push: OrderBy
	notification_content: OrderBy
	voice_content: OrderBy
	app_push_content: OrderBy
	supervision_detail_id: OrderBy
	disposal_method: OrderBy
	is_deleted: OrderBy
	created_at: OrderBy
	created_by: OrderBy
	updated_at: OrderBy
	updated_by: OrderBy
	deleted_at: OrderBy
	deleted_by: OrderBy
}
"""
Boolean expression to filter rows from the table "blacklist_operation_record". All fields are combined with a logical 'vehicle_offline_disposal'.
"""
input VehicleOfflineDisposalBoolExp {
	_and: [VehicleOfflineDisposalBoolExp]
	_not: VehicleOfflineDisposalBoolExp
	_or: [VehicleOfflineDisposalBoolExp]
	id: BigintComparisonExp
	vehicle_offline_disposal_id: StringComparisonExp
	enterprise_id: StringComparisonExp
	telephone: StringComparisonExp
	content: StringComparisonExp
	send_time: TimestamptzComparisonExp
	user_id: StringComparisonExp
	is_sms_push: BooleanComparisonExp
	is_report: BooleanComparisonExp
	is_voice_notification: BooleanComparisonExp
	is_app_push: BooleanComparisonExp
	notification_content: StringComparisonExp
	voice_content: StringComparisonExp
	app_push_content: StringComparisonExp
	supervision_detail_id: StringComparisonExp
	disposal_method: StringComparisonExp
	is_deleted: BooleanComparisonExp
	created_at: TimestamptzComparisonExp
	created_by: StringComparisonExp
	updated_at: TimestamptzComparisonExp
	updated_by: StringComparisonExp
	deleted_at: TimestamptzComparisonExp
	deleted_by: StringComparisonExp
}
"""
input type for inserting data into table "vehicle_offline_disposal"
"""
input VehicleOfflineDisposalInsertInput {
	enterprise_id: String
	telephone: String
	content: String
	send_time: Timestamptz
	user_id: String
	is_sms_push: Boolean
	is_report: Boolean
	is_voice_notification: Boolean
	is_app_push: Boolean
	notification_content: String
	voice_content: String
	app_push_content: String
	supervision_detail_id: String
	disposal_method: String
	is_deleted: Boolean
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
input type for incrementing integer column in table "vehicle_offline_disposal"
"""
input VehicleOfflineDisposalIncInput {
	id: Bigint
}
"""
input type for updating data in table "vehicle_offline_disposal"
"""
input VehicleOfflineDisposalSetInput {
	id: Bigint
	vehicle_offline_disposal_id: String
	enterprise_id: String
	telephone: String
	content: String
	send_time: Timestamptz
	user_id: String
	is_sms_push: Boolean
	is_report: Boolean
	is_voice_notification: Boolean
	is_app_push: Boolean
	notification_content: String
	voice_content: String
	app_push_content: String
	supervision_detail_id: String
	disposal_method: String
	is_deleted: Boolean
	created_at: Timestamptz
	created_by: String
	updated_at: Timestamptz
	updated_by: String
	deleted_at: Timestamptz
	deleted_by: String
}
"""
可选select
"""
enum VehicleOfflineDisposalSelectColumn {
	"""
	 按指定方法生成                                  ( 主键                                                         )
	"""
	id
	"""
	 外部编码，由golang程序生成的xid，暴露到外部使用 ( 联合主键                                                     )
	"""
	vehicle_offline_disposal_id
	"""
	 所在企业id                                      ( enterprise_info表的enterprise_id                         )
	"""
	enterprise_id
	"""
	 手机号码                                        
	"""
	telephone
	"""
	 内容                                            
	"""
	content
	"""
	 发送时间                                        
	"""
	send_time
	"""
	 用户ID                                          ( system_user表的user_id                                   )
	"""
	user_id
	"""
	 是否短信推送                                    
	"""
	is_sms_push
	"""
	 是否通报                                        
	"""
	is_report
	"""
	 是否语音通知                                    
	"""
	is_voice_notification
	"""
	 是否APP推送                                     
	"""
	is_app_push
	"""
	 通报内容                                        
	"""
	notification_content
	"""
	 语音内容                                        
	"""
	voice_content
	"""
	 APP推送内容                                     
	"""
	app_push_content
	"""
	 抽查表ID                                        ( dynamic_supervision_detail 动态监管抽查明细表的supervision_detail_id )
	"""
	supervision_detail_id
	"""
	 处置方式                                        
	"""
	disposal_method
	"""
	 是否删除                                        
	"""
	is_deleted
	"""
	 创建时间                                        
	"""
	created_at
	"""
	 创建人                                          ( system_user表的user_id                                   )
	"""
	created_by
	"""
	 修改时间                                        
	"""
	updated_at
	"""
	 修改人                                          ( system_user表的user_id                                   )
	"""
	updated_by
	"""
	 删除时间                                        
	"""
	deleted_at
	"""
	 删除人                                          ( system_user表的user_id                                   )
	"""
	deleted_by
}
extend type Query {
	"""
	列表查询
	"""
	vehicle_offline_disposal(distinct_on: [VehicleOfflineDisposalSelectColumn!], limit: Int, offset: Int, order_by: [VehicleOfflineDisposalOrderBy!], where: VehicleOfflineDisposalBoolExp): [VehicleOfflineDisposal!]!
	"""
	聚合查询
	"""
	vehicle_offline_disposal_aggregate(distinct_on: [VehicleOfflineDisposalSelectColumn!], limit: Int, offset: Int, order_by: [VehicleOfflineDisposalOrderBy!], where: VehicleOfflineDisposalBoolExp): VehicleOfflineDisposalAggregate!
	"""
	主键查询
	"""
	vehicle_offline_disposal_by_pk(id: Bigint!): VehicleOfflineDisposal!
}
extend type Mutation {
	"""
	删除记录
	"""
	delete_vehicle_offline_disposal(where: VehicleOfflineDisposalBoolExp!): VehicleOfflineDisposalMutationResponse
	"""
	根据主键删除记录
	"""
	delete_vehicle_offline_disposal_by_pk(id: Bigint!): VehicleOfflineDisposal
	"""
	插入
	"""
	insert_vehicle_offline_disposal(objects: [VehicleOfflineDisposalInsertInput!]!): VehicleOfflineDisposalMutationResponse
	"""
	插入一条记录
	"""
	insert_vehicle_offline_disposal_one(objects: VehicleOfflineDisposalInsertInput!): VehicleOfflineDisposal
	"""
	更新
	"""
	update_vehicle_offline_disposal(_inc: VehicleOfflineDisposalIncInput, _set: VehicleOfflineDisposalSetInput, where: VehicleOfflineDisposalBoolExp!): VehicleOfflineDisposalMutationResponse
	"""
	更新
	"""
	update_vehicle_offline_disposal_by_pk(_inc: VehicleOfflineDisposalIncInput, _set: VehicleOfflineDisposalSetInput, id: Bigint!): VehicleOfflineDisposal
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_dynamic_spot_check_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSpotCheckDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDynamicSpotCheckDisposalBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dynamic_spot_check_disposal_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dynamic_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDynamicSupervisionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dynamic_supervision_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dynamic_supervision_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSupervisionDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNDynamicSupervisionDetailBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dynamic_supervision_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_online_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckOnlineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNMuckTruckOnlineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_muck_truck_online_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_region_issued_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RegionIssuedBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNRegionIssuedBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_region_issued_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_region_management_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RegionManagementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNRegionManagementBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_region_management_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_alarm_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleAlarmSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleAlarmSupervisionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_alarm_supervision_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_alarm_times_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleAlarmTimesRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleAlarmTimesRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_alarm_times_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_offline_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleOfflineDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNVehicleOfflineDisposalBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_offline_disposal_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_spot_check_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DynamicSpotCheckDisposalInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDynamicSpotCheckDisposalInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_spot_check_disposal_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSpotCheckDisposalInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDynamicSpotCheckDisposalInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DynamicSupervisionInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDynamicSupervisionInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_supervision_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DynamicSupervisionDetailInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDynamicSupervisionDetailInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_supervision_detail_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSupervisionDetailInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDynamicSupervisionDetailInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_supervision_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSupervisionInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNDynamicSupervisionInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_online_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.MuckTruckOnlineInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNMuckTruckOnlineInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_muck_truck_online_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MuckTruckOnlineInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNMuckTruckOnlineInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_region_issued_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.RegionIssuedInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNRegionIssuedInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_region_issued_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RegionIssuedInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNRegionIssuedInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_region_management_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.RegionManagementInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNRegionManagementInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_region_management_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RegionManagementInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNRegionManagementInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_alarm_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleAlarmSupervisionInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleAlarmSupervisionInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_alarm_supervision_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleAlarmSupervisionInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleAlarmSupervisionInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_alarm_times_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleAlarmTimesRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleAlarmTimesRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_alarm_times_record_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleAlarmTimesRecordInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleAlarmTimesRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_offline_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleOfflineDisposalInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleOfflineDisposalInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_offline_disposal_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleOfflineDisposalInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNVehicleOfflineDisposalInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_spot_check_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSpotCheckDisposalIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODynamicSpotCheckDisposalIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSpotCheckDisposalSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODynamicSpotCheckDisposalSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DynamicSpotCheckDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDynamicSpotCheckDisposalBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_spot_check_disposal_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSpotCheckDisposalIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODynamicSpotCheckDisposalIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSpotCheckDisposalSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODynamicSpotCheckDisposalSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSupervisionIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODynamicSupervisionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSupervisionSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODynamicSupervisionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DynamicSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDynamicSupervisionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_supervision_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSupervisionIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODynamicSupervisionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSupervisionSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODynamicSupervisionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_supervision_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSupervisionDetailIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODynamicSupervisionDetailIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSupervisionDetailSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODynamicSupervisionDetailSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DynamicSupervisionDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNDynamicSupervisionDetailBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_supervision_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSupervisionDetailIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalODynamicSupervisionDetailIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSupervisionDetailSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalODynamicSupervisionDetailSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_online_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckOnlineIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOMuckTruckOnlineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckOnlineSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOMuckTruckOnlineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.MuckTruckOnlineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNMuckTruckOnlineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_muck_truck_online_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MuckTruckOnlineIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOMuckTruckOnlineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.MuckTruckOnlineSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOMuckTruckOnlineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_region_issued_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RegionIssuedIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORegionIssuedIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RegionIssuedSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORegionIssuedSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.RegionIssuedBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNRegionIssuedBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_region_issued_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RegionIssuedIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORegionIssuedIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RegionIssuedSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORegionIssuedSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_region_management_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RegionManagementIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORegionManagementIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RegionManagementSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORegionManagementSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.RegionManagementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNRegionManagementBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_region_management_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RegionManagementIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalORegionManagementIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.RegionManagementSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalORegionManagementSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_alarm_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleAlarmSupervisionIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleAlarmSupervisionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleAlarmSupervisionSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleAlarmSupervisionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleAlarmSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleAlarmSupervisionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_alarm_supervision_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleAlarmSupervisionIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleAlarmSupervisionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleAlarmSupervisionSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleAlarmSupervisionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_alarm_times_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleAlarmTimesRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleAlarmTimesRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleAlarmTimesRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleAlarmTimesRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleAlarmTimesRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleAlarmTimesRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_alarm_times_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleAlarmTimesRecordIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleAlarmTimesRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleAlarmTimesRecordSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleAlarmTimesRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_offline_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleOfflineDisposalIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleOfflineDisposalIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleOfflineDisposalSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleOfflineDisposalSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleOfflineDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNVehicleOfflineDisposalBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_offline_disposal_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleOfflineDisposalIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOVehicleOfflineDisposalIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleOfflineDisposalSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOVehicleOfflineDisposalSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_spot_check_disposal_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSpotCheckDisposalSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODynamicSpotCheckDisposalSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSpotCheckDisposalOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODynamicSpotCheckDisposalOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSpotCheckDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODynamicSpotCheckDisposalBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_spot_check_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSpotCheckDisposalSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODynamicSpotCheckDisposalSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSpotCheckDisposalOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODynamicSpotCheckDisposalOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSpotCheckDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODynamicSpotCheckDisposalBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_spot_check_disposal_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODynamicSupervisionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODynamicSupervisionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODynamicSupervisionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODynamicSupervisionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODynamicSupervisionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODynamicSupervisionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_detail_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionDetailSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODynamicSupervisionDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionDetailOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODynamicSupervisionDetailOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODynamicSupervisionDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionDetailSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalODynamicSupervisionDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionDetailOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalODynamicSupervisionDetailOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalODynamicSupervisionDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_online_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckOnlineSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOMuckTruckOnlineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckOnlineOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOMuckTruckOnlineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckOnlineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOMuckTruckOnlineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_online_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.MuckTruckOnlineSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOMuckTruckOnlineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.MuckTruckOnlineOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOMuckTruckOnlineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.MuckTruckOnlineBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOMuckTruckOnlineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_muck_truck_online_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_region_issued_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RegionIssuedSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalORegionIssuedSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RegionIssuedOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORegionIssuedOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RegionIssuedBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalORegionIssuedBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_region_issued_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RegionIssuedSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalORegionIssuedSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RegionIssuedOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORegionIssuedOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RegionIssuedBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalORegionIssuedBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_region_issued_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_region_management_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RegionManagementSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalORegionManagementSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RegionManagementOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORegionManagementOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RegionManagementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalORegionManagementBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_region_management_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.RegionManagementSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalORegionManagementSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.RegionManagementOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalORegionManagementOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.RegionManagementBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalORegionManagementBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_region_management_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_supervision_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleAlarmSupervisionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleAlarmSupervisionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleAlarmSupervisionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleAlarmSupervisionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleAlarmSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleAlarmSupervisionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleAlarmSupervisionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleAlarmSupervisionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleAlarmSupervisionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleAlarmSupervisionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleAlarmSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleAlarmSupervisionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_supervision_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_times_record_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleAlarmTimesRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleAlarmTimesRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleAlarmTimesRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleAlarmTimesRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleAlarmTimesRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleAlarmTimesRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_times_record_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleAlarmTimesRecordSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleAlarmTimesRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleAlarmTimesRecordOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleAlarmTimesRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleAlarmTimesRecordBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleAlarmTimesRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_alarm_times_record_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_offline_disposal_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleOfflineDisposalSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleOfflineDisposalSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleOfflineDisposalOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleOfflineDisposalOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleOfflineDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleOfflineDisposalBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_offline_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleOfflineDisposalSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOVehicleOfflineDisposalSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleOfflineDisposalOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOVehicleOfflineDisposalOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleOfflineDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOVehicleOfflineDisposalBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_offline_disposal_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNBigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _DynamicSpotCheckDisposal_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_telephone(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_send_time(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_image_abnormal_handing_measure(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageAbnormalHandingMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_tachograph_data_disposal_measure(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataDisposalMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_operation_user(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_is_sms_push(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSmsPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_is_notify(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNotify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_is_announce(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAnnounce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_is_app_push(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAppPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_notify_content(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_announce_content(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_disposal_content(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposal_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalAggregateFields)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalAvgFields)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalMaxFields)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalMinFields)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalStddevFields)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalStddevPopFields)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalStddevSampFields)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalSumFields)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalVarPopFields)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalVarSampFields)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalVarianceFields)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalAvgFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_send_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_image_abnormal_handing_measure(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageAbnormalHandingMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_tachograph_data_disposal_measure(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataDisposalMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_is_sms_push(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSmsPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_is_notify(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNotify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_is_announce(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAnnounce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_is_app_push(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAppPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_notify_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_announce_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_disposal_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_send_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_image_abnormal_handing_measure(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageAbnormalHandingMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_tachograph_data_disposal_measure(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataDisposalMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_is_sms_push(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSmsPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_is_notify(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNotify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_is_announce(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAnnounce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_is_app_push(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAppPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_notify_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_announce_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_disposal_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalNDynamicSpotCheckDisposal2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSpotCheckDisposalᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalStddevFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalStddevPopFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalStddevSampFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalSumFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalVarPopFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalVarSampFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSpotCheckDisposalVarianceFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSpotCheckDisposalVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_spot_check_date(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_province_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_city_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_district_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_year(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_month(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_day(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervision_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionAggregateFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionAvgFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionMaxFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionMinFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionStddevFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionStddevPopFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionStddevSampFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionSumFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionVarPopFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionVarSampFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionVarianceFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAvgFields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAvgFields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAvgFields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAvgFields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAvgFields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAvgFields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionAvgFields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_driver_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_monitoring_time(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_monitoring_location(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_is_online(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_is_tachograph_record_normal(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTachographRecordNormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_tachograph_data_exception(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_is_speeding(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSpeeding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_is_fatigue_driving(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFatigueDriving, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_is_morning_outage(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMorningOutage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_curve(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_trail(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_lens_position(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_equipment(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_other_infraction(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherInfraction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_measures(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_results(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_treatment_time(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatmentTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_assignee(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_others(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Others, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_lens_on(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_monitor_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitorEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_is_locate(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_latitude_longitude_description(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatitudeLongitudeDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_is_send(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_business_scope(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_outage_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutageAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_speed_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_speeding_speed(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedingSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_fatigue_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_measures1(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_measures2(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_measures3(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_measures4(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_measures5(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_measures6(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_measures7(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_results1(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_results2(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_results3(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_results4(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_results5(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_results6(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_disposal_results7(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetail_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailAggregateFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailAvgFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailMaxFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailMinFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailStddevFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailStddevPopFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailStddevSampFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailSumFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailVarPopFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailVarSampFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailVarianceFields)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAvgFields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAvgFields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAvgFields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAvgFields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAvgFields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailAvgFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_monitoring_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_monitoring_location(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_is_online(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_is_tachograph_record_normal(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTachographRecordNormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_tachograph_data_exception(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_is_speeding(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSpeeding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_is_fatigue_driving(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFatigueDriving, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_is_morning_outage(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMorningOutage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_other_infraction(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherInfraction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_measures(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_results(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_treatment_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatmentTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_assignee(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_others(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Others, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_lens_on(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_monitor_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitorEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_is_locate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_latitude_longitude_description(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatitudeLongitudeDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_is_send(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_outage_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutageAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_speed_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_speeding_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedingSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_fatigue_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_measures1(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_measures2(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_measures3(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_measures4(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_measures5(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_measures6(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_measures7(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_results1(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_results2(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_results3(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_results4(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_results5(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_results6(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_disposal_results7(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_monitoring_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_monitoring_location(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_is_online(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_is_tachograph_record_normal(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTachographRecordNormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_tachograph_data_exception(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_gps_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_is_speeding(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSpeeding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_is_fatigue_driving(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFatigueDriving, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_is_morning_outage(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMorningOutage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_other_infraction(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherInfraction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_measures(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_results(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_treatment_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatmentTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_assignee(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_others(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Others, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_lens_on(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_monitor_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitorEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_is_locate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_latitude_longitude_description(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatitudeLongitudeDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_is_send(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_outage_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutageAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_speed_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_speeding_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedingSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_fatigue_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_measures1(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_measures2(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_measures3(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_measures4(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_measures5(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_measures6(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_measures7(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_results1(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_results2(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_results3(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_results4(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_results5(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_results6(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_disposal_results7(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalNDynamicSupervisionDetail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevFields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevFields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevFields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevFields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevFields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevPopFields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevPopFields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevPopFields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevPopFields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevPopFields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevPopFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevSampFields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevSampFields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevSampFields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevSampFields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevSampFields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailStddevSampFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailSumFields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailSumFields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailSumFields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailSumFields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailSumFields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailSumFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarPopFields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarPopFields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarPopFields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarPopFields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarPopFields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarPopFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarSampFields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarSampFields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarSampFields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarSampFields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarSampFields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarSampFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarianceFields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarianceFields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarianceFields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarianceFields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarianceFields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionDetailVarianceFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionDetailVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_spot_check_date(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_spot_check_date(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DynamicSupervision)
	fc.Result = res
	return ec.marshalNDynamicSupervision2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevFields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevFields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevFields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevFields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevFields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevFields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevFields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevPopFields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevPopFields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevPopFields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevPopFields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevPopFields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevPopFields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevPopFields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevSampFields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevSampFields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevSampFields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevSampFields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevSampFields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevSampFields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionStddevSampFields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionSumFields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionSumFields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionSumFields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionSumFields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionSumFields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionSumFields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionSumFields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarPopFields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarPopFields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarPopFields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarPopFields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarPopFields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarPopFields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarPopFields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarSampFields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarSampFields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarSampFields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarSampFields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarSampFields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarSampFields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarSampFields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarianceFields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarianceFields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarianceFields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarianceFields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarianceFields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarianceFields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DynamicSupervisionVarianceFields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DynamicSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_muck_truck_online_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckOnlineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_is_online(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_is_pay(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_is_gps_online(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGpsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_is_catalog_library(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCatalogLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_is_install(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstall, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_is_vehicle_pass_inspection(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVehiclePassInspection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_is_new_vehicle(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNewVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_location_time(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_self_number(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelfNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_area(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnline_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.MuckTruckOnline) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnline",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineAggregateFields)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineAvgFields)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineMaxFields)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineMinFields)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineStddevFields)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineStddevPopFields)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineStddevSampFields)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineSumFields)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineVarPopFields)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineVarSampFields)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineVarianceFields)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_muck_truck_online_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckOnlineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_is_online(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_is_pay(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_is_gps_online(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGpsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_is_catalog_library(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCatalogLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_is_install(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstall, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_is_vehicle_pass_inspection(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVehiclePassInspection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_is_new_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNewVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_location_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_self_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelfNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_area(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_muck_truck_online_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckOnlineID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_is_online(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_is_pay(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_is_gps_online(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGpsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_is_catalog_library(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCatalogLibrary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_is_install(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstall, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_is_vehicle_pass_inspection(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVehiclePassInspection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_is_new_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNewVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_location_time(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_self_number(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelfNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_area(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.MuckTruckOnline)
	fc.Result = res
	return ec.marshalNMuckTruckOnline2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐMuckTruckOnlineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _MuckTruckOnlineVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MuckTruckOnlineVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MuckTruckOnlineVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dynamic_spot_check_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_spot_check_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSpotCheckDisposal(rctx, args["where"].(model.DynamicSpotCheckDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalMutationResponse)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dynamic_spot_check_disposal_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_spot_check_disposal_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSpotCheckDisposalByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSpotCheckDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_spot_check_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_spot_check_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSpotCheckDisposal(rctx, args["objects"].([]*model.DynamicSpotCheckDisposalInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalMutationResponse)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_spot_check_disposal_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_spot_check_disposal_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSpotCheckDisposalOne(rctx, args["objects"].(model.DynamicSpotCheckDisposalInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSpotCheckDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_spot_check_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_spot_check_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSpotCheckDisposal(rctx, args["_inc"].(*model.DynamicSpotCheckDisposalIncInput), args["_set"].(*model.DynamicSpotCheckDisposalSetInput), args["where"].(model.DynamicSpotCheckDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalMutationResponse)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposalMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_spot_check_disposal_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_spot_check_disposal_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSpotCheckDisposalByPk(rctx, args["_inc"].(*model.DynamicSpotCheckDisposalIncInput), args["_set"].(*model.DynamicSpotCheckDisposalSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalODynamicSpotCheckDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSpotCheckDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dynamic_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSupervision(rctx, args["where"].(model.DynamicSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionMutationResponse)
	fc.Result = res
	return ec.marshalODynamicSupervisionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dynamic_supervision_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_supervision_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSupervisionByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSupervision)
	fc.Result = res
	return ec.marshalODynamicSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSupervision(rctx, args["objects"].([]*model.DynamicSupervisionInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionMutationResponse)
	fc.Result = res
	return ec.marshalODynamicSupervisionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_supervision_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_supervision_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSupervisionOne(rctx, args["objects"].(model.DynamicSupervisionInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSupervision)
	fc.Result = res
	return ec.marshalODynamicSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSupervision(rctx, args["_inc"].(*model.DynamicSupervisionIncInput), args["_set"].(*model.DynamicSupervisionSetInput), args["where"].(model.DynamicSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionMutationResponse)
	fc.Result = res
	return ec.marshalODynamicSupervisionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_supervision_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_supervision_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSupervisionByPk(rctx, args["_inc"].(*model.DynamicSupervisionIncInput), args["_set"].(*model.DynamicSupervisionSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSupervision)
	fc.Result = res
	return ec.marshalODynamicSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dynamic_supervision_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_supervision_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSupervisionDetail(rctx, args["where"].(model.DynamicSupervisionDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailMutationResponse)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dynamic_supervision_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_supervision_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSupervisionDetailByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_supervision_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_supervision_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSupervisionDetail(rctx, args["objects"].([]*model.DynamicSupervisionDetailInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailMutationResponse)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_supervision_detail_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_supervision_detail_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSupervisionDetailOne(rctx, args["objects"].(model.DynamicSupervisionDetailInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_supervision_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_supervision_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSupervisionDetail(rctx, args["_inc"].(*model.DynamicSupervisionDetailIncInput), args["_set"].(*model.DynamicSupervisionDetailSetInput), args["where"].(model.DynamicSupervisionDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailMutationResponse)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_supervision_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_supervision_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSupervisionDetailByPk(rctx, args["_inc"].(*model.DynamicSupervisionDetailIncInput), args["_set"].(*model.DynamicSupervisionDetailSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalODynamicSupervisionDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_online(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_online_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckOnline(rctx, args["where"].(model.MuckTruckOnlineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_muck_truck_online_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_muck_truck_online_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMuckTruckOnlineByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckOnline)
	fc.Result = res
	return ec.marshalOMuckTruckOnline2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐMuckTruckOnline(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_online(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_online_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckOnline(rctx, args["objects"].([]*model.MuckTruckOnlineInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_muck_truck_online_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_muck_truck_online_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertMuckTruckOnlineOne(rctx, args["objects"].(model.MuckTruckOnlineInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckOnline)
	fc.Result = res
	return ec.marshalOMuckTruckOnline2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐMuckTruckOnline(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_online(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_online_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckOnline(rctx, args["_inc"].(*model.MuckTruckOnlineIncInput), args["_set"].(*model.MuckTruckOnlineSetInput), args["where"].(model.MuckTruckOnlineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineMutationResponse)
	fc.Result = res
	return ec.marshalOMuckTruckOnlineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_muck_truck_online_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_muck_truck_online_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMuckTruckOnlineByPk(rctx, args["_inc"].(*model.MuckTruckOnlineIncInput), args["_set"].(*model.MuckTruckOnlineSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckOnline)
	fc.Result = res
	return ec.marshalOMuckTruckOnline2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐMuckTruckOnline(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_region_issued(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_region_issued_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRegionIssued(rctx, args["where"].(model.RegionIssuedBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedMutationResponse)
	fc.Result = res
	return ec.marshalORegionIssuedMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_region_issued_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_region_issued_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRegionIssuedByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RegionIssued)
	fc.Result = res
	return ec.marshalORegionIssued2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionIssued(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_region_issued(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_region_issued_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRegionIssued(rctx, args["objects"].([]*model.RegionIssuedInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedMutationResponse)
	fc.Result = res
	return ec.marshalORegionIssuedMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_region_issued_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_region_issued_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRegionIssuedOne(rctx, args["objects"].(model.RegionIssuedInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RegionIssued)
	fc.Result = res
	return ec.marshalORegionIssued2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionIssued(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_region_issued(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_region_issued_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegionIssued(rctx, args["_inc"].(*model.RegionIssuedIncInput), args["_set"].(*model.RegionIssuedSetInput), args["where"].(model.RegionIssuedBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedMutationResponse)
	fc.Result = res
	return ec.marshalORegionIssuedMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_region_issued_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_region_issued_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegionIssuedByPk(rctx, args["_inc"].(*model.RegionIssuedIncInput), args["_set"].(*model.RegionIssuedSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RegionIssued)
	fc.Result = res
	return ec.marshalORegionIssued2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionIssued(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_region_management(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_region_management_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRegionManagement(rctx, args["where"].(model.RegionManagementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementMutationResponse)
	fc.Result = res
	return ec.marshalORegionManagementMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_region_management_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_region_management_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRegionManagementByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RegionManagement)
	fc.Result = res
	return ec.marshalORegionManagement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionManagement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_region_management(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_region_management_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRegionManagement(rctx, args["objects"].([]*model.RegionManagementInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementMutationResponse)
	fc.Result = res
	return ec.marshalORegionManagementMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_region_management_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_region_management_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertRegionManagementOne(rctx, args["objects"].(model.RegionManagementInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RegionManagement)
	fc.Result = res
	return ec.marshalORegionManagement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionManagement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_region_management(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_region_management_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegionManagement(rctx, args["_inc"].(*model.RegionManagementIncInput), args["_set"].(*model.RegionManagementSetInput), args["where"].(model.RegionManagementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementMutationResponse)
	fc.Result = res
	return ec.marshalORegionManagementMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_region_management_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_region_management_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegionManagementByPk(rctx, args["_inc"].(*model.RegionManagementIncInput), args["_set"].(*model.RegionManagementSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.RegionManagement)
	fc.Result = res
	return ec.marshalORegionManagement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionManagement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_alarm_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_alarm_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleAlarmSupervision(rctx, args["where"].(model.VehicleAlarmSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_alarm_supervision_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_alarm_supervision_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleAlarmSupervisionByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmSupervision)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_alarm_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_alarm_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleAlarmSupervision(rctx, args["objects"].([]*model.VehicleAlarmSupervisionInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_alarm_supervision_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_alarm_supervision_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleAlarmSupervisionOne(rctx, args["objects"].(model.VehicleAlarmSupervisionInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmSupervision)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_alarm_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_alarm_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleAlarmSupervision(rctx, args["_inc"].(*model.VehicleAlarmSupervisionIncInput), args["_set"].(*model.VehicleAlarmSupervisionSetInput), args["where"].(model.VehicleAlarmSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_alarm_supervision_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_alarm_supervision_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleAlarmSupervisionByPk(rctx, args["_inc"].(*model.VehicleAlarmSupervisionIncInput), args["_set"].(*model.VehicleAlarmSupervisionSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmSupervision)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_alarm_times_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_alarm_times_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleAlarmTimesRecord(rctx, args["where"].(model.VehicleAlarmTimesRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_alarm_times_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_alarm_times_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleAlarmTimesRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmTimesRecord)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmTimesRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_alarm_times_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_alarm_times_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleAlarmTimesRecord(rctx, args["objects"].([]*model.VehicleAlarmTimesRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_alarm_times_record_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_alarm_times_record_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleAlarmTimesRecordOne(rctx, args["objects"].(model.VehicleAlarmTimesRecordInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmTimesRecord)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmTimesRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_alarm_times_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_alarm_times_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleAlarmTimesRecord(rctx, args["_inc"].(*model.VehicleAlarmTimesRecordIncInput), args["_set"].(*model.VehicleAlarmTimesRecordSetInput), args["where"].(model.VehicleAlarmTimesRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_alarm_times_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_alarm_times_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleAlarmTimesRecordByPk(rctx, args["_inc"].(*model.VehicleAlarmTimesRecordIncInput), args["_set"].(*model.VehicleAlarmTimesRecordSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmTimesRecord)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmTimesRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_offline_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_offline_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleOfflineDisposal(rctx, args["where"].(model.VehicleOfflineDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_offline_disposal_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_offline_disposal_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleOfflineDisposalByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleOfflineDisposal)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleOfflineDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_offline_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_offline_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleOfflineDisposal(rctx, args["objects"].([]*model.VehicleOfflineDisposalInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_offline_disposal_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_offline_disposal_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleOfflineDisposalOne(rctx, args["objects"].(model.VehicleOfflineDisposalInsertInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleOfflineDisposal)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleOfflineDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_offline_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_offline_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleOfflineDisposal(rctx, args["_inc"].(*model.VehicleOfflineDisposalIncInput), args["_set"].(*model.VehicleOfflineDisposalSetInput), args["where"].(model.VehicleOfflineDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalMutationResponse)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_offline_disposal_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_offline_disposal_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleOfflineDisposalByPk(rctx, args["_inc"].(*model.VehicleOfflineDisposalIncInput), args["_set"].(*model.VehicleOfflineDisposalSetInput), args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleOfflineDisposal)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleOfflineDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_spot_check_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_spot_check_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSpotCheckDisposal(rctx, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalNDynamicSpotCheckDisposal2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSpotCheckDisposalᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_spot_check_disposal_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_spot_check_disposal_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSpotCheckDisposalAggregate(rctx, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalAggregate)
	fc.Result = res
	return ec.marshalNDynamicSpotCheckDisposalAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_spot_check_disposal_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_spot_check_disposal_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSpotCheckDisposalByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalNDynamicSpotCheckDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSpotCheckDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervision(rctx, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DynamicSupervision)
	fc.Result = res
	return ec.marshalNDynamicSupervision2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervisionAggregate(rctx, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionAggregate)
	fc.Result = res
	return ec.marshalNDynamicSupervisionAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervisionByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSupervision)
	fc.Result = res
	return ec.marshalNDynamicSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervisionDetail(rctx, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalNDynamicSupervisionDetail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision_detail_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_detail_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervisionDetailAggregate(rctx, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailAggregate)
	fc.Result = res
	return ec.marshalNDynamicSupervisionDetailAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervisionDetailByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalNDynamicSupervisionDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_online(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_online_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckOnline(rctx, args["distinct_on"].([]model.MuckTruckOnlineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckOnlineOrderBy), args["where"].(*model.MuckTruckOnlineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.MuckTruckOnline)
	fc.Result = res
	return ec.marshalNMuckTruckOnline2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐMuckTruckOnlineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_online_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_online_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckOnlineAggregate(rctx, args["distinct_on"].([]model.MuckTruckOnlineSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.MuckTruckOnlineOrderBy), args["where"].(*model.MuckTruckOnlineBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MuckTruckOnlineAggregate)
	fc.Result = res
	return ec.marshalNMuckTruckOnlineAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_muck_truck_online_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_muck_truck_online_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MuckTruckOnlineByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.MuckTruckOnline)
	fc.Result = res
	return ec.marshalNMuckTruckOnline2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐMuckTruckOnline(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_region_issued(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_region_issued_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionIssued(rctx, args["distinct_on"].([]model.RegionIssuedSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionIssuedOrderBy), args["where"].(*model.RegionIssuedBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RegionIssued)
	fc.Result = res
	return ec.marshalNRegionIssued2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionIssuedᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_region_issued_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_region_issued_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionIssuedAggregate(rctx, args["distinct_on"].([]model.RegionIssuedSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionIssuedOrderBy), args["where"].(*model.RegionIssuedBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedAggregate)
	fc.Result = res
	return ec.marshalNRegionIssuedAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_region_issued_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_region_issued_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionIssuedByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.RegionIssued)
	fc.Result = res
	return ec.marshalNRegionIssued2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionIssued(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_region_management(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_region_management_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionManagement(rctx, args["distinct_on"].([]model.RegionManagementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionManagementOrderBy), args["where"].(*model.RegionManagementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RegionManagement)
	fc.Result = res
	return ec.marshalNRegionManagement2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionManagementᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_region_management_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_region_management_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionManagementAggregate(rctx, args["distinct_on"].([]model.RegionManagementSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.RegionManagementOrderBy), args["where"].(*model.RegionManagementBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementAggregate)
	fc.Result = res
	return ec.marshalNRegionManagementAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_region_management_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_region_management_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegionManagementByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.RegionManagement)
	fc.Result = res
	return ec.marshalNRegionManagement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionManagement(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmSupervision(rctx, args["distinct_on"].([]model.VehicleAlarmSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmSupervisionOrderBy), args["where"].(*model.VehicleAlarmSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleAlarmSupervision)
	fc.Result = res
	return ec.marshalNVehicleAlarmSupervision2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmSupervisionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_supervision_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_supervision_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmSupervisionAggregate(rctx, args["distinct_on"].([]model.VehicleAlarmSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmSupervisionOrderBy), args["where"].(*model.VehicleAlarmSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionAggregate)
	fc.Result = res
	return ec.marshalNVehicleAlarmSupervisionAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_supervision_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_supervision_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmSupervisionByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmSupervision)
	fc.Result = res
	return ec.marshalNVehicleAlarmSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_times_record(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_times_record_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmTimesRecord(rctx, args["distinct_on"].([]model.VehicleAlarmTimesRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmTimesRecordOrderBy), args["where"].(*model.VehicleAlarmTimesRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleAlarmTimesRecord)
	fc.Result = res
	return ec.marshalNVehicleAlarmTimesRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmTimesRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_times_record_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_times_record_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmTimesRecordAggregate(rctx, args["distinct_on"].([]model.VehicleAlarmTimesRecordSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleAlarmTimesRecordOrderBy), args["where"].(*model.VehicleAlarmTimesRecordBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordAggregate)
	fc.Result = res
	return ec.marshalNVehicleAlarmTimesRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_alarm_times_record_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_alarm_times_record_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleAlarmTimesRecordByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleAlarmTimesRecord)
	fc.Result = res
	return ec.marshalNVehicleAlarmTimesRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmTimesRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_offline_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_offline_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleOfflineDisposal(rctx, args["distinct_on"].([]model.VehicleOfflineDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleOfflineDisposalOrderBy), args["where"].(*model.VehicleOfflineDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleOfflineDisposal)
	fc.Result = res
	return ec.marshalNVehicleOfflineDisposal2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleOfflineDisposalᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_offline_disposal_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_offline_disposal_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleOfflineDisposalAggregate(rctx, args["distinct_on"].([]model.VehicleOfflineDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleOfflineDisposalOrderBy), args["where"].(*model.VehicleOfflineDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalAggregate)
	fc.Result = res
	return ec.marshalNVehicleOfflineDisposalAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_offline_disposal_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_offline_disposal_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleOfflineDisposalByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model1.VehicleOfflineDisposal)
	fc.Result = res
	return ec.marshalNVehicleOfflineDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleOfflineDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssued_id(ctx context.Context, field graphql.CollectedField, obj *model1.RegionIssued) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssued",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssued_region_issued_id(ctx context.Context, field graphql.CollectedField, obj *model1.RegionIssued) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssued",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionIssuedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssued_region_name(ctx context.Context, field graphql.CollectedField, obj *model1.RegionIssued) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssued",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssued_imel(ctx context.Context, field graphql.CollectedField, obj *model1.RegionIssued) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssued",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssued_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.RegionIssued) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssued",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssued_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.RegionIssued) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssued",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssued_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.RegionIssued) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssued",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssued_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.RegionIssued) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssued",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssued_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.RegionIssued) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssued",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssued_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.RegionIssued) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssued",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedAggregateFields)
	fc.Result = res
	return ec.marshalORegionIssuedAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedAvgFields)
	fc.Result = res
	return ec.marshalORegionIssuedAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedMaxFields)
	fc.Result = res
	return ec.marshalORegionIssuedMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedMinFields)
	fc.Result = res
	return ec.marshalORegionIssuedMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedStddevFields)
	fc.Result = res
	return ec.marshalORegionIssuedStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedStddevPopFields)
	fc.Result = res
	return ec.marshalORegionIssuedStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedStddevSampFields)
	fc.Result = res
	return ec.marshalORegionIssuedStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedSumFields)
	fc.Result = res
	return ec.marshalORegionIssuedSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedVarPopFields)
	fc.Result = res
	return ec.marshalORegionIssuedVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedVarSampFields)
	fc.Result = res
	return ec.marshalORegionIssuedVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionIssuedVarianceFields)
	fc.Result = res
	return ec.marshalORegionIssuedVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMaxFields_region_issued_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionIssuedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMaxFields_region_name(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMaxFields_imel(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMinFields_region_issued_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionIssuedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMinFields_region_name(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMinFields_imel(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Imel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RegionIssued)
	fc.Result = res
	return ec.marshalNRegionIssued2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionIssuedᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionIssuedVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionIssuedVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionIssuedVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_id(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_region_management_id(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionManagementID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_region_id(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_region_name(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_region_type(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_region_nature(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_alarm_begin_time(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmBeginTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_alarm_end_time(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_duration_(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_max_speed(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_circle_radius(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CircleRadius, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_region_coordinate(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_is_super_region(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuperRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagement_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.RegionManagement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementAggregateFields)
	fc.Result = res
	return ec.marshalORegionManagementAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementAvgFields)
	fc.Result = res
	return ec.marshalORegionManagementAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementMaxFields)
	fc.Result = res
	return ec.marshalORegionManagementMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementMinFields)
	fc.Result = res
	return ec.marshalORegionManagementMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementStddevFields)
	fc.Result = res
	return ec.marshalORegionManagementStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementStddevPopFields)
	fc.Result = res
	return ec.marshalORegionManagementStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementStddevSampFields)
	fc.Result = res
	return ec.marshalORegionManagementStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementSumFields)
	fc.Result = res
	return ec.marshalORegionManagementSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementVarPopFields)
	fc.Result = res
	return ec.marshalORegionManagementVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementVarSampFields)
	fc.Result = res
	return ec.marshalORegionManagementVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionManagementVarianceFields)
	fc.Result = res
	return ec.marshalORegionManagementVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAvgFields_duration_(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAvgFields_max_speed(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementAvgFields_circle_radius(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CircleRadius, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_region_management_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionManagementID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_region_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_region_name(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_region_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_region_nature(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_alarm_begin_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmBeginTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_alarm_end_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_duration_(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_max_speed(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_circle_radius(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CircleRadius, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_region_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_is_super_region(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuperRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_region_management_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionManagementID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_region_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_region_name(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_region_type(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_region_nature(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_alarm_begin_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmBeginTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_alarm_end_time(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_duration_(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_max_speed(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_circle_radius(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CircleRadius, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_region_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCoordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_is_super_region(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuperRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.RegionManagement)
	fc.Result = res
	return ec.marshalNRegionManagement2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionManagementᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevFields_duration_(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevFields_max_speed(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevFields_circle_radius(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CircleRadius, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevPopFields_duration_(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevPopFields_max_speed(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevPopFields_circle_radius(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CircleRadius, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevSampFields_duration_(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevSampFields_max_speed(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementStddevSampFields_circle_radius(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CircleRadius, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementSumFields_duration_(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementSumFields_max_speed(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementSumFields_circle_radius(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CircleRadius, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarPopFields_duration_(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarPopFields_max_speed(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarPopFields_circle_radius(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CircleRadius, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarSampFields_duration_(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarSampFields_max_speed(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarSampFields_circle_radius(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CircleRadius, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarianceFields_duration_(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarianceFields_max_speed(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionManagementVarianceFields_circle_radius(ctx context.Context, field graphql.CollectedField, obj *model.RegionManagementVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionManagementVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CircleRadius, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_vehicle_alarm_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmSupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_superivision_authority_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperivisionAuthorityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_superivision_type(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperivisionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_area_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_vehicle_alarm_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_disposal_times(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_alarm_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_district_rectification(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_city_rectification(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_province_rectification(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_country_rectification(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_registration_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_statistics_date(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatisticsDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_should_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_actual_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_supervision_rate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_business_scope(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_should_check_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldCheckVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_actual_check_vechicle_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualCheckVechicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_check_abnormal_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAbnormalVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_abnormal_disposal_number(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_abnormal_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervision_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionAvgFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionMaxFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionMinFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionStddevFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionSumFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmSupervisionVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmSupervisionVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_vehicle_alarm_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_disposal_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_alarm_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_should_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_actual_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_supervision_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_should_check_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldCheckVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_actual_check_vechicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualCheckVechicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_check_abnormal_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAbnormalVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_abnormal_disposal_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields_abnormal_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_vehicle_alarm_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmSupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_superivision_authority_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperivisionAuthorityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_superivision_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperivisionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_vehicle_alarm_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_disposal_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_alarm_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_district_rectification(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_city_rectification(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_province_rectification(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_country_rectification(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_statistics_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatisticsDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_should_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_actual_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_supervision_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_should_check_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldCheckVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_actual_check_vechicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualCheckVechicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_check_abnormal_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAbnormalVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_abnormal_disposal_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_abnormal_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_vehicle_alarm_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmSupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_superivision_authority_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperivisionAuthorityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_superivision_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperivisionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_area_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_vehicle_alarm_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_disposal_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_alarm_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_district_rectification(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_city_rectification(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_province_rectification(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_country_rectification(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryRectification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_registration_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_statistics_date(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatisticsDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_should_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_actual_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_supervision_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_should_check_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldCheckVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_actual_check_vechicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualCheckVechicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_check_abnormal_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAbnormalVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_abnormal_disposal_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_abnormal_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleAlarmSupervision)
	fc.Result = res
	return ec.marshalNVehicleAlarmSupervision2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmSupervisionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_vehicle_alarm_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_disposal_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_alarm_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_should_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_actual_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_supervision_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_should_check_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldCheckVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_actual_check_vechicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualCheckVechicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_check_abnormal_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAbnormalVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_abnormal_disposal_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields_abnormal_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_vehicle_alarm_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_disposal_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_alarm_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_should_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_actual_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_supervision_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_should_check_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldCheckVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_actual_check_vechicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualCheckVechicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_check_abnormal_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAbnormalVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_abnormal_disposal_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields_abnormal_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_vehicle_alarm_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_disposal_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_alarm_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_should_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_actual_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_supervision_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_should_check_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldCheckVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_actual_check_vechicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualCheckVechicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_check_abnormal_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAbnormalVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_abnormal_disposal_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields_abnormal_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_vehicle_alarm_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_disposal_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_alarm_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_should_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_actual_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_supervision_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_should_check_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldCheckVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_actual_check_vechicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualCheckVechicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_check_abnormal_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAbnormalVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_abnormal_disposal_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields_abnormal_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_vehicle_alarm_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_disposal_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_alarm_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_should_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_actual_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_supervision_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_should_check_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldCheckVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_actual_check_vechicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualCheckVechicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_check_abnormal_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAbnormalVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_abnormal_disposal_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields_abnormal_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_vehicle_alarm_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_disposal_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_alarm_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_should_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_actual_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_supervision_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_should_check_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldCheckVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_actual_check_vechicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualCheckVechicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_check_abnormal_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAbnormalVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_abnormal_disposal_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields_abnormal_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_vehicle_alarm_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_disposal_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_alarm_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_should_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_actual_supervision_enterprise_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSupervisionEnterpriseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_supervision_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_should_check_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShouldCheckVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_actual_check_vechicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualCheckVechicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_check_abnormal_vehicle_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckAbnormalVehicleNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_abnormal_disposal_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields_abnormal_disposal_rate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmSupervisionVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbnormalDisposalRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalONumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_vehicle_alarm_times_record_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmTimesRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_disposal_measure(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_disposal_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_is_disposal(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDisposal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_duty_person(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DutyPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_remarks(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_record_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecord_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleAlarmTimesRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordAvgFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordMaxFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordMinFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordStddevFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordSumFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleAlarmTimesRecordVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleAlarmTimesRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordAvgFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_vehicle_alarm_times_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmTimesRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_disposal_measure(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_disposal_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_is_disposal(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDisposal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_duty_person(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DutyPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_record_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_vehicle_alarm_times_record_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleAlarmTimesRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_alarm_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_disposal_measure(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_disposal_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_is_disposal(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDisposal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_duty_person(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DutyPerson, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_alarm_times(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlarmTimes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_record_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleAlarmTimesRecord)
	fc.Result = res
	return ec.marshalNVehicleAlarmTimesRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmTimesRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordStddevFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordStddevPopFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordStddevSampFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordSumFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordVarPopFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordVarSampFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleAlarmTimesRecordVarianceFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleAlarmTimesRecordVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleAlarmTimesRecordVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNBigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_vehicle_offline_disposal_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleOfflineDisposalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_telephone(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_content(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_send_time(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_user_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_is_sms_push(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSmsPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_is_report(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_is_voice_notification(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVoiceNotification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_is_app_push(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAppPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_notification_content(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_voice_content(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoiceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_created_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_created_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_updated_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_updated_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposal_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model1.VehicleOfflineDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalAggregateFields)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalAvgFields)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalMaxFields)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalMinFields)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalStddevFields)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalStddevPopFields)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalStddevSampFields)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalSumFields)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalVarPopFields)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalVarSampFields)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAggregateFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleOfflineDisposalVarianceFields)
	fc.Result = res
	return ec.marshalOVehicleOfflineDisposalVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalAvgFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalAvgFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_vehicle_offline_disposal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleOfflineDisposalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_send_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_is_sms_push(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSmsPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_is_report(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_is_voice_notification(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVoiceNotification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_is_app_push(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAppPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_notification_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_voice_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoiceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMaxFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_vehicle_offline_disposal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleOfflineDisposalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_send_time(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_user_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_is_sms_push(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSmsPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_is_report(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_is_voice_notification(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVoiceNotification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_is_app_push(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAppPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_notification_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_voice_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoiceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_is_deleted(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMinFields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMinFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMutationResponse_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalMutationResponse_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalMutationResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model1.VehicleOfflineDisposal)
	fc.Result = res
	return ec.marshalNVehicleOfflineDisposal2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleOfflineDisposalᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalStddevFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalStddevFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalStddevPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalStddevPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalStddevSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalStddevSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalSumFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalSumFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalVarPopFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalVarPopFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalVarSampFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalVarSampFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _VehicleOfflineDisposalVarianceFields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleOfflineDisposalVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VehicleOfflineDisposalVarianceFields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOBigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBigintComparisonExp(ctx context.Context, obj interface{}) (model2.BigintComparisonExp, error) {
	var it model2.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanComparisonExp(ctx context.Context, obj interface{}) (model2.BooleanComparisonExp, error) {
	var it model2.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSpotCheckDisposalBoolExp(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalBoolExp, error) {
	var it model.DynamicSpotCheckDisposalBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODynamicSpotCheckDisposalBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODynamicSpotCheckDisposalBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODynamicSpotCheckDisposalBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_abnormal_handing_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_abnormal_handing_measure"))
			it.ImageAbnormalHandingMeasure, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_disposal_measure"))
			it.TachographDataDisposalMeasure, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_content"))
			it.DisposalContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSpotCheckDisposalIncInput(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalIncInput, error) {
	var it model.DynamicSpotCheckDisposalIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSpotCheckDisposalInsertInput(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalInsertInput, error) {
	var it model.DynamicSpotCheckDisposalInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_abnormal_handing_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_abnormal_handing_measure"))
			it.ImageAbnormalHandingMeasure, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_disposal_measure"))
			it.TachographDataDisposalMeasure, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_content"))
			it.DisposalContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSpotCheckDisposalOrderBy(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalOrderBy, error) {
	var it model.DynamicSpotCheckDisposalOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_abnormal_handing_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_abnormal_handing_measure"))
			it.ImageAbnormalHandingMeasure, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_disposal_measure"))
			it.TachographDataDisposalMeasure, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_content"))
			it.DisposalContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSpotCheckDisposalSetInput(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalSetInput, error) {
	var it model.DynamicSpotCheckDisposalSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_abnormal_handing_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_abnormal_handing_measure"))
			it.ImageAbnormalHandingMeasure, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_disposal_measure"))
			it.TachographDataDisposalMeasure, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_content"))
			it.DisposalContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSupervisionBoolExp(ctx context.Context, obj interface{}) (model.DynamicSupervisionBoolExp, error) {
	var it model.DynamicSupervisionBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODynamicSupervisionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODynamicSupervisionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODynamicSupervisionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_date"))
			it.SpotCheckDate, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSupervisionDetailBoolExp(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailBoolExp, error) {
	var it model.DynamicSupervisionDetailBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalODynamicSupervisionDetailBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalODynamicSupervisionDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalODynamicSupervisionDetailBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_time"))
			it.MonitoringTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_location"))
			it.MonitoringLocation, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_tachograph_record_normal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_tachograph_record_normal"))
			it.IsTachographRecordNormal, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_exception":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_exception"))
			it.TachographDataException, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_speeding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_speeding"))
			it.IsSpeeding, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fatigue_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fatigue_driving"))
			it.IsFatigueDriving, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_morning_outage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_morning_outage"))
			it.IsMorningOutage, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_infraction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_infraction"))
			it.OtherInfraction, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures"))
			it.DisposalMeasures, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results"))
			it.DisposalResults, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "treatment_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treatment_time"))
			it.TreatmentTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "others":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("others"))
			it.Others, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_on"))
			it.LensOn, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitor_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitor_end_time"))
			it.MonitorEndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude_longitude_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude_longitude_description"))
			it.LatitudeLongitudeDescription, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_alarm_time"))
			it.OutageAlarmTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_alarm_time"))
			it.SpeedAlarmTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speeding_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speeding_speed"))
			it.SpeedingSpeed, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_alarm_time"))
			it.FatigueAlarmTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures1"))
			it.DisposalMeasures1, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures2"))
			it.DisposalMeasures2, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures3"))
			it.DisposalMeasures3, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures4"))
			it.DisposalMeasures4, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures5"))
			it.DisposalMeasures5, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures6"))
			it.DisposalMeasures6, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures7"))
			it.DisposalMeasures7, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results1"))
			it.DisposalResults1, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results2"))
			it.DisposalResults2, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results3"))
			it.DisposalResults3, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results4"))
			it.DisposalResults4, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results5"))
			it.DisposalResults5, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results6"))
			it.DisposalResults6, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results7"))
			it.DisposalResults7, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSupervisionDetailIncInput(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailIncInput, error) {
	var it model.DynamicSupervisionDetailIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSupervisionDetailInsertInput(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailInsertInput, error) {
	var it model.DynamicSupervisionDetailInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_time"))
			it.MonitoringTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_location"))
			it.MonitoringLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_tachograph_record_normal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_tachograph_record_normal"))
			it.IsTachographRecordNormal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_exception":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_exception"))
			it.TachographDataException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_speeding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_speeding"))
			it.IsSpeeding, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fatigue_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fatigue_driving"))
			it.IsFatigueDriving, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_morning_outage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_morning_outage"))
			it.IsMorningOutage, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_infraction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_infraction"))
			it.OtherInfraction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures"))
			it.DisposalMeasures, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results"))
			it.DisposalResults, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "treatment_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treatment_time"))
			it.TreatmentTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "others":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("others"))
			it.Others, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_on"))
			it.LensOn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitor_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitor_end_time"))
			it.MonitorEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude_longitude_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude_longitude_description"))
			it.LatitudeLongitudeDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_alarm_time"))
			it.OutageAlarmTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_alarm_time"))
			it.SpeedAlarmTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "speeding_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speeding_speed"))
			it.SpeedingSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_alarm_time"))
			it.FatigueAlarmTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures1"))
			it.DisposalMeasures1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures2"))
			it.DisposalMeasures2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures3"))
			it.DisposalMeasures3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures4"))
			it.DisposalMeasures4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures5"))
			it.DisposalMeasures5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures6"))
			it.DisposalMeasures6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures7"))
			it.DisposalMeasures7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results1"))
			it.DisposalResults1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results2"))
			it.DisposalResults2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results3"))
			it.DisposalResults3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results4"))
			it.DisposalResults4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results5"))
			it.DisposalResults5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results6"))
			it.DisposalResults6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results7"))
			it.DisposalResults7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSupervisionDetailOrderBy(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailOrderBy, error) {
	var it model.DynamicSupervisionDetailOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_time"))
			it.MonitoringTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_location"))
			it.MonitoringLocation, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_tachograph_record_normal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_tachograph_record_normal"))
			it.IsTachographRecordNormal, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_exception":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_exception"))
			it.TachographDataException, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_speeding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_speeding"))
			it.IsSpeeding, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fatigue_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fatigue_driving"))
			it.IsFatigueDriving, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_morning_outage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_morning_outage"))
			it.IsMorningOutage, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_infraction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_infraction"))
			it.OtherInfraction, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures"))
			it.DisposalMeasures, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results"))
			it.DisposalResults, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "treatment_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treatment_time"))
			it.TreatmentTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "others":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("others"))
			it.Others, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_on"))
			it.LensOn, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitor_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitor_end_time"))
			it.MonitorEndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude_longitude_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude_longitude_description"))
			it.LatitudeLongitudeDescription, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_alarm_time"))
			it.OutageAlarmTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_alarm_time"))
			it.SpeedAlarmTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speeding_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speeding_speed"))
			it.SpeedingSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_alarm_time"))
			it.FatigueAlarmTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures1"))
			it.DisposalMeasures1, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures2"))
			it.DisposalMeasures2, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures3"))
			it.DisposalMeasures3, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures4"))
			it.DisposalMeasures4, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures5"))
			it.DisposalMeasures5, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures6"))
			it.DisposalMeasures6, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures7"))
			it.DisposalMeasures7, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results1"))
			it.DisposalResults1, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results2"))
			it.DisposalResults2, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results3"))
			it.DisposalResults3, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results4"))
			it.DisposalResults4, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results5"))
			it.DisposalResults5, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results6"))
			it.DisposalResults6, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results7"))
			it.DisposalResults7, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSupervisionDetailSetInput(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailSetInput, error) {
	var it model.DynamicSupervisionDetailSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_time"))
			it.MonitoringTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_location"))
			it.MonitoringLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_tachograph_record_normal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_tachograph_record_normal"))
			it.IsTachographRecordNormal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_exception":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_exception"))
			it.TachographDataException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gps_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gps_speed"))
			it.GpsSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_speeding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_speeding"))
			it.IsSpeeding, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fatigue_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fatigue_driving"))
			it.IsFatigueDriving, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_morning_outage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_morning_outage"))
			it.IsMorningOutage, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_infraction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_infraction"))
			it.OtherInfraction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures"))
			it.DisposalMeasures, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results"))
			it.DisposalResults, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "treatment_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treatment_time"))
			it.TreatmentTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "others":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("others"))
			it.Others, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_on"))
			it.LensOn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitor_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitor_end_time"))
			it.MonitorEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude_longitude_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude_longitude_description"))
			it.LatitudeLongitudeDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_alarm_time"))
			it.OutageAlarmTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_alarm_time"))
			it.SpeedAlarmTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "speeding_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speeding_speed"))
			it.SpeedingSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_alarm_time"))
			it.FatigueAlarmTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures1"))
			it.DisposalMeasures1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures2"))
			it.DisposalMeasures2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures3"))
			it.DisposalMeasures3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures4"))
			it.DisposalMeasures4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures5"))
			it.DisposalMeasures5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures6"))
			it.DisposalMeasures6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures7"))
			it.DisposalMeasures7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results1"))
			it.DisposalResults1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results2"))
			it.DisposalResults2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results3"))
			it.DisposalResults3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results4"))
			it.DisposalResults4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results5"))
			it.DisposalResults5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results6"))
			it.DisposalResults6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results7"))
			it.DisposalResults7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSupervisionIncInput(ctx context.Context, obj interface{}) (model.DynamicSupervisionIncInput, error) {
	var it model.DynamicSupervisionIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSupervisionInsertInput(ctx context.Context, obj interface{}) (model.DynamicSupervisionInsertInput, error) {
	var it model.DynamicSupervisionInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "spot_check_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_date"))
			it.SpotCheckDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSupervisionOrderBy(ctx context.Context, obj interface{}) (model.DynamicSupervisionOrderBy, error) {
	var it model.DynamicSupervisionOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_date"))
			it.SpotCheckDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDynamicSupervisionSetInput(ctx context.Context, obj interface{}) (model.DynamicSupervisionSetInput, error) {
	var it model.DynamicSupervisionSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_date"))
			it.SpotCheckDate, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatComparisonExp(ctx context.Context, obj interface{}) (model1.FloatComparisonExp, error) {
	var it model1.FloatComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntComparisonExp(ctx context.Context, obj interface{}) (model2.IntComparisonExp, error) {
	var it model2.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJsonbComparisonExp(ctx context.Context, obj interface{}) (model2.JsonbComparisonExp, error) {
	var it model2.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOJsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOJsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckOnlineBoolExp(ctx context.Context, obj interface{}) (model.MuckTruckOnlineBoolExp, error) {
	var it model.MuckTruckOnlineBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOMuckTruckOnlineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOMuckTruckOnlineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOMuckTruckOnlineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_online_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_online_id"))
			it.MuckTruckOnlineID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pay":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pay"))
			it.IsPay, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_gps_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_gps_online"))
			it.IsGpsOnline, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_catalog_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_catalog_library"))
			it.IsCatalogLibrary, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_vehicle_pass_inspection":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_vehicle_pass_inspection"))
			it.IsVehiclePassInspection, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_new_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_new_vehicle"))
			it.IsNewVehicle, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_time"))
			it.LocationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_number"))
			it.SelfNumber, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckOnlineIncInput(ctx context.Context, obj interface{}) (model.MuckTruckOnlineIncInput, error) {
	var it model.MuckTruckOnlineIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckOnlineInsertInput(ctx context.Context, obj interface{}) (model.MuckTruckOnlineInsertInput, error) {
	var it model.MuckTruckOnlineInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pay":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pay"))
			it.IsPay, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_gps_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_gps_online"))
			it.IsGpsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_catalog_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_catalog_library"))
			it.IsCatalogLibrary, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_vehicle_pass_inspection":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_vehicle_pass_inspection"))
			it.IsVehiclePassInspection, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_new_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_new_vehicle"))
			it.IsNewVehicle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_time"))
			it.LocationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_number"))
			it.SelfNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckOnlineOrderBy(ctx context.Context, obj interface{}) (model.MuckTruckOnlineOrderBy, error) {
	var it model.MuckTruckOnlineOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_online_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_online_id"))
			it.MuckTruckOnlineID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pay":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pay"))
			it.IsPay, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_gps_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_gps_online"))
			it.IsGpsOnline, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_catalog_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_catalog_library"))
			it.IsCatalogLibrary, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_vehicle_pass_inspection":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_vehicle_pass_inspection"))
			it.IsVehiclePassInspection, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_new_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_new_vehicle"))
			it.IsNewVehicle, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_time"))
			it.LocationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_number"))
			it.SelfNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMuckTruckOnlineSetInput(ctx context.Context, obj interface{}) (model.MuckTruckOnlineSetInput, error) {
	var it model.MuckTruckOnlineSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_online_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_online_id"))
			it.MuckTruckOnlineID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_pay":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_pay"))
			it.IsPay, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_gps_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_gps_online"))
			it.IsGpsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_catalog_library":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_catalog_library"))
			it.IsCatalogLibrary, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_install":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_install"))
			it.IsInstall, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_vehicle_pass_inspection":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_vehicle_pass_inspection"))
			it.IsVehiclePassInspection, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_new_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_new_vehicle"))
			it.IsNewVehicle, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "location_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location_time"))
			it.LocationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "self_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("self_number"))
			it.SelfNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNumericComparisonExp(ctx context.Context, obj interface{}) (model2.NumericComparisonExp, error) {
	var it model2.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalONumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPointComparisonExp(ctx context.Context, obj interface{}) (model2.PointComparisonExp, error) {
	var it model2.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOPoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionIssuedBoolExp(ctx context.Context, obj interface{}) (model.RegionIssuedBoolExp, error) {
	var it model.RegionIssuedBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalORegionIssuedBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalORegionIssuedBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalORegionIssuedBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_issued_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_issued_id"))
			it.RegionIssuedID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_name"))
			it.RegionName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionIssuedIncInput(ctx context.Context, obj interface{}) (model.RegionIssuedIncInput, error) {
	var it model.RegionIssuedIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionIssuedInsertInput(ctx context.Context, obj interface{}) (model.RegionIssuedInsertInput, error) {
	var it model.RegionIssuedInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "region_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_name"))
			it.RegionName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionIssuedOrderBy(ctx context.Context, obj interface{}) (model.RegionIssuedOrderBy, error) {
	var it model.RegionIssuedOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_issued_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_issued_id"))
			it.RegionIssuedID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_name"))
			it.RegionName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionIssuedSetInput(ctx context.Context, obj interface{}) (model.RegionIssuedSetInput, error) {
	var it model.RegionIssuedSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_issued_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_issued_id"))
			it.RegionIssuedID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_name"))
			it.RegionName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imel"))
			it.Imel, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionManagementBoolExp(ctx context.Context, obj interface{}) (model.RegionManagementBoolExp, error) {
	var it model.RegionManagementBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalORegionManagementBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalORegionManagementBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalORegionManagementBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_management_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_management_id"))
			it.RegionManagementID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_id"))
			it.RegionID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_name"))
			it.RegionName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_type"))
			it.RegionType, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_nature"))
			it.RegionNature, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_begin_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_begin_time"))
			it.AlarmBeginTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration_"))
			it.Duration, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "max_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_speed"))
			it.MaxSpeed, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "circle_radius":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("circle_radius"))
			it.CircleRadius, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_coordinate"))
			it.RegionCoordinate, err = ec.unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_super_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_super_region"))
			it.IsSuperRegion, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionManagementIncInput(ctx context.Context, obj interface{}) (model.RegionManagementIncInput, error) {
	var it model.RegionManagementIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration_"))
			it.Duration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "max_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_speed"))
			it.MaxSpeed, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "circle_radius":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("circle_radius"))
			it.CircleRadius, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionManagementInsertInput(ctx context.Context, obj interface{}) (model.RegionManagementInsertInput, error) {
	var it model.RegionManagementInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "region_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_id"))
			it.RegionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_name"))
			it.RegionName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_type"))
			it.RegionType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_nature"))
			it.RegionNature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_begin_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_begin_time"))
			it.AlarmBeginTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration_"))
			it.Duration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "max_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_speed"))
			it.MaxSpeed, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "circle_radius":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("circle_radius"))
			it.CircleRadius, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_coordinate"))
			it.RegionCoordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_super_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_super_region"))
			it.IsSuperRegion, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionManagementOrderBy(ctx context.Context, obj interface{}) (model.RegionManagementOrderBy, error) {
	var it model.RegionManagementOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_management_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_management_id"))
			it.RegionManagementID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_id"))
			it.RegionID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_name"))
			it.RegionName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_type"))
			it.RegionType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_nature"))
			it.RegionNature, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_begin_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_begin_time"))
			it.AlarmBeginTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration_"))
			it.Duration, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_speed"))
			it.MaxSpeed, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "circle_radius":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("circle_radius"))
			it.CircleRadius, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_coordinate"))
			it.RegionCoordinate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_super_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_super_region"))
			it.IsSuperRegion, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionManagementSetInput(ctx context.Context, obj interface{}) (model.RegionManagementSetInput, error) {
	var it model.RegionManagementSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_management_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_management_id"))
			it.RegionManagementID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_id"))
			it.RegionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_name"))
			it.RegionName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_type"))
			it.RegionType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_nature"))
			it.RegionNature, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_begin_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_begin_time"))
			it.AlarmBeginTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_end_time"))
			it.AlarmEndTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration_":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration_"))
			it.Duration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "max_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max_speed"))
			it.MaxSpeed, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "circle_radius":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("circle_radius"))
			it.CircleRadius, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "region_coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region_coordinate"))
			it.RegionCoordinate, err = ec.unmarshalOPoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_super_region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_super_region"))
			it.IsSuperRegion, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringComparisonExp(ctx context.Context, obj interface{}) (model2.StringComparisonExp, error) {
	var it model2.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimestamptzComparisonExp(ctx context.Context, obj interface{}) (model2.TimestamptzComparisonExp, error) {
	var it model2.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmSupervisionBoolExp(ctx context.Context, obj interface{}) (model.VehicleAlarmSupervisionBoolExp, error) {
	var it model.VehicleAlarmSupervisionBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleAlarmSupervisionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleAlarmSupervisionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleAlarmSupervisionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_supervision_id"))
			it.VehicleAlarmSupervisionID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "superivision_authority_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superivision_authority_id"))
			it.SuperivisionAuthorityID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "superivision_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superivision_type"))
			it.SuperivisionType, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_number"))
			it.VehicleAlarmNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_times"))
			it.AlarmTimes, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_times"))
			it.DisposalTimes, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_disposal_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_disposal_rate"))
			it.AlarmDisposalRate, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_rectification"))
			it.DistrictRectification, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_rectification"))
			it.CityRectification, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_rectification"))
			it.ProvinceRectification, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_rectification"))
			it.CountryRectification, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "statistics_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statistics_date"))
			it.StatisticsDate, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "should_supervision_enterprise_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("should_supervision_enterprise_number"))
			it.ShouldSupervisionEnterpriseNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_supervision_enterprise_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_supervision_enterprise_number"))
			it.ActualSupervisionEnterpriseNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_rate"))
			it.SupervisionRate, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "should_check_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("should_check_vehicle_number"))
			it.ShouldCheckVehicleNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_check_vechicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_check_vechicle_number"))
			it.ActualCheckVechicleNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_abnormal_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_abnormal_vehicle_number"))
			it.CheckAbnormalVehicleNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "abnormal_disposal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abnormal_disposal_number"))
			it.AbnormalDisposalNumber, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "abnormal_disposal_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abnormal_disposal_rate"))
			it.AbnormalDisposalRate, err = ec.unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmSupervisionIncInput(ctx context.Context, obj interface{}) (model.VehicleAlarmSupervisionIncInput, error) {
	var it model.VehicleAlarmSupervisionIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_number"))
			it.VehicleAlarmNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_times"))
			it.AlarmTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_times"))
			it.DisposalTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_disposal_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_disposal_rate"))
			it.AlarmDisposalRate, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "should_supervision_enterprise_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("should_supervision_enterprise_number"))
			it.ShouldSupervisionEnterpriseNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_supervision_enterprise_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_supervision_enterprise_number"))
			it.ActualSupervisionEnterpriseNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_rate"))
			it.SupervisionRate, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "should_check_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("should_check_vehicle_number"))
			it.ShouldCheckVehicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_check_vechicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_check_vechicle_number"))
			it.ActualCheckVechicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_abnormal_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_abnormal_vehicle_number"))
			it.CheckAbnormalVehicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "abnormal_disposal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abnormal_disposal_number"))
			it.AbnormalDisposalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "abnormal_disposal_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abnormal_disposal_rate"))
			it.AbnormalDisposalRate, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmSupervisionInsertInput(ctx context.Context, obj interface{}) (model.VehicleAlarmSupervisionInsertInput, error) {
	var it model.VehicleAlarmSupervisionInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "superivision_authority_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superivision_authority_id"))
			it.SuperivisionAuthorityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "superivision_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superivision_type"))
			it.SuperivisionType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_number"))
			it.VehicleAlarmNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_times"))
			it.AlarmTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_times"))
			it.DisposalTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_disposal_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_disposal_rate"))
			it.AlarmDisposalRate, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_rectification"))
			it.DistrictRectification, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_rectification"))
			it.CityRectification, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_rectification"))
			it.ProvinceRectification, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_rectification"))
			it.CountryRectification, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "statistics_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statistics_date"))
			it.StatisticsDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "should_supervision_enterprise_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("should_supervision_enterprise_number"))
			it.ShouldSupervisionEnterpriseNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_supervision_enterprise_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_supervision_enterprise_number"))
			it.ActualSupervisionEnterpriseNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_rate"))
			it.SupervisionRate, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "should_check_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("should_check_vehicle_number"))
			it.ShouldCheckVehicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_check_vechicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_check_vechicle_number"))
			it.ActualCheckVechicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_abnormal_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_abnormal_vehicle_number"))
			it.CheckAbnormalVehicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "abnormal_disposal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abnormal_disposal_number"))
			it.AbnormalDisposalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "abnormal_disposal_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abnormal_disposal_rate"))
			it.AbnormalDisposalRate, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmSupervisionOrderBy(ctx context.Context, obj interface{}) (model.VehicleAlarmSupervisionOrderBy, error) {
	var it model.VehicleAlarmSupervisionOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_supervision_id"))
			it.VehicleAlarmSupervisionID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superivision_authority_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superivision_authority_id"))
			it.SuperivisionAuthorityID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "superivision_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superivision_type"))
			it.SuperivisionType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_number"))
			it.VehicleAlarmNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_times"))
			it.AlarmTimes, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_times"))
			it.DisposalTimes, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_disposal_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_disposal_rate"))
			it.AlarmDisposalRate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_rectification"))
			it.DistrictRectification, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_rectification"))
			it.CityRectification, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_rectification"))
			it.ProvinceRectification, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_rectification"))
			it.CountryRectification, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "statistics_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statistics_date"))
			it.StatisticsDate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "should_supervision_enterprise_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("should_supervision_enterprise_number"))
			it.ShouldSupervisionEnterpriseNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_supervision_enterprise_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_supervision_enterprise_number"))
			it.ActualSupervisionEnterpriseNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_rate"))
			it.SupervisionRate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "should_check_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("should_check_vehicle_number"))
			it.ShouldCheckVehicleNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_check_vechicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_check_vechicle_number"))
			it.ActualCheckVechicleNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_abnormal_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_abnormal_vehicle_number"))
			it.CheckAbnormalVehicleNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "abnormal_disposal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abnormal_disposal_number"))
			it.AbnormalDisposalNumber, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "abnormal_disposal_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abnormal_disposal_rate"))
			it.AbnormalDisposalRate, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmSupervisionSetInput(ctx context.Context, obj interface{}) (model.VehicleAlarmSupervisionSetInput, error) {
	var it model.VehicleAlarmSupervisionSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_supervision_id"))
			it.VehicleAlarmSupervisionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "superivision_authority_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superivision_authority_id"))
			it.SuperivisionAuthorityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "superivision_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superivision_type"))
			it.SuperivisionType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area_id"))
			it.AreaID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_number"))
			it.VehicleAlarmNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_times"))
			it.AlarmTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_times"))
			it.DisposalTimes, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_disposal_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_disposal_rate"))
			it.AlarmDisposalRate, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_rectification"))
			it.DistrictRectification, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_rectification"))
			it.CityRectification, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_rectification"))
			it.ProvinceRectification, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country_rectification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country_rectification"))
			it.CountryRectification, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registration_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registration_time"))
			it.RegistrationTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "statistics_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statistics_date"))
			it.StatisticsDate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "should_supervision_enterprise_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("should_supervision_enterprise_number"))
			it.ShouldSupervisionEnterpriseNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_supervision_enterprise_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_supervision_enterprise_number"))
			it.ActualSupervisionEnterpriseNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_rate"))
			it.SupervisionRate, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "should_check_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("should_check_vehicle_number"))
			it.ShouldCheckVehicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "actual_check_vechicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actual_check_vechicle_number"))
			it.ActualCheckVechicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_abnormal_vehicle_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_abnormal_vehicle_number"))
			it.CheckAbnormalVehicleNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "abnormal_disposal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abnormal_disposal_number"))
			it.AbnormalDisposalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "abnormal_disposal_rate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("abnormal_disposal_rate"))
			it.AbnormalDisposalRate, err = ec.unmarshalONumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmTimesRecordBoolExp(ctx context.Context, obj interface{}) (model.VehicleAlarmTimesRecordBoolExp, error) {
	var it model.VehicleAlarmTimesRecordBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleAlarmTimesRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleAlarmTimesRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleAlarmTimesRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_times_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_times_record_id"))
			it.VehicleAlarmTimesRecordID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measure"))
			it.DisposalMeasure, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_time"))
			it.DisposalTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_disposal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_disposal"))
			it.IsDisposal, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "duty_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duty_person"))
			it.DutyPerson, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_times"))
			it.AlarmTimes, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmTimesRecordIncInput(ctx context.Context, obj interface{}) (model.VehicleAlarmTimesRecordIncInput, error) {
	var it model.VehicleAlarmTimesRecordIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmTimesRecordInsertInput(ctx context.Context, obj interface{}) (model.VehicleAlarmTimesRecordInsertInput, error) {
	var it model.VehicleAlarmTimesRecordInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measure"))
			it.DisposalMeasure, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_time"))
			it.DisposalTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_disposal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_disposal"))
			it.IsDisposal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "duty_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duty_person"))
			it.DutyPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_times"))
			it.AlarmTimes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmTimesRecordOrderBy(ctx context.Context, obj interface{}) (model.VehicleAlarmTimesRecordOrderBy, error) {
	var it model.VehicleAlarmTimesRecordOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_times_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_times_record_id"))
			it.VehicleAlarmTimesRecordID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measure"))
			it.DisposalMeasure, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_time"))
			it.DisposalTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_disposal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_disposal"))
			it.IsDisposal, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "duty_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duty_person"))
			it.DutyPerson, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_times"))
			it.AlarmTimes, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleAlarmTimesRecordSetInput(ctx context.Context, obj interface{}) (model.VehicleAlarmTimesRecordSetInput, error) {
	var it model.VehicleAlarmTimesRecordSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_alarm_times_record_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_alarm_times_record_id"))
			it.VehicleAlarmTimesRecordID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_type"))
			it.AlarmType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measure"))
			it.DisposalMeasure, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_time"))
			it.DisposalTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_disposal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_disposal"))
			it.IsDisposal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "duty_person":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duty_person"))
			it.DutyPerson, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "alarm_times":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("alarm_times"))
			it.AlarmTimes, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "record_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("record_time"))
			it.RecordTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleOfflineDisposalBoolExp(ctx context.Context, obj interface{}) (model.VehicleOfflineDisposalBoolExp, error) {
	var it model.VehicleOfflineDisposalBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOVehicleOfflineDisposalBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOVehicleOfflineDisposalBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOVehicleOfflineDisposalBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_offline_disposal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_offline_disposal_id"))
			it.VehicleOfflineDisposalID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_report":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_report"))
			it.IsReport, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_voice_notification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_voice_notification"))
			it.IsVoiceNotification, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "notification_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification_content"))
			it.NotificationContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "voice_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("voice_content"))
			it.VoiceContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleOfflineDisposalIncInput(ctx context.Context, obj interface{}) (model.VehicleOfflineDisposalIncInput, error) {
	var it model.VehicleOfflineDisposalIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleOfflineDisposalInsertInput(ctx context.Context, obj interface{}) (model.VehicleOfflineDisposalInsertInput, error) {
	var it model.VehicleOfflineDisposalInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_report":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_report"))
			it.IsReport, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_voice_notification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_voice_notification"))
			it.IsVoiceNotification, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notification_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification_content"))
			it.NotificationContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "voice_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("voice_content"))
			it.VoiceContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleOfflineDisposalOrderBy(ctx context.Context, obj interface{}) (model.VehicleOfflineDisposalOrderBy, error) {
	var it model.VehicleOfflineDisposalOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_offline_disposal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_offline_disposal_id"))
			it.VehicleOfflineDisposalID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_report":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_report"))
			it.IsReport, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_voice_notification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_voice_notification"))
			it.IsVoiceNotification, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notification_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification_content"))
			it.NotificationContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "voice_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("voice_content"))
			it.VoiceContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVehicleOfflineDisposalSetInput(ctx context.Context, obj interface{}) (model.VehicleOfflineDisposalSetInput, error) {
	var it model.VehicleOfflineDisposalSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOBigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_offline_disposal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_offline_disposal_id"))
			it.VehicleOfflineDisposalID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_report":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_report"))
			it.IsReport, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_voice_notification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_voice_notification"))
			it.IsVoiceNotification, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notification_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification_content"))
			it.NotificationContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "voice_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("voice_content"))
			it.VoiceContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_deleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_deleted"))
			it.IsDeleted, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOTimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var dynamicSpotCheckDisposalImplementors = []string{"DynamicSpotCheckDisposal"}

func (ec *executionContext) _DynamicSpotCheckDisposal(ctx context.Context, sel ast.SelectionSet, obj *model1.DynamicSpotCheckDisposal) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposal")
		case "id":
			out.Values[i] = ec._DynamicSpotCheckDisposal_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._DynamicSpotCheckDisposal_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._DynamicSpotCheckDisposal_enterprise_id(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._DynamicSpotCheckDisposal_telephone(ctx, field, obj)
		case "send_time":
			out.Values[i] = ec._DynamicSpotCheckDisposal_send_time(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._DynamicSpotCheckDisposal_supervision_detail_id(ctx, field, obj)
		case "image_abnormal_handing_measure":
			out.Values[i] = ec._DynamicSpotCheckDisposal_image_abnormal_handing_measure(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._DynamicSpotCheckDisposal_feedback_time(ctx, field, obj)
		case "tachograph_data_disposal_measure":
			out.Values[i] = ec._DynamicSpotCheckDisposal_tachograph_data_disposal_measure(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._DynamicSpotCheckDisposal_operation_user(ctx, field, obj)
		case "is_sms_push":
			out.Values[i] = ec._DynamicSpotCheckDisposal_is_sms_push(ctx, field, obj)
		case "is_notify":
			out.Values[i] = ec._DynamicSpotCheckDisposal_is_notify(ctx, field, obj)
		case "is_announce":
			out.Values[i] = ec._DynamicSpotCheckDisposal_is_announce(ctx, field, obj)
		case "is_app_push":
			out.Values[i] = ec._DynamicSpotCheckDisposal_is_app_push(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._DynamicSpotCheckDisposal_notify_content(ctx, field, obj)
		case "announce_content":
			out.Values[i] = ec._DynamicSpotCheckDisposal_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._DynamicSpotCheckDisposal_app_push_content(ctx, field, obj)
		case "disposal_content":
			out.Values[i] = ec._DynamicSpotCheckDisposal_disposal_content(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._DynamicSpotCheckDisposal_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._DynamicSpotCheckDisposal_disposal_result(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DynamicSpotCheckDisposal_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DynamicSpotCheckDisposal_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DynamicSpotCheckDisposal_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DynamicSpotCheckDisposal_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DynamicSpotCheckDisposal_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DynamicSpotCheckDisposal_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DynamicSpotCheckDisposal_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalAggregateImplementors = []string{"DynamicSpotCheckDisposalAggregate"}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalAggregate")
		case "aggregate":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalAggregateFieldsImplementors = []string{"DynamicSpotCheckDisposalAggregateFields"}

func (ec *executionContext) _DynamicSpotCheckDisposalAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalAggregateFields")
		case "avg":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DynamicSpotCheckDisposalAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalAvgFieldsImplementors = []string{"DynamicSpotCheckDisposalAvgFields"}

func (ec *executionContext) _DynamicSpotCheckDisposalAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalAvgFields")
		case "id":
			out.Values[i] = ec._DynamicSpotCheckDisposalAvgFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._DynamicSpotCheckDisposalAvgFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalMaxFieldsImplementors = []string{"DynamicSpotCheckDisposalMaxFields"}

func (ec *executionContext) _DynamicSpotCheckDisposalMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalMaxFields")
		case "id":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_vehicle_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_enterprise_id(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_telephone(ctx, field, obj)
		case "send_time":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_send_time(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_supervision_detail_id(ctx, field, obj)
		case "image_abnormal_handing_measure":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_image_abnormal_handing_measure(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_feedback_time(ctx, field, obj)
		case "tachograph_data_disposal_measure":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_tachograph_data_disposal_measure(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_operation_user(ctx, field, obj)
		case "is_sms_push":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_is_sms_push(ctx, field, obj)
		case "is_notify":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_is_notify(ctx, field, obj)
		case "is_announce":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_is_announce(ctx, field, obj)
		case "is_app_push":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_is_app_push(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_notify_content(ctx, field, obj)
		case "announce_content":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_app_push_content(ctx, field, obj)
		case "disposal_content":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_disposal_content(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_disposal_result(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DynamicSpotCheckDisposalMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalMinFieldsImplementors = []string{"DynamicSpotCheckDisposalMinFields"}

func (ec *executionContext) _DynamicSpotCheckDisposalMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalMinFields")
		case "id":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_vehicle_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_enterprise_id(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_telephone(ctx, field, obj)
		case "send_time":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_send_time(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_supervision_detail_id(ctx, field, obj)
		case "image_abnormal_handing_measure":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_image_abnormal_handing_measure(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_feedback_time(ctx, field, obj)
		case "tachograph_data_disposal_measure":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_tachograph_data_disposal_measure(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_operation_user(ctx, field, obj)
		case "is_sms_push":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_is_sms_push(ctx, field, obj)
		case "is_notify":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_is_notify(ctx, field, obj)
		case "is_announce":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_is_announce(ctx, field, obj)
		case "is_app_push":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_is_app_push(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_notify_content(ctx, field, obj)
		case "announce_content":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_app_push_content(ctx, field, obj)
		case "disposal_content":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_disposal_content(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_disposal_result(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DynamicSpotCheckDisposalMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalMutationResponseImplementors = []string{"DynamicSpotCheckDisposalMutationResponse"}

func (ec *executionContext) _DynamicSpotCheckDisposalMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DynamicSpotCheckDisposalMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DynamicSpotCheckDisposalMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalStddevFieldsImplementors = []string{"DynamicSpotCheckDisposalStddevFields"}

func (ec *executionContext) _DynamicSpotCheckDisposalStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalStddevFields")
		case "id":
			out.Values[i] = ec._DynamicSpotCheckDisposalStddevFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._DynamicSpotCheckDisposalStddevFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalStddevPopFieldsImplementors = []string{"DynamicSpotCheckDisposalStddevPopFields"}

func (ec *executionContext) _DynamicSpotCheckDisposalStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalStddevPopFields")
		case "id":
			out.Values[i] = ec._DynamicSpotCheckDisposalStddevPopFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._DynamicSpotCheckDisposalStddevPopFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalStddevSampFieldsImplementors = []string{"DynamicSpotCheckDisposalStddevSampFields"}

func (ec *executionContext) _DynamicSpotCheckDisposalStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalStddevSampFields")
		case "id":
			out.Values[i] = ec._DynamicSpotCheckDisposalStddevSampFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._DynamicSpotCheckDisposalStddevSampFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalSumFieldsImplementors = []string{"DynamicSpotCheckDisposalSumFields"}

func (ec *executionContext) _DynamicSpotCheckDisposalSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalSumFields")
		case "id":
			out.Values[i] = ec._DynamicSpotCheckDisposalSumFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._DynamicSpotCheckDisposalSumFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalVarPopFieldsImplementors = []string{"DynamicSpotCheckDisposalVarPopFields"}

func (ec *executionContext) _DynamicSpotCheckDisposalVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalVarPopFields")
		case "id":
			out.Values[i] = ec._DynamicSpotCheckDisposalVarPopFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._DynamicSpotCheckDisposalVarPopFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalVarSampFieldsImplementors = []string{"DynamicSpotCheckDisposalVarSampFields"}

func (ec *executionContext) _DynamicSpotCheckDisposalVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalVarSampFields")
		case "id":
			out.Values[i] = ec._DynamicSpotCheckDisposalVarSampFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._DynamicSpotCheckDisposalVarSampFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSpotCheckDisposalVarianceFieldsImplementors = []string{"DynamicSpotCheckDisposalVarianceFields"}

func (ec *executionContext) _DynamicSpotCheckDisposalVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSpotCheckDisposalVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSpotCheckDisposalVarianceFields")
		case "id":
			out.Values[i] = ec._DynamicSpotCheckDisposalVarianceFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._DynamicSpotCheckDisposalVarianceFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionImplementors = []string{"DynamicSupervision"}

func (ec *executionContext) _DynamicSupervision(ctx context.Context, sel ast.SelectionSet, obj *model1.DynamicSupervision) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervision")
		case "id":
			out.Values[i] = ec._DynamicSupervision_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supervision_id":
			out.Values[i] = ec._DynamicSupervision_supervision_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "spot_check_date":
			out.Values[i] = ec._DynamicSupervision_spot_check_date(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._DynamicSupervision_spot_check_total_number(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._DynamicSupervision_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._DynamicSupervision_spot_check_ratio(ctx, field, obj)
		case "check_user_id":
			out.Values[i] = ec._DynamicSupervision_check_user_id(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._DynamicSupervision_total_number_vehicle(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._DynamicSupervision_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._DynamicSupervision_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._DynamicSupervision_district_id(ctx, field, obj)
		case "year":
			out.Values[i] = ec._DynamicSupervision_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._DynamicSupervision_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._DynamicSupervision_day(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DynamicSupervision_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DynamicSupervision_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DynamicSupervision_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DynamicSupervision_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DynamicSupervision_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DynamicSupervision_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DynamicSupervision_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionAggregateImplementors = []string{"DynamicSupervisionAggregate"}

func (ec *executionContext) _DynamicSupervisionAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionAggregate")
		case "aggregate":
			out.Values[i] = ec._DynamicSupervisionAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionAggregateFieldsImplementors = []string{"DynamicSupervisionAggregateFields"}

func (ec *executionContext) _DynamicSupervisionAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionAggregateFields")
		case "avg":
			out.Values[i] = ec._DynamicSupervisionAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DynamicSupervisionAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DynamicSupervisionAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DynamicSupervisionAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DynamicSupervisionAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DynamicSupervisionAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DynamicSupervisionAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DynamicSupervisionAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DynamicSupervisionAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DynamicSupervisionAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DynamicSupervisionAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionAvgFieldsImplementors = []string{"DynamicSupervisionAvgFields"}

func (ec *executionContext) _DynamicSupervisionAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionAvgFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionAvgFields_id(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._DynamicSupervisionAvgFields_spot_check_total_number(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._DynamicSupervisionAvgFields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._DynamicSupervisionAvgFields_spot_check_ratio(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._DynamicSupervisionAvgFields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._DynamicSupervisionAvgFields_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._DynamicSupervisionAvgFields_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._DynamicSupervisionAvgFields_day(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailImplementors = []string{"DynamicSupervisionDetail"}

func (ec *executionContext) _DynamicSupervisionDetail(ctx context.Context, sel ast.SelectionSet, obj *model1.DynamicSupervisionDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetail")
		case "id":
			out.Values[i] = ec._DynamicSupervisionDetail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supervision_detail_id":
			out.Values[i] = ec._DynamicSupervisionDetail_supervision_detail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supervision_id":
			out.Values[i] = ec._DynamicSupervisionDetail_supervision_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DynamicSupervisionDetail_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DynamicSupervisionDetail_enterprise_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DynamicSupervisionDetail_vehicle_id(ctx, field, obj)
		case "monitoring_time":
			out.Values[i] = ec._DynamicSupervisionDetail_monitoring_time(ctx, field, obj)
		case "monitoring_location":
			out.Values[i] = ec._DynamicSupervisionDetail_monitoring_location(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._DynamicSupervisionDetail_is_online(ctx, field, obj)
		case "is_tachograph_record_normal":
			out.Values[i] = ec._DynamicSupervisionDetail_is_tachograph_record_normal(ctx, field, obj)
		case "tachograph_data_exception":
			out.Values[i] = ec._DynamicSupervisionDetail_tachograph_data_exception(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._DynamicSupervisionDetail_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._DynamicSupervisionDetail_gps_speed(ctx, field, obj)
		case "is_speeding":
			out.Values[i] = ec._DynamicSupervisionDetail_is_speeding(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._DynamicSupervisionDetail_taxi_state(ctx, field, obj)
		case "is_fatigue_driving":
			out.Values[i] = ec._DynamicSupervisionDetail_is_fatigue_driving(ctx, field, obj)
		case "is_morning_outage":
			out.Values[i] = ec._DynamicSupervisionDetail_is_morning_outage(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._DynamicSupervisionDetail_curve(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._DynamicSupervisionDetail_trail(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._DynamicSupervisionDetail_lens_position(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._DynamicSupervisionDetail_equipment(ctx, field, obj)
		case "other_infraction":
			out.Values[i] = ec._DynamicSupervisionDetail_other_infraction(ctx, field, obj)
		case "disposal_measures":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_measures(ctx, field, obj)
		case "disposal_results":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_results(ctx, field, obj)
		case "treatment_time":
			out.Values[i] = ec._DynamicSupervisionDetail_treatment_time(ctx, field, obj)
		case "assignee":
			out.Values[i] = ec._DynamicSupervisionDetail_assignee(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._DynamicSupervisionDetail_feedback_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DynamicSupervisionDetail_remarks(ctx, field, obj)
		case "others":
			out.Values[i] = ec._DynamicSupervisionDetail_others(ctx, field, obj)
		case "lens_on":
			out.Values[i] = ec._DynamicSupervisionDetail_lens_on(ctx, field, obj)
		case "monitor_end_time":
			out.Values[i] = ec._DynamicSupervisionDetail_monitor_end_time(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._DynamicSupervisionDetail_is_locate(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._DynamicSupervisionDetail_coordinate(ctx, field, obj)
		case "latitude_longitude_description":
			out.Values[i] = ec._DynamicSupervisionDetail_latitude_longitude_description(ctx, field, obj)
		case "is_send":
			out.Values[i] = ec._DynamicSupervisionDetail_is_send(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._DynamicSupervisionDetail_business_scope(ctx, field, obj)
		case "outage_alarm_time":
			out.Values[i] = ec._DynamicSupervisionDetail_outage_alarm_time(ctx, field, obj)
		case "speed_alarm_time":
			out.Values[i] = ec._DynamicSupervisionDetail_speed_alarm_time(ctx, field, obj)
		case "speeding_speed":
			out.Values[i] = ec._DynamicSupervisionDetail_speeding_speed(ctx, field, obj)
		case "fatigue_alarm_time":
			out.Values[i] = ec._DynamicSupervisionDetail_fatigue_alarm_time(ctx, field, obj)
		case "disposal_measures1":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_measures1(ctx, field, obj)
		case "disposal_measures2":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_measures2(ctx, field, obj)
		case "disposal_measures3":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_measures3(ctx, field, obj)
		case "disposal_measures4":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_measures4(ctx, field, obj)
		case "disposal_measures5":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_measures5(ctx, field, obj)
		case "disposal_measures6":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_measures6(ctx, field, obj)
		case "disposal_measures7":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_measures7(ctx, field, obj)
		case "disposal_results1":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_results1(ctx, field, obj)
		case "disposal_results2":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_results2(ctx, field, obj)
		case "disposal_results3":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_results3(ctx, field, obj)
		case "disposal_results4":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_results4(ctx, field, obj)
		case "disposal_results5":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_results5(ctx, field, obj)
		case "disposal_results6":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_results6(ctx, field, obj)
		case "disposal_results7":
			out.Values[i] = ec._DynamicSupervisionDetail_disposal_results7(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DynamicSupervisionDetail_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DynamicSupervisionDetail_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._DynamicSupervisionDetail_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._DynamicSupervisionDetail_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DynamicSupervisionDetail_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DynamicSupervisionDetail_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DynamicSupervisionDetail_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailAggregateImplementors = []string{"DynamicSupervisionDetailAggregate"}

func (ec *executionContext) _DynamicSupervisionDetailAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailAggregate")
		case "aggregate":
			out.Values[i] = ec._DynamicSupervisionDetailAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailAggregateFieldsImplementors = []string{"DynamicSupervisionDetailAggregateFields"}

func (ec *executionContext) _DynamicSupervisionDetailAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailAggregateFields")
		case "avg":
			out.Values[i] = ec._DynamicSupervisionDetailAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._DynamicSupervisionDetailAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._DynamicSupervisionDetailAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._DynamicSupervisionDetailAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._DynamicSupervisionDetailAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._DynamicSupervisionDetailAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._DynamicSupervisionDetailAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._DynamicSupervisionDetailAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._DynamicSupervisionDetailAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._DynamicSupervisionDetailAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._DynamicSupervisionDetailAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailAvgFieldsImplementors = []string{"DynamicSupervisionDetailAvgFields"}

func (ec *executionContext) _DynamicSupervisionDetailAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailAvgFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionDetailAvgFields_id(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._DynamicSupervisionDetailAvgFields_taxi_state(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._DynamicSupervisionDetailAvgFields_curve(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._DynamicSupervisionDetailAvgFields_trail(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._DynamicSupervisionDetailAvgFields_lens_position(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._DynamicSupervisionDetailAvgFields_equipment(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._DynamicSupervisionDetailAvgFields_business_scope(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailMaxFieldsImplementors = []string{"DynamicSupervisionDetailMaxFields"}

func (ec *executionContext) _DynamicSupervisionDetailMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailMaxFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_id(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_supervision_detail_id(ctx, field, obj)
		case "supervision_id":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_supervision_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_enterprise_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_vehicle_id(ctx, field, obj)
		case "monitoring_time":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_monitoring_time(ctx, field, obj)
		case "monitoring_location":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_monitoring_location(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_is_online(ctx, field, obj)
		case "is_tachograph_record_normal":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_is_tachograph_record_normal(ctx, field, obj)
		case "tachograph_data_exception":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_tachograph_data_exception(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_gps_speed(ctx, field, obj)
		case "is_speeding":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_is_speeding(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_taxi_state(ctx, field, obj)
		case "is_fatigue_driving":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_is_fatigue_driving(ctx, field, obj)
		case "is_morning_outage":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_is_morning_outage(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_curve(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_trail(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_lens_position(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_equipment(ctx, field, obj)
		case "other_infraction":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_other_infraction(ctx, field, obj)
		case "disposal_measures":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_measures(ctx, field, obj)
		case "disposal_results":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_results(ctx, field, obj)
		case "treatment_time":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_treatment_time(ctx, field, obj)
		case "assignee":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_assignee(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_feedback_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_remarks(ctx, field, obj)
		case "others":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_others(ctx, field, obj)
		case "lens_on":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_lens_on(ctx, field, obj)
		case "monitor_end_time":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_monitor_end_time(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_is_locate(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_coordinate(ctx, field, obj)
		case "latitude_longitude_description":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_latitude_longitude_description(ctx, field, obj)
		case "is_send":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_is_send(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_business_scope(ctx, field, obj)
		case "outage_alarm_time":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_outage_alarm_time(ctx, field, obj)
		case "speed_alarm_time":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_speed_alarm_time(ctx, field, obj)
		case "speeding_speed":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_speeding_speed(ctx, field, obj)
		case "fatigue_alarm_time":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_fatigue_alarm_time(ctx, field, obj)
		case "disposal_measures1":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_measures1(ctx, field, obj)
		case "disposal_measures2":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_measures2(ctx, field, obj)
		case "disposal_measures3":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_measures3(ctx, field, obj)
		case "disposal_measures4":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_measures4(ctx, field, obj)
		case "disposal_measures5":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_measures5(ctx, field, obj)
		case "disposal_measures6":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_measures6(ctx, field, obj)
		case "disposal_measures7":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_measures7(ctx, field, obj)
		case "disposal_results1":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_results1(ctx, field, obj)
		case "disposal_results2":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_results2(ctx, field, obj)
		case "disposal_results3":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_results3(ctx, field, obj)
		case "disposal_results4":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_results4(ctx, field, obj)
		case "disposal_results5":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_results5(ctx, field, obj)
		case "disposal_results6":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_results6(ctx, field, obj)
		case "disposal_results7":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_disposal_results7(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DynamicSupervisionDetailMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailMinFieldsImplementors = []string{"DynamicSupervisionDetailMinFields"}

func (ec *executionContext) _DynamicSupervisionDetailMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailMinFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_id(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_supervision_detail_id(ctx, field, obj)
		case "supervision_id":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_supervision_id(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_enterprise_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_vehicle_id(ctx, field, obj)
		case "monitoring_time":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_monitoring_time(ctx, field, obj)
		case "monitoring_location":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_monitoring_location(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_is_online(ctx, field, obj)
		case "is_tachograph_record_normal":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_is_tachograph_record_normal(ctx, field, obj)
		case "tachograph_data_exception":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_tachograph_data_exception(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_tachograph_speed(ctx, field, obj)
		case "gps_speed":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_gps_speed(ctx, field, obj)
		case "is_speeding":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_is_speeding(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_taxi_state(ctx, field, obj)
		case "is_fatigue_driving":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_is_fatigue_driving(ctx, field, obj)
		case "is_morning_outage":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_is_morning_outage(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_curve(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_trail(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_lens_position(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_equipment(ctx, field, obj)
		case "other_infraction":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_other_infraction(ctx, field, obj)
		case "disposal_measures":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_measures(ctx, field, obj)
		case "disposal_results":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_results(ctx, field, obj)
		case "treatment_time":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_treatment_time(ctx, field, obj)
		case "assignee":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_assignee(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_feedback_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_remarks(ctx, field, obj)
		case "others":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_others(ctx, field, obj)
		case "lens_on":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_lens_on(ctx, field, obj)
		case "monitor_end_time":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_monitor_end_time(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_is_locate(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_coordinate(ctx, field, obj)
		case "latitude_longitude_description":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_latitude_longitude_description(ctx, field, obj)
		case "is_send":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_is_send(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_business_scope(ctx, field, obj)
		case "outage_alarm_time":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_outage_alarm_time(ctx, field, obj)
		case "speed_alarm_time":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_speed_alarm_time(ctx, field, obj)
		case "speeding_speed":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_speeding_speed(ctx, field, obj)
		case "fatigue_alarm_time":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_fatigue_alarm_time(ctx, field, obj)
		case "disposal_measures1":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_measures1(ctx, field, obj)
		case "disposal_measures2":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_measures2(ctx, field, obj)
		case "disposal_measures3":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_measures3(ctx, field, obj)
		case "disposal_measures4":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_measures4(ctx, field, obj)
		case "disposal_measures5":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_measures5(ctx, field, obj)
		case "disposal_measures6":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_measures6(ctx, field, obj)
		case "disposal_measures7":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_measures7(ctx, field, obj)
		case "disposal_results1":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_results1(ctx, field, obj)
		case "disposal_results2":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_results2(ctx, field, obj)
		case "disposal_results3":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_results3(ctx, field, obj)
		case "disposal_results4":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_results4(ctx, field, obj)
		case "disposal_results5":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_results5(ctx, field, obj)
		case "disposal_results6":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_results6(ctx, field, obj)
		case "disposal_results7":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_disposal_results7(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DynamicSupervisionDetailMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailMutationResponseImplementors = []string{"DynamicSupervisionDetailMutationResponse"}

func (ec *executionContext) _DynamicSupervisionDetailMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DynamicSupervisionDetailMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DynamicSupervisionDetailMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailStddevFieldsImplementors = []string{"DynamicSupervisionDetailStddevFields"}

func (ec *executionContext) _DynamicSupervisionDetailStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailStddevFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionDetailStddevFields_id(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._DynamicSupervisionDetailStddevFields_taxi_state(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._DynamicSupervisionDetailStddevFields_curve(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._DynamicSupervisionDetailStddevFields_trail(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._DynamicSupervisionDetailStddevFields_lens_position(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._DynamicSupervisionDetailStddevFields_equipment(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._DynamicSupervisionDetailStddevFields_business_scope(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailStddevPopFieldsImplementors = []string{"DynamicSupervisionDetailStddevPopFields"}

func (ec *executionContext) _DynamicSupervisionDetailStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailStddevPopFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionDetailStddevPopFields_id(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._DynamicSupervisionDetailStddevPopFields_taxi_state(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._DynamicSupervisionDetailStddevPopFields_curve(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._DynamicSupervisionDetailStddevPopFields_trail(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._DynamicSupervisionDetailStddevPopFields_lens_position(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._DynamicSupervisionDetailStddevPopFields_equipment(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._DynamicSupervisionDetailStddevPopFields_business_scope(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailStddevSampFieldsImplementors = []string{"DynamicSupervisionDetailStddevSampFields"}

func (ec *executionContext) _DynamicSupervisionDetailStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailStddevSampFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionDetailStddevSampFields_id(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._DynamicSupervisionDetailStddevSampFields_taxi_state(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._DynamicSupervisionDetailStddevSampFields_curve(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._DynamicSupervisionDetailStddevSampFields_trail(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._DynamicSupervisionDetailStddevSampFields_lens_position(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._DynamicSupervisionDetailStddevSampFields_equipment(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._DynamicSupervisionDetailStddevSampFields_business_scope(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailSumFieldsImplementors = []string{"DynamicSupervisionDetailSumFields"}

func (ec *executionContext) _DynamicSupervisionDetailSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailSumFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionDetailSumFields_id(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._DynamicSupervisionDetailSumFields_taxi_state(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._DynamicSupervisionDetailSumFields_curve(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._DynamicSupervisionDetailSumFields_trail(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._DynamicSupervisionDetailSumFields_lens_position(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._DynamicSupervisionDetailSumFields_equipment(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._DynamicSupervisionDetailSumFields_business_scope(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailVarPopFieldsImplementors = []string{"DynamicSupervisionDetailVarPopFields"}

func (ec *executionContext) _DynamicSupervisionDetailVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailVarPopFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionDetailVarPopFields_id(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._DynamicSupervisionDetailVarPopFields_taxi_state(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._DynamicSupervisionDetailVarPopFields_curve(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._DynamicSupervisionDetailVarPopFields_trail(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._DynamicSupervisionDetailVarPopFields_lens_position(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._DynamicSupervisionDetailVarPopFields_equipment(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._DynamicSupervisionDetailVarPopFields_business_scope(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailVarSampFieldsImplementors = []string{"DynamicSupervisionDetailVarSampFields"}

func (ec *executionContext) _DynamicSupervisionDetailVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailVarSampFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionDetailVarSampFields_id(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._DynamicSupervisionDetailVarSampFields_taxi_state(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._DynamicSupervisionDetailVarSampFields_curve(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._DynamicSupervisionDetailVarSampFields_trail(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._DynamicSupervisionDetailVarSampFields_lens_position(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._DynamicSupervisionDetailVarSampFields_equipment(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._DynamicSupervisionDetailVarSampFields_business_scope(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionDetailVarianceFieldsImplementors = []string{"DynamicSupervisionDetailVarianceFields"}

func (ec *executionContext) _DynamicSupervisionDetailVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionDetailVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionDetailVarianceFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionDetailVarianceFields_id(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._DynamicSupervisionDetailVarianceFields_taxi_state(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._DynamicSupervisionDetailVarianceFields_curve(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._DynamicSupervisionDetailVarianceFields_trail(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._DynamicSupervisionDetailVarianceFields_lens_position(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._DynamicSupervisionDetailVarianceFields_equipment(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._DynamicSupervisionDetailVarianceFields_business_scope(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionMaxFieldsImplementors = []string{"DynamicSupervisionMaxFields"}

func (ec *executionContext) _DynamicSupervisionMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionMaxFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionMaxFields_id(ctx, field, obj)
		case "supervision_id":
			out.Values[i] = ec._DynamicSupervisionMaxFields_supervision_id(ctx, field, obj)
		case "spot_check_date":
			out.Values[i] = ec._DynamicSupervisionMaxFields_spot_check_date(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._DynamicSupervisionMaxFields_spot_check_total_number(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._DynamicSupervisionMaxFields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._DynamicSupervisionMaxFields_spot_check_ratio(ctx, field, obj)
		case "check_user_id":
			out.Values[i] = ec._DynamicSupervisionMaxFields_check_user_id(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._DynamicSupervisionMaxFields_total_number_vehicle(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._DynamicSupervisionMaxFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._DynamicSupervisionMaxFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._DynamicSupervisionMaxFields_district_id(ctx, field, obj)
		case "year":
			out.Values[i] = ec._DynamicSupervisionMaxFields_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._DynamicSupervisionMaxFields_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._DynamicSupervisionMaxFields_day(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DynamicSupervisionMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DynamicSupervisionMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DynamicSupervisionMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DynamicSupervisionMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DynamicSupervisionMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DynamicSupervisionMaxFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DynamicSupervisionMaxFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionMinFieldsImplementors = []string{"DynamicSupervisionMinFields"}

func (ec *executionContext) _DynamicSupervisionMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionMinFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionMinFields_id(ctx, field, obj)
		case "supervision_id":
			out.Values[i] = ec._DynamicSupervisionMinFields_supervision_id(ctx, field, obj)
		case "spot_check_date":
			out.Values[i] = ec._DynamicSupervisionMinFields_spot_check_date(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._DynamicSupervisionMinFields_spot_check_total_number(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._DynamicSupervisionMinFields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._DynamicSupervisionMinFields_spot_check_ratio(ctx, field, obj)
		case "check_user_id":
			out.Values[i] = ec._DynamicSupervisionMinFields_check_user_id(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._DynamicSupervisionMinFields_total_number_vehicle(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._DynamicSupervisionMinFields_province_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._DynamicSupervisionMinFields_city_id(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._DynamicSupervisionMinFields_district_id(ctx, field, obj)
		case "year":
			out.Values[i] = ec._DynamicSupervisionMinFields_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._DynamicSupervisionMinFields_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._DynamicSupervisionMinFields_day(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._DynamicSupervisionMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._DynamicSupervisionMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._DynamicSupervisionMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._DynamicSupervisionMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._DynamicSupervisionMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._DynamicSupervisionMinFields_deleted_by(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._DynamicSupervisionMinFields_is_deleted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionMutationResponseImplementors = []string{"DynamicSupervisionMutationResponse"}

func (ec *executionContext) _DynamicSupervisionMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._DynamicSupervisionMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._DynamicSupervisionMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionStddevFieldsImplementors = []string{"DynamicSupervisionStddevFields"}

func (ec *executionContext) _DynamicSupervisionStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionStddevFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionStddevFields_id(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._DynamicSupervisionStddevFields_spot_check_total_number(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._DynamicSupervisionStddevFields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._DynamicSupervisionStddevFields_spot_check_ratio(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._DynamicSupervisionStddevFields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._DynamicSupervisionStddevFields_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._DynamicSupervisionStddevFields_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._DynamicSupervisionStddevFields_day(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionStddevPopFieldsImplementors = []string{"DynamicSupervisionStddevPopFields"}

func (ec *executionContext) _DynamicSupervisionStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionStddevPopFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionStddevPopFields_id(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._DynamicSupervisionStddevPopFields_spot_check_total_number(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._DynamicSupervisionStddevPopFields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._DynamicSupervisionStddevPopFields_spot_check_ratio(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._DynamicSupervisionStddevPopFields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._DynamicSupervisionStddevPopFields_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._DynamicSupervisionStddevPopFields_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._DynamicSupervisionStddevPopFields_day(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionStddevSampFieldsImplementors = []string{"DynamicSupervisionStddevSampFields"}

func (ec *executionContext) _DynamicSupervisionStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionStddevSampFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionStddevSampFields_id(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._DynamicSupervisionStddevSampFields_spot_check_total_number(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._DynamicSupervisionStddevSampFields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._DynamicSupervisionStddevSampFields_spot_check_ratio(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._DynamicSupervisionStddevSampFields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._DynamicSupervisionStddevSampFields_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._DynamicSupervisionStddevSampFields_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._DynamicSupervisionStddevSampFields_day(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionSumFieldsImplementors = []string{"DynamicSupervisionSumFields"}

func (ec *executionContext) _DynamicSupervisionSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionSumFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionSumFields_id(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._DynamicSupervisionSumFields_spot_check_total_number(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._DynamicSupervisionSumFields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._DynamicSupervisionSumFields_spot_check_ratio(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._DynamicSupervisionSumFields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._DynamicSupervisionSumFields_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._DynamicSupervisionSumFields_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._DynamicSupervisionSumFields_day(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionVarPopFieldsImplementors = []string{"DynamicSupervisionVarPopFields"}

func (ec *executionContext) _DynamicSupervisionVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionVarPopFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionVarPopFields_id(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._DynamicSupervisionVarPopFields_spot_check_total_number(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._DynamicSupervisionVarPopFields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._DynamicSupervisionVarPopFields_spot_check_ratio(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._DynamicSupervisionVarPopFields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._DynamicSupervisionVarPopFields_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._DynamicSupervisionVarPopFields_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._DynamicSupervisionVarPopFields_day(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionVarSampFieldsImplementors = []string{"DynamicSupervisionVarSampFields"}

func (ec *executionContext) _DynamicSupervisionVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionVarSampFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionVarSampFields_id(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._DynamicSupervisionVarSampFields_spot_check_total_number(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._DynamicSupervisionVarSampFields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._DynamicSupervisionVarSampFields_spot_check_ratio(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._DynamicSupervisionVarSampFields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._DynamicSupervisionVarSampFields_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._DynamicSupervisionVarSampFields_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._DynamicSupervisionVarSampFields_day(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamicSupervisionVarianceFieldsImplementors = []string{"DynamicSupervisionVarianceFields"}

func (ec *executionContext) _DynamicSupervisionVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamicSupervisionVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DynamicSupervisionVarianceFields")
		case "id":
			out.Values[i] = ec._DynamicSupervisionVarianceFields_id(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._DynamicSupervisionVarianceFields_spot_check_total_number(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._DynamicSupervisionVarianceFields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._DynamicSupervisionVarianceFields_spot_check_ratio(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._DynamicSupervisionVarianceFields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._DynamicSupervisionVarianceFields_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._DynamicSupervisionVarianceFields_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._DynamicSupervisionVarianceFields_day(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineImplementors = []string{"MuckTruckOnline"}

func (ec *executionContext) _MuckTruckOnline(ctx context.Context, sel ast.SelectionSet, obj *model1.MuckTruckOnline) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnline")
		case "id":
			out.Values[i] = ec._MuckTruckOnline_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "muck_truck_online_id":
			out.Values[i] = ec._MuckTruckOnline_muck_truck_online_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._MuckTruckOnline_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_online":
			out.Values[i] = ec._MuckTruckOnline_is_online(ctx, field, obj)
		case "is_pay":
			out.Values[i] = ec._MuckTruckOnline_is_pay(ctx, field, obj)
		case "is_gps_online":
			out.Values[i] = ec._MuckTruckOnline_is_gps_online(ctx, field, obj)
		case "is_catalog_library":
			out.Values[i] = ec._MuckTruckOnline_is_catalog_library(ctx, field, obj)
		case "is_install":
			out.Values[i] = ec._MuckTruckOnline_is_install(ctx, field, obj)
		case "is_vehicle_pass_inspection":
			out.Values[i] = ec._MuckTruckOnline_is_vehicle_pass_inspection(ctx, field, obj)
		case "is_new_vehicle":
			out.Values[i] = ec._MuckTruckOnline_is_new_vehicle(ctx, field, obj)
		case "location_time":
			out.Values[i] = ec._MuckTruckOnline_location_time(ctx, field, obj)
		case "self_number":
			out.Values[i] = ec._MuckTruckOnline_self_number(ctx, field, obj)
		case "area":
			out.Values[i] = ec._MuckTruckOnline_area(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckOnline_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._MuckTruckOnline_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._MuckTruckOnline_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckOnline_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckOnline_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckOnline_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineAggregateImplementors = []string{"MuckTruckOnlineAggregate"}

func (ec *executionContext) _MuckTruckOnlineAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineAggregate")
		case "aggregate":
			out.Values[i] = ec._MuckTruckOnlineAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineAggregateFieldsImplementors = []string{"MuckTruckOnlineAggregateFields"}

func (ec *executionContext) _MuckTruckOnlineAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineAggregateFields")
		case "avg":
			out.Values[i] = ec._MuckTruckOnlineAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._MuckTruckOnlineAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._MuckTruckOnlineAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._MuckTruckOnlineAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._MuckTruckOnlineAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._MuckTruckOnlineAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._MuckTruckOnlineAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._MuckTruckOnlineAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._MuckTruckOnlineAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._MuckTruckOnlineAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._MuckTruckOnlineAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineAvgFieldsImplementors = []string{"MuckTruckOnlineAvgFields"}

func (ec *executionContext) _MuckTruckOnlineAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineAvgFields")
		case "id":
			out.Values[i] = ec._MuckTruckOnlineAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineMaxFieldsImplementors = []string{"MuckTruckOnlineMaxFields"}

func (ec *executionContext) _MuckTruckOnlineMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineMaxFields")
		case "id":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_id(ctx, field, obj)
		case "muck_truck_online_id":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_muck_truck_online_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_vehicle_id(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_is_online(ctx, field, obj)
		case "is_pay":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_is_pay(ctx, field, obj)
		case "is_gps_online":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_is_gps_online(ctx, field, obj)
		case "is_catalog_library":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_is_catalog_library(ctx, field, obj)
		case "is_install":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_is_install(ctx, field, obj)
		case "is_vehicle_pass_inspection":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_is_vehicle_pass_inspection(ctx, field, obj)
		case "is_new_vehicle":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_is_new_vehicle(ctx, field, obj)
		case "location_time":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_location_time(ctx, field, obj)
		case "self_number":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_self_number(ctx, field, obj)
		case "area":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_area(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckOnlineMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineMinFieldsImplementors = []string{"MuckTruckOnlineMinFields"}

func (ec *executionContext) _MuckTruckOnlineMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineMinFields")
		case "id":
			out.Values[i] = ec._MuckTruckOnlineMinFields_id(ctx, field, obj)
		case "muck_truck_online_id":
			out.Values[i] = ec._MuckTruckOnlineMinFields_muck_truck_online_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._MuckTruckOnlineMinFields_vehicle_id(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._MuckTruckOnlineMinFields_is_online(ctx, field, obj)
		case "is_pay":
			out.Values[i] = ec._MuckTruckOnlineMinFields_is_pay(ctx, field, obj)
		case "is_gps_online":
			out.Values[i] = ec._MuckTruckOnlineMinFields_is_gps_online(ctx, field, obj)
		case "is_catalog_library":
			out.Values[i] = ec._MuckTruckOnlineMinFields_is_catalog_library(ctx, field, obj)
		case "is_install":
			out.Values[i] = ec._MuckTruckOnlineMinFields_is_install(ctx, field, obj)
		case "is_vehicle_pass_inspection":
			out.Values[i] = ec._MuckTruckOnlineMinFields_is_vehicle_pass_inspection(ctx, field, obj)
		case "is_new_vehicle":
			out.Values[i] = ec._MuckTruckOnlineMinFields_is_new_vehicle(ctx, field, obj)
		case "location_time":
			out.Values[i] = ec._MuckTruckOnlineMinFields_location_time(ctx, field, obj)
		case "self_number":
			out.Values[i] = ec._MuckTruckOnlineMinFields_self_number(ctx, field, obj)
		case "area":
			out.Values[i] = ec._MuckTruckOnlineMinFields_area(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._MuckTruckOnlineMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._MuckTruckOnlineMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._MuckTruckOnlineMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._MuckTruckOnlineMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._MuckTruckOnlineMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._MuckTruckOnlineMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineMutationResponseImplementors = []string{"MuckTruckOnlineMutationResponse"}

func (ec *executionContext) _MuckTruckOnlineMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._MuckTruckOnlineMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._MuckTruckOnlineMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineStddevFieldsImplementors = []string{"MuckTruckOnlineStddevFields"}

func (ec *executionContext) _MuckTruckOnlineStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineStddevFields")
		case "id":
			out.Values[i] = ec._MuckTruckOnlineStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineStddevPopFieldsImplementors = []string{"MuckTruckOnlineStddevPopFields"}

func (ec *executionContext) _MuckTruckOnlineStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineStddevPopFields")
		case "id":
			out.Values[i] = ec._MuckTruckOnlineStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineStddevSampFieldsImplementors = []string{"MuckTruckOnlineStddevSampFields"}

func (ec *executionContext) _MuckTruckOnlineStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineStddevSampFields")
		case "id":
			out.Values[i] = ec._MuckTruckOnlineStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineSumFieldsImplementors = []string{"MuckTruckOnlineSumFields"}

func (ec *executionContext) _MuckTruckOnlineSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineSumFields")
		case "id":
			out.Values[i] = ec._MuckTruckOnlineSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineVarPopFieldsImplementors = []string{"MuckTruckOnlineVarPopFields"}

func (ec *executionContext) _MuckTruckOnlineVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineVarPopFields")
		case "id":
			out.Values[i] = ec._MuckTruckOnlineVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineVarSampFieldsImplementors = []string{"MuckTruckOnlineVarSampFields"}

func (ec *executionContext) _MuckTruckOnlineVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineVarSampFields")
		case "id":
			out.Values[i] = ec._MuckTruckOnlineVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var muckTruckOnlineVarianceFieldsImplementors = []string{"MuckTruckOnlineVarianceFields"}

func (ec *executionContext) _MuckTruckOnlineVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.MuckTruckOnlineVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, muckTruckOnlineVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MuckTruckOnlineVarianceFields")
		case "id":
			out.Values[i] = ec._MuckTruckOnlineVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_dynamic_spot_check_disposal":
			out.Values[i] = ec._Mutation_delete_dynamic_spot_check_disposal(ctx, field)
		case "delete_dynamic_spot_check_disposal_by_pk":
			out.Values[i] = ec._Mutation_delete_dynamic_spot_check_disposal_by_pk(ctx, field)
		case "insert_dynamic_spot_check_disposal":
			out.Values[i] = ec._Mutation_insert_dynamic_spot_check_disposal(ctx, field)
		case "insert_dynamic_spot_check_disposal_one":
			out.Values[i] = ec._Mutation_insert_dynamic_spot_check_disposal_one(ctx, field)
		case "update_dynamic_spot_check_disposal":
			out.Values[i] = ec._Mutation_update_dynamic_spot_check_disposal(ctx, field)
		case "update_dynamic_spot_check_disposal_by_pk":
			out.Values[i] = ec._Mutation_update_dynamic_spot_check_disposal_by_pk(ctx, field)
		case "delete_dynamic_supervision":
			out.Values[i] = ec._Mutation_delete_dynamic_supervision(ctx, field)
		case "delete_dynamic_supervision_by_pk":
			out.Values[i] = ec._Mutation_delete_dynamic_supervision_by_pk(ctx, field)
		case "insert_dynamic_supervision":
			out.Values[i] = ec._Mutation_insert_dynamic_supervision(ctx, field)
		case "insert_dynamic_supervision_one":
			out.Values[i] = ec._Mutation_insert_dynamic_supervision_one(ctx, field)
		case "update_dynamic_supervision":
			out.Values[i] = ec._Mutation_update_dynamic_supervision(ctx, field)
		case "update_dynamic_supervision_by_pk":
			out.Values[i] = ec._Mutation_update_dynamic_supervision_by_pk(ctx, field)
		case "delete_dynamic_supervision_detail":
			out.Values[i] = ec._Mutation_delete_dynamic_supervision_detail(ctx, field)
		case "delete_dynamic_supervision_detail_by_pk":
			out.Values[i] = ec._Mutation_delete_dynamic_supervision_detail_by_pk(ctx, field)
		case "insert_dynamic_supervision_detail":
			out.Values[i] = ec._Mutation_insert_dynamic_supervision_detail(ctx, field)
		case "insert_dynamic_supervision_detail_one":
			out.Values[i] = ec._Mutation_insert_dynamic_supervision_detail_one(ctx, field)
		case "update_dynamic_supervision_detail":
			out.Values[i] = ec._Mutation_update_dynamic_supervision_detail(ctx, field)
		case "update_dynamic_supervision_detail_by_pk":
			out.Values[i] = ec._Mutation_update_dynamic_supervision_detail_by_pk(ctx, field)
		case "delete_muck_truck_online":
			out.Values[i] = ec._Mutation_delete_muck_truck_online(ctx, field)
		case "delete_muck_truck_online_by_pk":
			out.Values[i] = ec._Mutation_delete_muck_truck_online_by_pk(ctx, field)
		case "insert_muck_truck_online":
			out.Values[i] = ec._Mutation_insert_muck_truck_online(ctx, field)
		case "insert_muck_truck_online_one":
			out.Values[i] = ec._Mutation_insert_muck_truck_online_one(ctx, field)
		case "update_muck_truck_online":
			out.Values[i] = ec._Mutation_update_muck_truck_online(ctx, field)
		case "update_muck_truck_online_by_pk":
			out.Values[i] = ec._Mutation_update_muck_truck_online_by_pk(ctx, field)
		case "delete_region_issued":
			out.Values[i] = ec._Mutation_delete_region_issued(ctx, field)
		case "delete_region_issued_by_pk":
			out.Values[i] = ec._Mutation_delete_region_issued_by_pk(ctx, field)
		case "insert_region_issued":
			out.Values[i] = ec._Mutation_insert_region_issued(ctx, field)
		case "insert_region_issued_one":
			out.Values[i] = ec._Mutation_insert_region_issued_one(ctx, field)
		case "update_region_issued":
			out.Values[i] = ec._Mutation_update_region_issued(ctx, field)
		case "update_region_issued_by_pk":
			out.Values[i] = ec._Mutation_update_region_issued_by_pk(ctx, field)
		case "delete_region_management":
			out.Values[i] = ec._Mutation_delete_region_management(ctx, field)
		case "delete_region_management_by_pk":
			out.Values[i] = ec._Mutation_delete_region_management_by_pk(ctx, field)
		case "insert_region_management":
			out.Values[i] = ec._Mutation_insert_region_management(ctx, field)
		case "insert_region_management_one":
			out.Values[i] = ec._Mutation_insert_region_management_one(ctx, field)
		case "update_region_management":
			out.Values[i] = ec._Mutation_update_region_management(ctx, field)
		case "update_region_management_by_pk":
			out.Values[i] = ec._Mutation_update_region_management_by_pk(ctx, field)
		case "delete_vehicle_alarm_supervision":
			out.Values[i] = ec._Mutation_delete_vehicle_alarm_supervision(ctx, field)
		case "delete_vehicle_alarm_supervision_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_alarm_supervision_by_pk(ctx, field)
		case "insert_vehicle_alarm_supervision":
			out.Values[i] = ec._Mutation_insert_vehicle_alarm_supervision(ctx, field)
		case "insert_vehicle_alarm_supervision_one":
			out.Values[i] = ec._Mutation_insert_vehicle_alarm_supervision_one(ctx, field)
		case "update_vehicle_alarm_supervision":
			out.Values[i] = ec._Mutation_update_vehicle_alarm_supervision(ctx, field)
		case "update_vehicle_alarm_supervision_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_alarm_supervision_by_pk(ctx, field)
		case "delete_vehicle_alarm_times_record":
			out.Values[i] = ec._Mutation_delete_vehicle_alarm_times_record(ctx, field)
		case "delete_vehicle_alarm_times_record_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_alarm_times_record_by_pk(ctx, field)
		case "insert_vehicle_alarm_times_record":
			out.Values[i] = ec._Mutation_insert_vehicle_alarm_times_record(ctx, field)
		case "insert_vehicle_alarm_times_record_one":
			out.Values[i] = ec._Mutation_insert_vehicle_alarm_times_record_one(ctx, field)
		case "update_vehicle_alarm_times_record":
			out.Values[i] = ec._Mutation_update_vehicle_alarm_times_record(ctx, field)
		case "update_vehicle_alarm_times_record_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_alarm_times_record_by_pk(ctx, field)
		case "delete_vehicle_offline_disposal":
			out.Values[i] = ec._Mutation_delete_vehicle_offline_disposal(ctx, field)
		case "delete_vehicle_offline_disposal_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_offline_disposal_by_pk(ctx, field)
		case "insert_vehicle_offline_disposal":
			out.Values[i] = ec._Mutation_insert_vehicle_offline_disposal(ctx, field)
		case "insert_vehicle_offline_disposal_one":
			out.Values[i] = ec._Mutation_insert_vehicle_offline_disposal_one(ctx, field)
		case "update_vehicle_offline_disposal":
			out.Values[i] = ec._Mutation_update_vehicle_offline_disposal(ctx, field)
		case "update_vehicle_offline_disposal_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_offline_disposal_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "dynamic_spot_check_disposal":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_spot_check_disposal(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_spot_check_disposal_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_spot_check_disposal_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_spot_check_disposal_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_spot_check_disposal_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_supervision":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_supervision_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_supervision_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_supervision_detail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision_detail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_supervision_detail_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision_detail_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_supervision_detail_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision_detail_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_online":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_online(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_online_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_online_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "muck_truck_online_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_muck_truck_online_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "region_issued":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_region_issued(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "region_issued_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_region_issued_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "region_issued_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_region_issued_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "region_management":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_region_management(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "region_management_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_region_management_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "region_management_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_region_management_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_alarm_supervision":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_supervision(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_alarm_supervision_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_supervision_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_alarm_supervision_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_supervision_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_alarm_times_record":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_times_record(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_alarm_times_record_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_times_record_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_alarm_times_record_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_alarm_times_record_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_offline_disposal":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_offline_disposal(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_offline_disposal_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_offline_disposal_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_offline_disposal_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_offline_disposal_by_pk(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedImplementors = []string{"RegionIssued"}

func (ec *executionContext) _RegionIssued(ctx context.Context, sel ast.SelectionSet, obj *model1.RegionIssued) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssued")
		case "id":
			out.Values[i] = ec._RegionIssued_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "region_issued_id":
			out.Values[i] = ec._RegionIssued_region_issued_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "region_name":
			out.Values[i] = ec._RegionIssued_region_name(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._RegionIssued_imel(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._RegionIssued_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._RegionIssued_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._RegionIssued_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._RegionIssued_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._RegionIssued_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._RegionIssued_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedAggregateImplementors = []string{"RegionIssuedAggregate"}

func (ec *executionContext) _RegionIssuedAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedAggregate")
		case "aggregate":
			out.Values[i] = ec._RegionIssuedAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedAggregateFieldsImplementors = []string{"RegionIssuedAggregateFields"}

func (ec *executionContext) _RegionIssuedAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedAggregateFields")
		case "avg":
			out.Values[i] = ec._RegionIssuedAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._RegionIssuedAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._RegionIssuedAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._RegionIssuedAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._RegionIssuedAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._RegionIssuedAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._RegionIssuedAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._RegionIssuedAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._RegionIssuedAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._RegionIssuedAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._RegionIssuedAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedAvgFieldsImplementors = []string{"RegionIssuedAvgFields"}

func (ec *executionContext) _RegionIssuedAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedAvgFields")
		case "id":
			out.Values[i] = ec._RegionIssuedAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedMaxFieldsImplementors = []string{"RegionIssuedMaxFields"}

func (ec *executionContext) _RegionIssuedMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedMaxFields")
		case "id":
			out.Values[i] = ec._RegionIssuedMaxFields_id(ctx, field, obj)
		case "region_issued_id":
			out.Values[i] = ec._RegionIssuedMaxFields_region_issued_id(ctx, field, obj)
		case "region_name":
			out.Values[i] = ec._RegionIssuedMaxFields_region_name(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._RegionIssuedMaxFields_imel(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._RegionIssuedMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._RegionIssuedMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._RegionIssuedMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._RegionIssuedMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._RegionIssuedMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._RegionIssuedMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedMinFieldsImplementors = []string{"RegionIssuedMinFields"}

func (ec *executionContext) _RegionIssuedMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedMinFields")
		case "id":
			out.Values[i] = ec._RegionIssuedMinFields_id(ctx, field, obj)
		case "region_issued_id":
			out.Values[i] = ec._RegionIssuedMinFields_region_issued_id(ctx, field, obj)
		case "region_name":
			out.Values[i] = ec._RegionIssuedMinFields_region_name(ctx, field, obj)
		case "imel":
			out.Values[i] = ec._RegionIssuedMinFields_imel(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._RegionIssuedMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._RegionIssuedMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._RegionIssuedMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._RegionIssuedMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._RegionIssuedMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._RegionIssuedMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedMutationResponseImplementors = []string{"RegionIssuedMutationResponse"}

func (ec *executionContext) _RegionIssuedMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._RegionIssuedMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._RegionIssuedMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedStddevFieldsImplementors = []string{"RegionIssuedStddevFields"}

func (ec *executionContext) _RegionIssuedStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedStddevFields")
		case "id":
			out.Values[i] = ec._RegionIssuedStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedStddevPopFieldsImplementors = []string{"RegionIssuedStddevPopFields"}

func (ec *executionContext) _RegionIssuedStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedStddevPopFields")
		case "id":
			out.Values[i] = ec._RegionIssuedStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedStddevSampFieldsImplementors = []string{"RegionIssuedStddevSampFields"}

func (ec *executionContext) _RegionIssuedStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedStddevSampFields")
		case "id":
			out.Values[i] = ec._RegionIssuedStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedSumFieldsImplementors = []string{"RegionIssuedSumFields"}

func (ec *executionContext) _RegionIssuedSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedSumFields")
		case "id":
			out.Values[i] = ec._RegionIssuedSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedVarPopFieldsImplementors = []string{"RegionIssuedVarPopFields"}

func (ec *executionContext) _RegionIssuedVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedVarPopFields")
		case "id":
			out.Values[i] = ec._RegionIssuedVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedVarSampFieldsImplementors = []string{"RegionIssuedVarSampFields"}

func (ec *executionContext) _RegionIssuedVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedVarSampFields")
		case "id":
			out.Values[i] = ec._RegionIssuedVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionIssuedVarianceFieldsImplementors = []string{"RegionIssuedVarianceFields"}

func (ec *executionContext) _RegionIssuedVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionIssuedVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionIssuedVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionIssuedVarianceFields")
		case "id":
			out.Values[i] = ec._RegionIssuedVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementImplementors = []string{"RegionManagement"}

func (ec *executionContext) _RegionManagement(ctx context.Context, sel ast.SelectionSet, obj *model1.RegionManagement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagement")
		case "id":
			out.Values[i] = ec._RegionManagement_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "region_management_id":
			out.Values[i] = ec._RegionManagement_region_management_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "region_id":
			out.Values[i] = ec._RegionManagement_region_id(ctx, field, obj)
		case "region_name":
			out.Values[i] = ec._RegionManagement_region_name(ctx, field, obj)
		case "region_type":
			out.Values[i] = ec._RegionManagement_region_type(ctx, field, obj)
		case "region_nature":
			out.Values[i] = ec._RegionManagement_region_nature(ctx, field, obj)
		case "alarm_begin_time":
			out.Values[i] = ec._RegionManagement_alarm_begin_time(ctx, field, obj)
		case "alarm_end_time":
			out.Values[i] = ec._RegionManagement_alarm_end_time(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._RegionManagement_enterprise_name(ctx, field, obj)
		case "duration_":
			out.Values[i] = ec._RegionManagement_duration_(ctx, field, obj)
		case "max_speed":
			out.Values[i] = ec._RegionManagement_max_speed(ctx, field, obj)
		case "circle_radius":
			out.Values[i] = ec._RegionManagement_circle_radius(ctx, field, obj)
		case "region_coordinate":
			out.Values[i] = ec._RegionManagement_region_coordinate(ctx, field, obj)
		case "is_super_region":
			out.Values[i] = ec._RegionManagement_is_super_region(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._RegionManagement_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._RegionManagement_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._RegionManagement_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._RegionManagement_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._RegionManagement_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._RegionManagement_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._RegionManagement_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementAggregateImplementors = []string{"RegionManagementAggregate"}

func (ec *executionContext) _RegionManagementAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementAggregate")
		case "aggregate":
			out.Values[i] = ec._RegionManagementAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementAggregateFieldsImplementors = []string{"RegionManagementAggregateFields"}

func (ec *executionContext) _RegionManagementAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementAggregateFields")
		case "avg":
			out.Values[i] = ec._RegionManagementAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._RegionManagementAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._RegionManagementAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._RegionManagementAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._RegionManagementAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._RegionManagementAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._RegionManagementAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._RegionManagementAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._RegionManagementAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._RegionManagementAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._RegionManagementAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementAvgFieldsImplementors = []string{"RegionManagementAvgFields"}

func (ec *executionContext) _RegionManagementAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementAvgFields")
		case "id":
			out.Values[i] = ec._RegionManagementAvgFields_id(ctx, field, obj)
		case "duration_":
			out.Values[i] = ec._RegionManagementAvgFields_duration_(ctx, field, obj)
		case "max_speed":
			out.Values[i] = ec._RegionManagementAvgFields_max_speed(ctx, field, obj)
		case "circle_radius":
			out.Values[i] = ec._RegionManagementAvgFields_circle_radius(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementMaxFieldsImplementors = []string{"RegionManagementMaxFields"}

func (ec *executionContext) _RegionManagementMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementMaxFields")
		case "id":
			out.Values[i] = ec._RegionManagementMaxFields_id(ctx, field, obj)
		case "region_management_id":
			out.Values[i] = ec._RegionManagementMaxFields_region_management_id(ctx, field, obj)
		case "region_id":
			out.Values[i] = ec._RegionManagementMaxFields_region_id(ctx, field, obj)
		case "region_name":
			out.Values[i] = ec._RegionManagementMaxFields_region_name(ctx, field, obj)
		case "region_type":
			out.Values[i] = ec._RegionManagementMaxFields_region_type(ctx, field, obj)
		case "region_nature":
			out.Values[i] = ec._RegionManagementMaxFields_region_nature(ctx, field, obj)
		case "alarm_begin_time":
			out.Values[i] = ec._RegionManagementMaxFields_alarm_begin_time(ctx, field, obj)
		case "alarm_end_time":
			out.Values[i] = ec._RegionManagementMaxFields_alarm_end_time(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._RegionManagementMaxFields_enterprise_name(ctx, field, obj)
		case "duration_":
			out.Values[i] = ec._RegionManagementMaxFields_duration_(ctx, field, obj)
		case "max_speed":
			out.Values[i] = ec._RegionManagementMaxFields_max_speed(ctx, field, obj)
		case "circle_radius":
			out.Values[i] = ec._RegionManagementMaxFields_circle_radius(ctx, field, obj)
		case "region_coordinate":
			out.Values[i] = ec._RegionManagementMaxFields_region_coordinate(ctx, field, obj)
		case "is_super_region":
			out.Values[i] = ec._RegionManagementMaxFields_is_super_region(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._RegionManagementMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._RegionManagementMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._RegionManagementMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._RegionManagementMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._RegionManagementMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._RegionManagementMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._RegionManagementMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementMinFieldsImplementors = []string{"RegionManagementMinFields"}

func (ec *executionContext) _RegionManagementMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementMinFields")
		case "id":
			out.Values[i] = ec._RegionManagementMinFields_id(ctx, field, obj)
		case "region_management_id":
			out.Values[i] = ec._RegionManagementMinFields_region_management_id(ctx, field, obj)
		case "region_id":
			out.Values[i] = ec._RegionManagementMinFields_region_id(ctx, field, obj)
		case "region_name":
			out.Values[i] = ec._RegionManagementMinFields_region_name(ctx, field, obj)
		case "region_type":
			out.Values[i] = ec._RegionManagementMinFields_region_type(ctx, field, obj)
		case "region_nature":
			out.Values[i] = ec._RegionManagementMinFields_region_nature(ctx, field, obj)
		case "alarm_begin_time":
			out.Values[i] = ec._RegionManagementMinFields_alarm_begin_time(ctx, field, obj)
		case "alarm_end_time":
			out.Values[i] = ec._RegionManagementMinFields_alarm_end_time(ctx, field, obj)
		case "enterprise_name":
			out.Values[i] = ec._RegionManagementMinFields_enterprise_name(ctx, field, obj)
		case "duration_":
			out.Values[i] = ec._RegionManagementMinFields_duration_(ctx, field, obj)
		case "max_speed":
			out.Values[i] = ec._RegionManagementMinFields_max_speed(ctx, field, obj)
		case "circle_radius":
			out.Values[i] = ec._RegionManagementMinFields_circle_radius(ctx, field, obj)
		case "region_coordinate":
			out.Values[i] = ec._RegionManagementMinFields_region_coordinate(ctx, field, obj)
		case "is_super_region":
			out.Values[i] = ec._RegionManagementMinFields_is_super_region(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._RegionManagementMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._RegionManagementMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._RegionManagementMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._RegionManagementMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._RegionManagementMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._RegionManagementMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._RegionManagementMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementMutationResponseImplementors = []string{"RegionManagementMutationResponse"}

func (ec *executionContext) _RegionManagementMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._RegionManagementMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._RegionManagementMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementStddevFieldsImplementors = []string{"RegionManagementStddevFields"}

func (ec *executionContext) _RegionManagementStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementStddevFields")
		case "id":
			out.Values[i] = ec._RegionManagementStddevFields_id(ctx, field, obj)
		case "duration_":
			out.Values[i] = ec._RegionManagementStddevFields_duration_(ctx, field, obj)
		case "max_speed":
			out.Values[i] = ec._RegionManagementStddevFields_max_speed(ctx, field, obj)
		case "circle_radius":
			out.Values[i] = ec._RegionManagementStddevFields_circle_radius(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementStddevPopFieldsImplementors = []string{"RegionManagementStddevPopFields"}

func (ec *executionContext) _RegionManagementStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementStddevPopFields")
		case "id":
			out.Values[i] = ec._RegionManagementStddevPopFields_id(ctx, field, obj)
		case "duration_":
			out.Values[i] = ec._RegionManagementStddevPopFields_duration_(ctx, field, obj)
		case "max_speed":
			out.Values[i] = ec._RegionManagementStddevPopFields_max_speed(ctx, field, obj)
		case "circle_radius":
			out.Values[i] = ec._RegionManagementStddevPopFields_circle_radius(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementStddevSampFieldsImplementors = []string{"RegionManagementStddevSampFields"}

func (ec *executionContext) _RegionManagementStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementStddevSampFields")
		case "id":
			out.Values[i] = ec._RegionManagementStddevSampFields_id(ctx, field, obj)
		case "duration_":
			out.Values[i] = ec._RegionManagementStddevSampFields_duration_(ctx, field, obj)
		case "max_speed":
			out.Values[i] = ec._RegionManagementStddevSampFields_max_speed(ctx, field, obj)
		case "circle_radius":
			out.Values[i] = ec._RegionManagementStddevSampFields_circle_radius(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementSumFieldsImplementors = []string{"RegionManagementSumFields"}

func (ec *executionContext) _RegionManagementSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementSumFields")
		case "id":
			out.Values[i] = ec._RegionManagementSumFields_id(ctx, field, obj)
		case "duration_":
			out.Values[i] = ec._RegionManagementSumFields_duration_(ctx, field, obj)
		case "max_speed":
			out.Values[i] = ec._RegionManagementSumFields_max_speed(ctx, field, obj)
		case "circle_radius":
			out.Values[i] = ec._RegionManagementSumFields_circle_radius(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementVarPopFieldsImplementors = []string{"RegionManagementVarPopFields"}

func (ec *executionContext) _RegionManagementVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementVarPopFields")
		case "id":
			out.Values[i] = ec._RegionManagementVarPopFields_id(ctx, field, obj)
		case "duration_":
			out.Values[i] = ec._RegionManagementVarPopFields_duration_(ctx, field, obj)
		case "max_speed":
			out.Values[i] = ec._RegionManagementVarPopFields_max_speed(ctx, field, obj)
		case "circle_radius":
			out.Values[i] = ec._RegionManagementVarPopFields_circle_radius(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementVarSampFieldsImplementors = []string{"RegionManagementVarSampFields"}

func (ec *executionContext) _RegionManagementVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementVarSampFields")
		case "id":
			out.Values[i] = ec._RegionManagementVarSampFields_id(ctx, field, obj)
		case "duration_":
			out.Values[i] = ec._RegionManagementVarSampFields_duration_(ctx, field, obj)
		case "max_speed":
			out.Values[i] = ec._RegionManagementVarSampFields_max_speed(ctx, field, obj)
		case "circle_radius":
			out.Values[i] = ec._RegionManagementVarSampFields_circle_radius(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionManagementVarianceFieldsImplementors = []string{"RegionManagementVarianceFields"}

func (ec *executionContext) _RegionManagementVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.RegionManagementVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionManagementVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionManagementVarianceFields")
		case "id":
			out.Values[i] = ec._RegionManagementVarianceFields_id(ctx, field, obj)
		case "duration_":
			out.Values[i] = ec._RegionManagementVarianceFields_duration_(ctx, field, obj)
		case "max_speed":
			out.Values[i] = ec._RegionManagementVarianceFields_max_speed(ctx, field, obj)
		case "circle_radius":
			out.Values[i] = ec._RegionManagementVarianceFields_circle_radius(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionImplementors = []string{"VehicleAlarmSupervision"}

func (ec *executionContext) _VehicleAlarmSupervision(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleAlarmSupervision) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervision")
		case "id":
			out.Values[i] = ec._VehicleAlarmSupervision_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_alarm_supervision_id":
			out.Values[i] = ec._VehicleAlarmSupervision_vehicle_alarm_supervision_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "superivision_authority_id":
			out.Values[i] = ec._VehicleAlarmSupervision_superivision_authority_id(ctx, field, obj)
		case "superivision_type":
			out.Values[i] = ec._VehicleAlarmSupervision_superivision_type(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._VehicleAlarmSupervision_area_id(ctx, field, obj)
		case "vehicle_alarm_number":
			out.Values[i] = ec._VehicleAlarmSupervision_vehicle_alarm_number(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VehicleAlarmSupervision_alarm_type(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmSupervision_alarm_times(ctx, field, obj)
		case "disposal_times":
			out.Values[i] = ec._VehicleAlarmSupervision_disposal_times(ctx, field, obj)
		case "alarm_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervision_alarm_disposal_rate(ctx, field, obj)
		case "district_rectification":
			out.Values[i] = ec._VehicleAlarmSupervision_district_rectification(ctx, field, obj)
		case "city_rectification":
			out.Values[i] = ec._VehicleAlarmSupervision_city_rectification(ctx, field, obj)
		case "province_rectification":
			out.Values[i] = ec._VehicleAlarmSupervision_province_rectification(ctx, field, obj)
		case "country_rectification":
			out.Values[i] = ec._VehicleAlarmSupervision_country_rectification(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._VehicleAlarmSupervision_registration_time(ctx, field, obj)
		case "statistics_date":
			out.Values[i] = ec._VehicleAlarmSupervision_statistics_date(ctx, field, obj)
		case "should_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervision_should_supervision_enterprise_number(ctx, field, obj)
		case "actual_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervision_actual_supervision_enterprise_number(ctx, field, obj)
		case "supervision_rate":
			out.Values[i] = ec._VehicleAlarmSupervision_supervision_rate(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleAlarmSupervision_business_scope(ctx, field, obj)
		case "should_check_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervision_should_check_vehicle_number(ctx, field, obj)
		case "actual_check_vechicle_number":
			out.Values[i] = ec._VehicleAlarmSupervision_actual_check_vechicle_number(ctx, field, obj)
		case "check_abnormal_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervision_check_abnormal_vehicle_number(ctx, field, obj)
		case "abnormal_disposal_number":
			out.Values[i] = ec._VehicleAlarmSupervision_abnormal_disposal_number(ctx, field, obj)
		case "abnormal_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervision_abnormal_disposal_rate(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleAlarmSupervision_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehicleAlarmSupervision_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VehicleAlarmSupervision_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleAlarmSupervision_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleAlarmSupervision_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleAlarmSupervision_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionAggregateImplementors = []string{"VehicleAlarmSupervisionAggregate"}

func (ec *executionContext) _VehicleAlarmSupervisionAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionAggregateFieldsImplementors = []string{"VehicleAlarmSupervisionAggregateFields"}

func (ec *executionContext) _VehicleAlarmSupervisionAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleAlarmSupervisionAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionAvgFieldsImplementors = []string{"VehicleAlarmSupervisionAvgFields"}

func (ec *executionContext) _VehicleAlarmSupervisionAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionAvgFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_id(ctx, field, obj)
		case "vehicle_alarm_number":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_vehicle_alarm_number(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_alarm_times(ctx, field, obj)
		case "disposal_times":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_disposal_times(ctx, field, obj)
		case "alarm_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_alarm_disposal_rate(ctx, field, obj)
		case "should_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_should_supervision_enterprise_number(ctx, field, obj)
		case "actual_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_actual_supervision_enterprise_number(ctx, field, obj)
		case "supervision_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_supervision_rate(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_business_scope(ctx, field, obj)
		case "should_check_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_should_check_vehicle_number(ctx, field, obj)
		case "actual_check_vechicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_actual_check_vechicle_number(ctx, field, obj)
		case "check_abnormal_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_check_abnormal_vehicle_number(ctx, field, obj)
		case "abnormal_disposal_number":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_abnormal_disposal_number(ctx, field, obj)
		case "abnormal_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionAvgFields_abnormal_disposal_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionMaxFieldsImplementors = []string{"VehicleAlarmSupervisionMaxFields"}

func (ec *executionContext) _VehicleAlarmSupervisionMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionMaxFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_id(ctx, field, obj)
		case "vehicle_alarm_supervision_id":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_vehicle_alarm_supervision_id(ctx, field, obj)
		case "superivision_authority_id":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_superivision_authority_id(ctx, field, obj)
		case "superivision_type":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_superivision_type(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_area_id(ctx, field, obj)
		case "vehicle_alarm_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_vehicle_alarm_number(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_alarm_type(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_alarm_times(ctx, field, obj)
		case "disposal_times":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_disposal_times(ctx, field, obj)
		case "alarm_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_alarm_disposal_rate(ctx, field, obj)
		case "district_rectification":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_district_rectification(ctx, field, obj)
		case "city_rectification":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_city_rectification(ctx, field, obj)
		case "province_rectification":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_province_rectification(ctx, field, obj)
		case "country_rectification":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_country_rectification(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_registration_time(ctx, field, obj)
		case "statistics_date":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_statistics_date(ctx, field, obj)
		case "should_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_should_supervision_enterprise_number(ctx, field, obj)
		case "actual_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_actual_supervision_enterprise_number(ctx, field, obj)
		case "supervision_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_supervision_rate(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_business_scope(ctx, field, obj)
		case "should_check_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_should_check_vehicle_number(ctx, field, obj)
		case "actual_check_vechicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_actual_check_vechicle_number(ctx, field, obj)
		case "check_abnormal_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_check_abnormal_vehicle_number(ctx, field, obj)
		case "abnormal_disposal_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_abnormal_disposal_number(ctx, field, obj)
		case "abnormal_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_abnormal_disposal_rate(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleAlarmSupervisionMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionMinFieldsImplementors = []string{"VehicleAlarmSupervisionMinFields"}

func (ec *executionContext) _VehicleAlarmSupervisionMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionMinFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_id(ctx, field, obj)
		case "vehicle_alarm_supervision_id":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_vehicle_alarm_supervision_id(ctx, field, obj)
		case "superivision_authority_id":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_superivision_authority_id(ctx, field, obj)
		case "superivision_type":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_superivision_type(ctx, field, obj)
		case "area_id":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_area_id(ctx, field, obj)
		case "vehicle_alarm_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_vehicle_alarm_number(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_alarm_type(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_alarm_times(ctx, field, obj)
		case "disposal_times":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_disposal_times(ctx, field, obj)
		case "alarm_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_alarm_disposal_rate(ctx, field, obj)
		case "district_rectification":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_district_rectification(ctx, field, obj)
		case "city_rectification":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_city_rectification(ctx, field, obj)
		case "province_rectification":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_province_rectification(ctx, field, obj)
		case "country_rectification":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_country_rectification(ctx, field, obj)
		case "registration_time":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_registration_time(ctx, field, obj)
		case "statistics_date":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_statistics_date(ctx, field, obj)
		case "should_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_should_supervision_enterprise_number(ctx, field, obj)
		case "actual_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_actual_supervision_enterprise_number(ctx, field, obj)
		case "supervision_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_supervision_rate(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_business_scope(ctx, field, obj)
		case "should_check_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_should_check_vehicle_number(ctx, field, obj)
		case "actual_check_vechicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_actual_check_vechicle_number(ctx, field, obj)
		case "check_abnormal_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_check_abnormal_vehicle_number(ctx, field, obj)
		case "abnormal_disposal_number":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_abnormal_disposal_number(ctx, field, obj)
		case "abnormal_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_abnormal_disposal_rate(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleAlarmSupervisionMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionMutationResponseImplementors = []string{"VehicleAlarmSupervisionMutationResponse"}

func (ec *executionContext) _VehicleAlarmSupervisionMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleAlarmSupervisionMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleAlarmSupervisionMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionStddevFieldsImplementors = []string{"VehicleAlarmSupervisionStddevFields"}

func (ec *executionContext) _VehicleAlarmSupervisionStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionStddevFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_id(ctx, field, obj)
		case "vehicle_alarm_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_vehicle_alarm_number(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_alarm_times(ctx, field, obj)
		case "disposal_times":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_disposal_times(ctx, field, obj)
		case "alarm_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_alarm_disposal_rate(ctx, field, obj)
		case "should_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_should_supervision_enterprise_number(ctx, field, obj)
		case "actual_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_actual_supervision_enterprise_number(ctx, field, obj)
		case "supervision_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_supervision_rate(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_business_scope(ctx, field, obj)
		case "should_check_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_should_check_vehicle_number(ctx, field, obj)
		case "actual_check_vechicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_actual_check_vechicle_number(ctx, field, obj)
		case "check_abnormal_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_check_abnormal_vehicle_number(ctx, field, obj)
		case "abnormal_disposal_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_abnormal_disposal_number(ctx, field, obj)
		case "abnormal_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevFields_abnormal_disposal_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionStddevPopFieldsImplementors = []string{"VehicleAlarmSupervisionStddevPopFields"}

func (ec *executionContext) _VehicleAlarmSupervisionStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_id(ctx, field, obj)
		case "vehicle_alarm_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_vehicle_alarm_number(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_alarm_times(ctx, field, obj)
		case "disposal_times":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_disposal_times(ctx, field, obj)
		case "alarm_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_alarm_disposal_rate(ctx, field, obj)
		case "should_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_should_supervision_enterprise_number(ctx, field, obj)
		case "actual_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_actual_supervision_enterprise_number(ctx, field, obj)
		case "supervision_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_supervision_rate(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_business_scope(ctx, field, obj)
		case "should_check_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_should_check_vehicle_number(ctx, field, obj)
		case "actual_check_vechicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_actual_check_vechicle_number(ctx, field, obj)
		case "check_abnormal_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_check_abnormal_vehicle_number(ctx, field, obj)
		case "abnormal_disposal_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_abnormal_disposal_number(ctx, field, obj)
		case "abnormal_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevPopFields_abnormal_disposal_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionStddevSampFieldsImplementors = []string{"VehicleAlarmSupervisionStddevSampFields"}

func (ec *executionContext) _VehicleAlarmSupervisionStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_id(ctx, field, obj)
		case "vehicle_alarm_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_vehicle_alarm_number(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_alarm_times(ctx, field, obj)
		case "disposal_times":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_disposal_times(ctx, field, obj)
		case "alarm_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_alarm_disposal_rate(ctx, field, obj)
		case "should_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_should_supervision_enterprise_number(ctx, field, obj)
		case "actual_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_actual_supervision_enterprise_number(ctx, field, obj)
		case "supervision_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_supervision_rate(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_business_scope(ctx, field, obj)
		case "should_check_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_should_check_vehicle_number(ctx, field, obj)
		case "actual_check_vechicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_actual_check_vechicle_number(ctx, field, obj)
		case "check_abnormal_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_check_abnormal_vehicle_number(ctx, field, obj)
		case "abnormal_disposal_number":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_abnormal_disposal_number(ctx, field, obj)
		case "abnormal_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionStddevSampFields_abnormal_disposal_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionSumFieldsImplementors = []string{"VehicleAlarmSupervisionSumFields"}

func (ec *executionContext) _VehicleAlarmSupervisionSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionSumFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_id(ctx, field, obj)
		case "vehicle_alarm_number":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_vehicle_alarm_number(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_alarm_times(ctx, field, obj)
		case "disposal_times":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_disposal_times(ctx, field, obj)
		case "alarm_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_alarm_disposal_rate(ctx, field, obj)
		case "should_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_should_supervision_enterprise_number(ctx, field, obj)
		case "actual_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_actual_supervision_enterprise_number(ctx, field, obj)
		case "supervision_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_supervision_rate(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_business_scope(ctx, field, obj)
		case "should_check_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_should_check_vehicle_number(ctx, field, obj)
		case "actual_check_vechicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_actual_check_vechicle_number(ctx, field, obj)
		case "check_abnormal_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_check_abnormal_vehicle_number(ctx, field, obj)
		case "abnormal_disposal_number":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_abnormal_disposal_number(ctx, field, obj)
		case "abnormal_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionSumFields_abnormal_disposal_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionVarPopFieldsImplementors = []string{"VehicleAlarmSupervisionVarPopFields"}

func (ec *executionContext) _VehicleAlarmSupervisionVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_id(ctx, field, obj)
		case "vehicle_alarm_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_vehicle_alarm_number(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_alarm_times(ctx, field, obj)
		case "disposal_times":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_disposal_times(ctx, field, obj)
		case "alarm_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_alarm_disposal_rate(ctx, field, obj)
		case "should_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_should_supervision_enterprise_number(ctx, field, obj)
		case "actual_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_actual_supervision_enterprise_number(ctx, field, obj)
		case "supervision_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_supervision_rate(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_business_scope(ctx, field, obj)
		case "should_check_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_should_check_vehicle_number(ctx, field, obj)
		case "actual_check_vechicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_actual_check_vechicle_number(ctx, field, obj)
		case "check_abnormal_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_check_abnormal_vehicle_number(ctx, field, obj)
		case "abnormal_disposal_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_abnormal_disposal_number(ctx, field, obj)
		case "abnormal_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionVarPopFields_abnormal_disposal_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionVarSampFieldsImplementors = []string{"VehicleAlarmSupervisionVarSampFields"}

func (ec *executionContext) _VehicleAlarmSupervisionVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_id(ctx, field, obj)
		case "vehicle_alarm_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_vehicle_alarm_number(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_alarm_times(ctx, field, obj)
		case "disposal_times":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_disposal_times(ctx, field, obj)
		case "alarm_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_alarm_disposal_rate(ctx, field, obj)
		case "should_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_should_supervision_enterprise_number(ctx, field, obj)
		case "actual_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_actual_supervision_enterprise_number(ctx, field, obj)
		case "supervision_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_supervision_rate(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_business_scope(ctx, field, obj)
		case "should_check_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_should_check_vehicle_number(ctx, field, obj)
		case "actual_check_vechicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_actual_check_vechicle_number(ctx, field, obj)
		case "check_abnormal_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_check_abnormal_vehicle_number(ctx, field, obj)
		case "abnormal_disposal_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_abnormal_disposal_number(ctx, field, obj)
		case "abnormal_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionVarSampFields_abnormal_disposal_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmSupervisionVarianceFieldsImplementors = []string{"VehicleAlarmSupervisionVarianceFields"}

func (ec *executionContext) _VehicleAlarmSupervisionVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmSupervisionVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmSupervisionVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmSupervisionVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_id(ctx, field, obj)
		case "vehicle_alarm_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_vehicle_alarm_number(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_alarm_times(ctx, field, obj)
		case "disposal_times":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_disposal_times(ctx, field, obj)
		case "alarm_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_alarm_disposal_rate(ctx, field, obj)
		case "should_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_should_supervision_enterprise_number(ctx, field, obj)
		case "actual_supervision_enterprise_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_actual_supervision_enterprise_number(ctx, field, obj)
		case "supervision_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_supervision_rate(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_business_scope(ctx, field, obj)
		case "should_check_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_should_check_vehicle_number(ctx, field, obj)
		case "actual_check_vechicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_actual_check_vechicle_number(ctx, field, obj)
		case "check_abnormal_vehicle_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_check_abnormal_vehicle_number(ctx, field, obj)
		case "abnormal_disposal_number":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_abnormal_disposal_number(ctx, field, obj)
		case "abnormal_disposal_rate":
			out.Values[i] = ec._VehicleAlarmSupervisionVarianceFields_abnormal_disposal_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordImplementors = []string{"VehicleAlarmTimesRecord"}

func (ec *executionContext) _VehicleAlarmTimesRecord(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleAlarmTimesRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecord")
		case "id":
			out.Values[i] = ec._VehicleAlarmTimesRecord_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_alarm_times_record_id":
			out.Values[i] = ec._VehicleAlarmTimesRecord_vehicle_alarm_times_record_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_id":
			out.Values[i] = ec._VehicleAlarmTimesRecord_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alarm_type":
			out.Values[i] = ec._VehicleAlarmTimesRecord_alarm_type(ctx, field, obj)
		case "disposal_measure":
			out.Values[i] = ec._VehicleAlarmTimesRecord_disposal_measure(ctx, field, obj)
		case "disposal_time":
			out.Values[i] = ec._VehicleAlarmTimesRecord_disposal_time(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._VehicleAlarmTimesRecord_disposal_result(ctx, field, obj)
		case "is_disposal":
			out.Values[i] = ec._VehicleAlarmTimesRecord_is_disposal(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleAlarmTimesRecord_disposal_method(ctx, field, obj)
		case "duty_person":
			out.Values[i] = ec._VehicleAlarmTimesRecord_duty_person(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmTimesRecord_alarm_times(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleAlarmTimesRecord_remarks(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._VehicleAlarmTimesRecord_record_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleAlarmTimesRecord_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehicleAlarmTimesRecord_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VehicleAlarmTimesRecord_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleAlarmTimesRecord_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleAlarmTimesRecord_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleAlarmTimesRecord_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordAggregateImplementors = []string{"VehicleAlarmTimesRecordAggregate"}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordAggregateFieldsImplementors = []string{"VehicleAlarmTimesRecordAggregateFields"}

func (ec *executionContext) _VehicleAlarmTimesRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleAlarmTimesRecordAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordAvgFieldsImplementors = []string{"VehicleAlarmTimesRecordAvgFields"}

func (ec *executionContext) _VehicleAlarmTimesRecordAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordAvgFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmTimesRecordAvgFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleAlarmTimesRecordAvgFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordMaxFieldsImplementors = []string{"VehicleAlarmTimesRecordMaxFields"}

func (ec *executionContext) _VehicleAlarmTimesRecordMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordMaxFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_id(ctx, field, obj)
		case "vehicle_alarm_times_record_id":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_vehicle_alarm_times_record_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_vehicle_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_alarm_type(ctx, field, obj)
		case "disposal_measure":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_disposal_measure(ctx, field, obj)
		case "disposal_time":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_disposal_time(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_disposal_result(ctx, field, obj)
		case "is_disposal":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_is_disposal(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_disposal_method(ctx, field, obj)
		case "duty_person":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_duty_person(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_alarm_times(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_remarks(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_record_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleAlarmTimesRecordMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordMinFieldsImplementors = []string{"VehicleAlarmTimesRecordMinFields"}

func (ec *executionContext) _VehicleAlarmTimesRecordMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordMinFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_id(ctx, field, obj)
		case "vehicle_alarm_times_record_id":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_vehicle_alarm_times_record_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_vehicle_id(ctx, field, obj)
		case "alarm_type":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_alarm_type(ctx, field, obj)
		case "disposal_measure":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_disposal_measure(ctx, field, obj)
		case "disposal_time":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_disposal_time(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_disposal_result(ctx, field, obj)
		case "is_disposal":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_is_disposal(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_disposal_method(ctx, field, obj)
		case "duty_person":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_duty_person(ctx, field, obj)
		case "alarm_times":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_alarm_times(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_remarks(ctx, field, obj)
		case "record_time":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_record_time(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleAlarmTimesRecordMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordMutationResponseImplementors = []string{"VehicleAlarmTimesRecordMutationResponse"}

func (ec *executionContext) _VehicleAlarmTimesRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleAlarmTimesRecordMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleAlarmTimesRecordMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordStddevFieldsImplementors = []string{"VehicleAlarmTimesRecordStddevFields"}

func (ec *executionContext) _VehicleAlarmTimesRecordStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordStddevFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmTimesRecordStddevFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleAlarmTimesRecordStddevFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordStddevPopFieldsImplementors = []string{"VehicleAlarmTimesRecordStddevPopFields"}

func (ec *executionContext) _VehicleAlarmTimesRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmTimesRecordStddevPopFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleAlarmTimesRecordStddevPopFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordStddevSampFieldsImplementors = []string{"VehicleAlarmTimesRecordStddevSampFields"}

func (ec *executionContext) _VehicleAlarmTimesRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmTimesRecordStddevSampFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleAlarmTimesRecordStddevSampFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordSumFieldsImplementors = []string{"VehicleAlarmTimesRecordSumFields"}

func (ec *executionContext) _VehicleAlarmTimesRecordSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordSumFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmTimesRecordSumFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleAlarmTimesRecordSumFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordVarPopFieldsImplementors = []string{"VehicleAlarmTimesRecordVarPopFields"}

func (ec *executionContext) _VehicleAlarmTimesRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmTimesRecordVarPopFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleAlarmTimesRecordVarPopFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordVarSampFieldsImplementors = []string{"VehicleAlarmTimesRecordVarSampFields"}

func (ec *executionContext) _VehicleAlarmTimesRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmTimesRecordVarSampFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleAlarmTimesRecordVarSampFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleAlarmTimesRecordVarianceFieldsImplementors = []string{"VehicleAlarmTimesRecordVarianceFields"}

func (ec *executionContext) _VehicleAlarmTimesRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleAlarmTimesRecordVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleAlarmTimesRecordVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleAlarmTimesRecordVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleAlarmTimesRecordVarianceFields_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleAlarmTimesRecordVarianceFields_disposal_method(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalImplementors = []string{"VehicleOfflineDisposal"}

func (ec *executionContext) _VehicleOfflineDisposal(ctx context.Context, sel ast.SelectionSet, obj *model1.VehicleOfflineDisposal) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposal")
		case "id":
			out.Values[i] = ec._VehicleOfflineDisposal_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_offline_disposal_id":
			out.Values[i] = ec._VehicleOfflineDisposal_vehicle_offline_disposal_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_id":
			out.Values[i] = ec._VehicleOfflineDisposal_enterprise_id(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._VehicleOfflineDisposal_telephone(ctx, field, obj)
		case "content":
			out.Values[i] = ec._VehicleOfflineDisposal_content(ctx, field, obj)
		case "send_time":
			out.Values[i] = ec._VehicleOfflineDisposal_send_time(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._VehicleOfflineDisposal_user_id(ctx, field, obj)
		case "is_sms_push":
			out.Values[i] = ec._VehicleOfflineDisposal_is_sms_push(ctx, field, obj)
		case "is_report":
			out.Values[i] = ec._VehicleOfflineDisposal_is_report(ctx, field, obj)
		case "is_voice_notification":
			out.Values[i] = ec._VehicleOfflineDisposal_is_voice_notification(ctx, field, obj)
		case "is_app_push":
			out.Values[i] = ec._VehicleOfflineDisposal_is_app_push(ctx, field, obj)
		case "notification_content":
			out.Values[i] = ec._VehicleOfflineDisposal_notification_content(ctx, field, obj)
		case "voice_content":
			out.Values[i] = ec._VehicleOfflineDisposal_voice_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._VehicleOfflineDisposal_app_push_content(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._VehicleOfflineDisposal_supervision_detail_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleOfflineDisposal_disposal_method(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleOfflineDisposal_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleOfflineDisposal_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._VehicleOfflineDisposal_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated_at":
			out.Values[i] = ec._VehicleOfflineDisposal_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleOfflineDisposal_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleOfflineDisposal_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleOfflineDisposal_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalAggregateImplementors = []string{"VehicleOfflineDisposalAggregate"}

func (ec *executionContext) _VehicleOfflineDisposalAggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalAggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalAggregate")
		case "aggregate":
			out.Values[i] = ec._VehicleOfflineDisposalAggregate_aggregate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalAggregateFieldsImplementors = []string{"VehicleOfflineDisposalAggregateFields"}

func (ec *executionContext) _VehicleOfflineDisposalAggregateFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalAggregateFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalAggregateFields")
		case "avg":
			out.Values[i] = ec._VehicleOfflineDisposalAggregateFields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._VehicleOfflineDisposalAggregateFields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._VehicleOfflineDisposalAggregateFields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._VehicleOfflineDisposalAggregateFields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._VehicleOfflineDisposalAggregateFields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._VehicleOfflineDisposalAggregateFields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._VehicleOfflineDisposalAggregateFields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._VehicleOfflineDisposalAggregateFields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._VehicleOfflineDisposalAggregateFields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._VehicleOfflineDisposalAggregateFields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._VehicleOfflineDisposalAggregateFields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalAvgFieldsImplementors = []string{"VehicleOfflineDisposalAvgFields"}

func (ec *executionContext) _VehicleOfflineDisposalAvgFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalAvgFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalAvgFields")
		case "id":
			out.Values[i] = ec._VehicleOfflineDisposalAvgFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalMaxFieldsImplementors = []string{"VehicleOfflineDisposalMaxFields"}

func (ec *executionContext) _VehicleOfflineDisposalMaxFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalMaxFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalMaxFields")
		case "id":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_id(ctx, field, obj)
		case "vehicle_offline_disposal_id":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_vehicle_offline_disposal_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_enterprise_id(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_telephone(ctx, field, obj)
		case "content":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_content(ctx, field, obj)
		case "send_time":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_send_time(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_user_id(ctx, field, obj)
		case "is_sms_push":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_is_sms_push(ctx, field, obj)
		case "is_report":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_is_report(ctx, field, obj)
		case "is_voice_notification":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_is_voice_notification(ctx, field, obj)
		case "is_app_push":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_is_app_push(ctx, field, obj)
		case "notification_content":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_notification_content(ctx, field, obj)
		case "voice_content":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_voice_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_app_push_content(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_supervision_detail_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_disposal_method(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleOfflineDisposalMaxFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalMinFieldsImplementors = []string{"VehicleOfflineDisposalMinFields"}

func (ec *executionContext) _VehicleOfflineDisposalMinFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalMinFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalMinFields")
		case "id":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_id(ctx, field, obj)
		case "vehicle_offline_disposal_id":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_vehicle_offline_disposal_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_enterprise_id(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_telephone(ctx, field, obj)
		case "content":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_content(ctx, field, obj)
		case "send_time":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_send_time(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_user_id(ctx, field, obj)
		case "is_sms_push":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_is_sms_push(ctx, field, obj)
		case "is_report":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_is_report(ctx, field, obj)
		case "is_voice_notification":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_is_voice_notification(ctx, field, obj)
		case "is_app_push":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_is_app_push(ctx, field, obj)
		case "notification_content":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_notification_content(ctx, field, obj)
		case "voice_content":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_voice_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_app_push_content(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_supervision_detail_id(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_disposal_method(ctx, field, obj)
		case "is_deleted":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_is_deleted(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_created_by(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_updated_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._VehicleOfflineDisposalMinFields_deleted_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalMutationResponseImplementors = []string{"VehicleOfflineDisposalMutationResponse"}

func (ec *executionContext) _VehicleOfflineDisposalMutationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalMutationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalMutationResponse")
		case "affected_rows":
			out.Values[i] = ec._VehicleOfflineDisposalMutationResponse_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._VehicleOfflineDisposalMutationResponse_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalStddevFieldsImplementors = []string{"VehicleOfflineDisposalStddevFields"}

func (ec *executionContext) _VehicleOfflineDisposalStddevFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalStddevFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalStddevFields")
		case "id":
			out.Values[i] = ec._VehicleOfflineDisposalStddevFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalStddevPopFieldsImplementors = []string{"VehicleOfflineDisposalStddevPopFields"}

func (ec *executionContext) _VehicleOfflineDisposalStddevPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalStddevPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalStddevPopFields")
		case "id":
			out.Values[i] = ec._VehicleOfflineDisposalStddevPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalStddevSampFieldsImplementors = []string{"VehicleOfflineDisposalStddevSampFields"}

func (ec *executionContext) _VehicleOfflineDisposalStddevSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalStddevSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalStddevSampFields")
		case "id":
			out.Values[i] = ec._VehicleOfflineDisposalStddevSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalSumFieldsImplementors = []string{"VehicleOfflineDisposalSumFields"}

func (ec *executionContext) _VehicleOfflineDisposalSumFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalSumFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalSumFields")
		case "id":
			out.Values[i] = ec._VehicleOfflineDisposalSumFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalVarPopFieldsImplementors = []string{"VehicleOfflineDisposalVarPopFields"}

func (ec *executionContext) _VehicleOfflineDisposalVarPopFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalVarPopFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalVarPopFields")
		case "id":
			out.Values[i] = ec._VehicleOfflineDisposalVarPopFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalVarSampFieldsImplementors = []string{"VehicleOfflineDisposalVarSampFields"}

func (ec *executionContext) _VehicleOfflineDisposalVarSampFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalVarSampFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalVarSampFields")
		case "id":
			out.Values[i] = ec._VehicleOfflineDisposalVarSampFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleOfflineDisposalVarianceFieldsImplementors = []string{"VehicleOfflineDisposalVarianceFields"}

func (ec *executionContext) _VehicleOfflineDisposalVarianceFields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleOfflineDisposalVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleOfflineDisposalVarianceFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleOfflineDisposalVarianceFields")
		case "id":
			out.Values[i] = ec._VehicleOfflineDisposalVarianceFields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDynamicSpotCheckDisposal2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSpotCheckDisposal(ctx context.Context, sel ast.SelectionSet, v model1.DynamicSpotCheckDisposal) graphql.Marshaler {
	return ec._DynamicSpotCheckDisposal(ctx, sel, &v)
}

func (ec *executionContext) marshalNDynamicSpotCheckDisposal2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSpotCheckDisposalᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DynamicSpotCheckDisposal) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDynamicSpotCheckDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSpotCheckDisposal(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDynamicSpotCheckDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSpotCheckDisposal(ctx context.Context, sel ast.SelectionSet, v *model1.DynamicSpotCheckDisposal) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposal(ctx, sel, v)
}

func (ec *executionContext) marshalNDynamicSpotCheckDisposalAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAggregate(ctx context.Context, sel ast.SelectionSet, v model.DynamicSpotCheckDisposalAggregate) graphql.Marshaler {
	return ec._DynamicSpotCheckDisposalAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDynamicSpotCheckDisposalAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDynamicSpotCheckDisposalBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx context.Context, v interface{}) (model.DynamicSpotCheckDisposalBoolExp, error) {
	res, err := ec.unmarshalInputDynamicSpotCheckDisposalBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDynamicSpotCheckDisposalInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInput(ctx context.Context, v interface{}) (model.DynamicSpotCheckDisposalInsertInput, error) {
	res, err := ec.unmarshalInputDynamicSpotCheckDisposalInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDynamicSpotCheckDisposalInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSpotCheckDisposalInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSpotCheckDisposalInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDynamicSpotCheckDisposalInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDynamicSpotCheckDisposalInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInput(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalInsertInput, error) {
	res, err := ec.unmarshalInputDynamicSpotCheckDisposalInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDynamicSpotCheckDisposalOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalOrderBy, error) {
	res, err := ec.unmarshalInputDynamicSpotCheckDisposalOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDynamicSpotCheckDisposalSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumn(ctx context.Context, v interface{}) (model.DynamicSpotCheckDisposalSelectColumn, error) {
	var res model.DynamicSpotCheckDisposalSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDynamicSpotCheckDisposalSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DynamicSpotCheckDisposalSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDynamicSupervision2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervision(ctx context.Context, sel ast.SelectionSet, v model1.DynamicSupervision) graphql.Marshaler {
	return ec._DynamicSupervision(ctx, sel, &v)
}

func (ec *executionContext) marshalNDynamicSupervision2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DynamicSupervision) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDynamicSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervision(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDynamicSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervision(ctx context.Context, sel ast.SelectionSet, v *model1.DynamicSupervision) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DynamicSupervision(ctx, sel, v)
}

func (ec *executionContext) marshalNDynamicSupervisionAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAggregate(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionAggregate) graphql.Marshaler {
	return ec._DynamicSupervisionAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDynamicSupervisionAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DynamicSupervisionAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDynamicSupervisionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx context.Context, v interface{}) (model.DynamicSupervisionBoolExp, error) {
	res, err := ec.unmarshalInputDynamicSupervisionBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDynamicSupervisionDetail2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionDetail(ctx context.Context, sel ast.SelectionSet, v model1.DynamicSupervisionDetail) graphql.Marshaler {
	return ec._DynamicSupervisionDetail(ctx, sel, &v)
}

func (ec *executionContext) marshalNDynamicSupervisionDetail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionDetailᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.DynamicSupervisionDetail) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDynamicSupervisionDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDynamicSupervisionDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionDetail(ctx context.Context, sel ast.SelectionSet, v *model1.DynamicSupervisionDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DynamicSupervisionDetail(ctx, sel, v)
}

func (ec *executionContext) marshalNDynamicSupervisionDetailAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAggregate(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionDetailAggregate) graphql.Marshaler {
	return ec._DynamicSupervisionDetailAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNDynamicSupervisionDetailAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDynamicSupervisionDetailBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx context.Context, v interface{}) (model.DynamicSupervisionDetailBoolExp, error) {
	res, err := ec.unmarshalInputDynamicSupervisionDetailBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDynamicSupervisionDetailInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInput(ctx context.Context, v interface{}) (model.DynamicSupervisionDetailInsertInput, error) {
	res, err := ec.unmarshalInputDynamicSupervisionDetailInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDynamicSupervisionDetailInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionDetailInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionDetailInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDynamicSupervisionDetailInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDynamicSupervisionDetailInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailInsertInput, error) {
	res, err := ec.unmarshalInputDynamicSupervisionDetailInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDynamicSupervisionDetailOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailOrderBy, error) {
	res, err := ec.unmarshalInputDynamicSupervisionDetailOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDynamicSupervisionDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumn(ctx context.Context, v interface{}) (model.DynamicSupervisionDetailSelectColumn, error) {
	var res model.DynamicSupervisionDetailSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDynamicSupervisionDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionDetailSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDynamicSupervisionInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInput(ctx context.Context, v interface{}) (model.DynamicSupervisionInsertInput, error) {
	res, err := ec.unmarshalInputDynamicSupervisionInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDynamicSupervisionInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDynamicSupervisionInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNDynamicSupervisionInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionInsertInput, error) {
	res, err := ec.unmarshalInputDynamicSupervisionInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDynamicSupervisionOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionOrderBy, error) {
	res, err := ec.unmarshalInputDynamicSupervisionOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDynamicSupervisionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumn(ctx context.Context, v interface{}) (model.DynamicSupervisionSelectColumn, error) {
	var res model.DynamicSupervisionSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDynamicSupervisionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNJsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNMuckTruckOnline2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐMuckTruckOnline(ctx context.Context, sel ast.SelectionSet, v model1.MuckTruckOnline) graphql.Marshaler {
	return ec._MuckTruckOnline(ctx, sel, &v)
}

func (ec *executionContext) marshalNMuckTruckOnline2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐMuckTruckOnlineᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.MuckTruckOnline) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMuckTruckOnline2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐMuckTruckOnline(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMuckTruckOnline2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐMuckTruckOnline(ctx context.Context, sel ast.SelectionSet, v *model1.MuckTruckOnline) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MuckTruckOnline(ctx, sel, v)
}

func (ec *executionContext) marshalNMuckTruckOnlineAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineAggregate(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckOnlineAggregate) graphql.Marshaler {
	return ec._MuckTruckOnlineAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNMuckTruckOnlineAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineAggregate(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MuckTruckOnlineAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMuckTruckOnlineBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineBoolExp(ctx context.Context, v interface{}) (model.MuckTruckOnlineBoolExp, error) {
	res, err := ec.unmarshalInputMuckTruckOnlineBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckOnlineInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineInsertInput(ctx context.Context, v interface{}) (model.MuckTruckOnlineInsertInput, error) {
	res, err := ec.unmarshalInputMuckTruckOnlineInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckOnlineInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckOnlineInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckOnlineInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckOnlineInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNMuckTruckOnlineInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineInsertInput(ctx context.Context, v interface{}) (*model.MuckTruckOnlineInsertInput, error) {
	res, err := ec.unmarshalInputMuckTruckOnlineInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckOnlineOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineOrderBy(ctx context.Context, v interface{}) (*model.MuckTruckOnlineOrderBy, error) {
	res, err := ec.unmarshalInputMuckTruckOnlineOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMuckTruckOnlineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSelectColumn(ctx context.Context, v interface{}) (model.MuckTruckOnlineSelectColumn, error) {
	var res model.MuckTruckOnlineSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMuckTruckOnlineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.MuckTruckOnlineSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNRegionIssued2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionIssued(ctx context.Context, sel ast.SelectionSet, v model1.RegionIssued) graphql.Marshaler {
	return ec._RegionIssued(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegionIssued2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionIssuedᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.RegionIssued) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRegionIssued2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionIssued(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRegionIssued2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionIssued(ctx context.Context, sel ast.SelectionSet, v *model1.RegionIssued) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RegionIssued(ctx, sel, v)
}

func (ec *executionContext) marshalNRegionIssuedAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedAggregate(ctx context.Context, sel ast.SelectionSet, v model.RegionIssuedAggregate) graphql.Marshaler {
	return ec._RegionIssuedAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegionIssuedAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedAggregate(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RegionIssuedAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRegionIssuedBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedBoolExp(ctx context.Context, v interface{}) (model.RegionIssuedBoolExp, error) {
	res, err := ec.unmarshalInputRegionIssuedBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionIssuedInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedInsertInput(ctx context.Context, v interface{}) (model.RegionIssuedInsertInput, error) {
	res, err := ec.unmarshalInputRegionIssuedInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionIssuedInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.RegionIssuedInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionIssuedInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRegionIssuedInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNRegionIssuedInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedInsertInput(ctx context.Context, v interface{}) (*model.RegionIssuedInsertInput, error) {
	res, err := ec.unmarshalInputRegionIssuedInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionIssuedOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedOrderBy(ctx context.Context, v interface{}) (*model.RegionIssuedOrderBy, error) {
	res, err := ec.unmarshalInputRegionIssuedOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionIssuedSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSelectColumn(ctx context.Context, v interface{}) (model.RegionIssuedSelectColumn, error) {
	var res model.RegionIssuedSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRegionIssuedSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.RegionIssuedSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNRegionManagement2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionManagement(ctx context.Context, sel ast.SelectionSet, v model1.RegionManagement) graphql.Marshaler {
	return ec._RegionManagement(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegionManagement2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionManagementᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.RegionManagement) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRegionManagement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionManagement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRegionManagement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionManagement(ctx context.Context, sel ast.SelectionSet, v *model1.RegionManagement) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RegionManagement(ctx, sel, v)
}

func (ec *executionContext) marshalNRegionManagementAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementAggregate(ctx context.Context, sel ast.SelectionSet, v model.RegionManagementAggregate) graphql.Marshaler {
	return ec._RegionManagementAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegionManagementAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementAggregate(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RegionManagementAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRegionManagementBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementBoolExp(ctx context.Context, v interface{}) (model.RegionManagementBoolExp, error) {
	res, err := ec.unmarshalInputRegionManagementBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionManagementInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementInsertInput(ctx context.Context, v interface{}) (model.RegionManagementInsertInput, error) {
	res, err := ec.unmarshalInputRegionManagementInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionManagementInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.RegionManagementInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionManagementInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRegionManagementInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNRegionManagementInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementInsertInput(ctx context.Context, v interface{}) (*model.RegionManagementInsertInput, error) {
	res, err := ec.unmarshalInputRegionManagementInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionManagementOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementOrderBy(ctx context.Context, v interface{}) (*model.RegionManagementOrderBy, error) {
	res, err := ec.unmarshalInputRegionManagementOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegionManagementSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSelectColumn(ctx context.Context, v interface{}) (model.RegionManagementSelectColumn, error) {
	var res model.RegionManagementSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRegionManagementSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.RegionManagementSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNVehicleAlarmSupervision2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmSupervision(ctx context.Context, sel ast.SelectionSet, v model1.VehicleAlarmSupervision) graphql.Marshaler {
	return ec._VehicleAlarmSupervision(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleAlarmSupervision2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmSupervisionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleAlarmSupervision) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleAlarmSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmSupervision(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleAlarmSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmSupervision(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleAlarmSupervision) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleAlarmSupervision(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleAlarmSupervisionAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleAlarmSupervisionAggregate) graphql.Marshaler {
	return ec._VehicleAlarmSupervisionAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleAlarmSupervisionAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleAlarmSupervisionBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionBoolExp(ctx context.Context, v interface{}) (model.VehicleAlarmSupervisionBoolExp, error) {
	res, err := ec.unmarshalInputVehicleAlarmSupervisionBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmSupervisionInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionInsertInput(ctx context.Context, v interface{}) (model.VehicleAlarmSupervisionInsertInput, error) {
	res, err := ec.unmarshalInputVehicleAlarmSupervisionInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmSupervisionInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleAlarmSupervisionInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmSupervisionInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleAlarmSupervisionInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleAlarmSupervisionInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionInsertInput(ctx context.Context, v interface{}) (*model.VehicleAlarmSupervisionInsertInput, error) {
	res, err := ec.unmarshalInputVehicleAlarmSupervisionInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmSupervisionOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmSupervisionOrderBy, error) {
	res, err := ec.unmarshalInputVehicleAlarmSupervisionOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmSupervisionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSelectColumn(ctx context.Context, v interface{}) (model.VehicleAlarmSupervisionSelectColumn, error) {
	var res model.VehicleAlarmSupervisionSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleAlarmSupervisionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleAlarmSupervisionSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVehicleAlarmTimesRecord2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmTimesRecord(ctx context.Context, sel ast.SelectionSet, v model1.VehicleAlarmTimesRecord) graphql.Marshaler {
	return ec._VehicleAlarmTimesRecord(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleAlarmTimesRecord2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmTimesRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleAlarmTimesRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleAlarmTimesRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmTimesRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleAlarmTimesRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmTimesRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleAlarmTimesRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleAlarmTimesRecordAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleAlarmTimesRecordAggregate) graphql.Marshaler {
	return ec._VehicleAlarmTimesRecordAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleAlarmTimesRecordAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleAlarmTimesRecordBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordBoolExp(ctx context.Context, v interface{}) (model.VehicleAlarmTimesRecordBoolExp, error) {
	res, err := ec.unmarshalInputVehicleAlarmTimesRecordBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmTimesRecordInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordInsertInput(ctx context.Context, v interface{}) (model.VehicleAlarmTimesRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehicleAlarmTimesRecordInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmTimesRecordInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleAlarmTimesRecordInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmTimesRecordInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleAlarmTimesRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleAlarmTimesRecordInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordInsertInput(ctx context.Context, v interface{}) (*model.VehicleAlarmTimesRecordInsertInput, error) {
	res, err := ec.unmarshalInputVehicleAlarmTimesRecordInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmTimesRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordOrderBy(ctx context.Context, v interface{}) (*model.VehicleAlarmTimesRecordOrderBy, error) {
	res, err := ec.unmarshalInputVehicleAlarmTimesRecordOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleAlarmTimesRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSelectColumn(ctx context.Context, v interface{}) (model.VehicleAlarmTimesRecordSelectColumn, error) {
	var res model.VehicleAlarmTimesRecordSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleAlarmTimesRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleAlarmTimesRecordSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNVehicleOfflineDisposal2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleOfflineDisposal(ctx context.Context, sel ast.SelectionSet, v model1.VehicleOfflineDisposal) graphql.Marshaler {
	return ec._VehicleOfflineDisposal(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleOfflineDisposal2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleOfflineDisposalᚄ(ctx context.Context, sel ast.SelectionSet, v []*model1.VehicleOfflineDisposal) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleOfflineDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleOfflineDisposal(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNVehicleOfflineDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleOfflineDisposal(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleOfflineDisposal) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleOfflineDisposal(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleOfflineDisposalAggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleOfflineDisposalAggregate) graphql.Marshaler {
	return ec._VehicleOfflineDisposalAggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleOfflineDisposalAggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalAggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleOfflineDisposalBoolExp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalBoolExp(ctx context.Context, v interface{}) (model.VehicleOfflineDisposalBoolExp, error) {
	res, err := ec.unmarshalInputVehicleOfflineDisposalBoolExp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleOfflineDisposalInsertInput2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalInsertInput(ctx context.Context, v interface{}) (model.VehicleOfflineDisposalInsertInput, error) {
	res, err := ec.unmarshalInputVehicleOfflineDisposalInsertInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleOfflineDisposalInsertInput2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleOfflineDisposalInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleOfflineDisposalInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleOfflineDisposalInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNVehicleOfflineDisposalInsertInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalInsertInput(ctx context.Context, v interface{}) (*model.VehicleOfflineDisposalInsertInput, error) {
	res, err := ec.unmarshalInputVehicleOfflineDisposalInsertInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleOfflineDisposalOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalOrderBy(ctx context.Context, v interface{}) (*model.VehicleOfflineDisposalOrderBy, error) {
	res, err := ec.unmarshalInputVehicleOfflineDisposalOrderBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVehicleOfflineDisposalSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSelectColumn(ctx context.Context, v interface{}) (model.VehicleOfflineDisposalSelectColumn, error) {
	var res model.VehicleOfflineDisposalSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleOfflineDisposalSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleOfflineDisposalSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOBigintComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model2.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBigintComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model2.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSpotCheckDisposal(ctx context.Context, sel ast.SelectionSet, v *model1.DynamicSpotCheckDisposal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposal(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODynamicSpotCheckDisposalBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx context.Context, v interface{}) ([]*model.DynamicSpotCheckDisposalBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSpotCheckDisposalBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODynamicSpotCheckDisposalBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODynamicSpotCheckDisposalBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDynamicSpotCheckDisposalBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODynamicSpotCheckDisposalIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalIncInput(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDynamicSpotCheckDisposalIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODynamicSpotCheckDisposalOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSpotCheckDisposalOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSpotCheckDisposalOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDynamicSpotCheckDisposalOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODynamicSpotCheckDisposalSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DynamicSpotCheckDisposalSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DynamicSpotCheckDisposalSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDynamicSpotCheckDisposalSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DynamicSpotCheckDisposalSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDynamicSpotCheckDisposalSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODynamicSpotCheckDisposalSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSetInput(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDynamicSpotCheckDisposalSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSpotCheckDisposalVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSpotCheckDisposalVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervision(ctx context.Context, sel ast.SelectionSet, v *model1.DynamicSupervision) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervision(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODynamicSupervisionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODynamicSupervisionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODynamicSupervisionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx context.Context, v interface{}) (*model.DynamicSupervisionBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDynamicSupervisionBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODynamicSupervisionDetail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐDynamicSupervisionDetail(ctx context.Context, sel ast.SelectionSet, v *model1.DynamicSupervisionDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetail(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionDetailAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionDetailAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODynamicSupervisionDetailBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionDetailBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionDetailBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODynamicSupervisionDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODynamicSupervisionDetailBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDynamicSupervisionDetailBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODynamicSupervisionDetailIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailIncInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDynamicSupervisionDetailIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODynamicSupervisionDetailMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionDetailMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionDetailMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODynamicSupervisionDetailOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionDetailOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionDetailOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDynamicSupervisionDetailOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODynamicSupervisionDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DynamicSupervisionDetailSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DynamicSupervisionDetailSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDynamicSupervisionDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODynamicSupervisionDetailSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DynamicSupervisionDetailSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDynamicSupervisionDetailSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODynamicSupervisionDetailSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSetInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDynamicSupervisionDetailSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODynamicSupervisionDetailStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionDetailStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionDetailStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionDetailSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionDetailVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionDetailVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionDetailVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionDetailVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalODynamicSupervisionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionIncInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDynamicSupervisionIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODynamicSupervisionMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalODynamicSupervisionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDynamicSupervisionOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODynamicSupervisionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DynamicSupervisionSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DynamicSupervisionSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDynamicSupervisionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODynamicSupervisionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DynamicSupervisionSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDynamicSupervisionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODynamicSupervisionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSetInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDynamicSupervisionSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODynamicSupervisionStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalODynamicSupervisionVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DynamicSupervisionVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model2.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOJsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOJsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNJsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOJsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOMuckTruckOnline2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐMuckTruckOnline(ctx context.Context, sel ast.SelectionSet, v *model1.MuckTruckOnline) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnline(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckOnlineAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckOnlineAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMuckTruckOnlineBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineBoolExp(ctx context.Context, v interface{}) ([]*model.MuckTruckOnlineBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckOnlineBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMuckTruckOnlineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMuckTruckOnlineBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineBoolExp(ctx context.Context, v interface{}) (*model.MuckTruckOnlineBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckOnlineBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMuckTruckOnlineIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineIncInput(ctx context.Context, v interface{}) (*model.MuckTruckOnlineIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckOnlineIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMuckTruckOnlineMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckOnlineMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineMinFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckOnlineMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMuckTruckOnlineOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineOrderByᚄ(ctx context.Context, v interface{}) ([]*model.MuckTruckOnlineOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.MuckTruckOnlineOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckOnlineOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMuckTruckOnlineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.MuckTruckOnlineSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.MuckTruckOnlineSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMuckTruckOnlineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMuckTruckOnlineSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MuckTruckOnlineSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMuckTruckOnlineSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOMuckTruckOnlineSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSetInput(ctx context.Context, v interface{}) (*model.MuckTruckOnlineSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMuckTruckOnlineSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMuckTruckOnlineStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckOnlineStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckOnlineStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckOnlineSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineSumFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckOnlineVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckOnlineVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOMuckTruckOnlineVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐMuckTruckOnlineVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.MuckTruckOnlineVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MuckTruckOnlineVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalONumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNNumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalONumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalONumericComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model2.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNumericComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model2.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model2.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderBy2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model2.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNPoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOPoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOPointComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx context.Context, v interface{}) (*model2.PointComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPointComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegionIssued2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionIssued(ctx context.Context, sel ast.SelectionSet, v *model1.RegionIssued) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssued(ctx, sel, v)
}

func (ec *executionContext) marshalORegionIssuedAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionIssuedAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalORegionIssuedBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedBoolExp(ctx context.Context, v interface{}) ([]*model.RegionIssuedBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionIssuedBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORegionIssuedBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORegionIssuedBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedBoolExp(ctx context.Context, v interface{}) (*model.RegionIssuedBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionIssuedBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORegionIssuedIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedIncInput(ctx context.Context, v interface{}) (*model.RegionIssuedIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionIssuedIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegionIssuedMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionIssuedMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedMinFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionIssuedMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalORegionIssuedOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedOrderByᚄ(ctx context.Context, v interface{}) ([]*model.RegionIssuedOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionIssuedOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRegionIssuedOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORegionIssuedSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.RegionIssuedSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.RegionIssuedSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRegionIssuedSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORegionIssuedSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.RegionIssuedSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRegionIssuedSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalORegionIssuedSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSetInput(ctx context.Context, v interface{}) (*model.RegionIssuedSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionIssuedSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegionIssuedStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionIssuedStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionIssuedStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionIssuedSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedSumFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionIssuedVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionIssuedVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionIssuedVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionIssuedVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionIssuedVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionIssuedVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionManagement2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐRegionManagement(ctx context.Context, sel ast.SelectionSet, v *model1.RegionManagement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagement(ctx, sel, v)
}

func (ec *executionContext) marshalORegionManagementAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionManagementAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalORegionManagementBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementBoolExp(ctx context.Context, v interface{}) ([]*model.RegionManagementBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionManagementBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORegionManagementBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORegionManagementBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementBoolExp(ctx context.Context, v interface{}) (*model.RegionManagementBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionManagementBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORegionManagementIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementIncInput(ctx context.Context, v interface{}) (*model.RegionManagementIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionManagementIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegionManagementMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionManagementMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementMinFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionManagementMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalORegionManagementOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementOrderByᚄ(ctx context.Context, v interface{}) ([]*model.RegionManagementOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.RegionManagementOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRegionManagementOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORegionManagementSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.RegionManagementSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.RegionManagementSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRegionManagementSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORegionManagementSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.RegionManagementSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRegionManagementSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalORegionManagementSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSetInput(ctx context.Context, v interface{}) (*model.RegionManagementSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionManagementSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegionManagementStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionManagementStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionManagementStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionManagementSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementSumFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionManagementVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionManagementVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalORegionManagementVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐRegionManagementVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.RegionManagementVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionManagementVarianceFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model2.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNTimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOTimestamptzComparisonExp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model2.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimestamptzComparisonExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleAlarmSupervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmSupervision(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleAlarmSupervision) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervision(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleAlarmSupervisionBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleAlarmSupervisionBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmSupervisionBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleAlarmSupervisionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleAlarmSupervisionBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionBoolExp(ctx context.Context, v interface{}) (*model.VehicleAlarmSupervisionBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleAlarmSupervisionBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleAlarmSupervisionIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionIncInput(ctx context.Context, v interface{}) (*model.VehicleAlarmSupervisionIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleAlarmSupervisionIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleAlarmSupervisionOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleAlarmSupervisionOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmSupervisionOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleAlarmSupervisionOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleAlarmSupervisionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleAlarmSupervisionSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleAlarmSupervisionSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleAlarmSupervisionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleAlarmSupervisionSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleAlarmSupervisionSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleAlarmSupervisionSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSetInput(ctx context.Context, v interface{}) (*model.VehicleAlarmSupervisionSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleAlarmSupervisionSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmSupervisionVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmSupervisionVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmSupervisionVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmSupervisionVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecord2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleAlarmTimesRecord(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleAlarmTimesRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleAlarmTimesRecordBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleAlarmTimesRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmTimesRecordBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleAlarmTimesRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleAlarmTimesRecordBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordBoolExp(ctx context.Context, v interface{}) (*model.VehicleAlarmTimesRecordBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleAlarmTimesRecordBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleAlarmTimesRecordIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordIncInput(ctx context.Context, v interface{}) (*model.VehicleAlarmTimesRecordIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleAlarmTimesRecordIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleAlarmTimesRecordOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleAlarmTimesRecordOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleAlarmTimesRecordOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleAlarmTimesRecordOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleAlarmTimesRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleAlarmTimesRecordSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleAlarmTimesRecordSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleAlarmTimesRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleAlarmTimesRecordSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleAlarmTimesRecordSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleAlarmTimesRecordSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSetInput(ctx context.Context, v interface{}) (*model.VehicleAlarmTimesRecordSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleAlarmTimesRecordSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleAlarmTimesRecordVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleAlarmTimesRecordVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleAlarmTimesRecordVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleAlarmTimesRecordVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleOfflineDisposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋmodelᚐVehicleOfflineDisposal(ctx context.Context, sel ast.SelectionSet, v *model1.VehicleOfflineDisposal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposal(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalAggregateFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalAggregateFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalAvgFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalAvgFields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleOfflineDisposalBoolExp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleOfflineDisposalBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleOfflineDisposalBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOVehicleOfflineDisposalBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleOfflineDisposalBoolExp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalBoolExp(ctx context.Context, v interface{}) (*model.VehicleOfflineDisposalBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleOfflineDisposalBoolExp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOVehicleOfflineDisposalIncInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalIncInput(ctx context.Context, v interface{}) (*model.VehicleOfflineDisposalIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleOfflineDisposalIncInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalMaxFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalMaxFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalMinFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalMinFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalMutationResponse2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalMutationResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleOfflineDisposalOrderBy2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleOfflineDisposalOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleOfflineDisposalOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleOfflineDisposalOrderBy2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOVehicleOfflineDisposalSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleOfflineDisposalSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleOfflineDisposalSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNVehicleOfflineDisposalSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOVehicleOfflineDisposalSelectColumn2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleOfflineDisposalSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicleOfflineDisposalSelectColumn2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOVehicleOfflineDisposalSetInput2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSetInput(ctx context.Context, v interface{}) (*model.VehicleOfflineDisposalSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputVehicleOfflineDisposalSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalStddevFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalStddevFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalStddevPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalStddevPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalStddevSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalStddevSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalSumFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalSumFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalVarPopFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalVarPopFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalVarSampFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalVarSampFields(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleOfflineDisposalVarianceFields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐVehicleOfflineDisposalVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleOfflineDisposalVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleOfflineDisposalVarianceFields(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
