// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"VehicleSupervision/internal/modules/dynamic_supervision/graph/model"
	model1 "VehicleSupervision/pkg/graphql/model"
	"VehicleSupervision/pkg/graphql/scalar"
	"bytes"
	"context"
	"errors"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteDynamicSpotCheckDisposal     func(childComplexity int, where model.DynamicSpotCheckDisposalBoolExp) int
		DeleteDynamicSpotCheckDisposalByPk func(childComplexity int, id int64) int
		DeleteDynamicSupervision           func(childComplexity int, where model.DynamicSupervisionBoolExp) int
		DeleteDynamicSupervisionByPk       func(childComplexity int, id int64, supervisionID string) int
		DeleteDynamicSupervisionDetail     func(childComplexity int, where model.DynamicSupervisionDetailBoolExp) int
		DeleteDynamicSupervisionDetailByPk func(childComplexity int, id int64, supervisionDetailID string) int
		InsertDynamicSpotCheckDisposal     func(childComplexity int, objects []*model.DynamicSpotCheckDisposalInsertInput, onConflict *model.DynamicSpotCheckDisposalOnConflict) int
		InsertDynamicSpotCheckDisposalOne  func(childComplexity int, object model.DynamicSpotCheckDisposalInsertInput, onConflict *model.DynamicSpotCheckDisposalOnConflict) int
		InsertDynamicSupervision           func(childComplexity int, objects []*model.DynamicSupervisionInsertInput, onConflict *model.DynamicSupervisionOnConflict) int
		InsertDynamicSupervisionDetail     func(childComplexity int, objects []*model.DynamicSupervisionDetailInsertInput, onConflict *model.DynamicSupervisionDetailOnConflict) int
		InsertDynamicSupervisionDetailOne  func(childComplexity int, object model.DynamicSupervisionDetailInsertInput, onConflict *model.DynamicSupervisionDetailOnConflict) int
		InsertDynamicSupervisionOne        func(childComplexity int, object model.DynamicSupervisionInsertInput, onConflict *model.DynamicSupervisionOnConflict) int
		UpdateDynamicSpotCheckDisposal     func(childComplexity int, inc *model.DynamicSpotCheckDisposalIncInput, set *model.DynamicSpotCheckDisposalSetInput, where model.DynamicSpotCheckDisposalBoolExp) int
		UpdateDynamicSpotCheckDisposalByPk func(childComplexity int, inc *model.DynamicSpotCheckDisposalIncInput, set *model.DynamicSpotCheckDisposalSetInput, pkColumns model.DynamicSpotCheckDisposalPkColumnsInput) int
		UpdateDynamicSupervision           func(childComplexity int, inc *model.DynamicSupervisionIncInput, set *model.DynamicSupervisionSetInput, where model.DynamicSupervisionBoolExp) int
		UpdateDynamicSupervisionByPk       func(childComplexity int, inc *model.DynamicSupervisionIncInput, set *model.DynamicSupervisionSetInput, pkColumns model.DynamicSupervisionPkColumnsInput) int
		UpdateDynamicSupervisionDetail     func(childComplexity int, inc *model.DynamicSupervisionDetailIncInput, set *model.DynamicSupervisionDetailSetInput, where model.DynamicSupervisionDetailBoolExp) int
		UpdateDynamicSupervisionDetailByPk func(childComplexity int, inc *model.DynamicSupervisionDetailIncInput, set *model.DynamicSupervisionDetailSetInput, pkColumns model.DynamicSupervisionDetailPkColumnsInput) int
	}

	Query struct {
		DynamicSpotCheckDisposal          func(childComplexity int, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) int
		DynamicSpotCheckDisposalAggregate func(childComplexity int, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) int
		DynamicSpotCheckDisposalByPk      func(childComplexity int, id int64) int
		DynamicSupervision                func(childComplexity int, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) int
		DynamicSupervisionAggregate       func(childComplexity int, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) int
		DynamicSupervisionByPk            func(childComplexity int, id int64, supervisionID string) int
		DynamicSupervisionDetail          func(childComplexity int, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) int
		DynamicSupervisionDetailAggregate func(childComplexity int, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) int
		DynamicSupervisionDetailByPk      func(childComplexity int, id int64, supervisionDetailID string) int
	}

	Subscription struct {
		DynamicSpotCheckDisposal          func(childComplexity int, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) int
		DynamicSpotCheckDisposalAggregate func(childComplexity int, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) int
		DynamicSpotCheckDisposalByPk      func(childComplexity int, id int64) int
		DynamicSupervision                func(childComplexity int, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) int
		DynamicSupervisionAggregate       func(childComplexity int, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) int
		DynamicSupervisionByPk            func(childComplexity int, id int64, supervisionID string) int
		DynamicSupervisionDetail          func(childComplexity int, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) int
		DynamicSupervisionDetailAggregate func(childComplexity int, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) int
		DynamicSupervisionDetailByPk      func(childComplexity int, id int64, supervisionDetailID string) int
	}

	DynamicSpotCheckDisposal struct {
		AnnounceContent               func(childComplexity int) int
		AppPushContent                func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DisposalContent               func(childComplexity int) int
		DisposalMethod                func(childComplexity int) int
		DisposalResult                func(childComplexity int) int
		EnterpriseID                  func(childComplexity int) int
		FeedbackTime                  func(childComplexity int) int
		ID                            func(childComplexity int) int
		ImageAbnormalHandingMeasure   func(childComplexity int) int
		IsAnnounce                    func(childComplexity int) int
		IsAppPush                     func(childComplexity int) int
		IsDelete                      func(childComplexity int) int
		IsNotify                      func(childComplexity int) int
		IsSmsPush                     func(childComplexity int) int
		NotifyContent                 func(childComplexity int) int
		OperationUser                 func(childComplexity int) int
		SendTime                      func(childComplexity int) int
		SupervisionDetailID           func(childComplexity int) int
		TachographDataDisposalMeasure func(childComplexity int) int
		Telephone                     func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		VehicleID                     func(childComplexity int) int
	}

	DynamicSpotCheckDisposalAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DynamicSpotCheckDisposalAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DynamicSpotCheckDisposalSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DynamicSpotCheckDisposalAvgFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalMaxFields struct {
		AnnounceContent               func(childComplexity int) int
		AppPushContent                func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DisposalContent               func(childComplexity int) int
		DisposalMethod                func(childComplexity int) int
		DisposalResult                func(childComplexity int) int
		EnterpriseID                  func(childComplexity int) int
		FeedbackTime                  func(childComplexity int) int
		ID                            func(childComplexity int) int
		ImageAbnormalHandingMeasure   func(childComplexity int) int
		NotifyContent                 func(childComplexity int) int
		OperationUser                 func(childComplexity int) int
		SendTime                      func(childComplexity int) int
		SupervisionDetailID           func(childComplexity int) int
		TachographDataDisposalMeasure func(childComplexity int) int
		Telephone                     func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		VehicleID                     func(childComplexity int) int
	}

	DynamicSpotCheckDisposalMinFields struct {
		AnnounceContent               func(childComplexity int) int
		AppPushContent                func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CreatedBy                     func(childComplexity int) int
		DeletedAt                     func(childComplexity int) int
		DeletedBy                     func(childComplexity int) int
		DisposalContent               func(childComplexity int) int
		DisposalMethod                func(childComplexity int) int
		DisposalResult                func(childComplexity int) int
		EnterpriseID                  func(childComplexity int) int
		FeedbackTime                  func(childComplexity int) int
		ID                            func(childComplexity int) int
		ImageAbnormalHandingMeasure   func(childComplexity int) int
		NotifyContent                 func(childComplexity int) int
		OperationUser                 func(childComplexity int) int
		SendTime                      func(childComplexity int) int
		SupervisionDetailID           func(childComplexity int) int
		TachographDataDisposalMeasure func(childComplexity int) int
		Telephone                     func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		UpdatedBy                     func(childComplexity int) int
		VehicleID                     func(childComplexity int) int
	}

	DynamicSpotCheckDisposalMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DynamicSpotCheckDisposalStddevFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalStddevPopFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalStddevSampFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalSumFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalVarPopFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalVarSampFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSpotCheckDisposalVarianceFields struct {
		DisposalMethod func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	DynamicSupervision struct {
		CheckUserID          func(childComplexity int) int
		CityID               func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		Day                  func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DistrictID           func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsDelete             func(childComplexity int) int
		Month                func(childComplexity int) int
		ProvinceID           func(childComplexity int) int
		SpotCheckDate        func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		SupervisionID        func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DynamicSupervisionAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DynamicSupervisionSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DynamicSupervisionAvgFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionDetail struct {
		Assignee                     func(childComplexity int) int
		BusinessScope                func(childComplexity int) int
		Coordinate                   func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		Curve                        func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		DisposalMeasures             func(childComplexity int) int
		DisposalMeasures1            func(childComplexity int) int
		DisposalMeasures2            func(childComplexity int) int
		DisposalMeasures3            func(childComplexity int) int
		DisposalMeasures4            func(childComplexity int) int
		DisposalMeasures5            func(childComplexity int) int
		DisposalMeasures6            func(childComplexity int) int
		DisposalMeasures7            func(childComplexity int) int
		DisposalResults              func(childComplexity int) int
		DisposalResults1             func(childComplexity int) int
		DisposalResults2             func(childComplexity int) int
		DisposalResults3             func(childComplexity int) int
		DisposalResults4             func(childComplexity int) int
		DisposalResults5             func(childComplexity int) int
		DisposalResults6             func(childComplexity int) int
		DisposalResults7             func(childComplexity int) int
		DriverID                     func(childComplexity int) int
		EnterpriseID                 func(childComplexity int) int
		Equipment                    func(childComplexity int) int
		FatigueAlarmTime             func(childComplexity int) int
		FeedbackTime                 func(childComplexity int) int
		GpsSpeed                     func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsDelete                     func(childComplexity int) int
		IsFatigueDriving             func(childComplexity int) int
		IsLocate                     func(childComplexity int) int
		IsMorningOutage              func(childComplexity int) int
		IsOnline                     func(childComplexity int) int
		IsSend                       func(childComplexity int) int
		IsSpeeding                   func(childComplexity int) int
		IsTachographRecordNormal     func(childComplexity int) int
		LatitudeLongitudeDescription func(childComplexity int) int
		LensOn                       func(childComplexity int) int
		LensPosition                 func(childComplexity int) int
		MonitorEndTime               func(childComplexity int) int
		MonitoringLocation           func(childComplexity int) int
		MonitoringTime               func(childComplexity int) int
		OtherInfraction              func(childComplexity int) int
		Others                       func(childComplexity int) int
		OutageAlarmTime              func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		SpeedAlarmTime               func(childComplexity int) int
		SpeedingSpeed                func(childComplexity int) int
		SupervisionDetailID          func(childComplexity int) int
		SupervisionID                func(childComplexity int) int
		TachographDataException      func(childComplexity int) int
		TachographSpeed              func(childComplexity int) int
		TaxiState                    func(childComplexity int) int
		Trail                        func(childComplexity int) int
		TreatmentTime                func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehicleID                    func(childComplexity int) int
	}

	DynamicSupervisionDetailAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	DynamicSupervisionDetailAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.DynamicSupervisionDetailSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	DynamicSupervisionDetailAvgFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailMaxFields struct {
		Assignee                     func(childComplexity int) int
		BusinessScope                func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		Curve                        func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		DisposalMeasures             func(childComplexity int) int
		DisposalMeasures1            func(childComplexity int) int
		DisposalMeasures2            func(childComplexity int) int
		DisposalMeasures3            func(childComplexity int) int
		DisposalMeasures4            func(childComplexity int) int
		DisposalMeasures5            func(childComplexity int) int
		DisposalMeasures6            func(childComplexity int) int
		DisposalMeasures7            func(childComplexity int) int
		DisposalResults              func(childComplexity int) int
		DisposalResults1             func(childComplexity int) int
		DisposalResults2             func(childComplexity int) int
		DisposalResults3             func(childComplexity int) int
		DisposalResults4             func(childComplexity int) int
		DisposalResults5             func(childComplexity int) int
		DisposalResults6             func(childComplexity int) int
		DisposalResults7             func(childComplexity int) int
		DriverID                     func(childComplexity int) int
		EnterpriseID                 func(childComplexity int) int
		Equipment                    func(childComplexity int) int
		FatigueAlarmTime             func(childComplexity int) int
		FeedbackTime                 func(childComplexity int) int
		GpsSpeed                     func(childComplexity int) int
		ID                           func(childComplexity int) int
		LatitudeLongitudeDescription func(childComplexity int) int
		LensOn                       func(childComplexity int) int
		LensPosition                 func(childComplexity int) int
		MonitorEndTime               func(childComplexity int) int
		MonitoringLocation           func(childComplexity int) int
		MonitoringTime               func(childComplexity int) int
		OtherInfraction              func(childComplexity int) int
		Others                       func(childComplexity int) int
		OutageAlarmTime              func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		SpeedAlarmTime               func(childComplexity int) int
		SpeedingSpeed                func(childComplexity int) int
		SupervisionDetailID          func(childComplexity int) int
		SupervisionID                func(childComplexity int) int
		TachographDataException      func(childComplexity int) int
		TachographSpeed              func(childComplexity int) int
		TaxiState                    func(childComplexity int) int
		Trail                        func(childComplexity int) int
		TreatmentTime                func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehicleID                    func(childComplexity int) int
	}

	DynamicSupervisionDetailMinFields struct {
		Assignee                     func(childComplexity int) int
		BusinessScope                func(childComplexity int) int
		CreatedAt                    func(childComplexity int) int
		CreatedBy                    func(childComplexity int) int
		Curve                        func(childComplexity int) int
		DeletedAt                    func(childComplexity int) int
		DeletedBy                    func(childComplexity int) int
		DisposalMeasures             func(childComplexity int) int
		DisposalMeasures1            func(childComplexity int) int
		DisposalMeasures2            func(childComplexity int) int
		DisposalMeasures3            func(childComplexity int) int
		DisposalMeasures4            func(childComplexity int) int
		DisposalMeasures5            func(childComplexity int) int
		DisposalMeasures6            func(childComplexity int) int
		DisposalMeasures7            func(childComplexity int) int
		DisposalResults              func(childComplexity int) int
		DisposalResults1             func(childComplexity int) int
		DisposalResults2             func(childComplexity int) int
		DisposalResults3             func(childComplexity int) int
		DisposalResults4             func(childComplexity int) int
		DisposalResults5             func(childComplexity int) int
		DisposalResults6             func(childComplexity int) int
		DisposalResults7             func(childComplexity int) int
		DriverID                     func(childComplexity int) int
		EnterpriseID                 func(childComplexity int) int
		Equipment                    func(childComplexity int) int
		FatigueAlarmTime             func(childComplexity int) int
		FeedbackTime                 func(childComplexity int) int
		GpsSpeed                     func(childComplexity int) int
		ID                           func(childComplexity int) int
		LatitudeLongitudeDescription func(childComplexity int) int
		LensOn                       func(childComplexity int) int
		LensPosition                 func(childComplexity int) int
		MonitorEndTime               func(childComplexity int) int
		MonitoringLocation           func(childComplexity int) int
		MonitoringTime               func(childComplexity int) int
		OtherInfraction              func(childComplexity int) int
		Others                       func(childComplexity int) int
		OutageAlarmTime              func(childComplexity int) int
		Remarks                      func(childComplexity int) int
		SpeedAlarmTime               func(childComplexity int) int
		SpeedingSpeed                func(childComplexity int) int
		SupervisionDetailID          func(childComplexity int) int
		SupervisionID                func(childComplexity int) int
		TachographDataException      func(childComplexity int) int
		TachographSpeed              func(childComplexity int) int
		TaxiState                    func(childComplexity int) int
		Trail                        func(childComplexity int) int
		TreatmentTime                func(childComplexity int) int
		UpdatedAt                    func(childComplexity int) int
		UpdatedBy                    func(childComplexity int) int
		VehicleID                    func(childComplexity int) int
	}

	DynamicSupervisionDetailMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DynamicSupervisionDetailStddevFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailStddevPopFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailStddevSampFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailSumFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailVarPopFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailVarSampFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionDetailVarianceFields struct {
		BusinessScope func(childComplexity int) int
		Curve         func(childComplexity int) int
		Equipment     func(childComplexity int) int
		ID            func(childComplexity int) int
		LensPosition  func(childComplexity int) int
		TaxiState     func(childComplexity int) int
		Trail         func(childComplexity int) int
	}

	DynamicSupervisionMaxFields struct {
		CheckUserID          func(childComplexity int) int
		CityID               func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		Day                  func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DistrictID           func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		ProvinceID           func(childComplexity int) int
		SpotCheckDate        func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		SupervisionID        func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionMinFields struct {
		CheckUserID          func(childComplexity int) int
		CityID               func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		Day                  func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		DeletedBy            func(childComplexity int) int
		DistrictID           func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		ProvinceID           func(childComplexity int) int
		SpotCheckDate        func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		SupervisionID        func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UpdatedBy            func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	DynamicSupervisionStddevFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionStddevPopFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionStddevSampFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionSumFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionVarPopFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionVarSampFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}

	DynamicSupervisionVarianceFields struct {
		Day                  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Month                func(childComplexity int) int
		SpotCheckNumber      func(childComplexity int) int
		SpotCheckRatio       func(childComplexity int) int
		SpotCheckTotalNumber func(childComplexity int) int
		TotalNumberVehicle   func(childComplexity int) int
		Year                 func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteDynamicSupervision(ctx context.Context, where model.DynamicSupervisionBoolExp) (*model.DynamicSupervisionMutationResponse, error)
	DeleteDynamicSupervisionByPk(ctx context.Context, id int64, supervisionID string) (*model.DynamicSupervision, error)
	InsertDynamicSupervision(ctx context.Context, objects []*model.DynamicSupervisionInsertInput, onConflict *model.DynamicSupervisionOnConflict) (*model.DynamicSupervisionMutationResponse, error)
	InsertDynamicSupervisionOne(ctx context.Context, object model.DynamicSupervisionInsertInput, onConflict *model.DynamicSupervisionOnConflict) (*model.DynamicSupervision, error)
	UpdateDynamicSupervision(ctx context.Context, inc *model.DynamicSupervisionIncInput, set *model.DynamicSupervisionSetInput, where model.DynamicSupervisionBoolExp) (*model.DynamicSupervisionMutationResponse, error)
	UpdateDynamicSupervisionByPk(ctx context.Context, inc *model.DynamicSupervisionIncInput, set *model.DynamicSupervisionSetInput, pkColumns model.DynamicSupervisionPkColumnsInput) (*model.DynamicSupervision, error)
	DeleteDynamicSpotCheckDisposal(ctx context.Context, where model.DynamicSpotCheckDisposalBoolExp) (*model.DynamicSpotCheckDisposalMutationResponse, error)
	DeleteDynamicSpotCheckDisposalByPk(ctx context.Context, id int64) (*model.DynamicSpotCheckDisposal, error)
	InsertDynamicSpotCheckDisposal(ctx context.Context, objects []*model.DynamicSpotCheckDisposalInsertInput, onConflict *model.DynamicSpotCheckDisposalOnConflict) (*model.DynamicSpotCheckDisposalMutationResponse, error)
	InsertDynamicSpotCheckDisposalOne(ctx context.Context, object model.DynamicSpotCheckDisposalInsertInput, onConflict *model.DynamicSpotCheckDisposalOnConflict) (*model.DynamicSpotCheckDisposal, error)
	UpdateDynamicSpotCheckDisposal(ctx context.Context, inc *model.DynamicSpotCheckDisposalIncInput, set *model.DynamicSpotCheckDisposalSetInput, where model.DynamicSpotCheckDisposalBoolExp) (*model.DynamicSpotCheckDisposalMutationResponse, error)
	UpdateDynamicSpotCheckDisposalByPk(ctx context.Context, inc *model.DynamicSpotCheckDisposalIncInput, set *model.DynamicSpotCheckDisposalSetInput, pkColumns model.DynamicSpotCheckDisposalPkColumnsInput) (*model.DynamicSpotCheckDisposal, error)
	DeleteDynamicSupervisionDetail(ctx context.Context, where model.DynamicSupervisionDetailBoolExp) (*model.DynamicSupervisionDetailMutationResponse, error)
	DeleteDynamicSupervisionDetailByPk(ctx context.Context, id int64, supervisionDetailID string) (*model.DynamicSupervisionDetail, error)
	InsertDynamicSupervisionDetail(ctx context.Context, objects []*model.DynamicSupervisionDetailInsertInput, onConflict *model.DynamicSupervisionDetailOnConflict) (*model.DynamicSupervisionDetailMutationResponse, error)
	InsertDynamicSupervisionDetailOne(ctx context.Context, object model.DynamicSupervisionDetailInsertInput, onConflict *model.DynamicSupervisionDetailOnConflict) (*model.DynamicSupervisionDetail, error)
	UpdateDynamicSupervisionDetail(ctx context.Context, inc *model.DynamicSupervisionDetailIncInput, set *model.DynamicSupervisionDetailSetInput, where model.DynamicSupervisionDetailBoolExp) (*model.DynamicSupervisionDetailMutationResponse, error)
	UpdateDynamicSupervisionDetailByPk(ctx context.Context, inc *model.DynamicSupervisionDetailIncInput, set *model.DynamicSupervisionDetailSetInput, pkColumns model.DynamicSupervisionDetailPkColumnsInput) (*model.DynamicSupervisionDetail, error)
}
type QueryResolver interface {
	DynamicSupervision(ctx context.Context, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) ([]*model.DynamicSupervision, error)
	DynamicSupervisionAggregate(ctx context.Context, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) (*model.DynamicSupervisionAggregate, error)
	DynamicSupervisionByPk(ctx context.Context, id int64, supervisionID string) (*model.DynamicSupervision, error)
	DynamicSpotCheckDisposal(ctx context.Context, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) ([]*model.DynamicSpotCheckDisposal, error)
	DynamicSpotCheckDisposalAggregate(ctx context.Context, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) (*model.DynamicSpotCheckDisposalAggregate, error)
	DynamicSpotCheckDisposalByPk(ctx context.Context, id int64) (*model.DynamicSpotCheckDisposal, error)
	DynamicSupervisionDetail(ctx context.Context, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) ([]*model.DynamicSupervisionDetail, error)
	DynamicSupervisionDetailAggregate(ctx context.Context, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) (*model.DynamicSupervisionDetailAggregate, error)
	DynamicSupervisionDetailByPk(ctx context.Context, id int64, supervisionDetailID string) (*model.DynamicSupervisionDetail, error)
}
type SubscriptionResolver interface {
	DynamicSupervision(ctx context.Context, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) (<-chan []*model.DynamicSupervision, error)
	DynamicSupervisionAggregate(ctx context.Context, distinctOn []model.DynamicSupervisionSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionOrderBy, where *model.DynamicSupervisionBoolExp) (<-chan *model.DynamicSupervisionAggregate, error)
	DynamicSupervisionByPk(ctx context.Context, id int64, supervisionID string) (<-chan *model.DynamicSupervision, error)
	DynamicSpotCheckDisposal(ctx context.Context, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) (<-chan []*model.DynamicSpotCheckDisposal, error)
	DynamicSpotCheckDisposalAggregate(ctx context.Context, distinctOn []model.DynamicSpotCheckDisposalSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSpotCheckDisposalOrderBy, where *model.DynamicSpotCheckDisposalBoolExp) (<-chan *model.DynamicSpotCheckDisposalAggregate, error)
	DynamicSpotCheckDisposalByPk(ctx context.Context, id int64) (<-chan *model.DynamicSpotCheckDisposal, error)
	DynamicSupervisionDetail(ctx context.Context, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) (<-chan []*model.DynamicSupervisionDetail, error)
	DynamicSupervisionDetailAggregate(ctx context.Context, distinctOn []model.DynamicSupervisionDetailSelectColumn, limit *int, offset *int, orderBy []*model.DynamicSupervisionDetailOrderBy, where *model.DynamicSupervisionDetailBoolExp) (<-chan *model.DynamicSupervisionDetailAggregate, error)
	DynamicSupervisionDetailByPk(ctx context.Context, id int64, supervisionDetailID string) (<-chan *model.DynamicSupervisionDetail, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_dynamic_spot_check_disposal":
		if e.complexity.Mutation.DeleteDynamicSpotCheckDisposal == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_spot_check_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSpotCheckDisposal(childComplexity, args["where"].(model.DynamicSpotCheckDisposalBoolExp)), true

	case "Mutation.delete_dynamic_spot_check_disposal_by_pk":
		if e.complexity.Mutation.DeleteDynamicSpotCheckDisposalByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_spot_check_disposal_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSpotCheckDisposalByPk(childComplexity, args["id"].(int64)), true

	case "Mutation.delete_dynamic_supervision":
		if e.complexity.Mutation.DeleteDynamicSupervision == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSupervision(childComplexity, args["where"].(model.DynamicSupervisionBoolExp)), true

	case "Mutation.delete_dynamic_supervision_by_pk":
		if e.complexity.Mutation.DeleteDynamicSupervisionByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_supervision_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSupervisionByPk(childComplexity, args["id"].(int64), args["supervision_id"].(string)), true

	case "Mutation.delete_dynamic_supervision_detail":
		if e.complexity.Mutation.DeleteDynamicSupervisionDetail == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_supervision_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSupervisionDetail(childComplexity, args["where"].(model.DynamicSupervisionDetailBoolExp)), true

	case "Mutation.delete_dynamic_supervision_detail_by_pk":
		if e.complexity.Mutation.DeleteDynamicSupervisionDetailByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_dynamic_supervision_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDynamicSupervisionDetailByPk(childComplexity, args["id"].(int64), args["supervision_detail_id"].(string)), true

	case "Mutation.insert_dynamic_spot_check_disposal":
		if e.complexity.Mutation.InsertDynamicSpotCheckDisposal == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_spot_check_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSpotCheckDisposal(childComplexity, args["objects"].([]*model.DynamicSpotCheckDisposalInsertInput), args["on_conflict"].(*model.DynamicSpotCheckDisposalOnConflict)), true

	case "Mutation.insert_dynamic_spot_check_disposal_one":
		if e.complexity.Mutation.InsertDynamicSpotCheckDisposalOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_spot_check_disposal_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSpotCheckDisposalOne(childComplexity, args["object"].(model.DynamicSpotCheckDisposalInsertInput), args["on_conflict"].(*model.DynamicSpotCheckDisposalOnConflict)), true

	case "Mutation.insert_dynamic_supervision":
		if e.complexity.Mutation.InsertDynamicSupervision == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSupervision(childComplexity, args["objects"].([]*model.DynamicSupervisionInsertInput), args["on_conflict"].(*model.DynamicSupervisionOnConflict)), true

	case "Mutation.insert_dynamic_supervision_detail":
		if e.complexity.Mutation.InsertDynamicSupervisionDetail == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_supervision_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSupervisionDetail(childComplexity, args["objects"].([]*model.DynamicSupervisionDetailInsertInput), args["on_conflict"].(*model.DynamicSupervisionDetailOnConflict)), true

	case "Mutation.insert_dynamic_supervision_detail_one":
		if e.complexity.Mutation.InsertDynamicSupervisionDetailOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_supervision_detail_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSupervisionDetailOne(childComplexity, args["object"].(model.DynamicSupervisionDetailInsertInput), args["on_conflict"].(*model.DynamicSupervisionDetailOnConflict)), true

	case "Mutation.insert_dynamic_supervision_one":
		if e.complexity.Mutation.InsertDynamicSupervisionOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_dynamic_supervision_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertDynamicSupervisionOne(childComplexity, args["object"].(model.DynamicSupervisionInsertInput), args["on_conflict"].(*model.DynamicSupervisionOnConflict)), true

	case "Mutation.update_dynamic_spot_check_disposal":
		if e.complexity.Mutation.UpdateDynamicSpotCheckDisposal == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_spot_check_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSpotCheckDisposal(childComplexity, args["_inc"].(*model.DynamicSpotCheckDisposalIncInput), args["_set"].(*model.DynamicSpotCheckDisposalSetInput), args["where"].(model.DynamicSpotCheckDisposalBoolExp)), true

	case "Mutation.update_dynamic_spot_check_disposal_by_pk":
		if e.complexity.Mutation.UpdateDynamicSpotCheckDisposalByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_spot_check_disposal_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSpotCheckDisposalByPk(childComplexity, args["_inc"].(*model.DynamicSpotCheckDisposalIncInput), args["_set"].(*model.DynamicSpotCheckDisposalSetInput), args["pk_columns"].(model.DynamicSpotCheckDisposalPkColumnsInput)), true

	case "Mutation.update_dynamic_supervision":
		if e.complexity.Mutation.UpdateDynamicSupervision == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSupervision(childComplexity, args["_inc"].(*model.DynamicSupervisionIncInput), args["_set"].(*model.DynamicSupervisionSetInput), args["where"].(model.DynamicSupervisionBoolExp)), true

	case "Mutation.update_dynamic_supervision_by_pk":
		if e.complexity.Mutation.UpdateDynamicSupervisionByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_supervision_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSupervisionByPk(childComplexity, args["_inc"].(*model.DynamicSupervisionIncInput), args["_set"].(*model.DynamicSupervisionSetInput), args["pk_columns"].(model.DynamicSupervisionPkColumnsInput)), true

	case "Mutation.update_dynamic_supervision_detail":
		if e.complexity.Mutation.UpdateDynamicSupervisionDetail == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_supervision_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSupervisionDetail(childComplexity, args["_inc"].(*model.DynamicSupervisionDetailIncInput), args["_set"].(*model.DynamicSupervisionDetailSetInput), args["where"].(model.DynamicSupervisionDetailBoolExp)), true

	case "Mutation.update_dynamic_supervision_detail_by_pk":
		if e.complexity.Mutation.UpdateDynamicSupervisionDetailByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_dynamic_supervision_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDynamicSupervisionDetailByPk(childComplexity, args["_inc"].(*model.DynamicSupervisionDetailIncInput), args["_set"].(*model.DynamicSupervisionDetailSetInput), args["pk_columns"].(model.DynamicSupervisionDetailPkColumnsInput)), true

	case "Query.dynamic_spot_check_disposal":
		if e.complexity.Query.DynamicSpotCheckDisposal == nil {
			break
		}

		args, err := ec.field_Query_dynamic_spot_check_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSpotCheckDisposal(childComplexity, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp)), true

	case "Query.dynamic_spot_check_disposal_aggregate":
		if e.complexity.Query.DynamicSpotCheckDisposalAggregate == nil {
			break
		}

		args, err := ec.field_Query_dynamic_spot_check_disposal_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSpotCheckDisposalAggregate(childComplexity, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp)), true

	case "Query.dynamic_spot_check_disposal_by_pk":
		if e.complexity.Query.DynamicSpotCheckDisposalByPk == nil {
			break
		}

		args, err := ec.field_Query_dynamic_spot_check_disposal_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSpotCheckDisposalByPk(childComplexity, args["id"].(int64)), true

	case "Query.dynamic_supervision":
		if e.complexity.Query.DynamicSupervision == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervision(childComplexity, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp)), true

	case "Query.dynamic_supervision_aggregate":
		if e.complexity.Query.DynamicSupervisionAggregate == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervisionAggregate(childComplexity, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp)), true

	case "Query.dynamic_supervision_by_pk":
		if e.complexity.Query.DynamicSupervisionByPk == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervisionByPk(childComplexity, args["id"].(int64), args["supervision_id"].(string)), true

	case "Query.dynamic_supervision_detail":
		if e.complexity.Query.DynamicSupervisionDetail == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervisionDetail(childComplexity, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp)), true

	case "Query.dynamic_supervision_detail_aggregate":
		if e.complexity.Query.DynamicSupervisionDetailAggregate == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_detail_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervisionDetailAggregate(childComplexity, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp)), true

	case "Query.dynamic_supervision_detail_by_pk":
		if e.complexity.Query.DynamicSupervisionDetailByPk == nil {
			break
		}

		args, err := ec.field_Query_dynamic_supervision_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DynamicSupervisionDetailByPk(childComplexity, args["id"].(int64), args["supervision_detail_id"].(string)), true

	case "Subscription.dynamic_spot_check_disposal":
		if e.complexity.Subscription.DynamicSpotCheckDisposal == nil {
			break
		}

		args, err := ec.field_Subscription_dynamic_spot_check_disposal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DynamicSpotCheckDisposal(childComplexity, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp)), true

	case "Subscription.dynamic_spot_check_disposal_aggregate":
		if e.complexity.Subscription.DynamicSpotCheckDisposalAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_dynamic_spot_check_disposal_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DynamicSpotCheckDisposalAggregate(childComplexity, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp)), true

	case "Subscription.dynamic_spot_check_disposal_by_pk":
		if e.complexity.Subscription.DynamicSpotCheckDisposalByPk == nil {
			break
		}

		args, err := ec.field_Subscription_dynamic_spot_check_disposal_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DynamicSpotCheckDisposalByPk(childComplexity, args["id"].(int64)), true

	case "Subscription.dynamic_supervision":
		if e.complexity.Subscription.DynamicSupervision == nil {
			break
		}

		args, err := ec.field_Subscription_dynamic_supervision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DynamicSupervision(childComplexity, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp)), true

	case "Subscription.dynamic_supervision_aggregate":
		if e.complexity.Subscription.DynamicSupervisionAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_dynamic_supervision_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DynamicSupervisionAggregate(childComplexity, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp)), true

	case "Subscription.dynamic_supervision_by_pk":
		if e.complexity.Subscription.DynamicSupervisionByPk == nil {
			break
		}

		args, err := ec.field_Subscription_dynamic_supervision_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DynamicSupervisionByPk(childComplexity, args["id"].(int64), args["supervision_id"].(string)), true

	case "Subscription.dynamic_supervision_detail":
		if e.complexity.Subscription.DynamicSupervisionDetail == nil {
			break
		}

		args, err := ec.field_Subscription_dynamic_supervision_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DynamicSupervisionDetail(childComplexity, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp)), true

	case "Subscription.dynamic_supervision_detail_aggregate":
		if e.complexity.Subscription.DynamicSupervisionDetailAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_dynamic_supervision_detail_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DynamicSupervisionDetailAggregate(childComplexity, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp)), true

	case "Subscription.dynamic_supervision_detail_by_pk":
		if e.complexity.Subscription.DynamicSupervisionDetailByPk == nil {
			break
		}

		args, err := ec.field_Subscription_dynamic_supervision_detail_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.DynamicSupervisionDetailByPk(childComplexity, args["id"].(int64), args["supervision_detail_id"].(string)), true

	case "dynamic_spot_check_disposal.announce_content":
		if e.complexity.DynamicSpotCheckDisposal.AnnounceContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.AnnounceContent(childComplexity), true

	case "dynamic_spot_check_disposal.app_push_content":
		if e.complexity.DynamicSpotCheckDisposal.AppPushContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.AppPushContent(childComplexity), true

	case "dynamic_spot_check_disposal.created_at":
		if e.complexity.DynamicSpotCheckDisposal.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.CreatedAt(childComplexity), true

	case "dynamic_spot_check_disposal.created_by":
		if e.complexity.DynamicSpotCheckDisposal.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.CreatedBy(childComplexity), true

	case "dynamic_spot_check_disposal.deleted_at":
		if e.complexity.DynamicSpotCheckDisposal.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.DeletedAt(childComplexity), true

	case "dynamic_spot_check_disposal.deleted_by":
		if e.complexity.DynamicSpotCheckDisposal.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.DeletedBy(childComplexity), true

	case "dynamic_spot_check_disposal.disposal_content":
		if e.complexity.DynamicSpotCheckDisposal.DisposalContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.DisposalContent(childComplexity), true

	case "dynamic_spot_check_disposal.disposal_method":
		if e.complexity.DynamicSpotCheckDisposal.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.DisposalMethod(childComplexity), true

	case "dynamic_spot_check_disposal.disposal_result":
		if e.complexity.DynamicSpotCheckDisposal.DisposalResult == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.DisposalResult(childComplexity), true

	case "dynamic_spot_check_disposal.enterprise_id":
		if e.complexity.DynamicSpotCheckDisposal.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.EnterpriseID(childComplexity), true

	case "dynamic_spot_check_disposal.feedback_time":
		if e.complexity.DynamicSpotCheckDisposal.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.FeedbackTime(childComplexity), true

	case "dynamic_spot_check_disposal.id":
		if e.complexity.DynamicSpotCheckDisposal.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.ID(childComplexity), true

	case "dynamic_spot_check_disposal.image_abnormal_handing_measure":
		if e.complexity.DynamicSpotCheckDisposal.ImageAbnormalHandingMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.ImageAbnormalHandingMeasure(childComplexity), true

	case "dynamic_spot_check_disposal.is_announce":
		if e.complexity.DynamicSpotCheckDisposal.IsAnnounce == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.IsAnnounce(childComplexity), true

	case "dynamic_spot_check_disposal.is_app_push":
		if e.complexity.DynamicSpotCheckDisposal.IsAppPush == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.IsAppPush(childComplexity), true

	case "dynamic_spot_check_disposal.is_delete":
		if e.complexity.DynamicSpotCheckDisposal.IsDelete == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.IsDelete(childComplexity), true

	case "dynamic_spot_check_disposal.is_notify":
		if e.complexity.DynamicSpotCheckDisposal.IsNotify == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.IsNotify(childComplexity), true

	case "dynamic_spot_check_disposal.is_sms_push":
		if e.complexity.DynamicSpotCheckDisposal.IsSmsPush == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.IsSmsPush(childComplexity), true

	case "dynamic_spot_check_disposal.notify_content":
		if e.complexity.DynamicSpotCheckDisposal.NotifyContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.NotifyContent(childComplexity), true

	case "dynamic_spot_check_disposal.operation_user":
		if e.complexity.DynamicSpotCheckDisposal.OperationUser == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.OperationUser(childComplexity), true

	case "dynamic_spot_check_disposal.send_time":
		if e.complexity.DynamicSpotCheckDisposal.SendTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.SendTime(childComplexity), true

	case "dynamic_spot_check_disposal.supervision_detail_id":
		if e.complexity.DynamicSpotCheckDisposal.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.SupervisionDetailID(childComplexity), true

	case "dynamic_spot_check_disposal.tachograph_data_disposal_measure":
		if e.complexity.DynamicSpotCheckDisposal.TachographDataDisposalMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.TachographDataDisposalMeasure(childComplexity), true

	case "dynamic_spot_check_disposal.telephone":
		if e.complexity.DynamicSpotCheckDisposal.Telephone == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.Telephone(childComplexity), true

	case "dynamic_spot_check_disposal.updated_at":
		if e.complexity.DynamicSpotCheckDisposal.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.UpdatedAt(childComplexity), true

	case "dynamic_spot_check_disposal.updated_by":
		if e.complexity.DynamicSpotCheckDisposal.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.UpdatedBy(childComplexity), true

	case "dynamic_spot_check_disposal.vehicle_id":
		if e.complexity.DynamicSpotCheckDisposal.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposal.VehicleID(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate.aggregate":
		if e.complexity.DynamicSpotCheckDisposalAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregate.Aggregate(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate.nodes":
		if e.complexity.DynamicSpotCheckDisposalAggregate.Nodes == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregate.Nodes(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate_fields.avg":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Avg(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate_fields.count":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_dynamic_spot_check_disposal_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Count(childComplexity, args["columns"].([]model.DynamicSpotCheckDisposalSelectColumn), args["distinct"].(*bool)), true

	case "dynamic_spot_check_disposal_aggregate_fields.max":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Max == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Max(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate_fields.min":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Min == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Min(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate_fields.stddev":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Stddev(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate_fields.stddev_pop":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.StddevPop(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate_fields.stddev_samp":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.StddevSamp(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate_fields.sum":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Sum(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate_fields.var_pop":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.VarPop(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate_fields.var_samp":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.VarSamp(childComplexity), true

	case "dynamic_spot_check_disposal_aggregate_fields.variance":
		if e.complexity.DynamicSpotCheckDisposalAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAggregateFields.Variance(childComplexity), true

	case "dynamic_spot_check_disposal_avg_fields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalAvgFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAvgFields.DisposalMethod(childComplexity), true

	case "dynamic_spot_check_disposal_avg_fields.id":
		if e.complexity.DynamicSpotCheckDisposalAvgFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalAvgFields.ID(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.announce_content":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.AnnounceContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.AnnounceContent(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.app_push_content":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.AppPushContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.AppPushContent(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.created_at":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.CreatedAt(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.created_by":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.CreatedBy(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.deleted_at":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.DeletedAt(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.deleted_by":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.DeletedBy(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.disposal_content":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalContent(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalMethod(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.disposal_result":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalResult == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.DisposalResult(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.enterprise_id":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.EnterpriseID(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.feedback_time":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.FeedbackTime(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.id":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.ID(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.image_abnormal_handing_measure":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.ImageAbnormalHandingMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.ImageAbnormalHandingMeasure(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.notify_content":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.NotifyContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.NotifyContent(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.operation_user":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.OperationUser == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.OperationUser(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.send_time":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.SendTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.SendTime(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.supervision_detail_id":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.SupervisionDetailID(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.tachograph_data_disposal_measure":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.TachographDataDisposalMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.TachographDataDisposalMeasure(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.telephone":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.Telephone == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.Telephone(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.updated_at":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.UpdatedAt(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.updated_by":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.UpdatedBy(childComplexity), true

	case "dynamic_spot_check_disposal_max_fields.vehicle_id":
		if e.complexity.DynamicSpotCheckDisposalMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMaxFields.VehicleID(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.announce_content":
		if e.complexity.DynamicSpotCheckDisposalMinFields.AnnounceContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.AnnounceContent(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.app_push_content":
		if e.complexity.DynamicSpotCheckDisposalMinFields.AppPushContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.AppPushContent(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.created_at":
		if e.complexity.DynamicSpotCheckDisposalMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.CreatedAt(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.created_by":
		if e.complexity.DynamicSpotCheckDisposalMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.CreatedBy(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.deleted_at":
		if e.complexity.DynamicSpotCheckDisposalMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.DeletedAt(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.deleted_by":
		if e.complexity.DynamicSpotCheckDisposalMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.DeletedBy(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.disposal_content":
		if e.complexity.DynamicSpotCheckDisposalMinFields.DisposalContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.DisposalContent(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalMinFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.DisposalMethod(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.disposal_result":
		if e.complexity.DynamicSpotCheckDisposalMinFields.DisposalResult == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.DisposalResult(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.enterprise_id":
		if e.complexity.DynamicSpotCheckDisposalMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.EnterpriseID(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.feedback_time":
		if e.complexity.DynamicSpotCheckDisposalMinFields.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.FeedbackTime(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.id":
		if e.complexity.DynamicSpotCheckDisposalMinFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.ID(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.image_abnormal_handing_measure":
		if e.complexity.DynamicSpotCheckDisposalMinFields.ImageAbnormalHandingMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.ImageAbnormalHandingMeasure(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.notify_content":
		if e.complexity.DynamicSpotCheckDisposalMinFields.NotifyContent == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.NotifyContent(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.operation_user":
		if e.complexity.DynamicSpotCheckDisposalMinFields.OperationUser == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.OperationUser(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.send_time":
		if e.complexity.DynamicSpotCheckDisposalMinFields.SendTime == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.SendTime(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.supervision_detail_id":
		if e.complexity.DynamicSpotCheckDisposalMinFields.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.SupervisionDetailID(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.tachograph_data_disposal_measure":
		if e.complexity.DynamicSpotCheckDisposalMinFields.TachographDataDisposalMeasure == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.TachographDataDisposalMeasure(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.telephone":
		if e.complexity.DynamicSpotCheckDisposalMinFields.Telephone == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.Telephone(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.updated_at":
		if e.complexity.DynamicSpotCheckDisposalMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.UpdatedAt(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.updated_by":
		if e.complexity.DynamicSpotCheckDisposalMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.UpdatedBy(childComplexity), true

	case "dynamic_spot_check_disposal_min_fields.vehicle_id":
		if e.complexity.DynamicSpotCheckDisposalMinFields.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMinFields.VehicleID(childComplexity), true

	case "dynamic_spot_check_disposal_mutation_response.affected_rows":
		if e.complexity.DynamicSpotCheckDisposalMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMutationResponse.AffectedRows(childComplexity), true

	case "dynamic_spot_check_disposal_mutation_response.returning":
		if e.complexity.DynamicSpotCheckDisposalMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalMutationResponse.Returning(childComplexity), true

	case "dynamic_spot_check_disposal_stddev_fields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalStddevFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevFields.DisposalMethod(childComplexity), true

	case "dynamic_spot_check_disposal_stddev_fields.id":
		if e.complexity.DynamicSpotCheckDisposalStddevFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevFields.ID(childComplexity), true

	case "dynamic_spot_check_disposal_stddev_pop_fields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalStddevPopFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevPopFields.DisposalMethod(childComplexity), true

	case "dynamic_spot_check_disposal_stddev_pop_fields.id":
		if e.complexity.DynamicSpotCheckDisposalStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevPopFields.ID(childComplexity), true

	case "dynamic_spot_check_disposal_stddev_samp_fields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalStddevSampFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevSampFields.DisposalMethod(childComplexity), true

	case "dynamic_spot_check_disposal_stddev_samp_fields.id":
		if e.complexity.DynamicSpotCheckDisposalStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalStddevSampFields.ID(childComplexity), true

	case "dynamic_spot_check_disposal_sum_fields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalSumFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalSumFields.DisposalMethod(childComplexity), true

	case "dynamic_spot_check_disposal_sum_fields.id":
		if e.complexity.DynamicSpotCheckDisposalSumFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalSumFields.ID(childComplexity), true

	case "dynamic_spot_check_disposal_var_pop_fields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalVarPopFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarPopFields.DisposalMethod(childComplexity), true

	case "dynamic_spot_check_disposal_var_pop_fields.id":
		if e.complexity.DynamicSpotCheckDisposalVarPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarPopFields.ID(childComplexity), true

	case "dynamic_spot_check_disposal_var_samp_fields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalVarSampFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarSampFields.DisposalMethod(childComplexity), true

	case "dynamic_spot_check_disposal_var_samp_fields.id":
		if e.complexity.DynamicSpotCheckDisposalVarSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarSampFields.ID(childComplexity), true

	case "dynamic_spot_check_disposal_variance_fields.disposal_method":
		if e.complexity.DynamicSpotCheckDisposalVarianceFields.DisposalMethod == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarianceFields.DisposalMethod(childComplexity), true

	case "dynamic_spot_check_disposal_variance_fields.id":
		if e.complexity.DynamicSpotCheckDisposalVarianceFields.ID == nil {
			break
		}

		return e.complexity.DynamicSpotCheckDisposalVarianceFields.ID(childComplexity), true

	case "dynamic_supervision.check_user_id":
		if e.complexity.DynamicSupervision.CheckUserID == nil {
			break
		}

		return e.complexity.DynamicSupervision.CheckUserID(childComplexity), true

	case "dynamic_supervision.city_id":
		if e.complexity.DynamicSupervision.CityID == nil {
			break
		}

		return e.complexity.DynamicSupervision.CityID(childComplexity), true

	case "dynamic_supervision.created_at":
		if e.complexity.DynamicSupervision.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervision.CreatedAt(childComplexity), true

	case "dynamic_supervision.created_by":
		if e.complexity.DynamicSupervision.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervision.CreatedBy(childComplexity), true

	case "dynamic_supervision.day":
		if e.complexity.DynamicSupervision.Day == nil {
			break
		}

		return e.complexity.DynamicSupervision.Day(childComplexity), true

	case "dynamic_supervision.deleted_at":
		if e.complexity.DynamicSupervision.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervision.DeletedAt(childComplexity), true

	case "dynamic_supervision.deleted_by":
		if e.complexity.DynamicSupervision.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervision.DeletedBy(childComplexity), true

	case "dynamic_supervision.district_id":
		if e.complexity.DynamicSupervision.DistrictID == nil {
			break
		}

		return e.complexity.DynamicSupervision.DistrictID(childComplexity), true

	case "dynamic_supervision.id":
		if e.complexity.DynamicSupervision.ID == nil {
			break
		}

		return e.complexity.DynamicSupervision.ID(childComplexity), true

	case "dynamic_supervision.is_delete":
		if e.complexity.DynamicSupervision.IsDelete == nil {
			break
		}

		return e.complexity.DynamicSupervision.IsDelete(childComplexity), true

	case "dynamic_supervision.month":
		if e.complexity.DynamicSupervision.Month == nil {
			break
		}

		return e.complexity.DynamicSupervision.Month(childComplexity), true

	case "dynamic_supervision.province_id":
		if e.complexity.DynamicSupervision.ProvinceID == nil {
			break
		}

		return e.complexity.DynamicSupervision.ProvinceID(childComplexity), true

	case "dynamic_supervision.spot_check_date":
		if e.complexity.DynamicSupervision.SpotCheckDate == nil {
			break
		}

		return e.complexity.DynamicSupervision.SpotCheckDate(childComplexity), true

	case "dynamic_supervision.spot_check_number":
		if e.complexity.DynamicSupervision.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervision.SpotCheckNumber(childComplexity), true

	case "dynamic_supervision.spot_check_ratio":
		if e.complexity.DynamicSupervision.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervision.SpotCheckRatio(childComplexity), true

	case "dynamic_supervision.spot_check_total_number":
		if e.complexity.DynamicSupervision.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervision.SpotCheckTotalNumber(childComplexity), true

	case "dynamic_supervision.supervision_id":
		if e.complexity.DynamicSupervision.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervision.SupervisionID(childComplexity), true

	case "dynamic_supervision.total_number_vehicle":
		if e.complexity.DynamicSupervision.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervision.TotalNumberVehicle(childComplexity), true

	case "dynamic_supervision.updated_at":
		if e.complexity.DynamicSupervision.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervision.UpdatedAt(childComplexity), true

	case "dynamic_supervision.updated_by":
		if e.complexity.DynamicSupervision.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervision.UpdatedBy(childComplexity), true

	case "dynamic_supervision.year":
		if e.complexity.DynamicSupervision.Year == nil {
			break
		}

		return e.complexity.DynamicSupervision.Year(childComplexity), true

	case "dynamic_supervision_aggregate.aggregate":
		if e.complexity.DynamicSupervisionAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregate.Aggregate(childComplexity), true

	case "dynamic_supervision_aggregate.nodes":
		if e.complexity.DynamicSupervisionAggregate.Nodes == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregate.Nodes(childComplexity), true

	case "dynamic_supervision_aggregate_fields.avg":
		if e.complexity.DynamicSupervisionAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Avg(childComplexity), true

	case "dynamic_supervision_aggregate_fields.count":
		if e.complexity.DynamicSupervisionAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_dynamic_supervision_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DynamicSupervisionAggregateFields.Count(childComplexity, args["columns"].([]model.DynamicSupervisionSelectColumn), args["distinct"].(*bool)), true

	case "dynamic_supervision_aggregate_fields.max":
		if e.complexity.DynamicSupervisionAggregateFields.Max == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Max(childComplexity), true

	case "dynamic_supervision_aggregate_fields.min":
		if e.complexity.DynamicSupervisionAggregateFields.Min == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Min(childComplexity), true

	case "dynamic_supervision_aggregate_fields.stddev":
		if e.complexity.DynamicSupervisionAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Stddev(childComplexity), true

	case "dynamic_supervision_aggregate_fields.stddev_pop":
		if e.complexity.DynamicSupervisionAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.StddevPop(childComplexity), true

	case "dynamic_supervision_aggregate_fields.stddev_samp":
		if e.complexity.DynamicSupervisionAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.StddevSamp(childComplexity), true

	case "dynamic_supervision_aggregate_fields.sum":
		if e.complexity.DynamicSupervisionAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Sum(childComplexity), true

	case "dynamic_supervision_aggregate_fields.var_pop":
		if e.complexity.DynamicSupervisionAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.VarPop(childComplexity), true

	case "dynamic_supervision_aggregate_fields.var_samp":
		if e.complexity.DynamicSupervisionAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.VarSamp(childComplexity), true

	case "dynamic_supervision_aggregate_fields.variance":
		if e.complexity.DynamicSupervisionAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DynamicSupervisionAggregateFields.Variance(childComplexity), true

	case "dynamic_supervision_avg_fields.day":
		if e.complexity.DynamicSupervisionAvgFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.Day(childComplexity), true

	case "dynamic_supervision_avg_fields.id":
		if e.complexity.DynamicSupervisionAvgFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.ID(childComplexity), true

	case "dynamic_supervision_avg_fields.month":
		if e.complexity.DynamicSupervisionAvgFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.Month(childComplexity), true

	case "dynamic_supervision_avg_fields.spot_check_number":
		if e.complexity.DynamicSupervisionAvgFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.SpotCheckNumber(childComplexity), true

	case "dynamic_supervision_avg_fields.spot_check_ratio":
		if e.complexity.DynamicSupervisionAvgFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.SpotCheckRatio(childComplexity), true

	case "dynamic_supervision_avg_fields.spot_check_total_number":
		if e.complexity.DynamicSupervisionAvgFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.SpotCheckTotalNumber(childComplexity), true

	case "dynamic_supervision_avg_fields.total_number_vehicle":
		if e.complexity.DynamicSupervisionAvgFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.TotalNumberVehicle(childComplexity), true

	case "dynamic_supervision_avg_fields.year":
		if e.complexity.DynamicSupervisionAvgFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionAvgFields.Year(childComplexity), true

	case "dynamic_supervision_detail.assignee":
		if e.complexity.DynamicSupervisionDetail.Assignee == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Assignee(childComplexity), true

	case "dynamic_supervision_detail.business_scope":
		if e.complexity.DynamicSupervisionDetail.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.BusinessScope(childComplexity), true

	case "dynamic_supervision_detail.coordinate":
		if e.complexity.DynamicSupervisionDetail.Coordinate == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Coordinate(childComplexity), true

	case "dynamic_supervision_detail.created_at":
		if e.complexity.DynamicSupervisionDetail.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.CreatedAt(childComplexity), true

	case "dynamic_supervision_detail.created_by":
		if e.complexity.DynamicSupervisionDetail.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.CreatedBy(childComplexity), true

	case "dynamic_supervision_detail.curve":
		if e.complexity.DynamicSupervisionDetail.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Curve(childComplexity), true

	case "dynamic_supervision_detail.deleted_at":
		if e.complexity.DynamicSupervisionDetail.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DeletedAt(childComplexity), true

	case "dynamic_supervision_detail.deleted_by":
		if e.complexity.DynamicSupervisionDetail.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DeletedBy(childComplexity), true

	case "dynamic_supervision_detail.disposal_measures":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures(childComplexity), true

	case "dynamic_supervision_detail.disposal_measures1":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures1(childComplexity), true

	case "dynamic_supervision_detail.disposal_measures2":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures2(childComplexity), true

	case "dynamic_supervision_detail.disposal_measures3":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures3(childComplexity), true

	case "dynamic_supervision_detail.disposal_measures4":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures4(childComplexity), true

	case "dynamic_supervision_detail.disposal_measures5":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures5(childComplexity), true

	case "dynamic_supervision_detail.disposal_measures6":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures6(childComplexity), true

	case "dynamic_supervision_detail.disposal_measures7":
		if e.complexity.DynamicSupervisionDetail.DisposalMeasures7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalMeasures7(childComplexity), true

	case "dynamic_supervision_detail.disposal_results":
		if e.complexity.DynamicSupervisionDetail.DisposalResults == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults(childComplexity), true

	case "dynamic_supervision_detail.disposal_results1":
		if e.complexity.DynamicSupervisionDetail.DisposalResults1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults1(childComplexity), true

	case "dynamic_supervision_detail.disposal_results2":
		if e.complexity.DynamicSupervisionDetail.DisposalResults2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults2(childComplexity), true

	case "dynamic_supervision_detail.disposal_results3":
		if e.complexity.DynamicSupervisionDetail.DisposalResults3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults3(childComplexity), true

	case "dynamic_supervision_detail.disposal_results4":
		if e.complexity.DynamicSupervisionDetail.DisposalResults4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults4(childComplexity), true

	case "dynamic_supervision_detail.disposal_results5":
		if e.complexity.DynamicSupervisionDetail.DisposalResults5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults5(childComplexity), true

	case "dynamic_supervision_detail.disposal_results6":
		if e.complexity.DynamicSupervisionDetail.DisposalResults6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults6(childComplexity), true

	case "dynamic_supervision_detail.disposal_results7":
		if e.complexity.DynamicSupervisionDetail.DisposalResults7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DisposalResults7(childComplexity), true

	case "dynamic_supervision_detail.driver_id":
		if e.complexity.DynamicSupervisionDetail.DriverID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.DriverID(childComplexity), true

	case "dynamic_supervision_detail.enterprise_id":
		if e.complexity.DynamicSupervisionDetail.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.EnterpriseID(childComplexity), true

	case "dynamic_supervision_detail.equipment":
		if e.complexity.DynamicSupervisionDetail.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Equipment(childComplexity), true

	case "dynamic_supervision_detail.fatigue_alarm_time":
		if e.complexity.DynamicSupervisionDetail.FatigueAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.FatigueAlarmTime(childComplexity), true

	case "dynamic_supervision_detail.feedback_time":
		if e.complexity.DynamicSupervisionDetail.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.FeedbackTime(childComplexity), true

	case "dynamic_supervision_detail.GPS_speed":
		if e.complexity.DynamicSupervisionDetail.GpsSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.GpsSpeed(childComplexity), true

	case "dynamic_supervision_detail.id":
		if e.complexity.DynamicSupervisionDetail.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.ID(childComplexity), true

	case "dynamic_supervision_detail.is_delete":
		if e.complexity.DynamicSupervisionDetail.IsDelete == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsDelete(childComplexity), true

	case "dynamic_supervision_detail.is_fatigue_driving":
		if e.complexity.DynamicSupervisionDetail.IsFatigueDriving == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsFatigueDriving(childComplexity), true

	case "dynamic_supervision_detail.is_locate":
		if e.complexity.DynamicSupervisionDetail.IsLocate == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsLocate(childComplexity), true

	case "dynamic_supervision_detail.is_morning_outage":
		if e.complexity.DynamicSupervisionDetail.IsMorningOutage == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsMorningOutage(childComplexity), true

	case "dynamic_supervision_detail.is_online":
		if e.complexity.DynamicSupervisionDetail.IsOnline == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsOnline(childComplexity), true

	case "dynamic_supervision_detail.is_send":
		if e.complexity.DynamicSupervisionDetail.IsSend == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsSend(childComplexity), true

	case "dynamic_supervision_detail.is_speeding":
		if e.complexity.DynamicSupervisionDetail.IsSpeeding == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsSpeeding(childComplexity), true

	case "dynamic_supervision_detail.is_tachograph_record_normal":
		if e.complexity.DynamicSupervisionDetail.IsTachographRecordNormal == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.IsTachographRecordNormal(childComplexity), true

	case "dynamic_supervision_detail.latitude_longitude_description":
		if e.complexity.DynamicSupervisionDetail.LatitudeLongitudeDescription == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.LatitudeLongitudeDescription(childComplexity), true

	case "dynamic_supervision_detail.lens_on":
		if e.complexity.DynamicSupervisionDetail.LensOn == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.LensOn(childComplexity), true

	case "dynamic_supervision_detail.lens_position":
		if e.complexity.DynamicSupervisionDetail.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.LensPosition(childComplexity), true

	case "dynamic_supervision_detail.monitor_end_time":
		if e.complexity.DynamicSupervisionDetail.MonitorEndTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.MonitorEndTime(childComplexity), true

	case "dynamic_supervision_detail.monitoring_location":
		if e.complexity.DynamicSupervisionDetail.MonitoringLocation == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.MonitoringLocation(childComplexity), true

	case "dynamic_supervision_detail.monitoring_time":
		if e.complexity.DynamicSupervisionDetail.MonitoringTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.MonitoringTime(childComplexity), true

	case "dynamic_supervision_detail.other_infraction":
		if e.complexity.DynamicSupervisionDetail.OtherInfraction == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.OtherInfraction(childComplexity), true

	case "dynamic_supervision_detail.others":
		if e.complexity.DynamicSupervisionDetail.Others == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Others(childComplexity), true

	case "dynamic_supervision_detail.outage_alarm_time":
		if e.complexity.DynamicSupervisionDetail.OutageAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.OutageAlarmTime(childComplexity), true

	case "dynamic_supervision_detail.remarks":
		if e.complexity.DynamicSupervisionDetail.Remarks == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Remarks(childComplexity), true

	case "dynamic_supervision_detail.speed_alarm_time":
		if e.complexity.DynamicSupervisionDetail.SpeedAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.SpeedAlarmTime(childComplexity), true

	case "dynamic_supervision_detail.speeding_speed":
		if e.complexity.DynamicSupervisionDetail.SpeedingSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.SpeedingSpeed(childComplexity), true

	case "dynamic_supervision_detail.supervision_detail_id":
		if e.complexity.DynamicSupervisionDetail.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.SupervisionDetailID(childComplexity), true

	case "dynamic_supervision_detail.supervision_id":
		if e.complexity.DynamicSupervisionDetail.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.SupervisionID(childComplexity), true

	case "dynamic_supervision_detail.tachograph_data_exception":
		if e.complexity.DynamicSupervisionDetail.TachographDataException == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.TachographDataException(childComplexity), true

	case "dynamic_supervision_detail.tachograph_speed":
		if e.complexity.DynamicSupervisionDetail.TachographSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.TachographSpeed(childComplexity), true

	case "dynamic_supervision_detail.taxi_state":
		if e.complexity.DynamicSupervisionDetail.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.TaxiState(childComplexity), true

	case "dynamic_supervision_detail.trail":
		if e.complexity.DynamicSupervisionDetail.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.Trail(childComplexity), true

	case "dynamic_supervision_detail.treatment_time":
		if e.complexity.DynamicSupervisionDetail.TreatmentTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.TreatmentTime(childComplexity), true

	case "dynamic_supervision_detail.updated_at":
		if e.complexity.DynamicSupervisionDetail.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.UpdatedAt(childComplexity), true

	case "dynamic_supervision_detail.updated_by":
		if e.complexity.DynamicSupervisionDetail.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.UpdatedBy(childComplexity), true

	case "dynamic_supervision_detail.vehicle_id":
		if e.complexity.DynamicSupervisionDetail.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetail.VehicleID(childComplexity), true

	case "dynamic_supervision_detail_aggregate.aggregate":
		if e.complexity.DynamicSupervisionDetailAggregate.Aggregate == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregate.Aggregate(childComplexity), true

	case "dynamic_supervision_detail_aggregate.nodes":
		if e.complexity.DynamicSupervisionDetailAggregate.Nodes == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregate.Nodes(childComplexity), true

	case "dynamic_supervision_detail_aggregate_fields.avg":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Avg == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Avg(childComplexity), true

	case "dynamic_supervision_detail_aggregate_fields.count":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_dynamic_supervision_detail_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Count(childComplexity, args["columns"].([]model.DynamicSupervisionDetailSelectColumn), args["distinct"].(*bool)), true

	case "dynamic_supervision_detail_aggregate_fields.max":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Max == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Max(childComplexity), true

	case "dynamic_supervision_detail_aggregate_fields.min":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Min == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Min(childComplexity), true

	case "dynamic_supervision_detail_aggregate_fields.stddev":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Stddev(childComplexity), true

	case "dynamic_supervision_detail_aggregate_fields.stddev_pop":
		if e.complexity.DynamicSupervisionDetailAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.StddevPop(childComplexity), true

	case "dynamic_supervision_detail_aggregate_fields.stddev_samp":
		if e.complexity.DynamicSupervisionDetailAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.StddevSamp(childComplexity), true

	case "dynamic_supervision_detail_aggregate_fields.sum":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Sum == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Sum(childComplexity), true

	case "dynamic_supervision_detail_aggregate_fields.var_pop":
		if e.complexity.DynamicSupervisionDetailAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.VarPop(childComplexity), true

	case "dynamic_supervision_detail_aggregate_fields.var_samp":
		if e.complexity.DynamicSupervisionDetailAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.VarSamp(childComplexity), true

	case "dynamic_supervision_detail_aggregate_fields.variance":
		if e.complexity.DynamicSupervisionDetailAggregateFields.Variance == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAggregateFields.Variance(childComplexity), true

	case "dynamic_supervision_detail_avg_fields.business_scope":
		if e.complexity.DynamicSupervisionDetailAvgFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.BusinessScope(childComplexity), true

	case "dynamic_supervision_detail_avg_fields.curve":
		if e.complexity.DynamicSupervisionDetailAvgFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.Curve(childComplexity), true

	case "dynamic_supervision_detail_avg_fields.equipment":
		if e.complexity.DynamicSupervisionDetailAvgFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.Equipment(childComplexity), true

	case "dynamic_supervision_detail_avg_fields.id":
		if e.complexity.DynamicSupervisionDetailAvgFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.ID(childComplexity), true

	case "dynamic_supervision_detail_avg_fields.lens_position":
		if e.complexity.DynamicSupervisionDetailAvgFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.LensPosition(childComplexity), true

	case "dynamic_supervision_detail_avg_fields.taxi_state":
		if e.complexity.DynamicSupervisionDetailAvgFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.TaxiState(childComplexity), true

	case "dynamic_supervision_detail_avg_fields.trail":
		if e.complexity.DynamicSupervisionDetailAvgFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailAvgFields.Trail(childComplexity), true

	case "dynamic_supervision_detail_max_fields.assignee":
		if e.complexity.DynamicSupervisionDetailMaxFields.Assignee == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Assignee(childComplexity), true

	case "dynamic_supervision_detail_max_fields.business_scope":
		if e.complexity.DynamicSupervisionDetailMaxFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.BusinessScope(childComplexity), true

	case "dynamic_supervision_detail_max_fields.created_at":
		if e.complexity.DynamicSupervisionDetailMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.CreatedAt(childComplexity), true

	case "dynamic_supervision_detail_max_fields.created_by":
		if e.complexity.DynamicSupervisionDetailMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.CreatedBy(childComplexity), true

	case "dynamic_supervision_detail_max_fields.curve":
		if e.complexity.DynamicSupervisionDetailMaxFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Curve(childComplexity), true

	case "dynamic_supervision_detail_max_fields.deleted_at":
		if e.complexity.DynamicSupervisionDetailMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DeletedAt(childComplexity), true

	case "dynamic_supervision_detail_max_fields.deleted_by":
		if e.complexity.DynamicSupervisionDetailMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DeletedBy(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_measures":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_measures1":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures1(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_measures2":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures2(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_measures3":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures3(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_measures4":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures4(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_measures5":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures5(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_measures6":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures6(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_measures7":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalMeasures7(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_results":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_results1":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults1(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_results2":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults2(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_results3":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults3(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_results4":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults4(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_results5":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults5(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_results6":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults6(childComplexity), true

	case "dynamic_supervision_detail_max_fields.disposal_results7":
		if e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DisposalResults7(childComplexity), true

	case "dynamic_supervision_detail_max_fields.driver_id":
		if e.complexity.DynamicSupervisionDetailMaxFields.DriverID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.DriverID(childComplexity), true

	case "dynamic_supervision_detail_max_fields.enterprise_id":
		if e.complexity.DynamicSupervisionDetailMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.EnterpriseID(childComplexity), true

	case "dynamic_supervision_detail_max_fields.equipment":
		if e.complexity.DynamicSupervisionDetailMaxFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Equipment(childComplexity), true

	case "dynamic_supervision_detail_max_fields.fatigue_alarm_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.FatigueAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.FatigueAlarmTime(childComplexity), true

	case "dynamic_supervision_detail_max_fields.feedback_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.FeedbackTime(childComplexity), true

	case "dynamic_supervision_detail_max_fields.GPS_speed":
		if e.complexity.DynamicSupervisionDetailMaxFields.GpsSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.GpsSpeed(childComplexity), true

	case "dynamic_supervision_detail_max_fields.id":
		if e.complexity.DynamicSupervisionDetailMaxFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.ID(childComplexity), true

	case "dynamic_supervision_detail_max_fields.latitude_longitude_description":
		if e.complexity.DynamicSupervisionDetailMaxFields.LatitudeLongitudeDescription == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.LatitudeLongitudeDescription(childComplexity), true

	case "dynamic_supervision_detail_max_fields.lens_on":
		if e.complexity.DynamicSupervisionDetailMaxFields.LensOn == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.LensOn(childComplexity), true

	case "dynamic_supervision_detail_max_fields.lens_position":
		if e.complexity.DynamicSupervisionDetailMaxFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.LensPosition(childComplexity), true

	case "dynamic_supervision_detail_max_fields.monitor_end_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.MonitorEndTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.MonitorEndTime(childComplexity), true

	case "dynamic_supervision_detail_max_fields.monitoring_location":
		if e.complexity.DynamicSupervisionDetailMaxFields.MonitoringLocation == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.MonitoringLocation(childComplexity), true

	case "dynamic_supervision_detail_max_fields.monitoring_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.MonitoringTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.MonitoringTime(childComplexity), true

	case "dynamic_supervision_detail_max_fields.other_infraction":
		if e.complexity.DynamicSupervisionDetailMaxFields.OtherInfraction == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.OtherInfraction(childComplexity), true

	case "dynamic_supervision_detail_max_fields.others":
		if e.complexity.DynamicSupervisionDetailMaxFields.Others == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Others(childComplexity), true

	case "dynamic_supervision_detail_max_fields.outage_alarm_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.OutageAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.OutageAlarmTime(childComplexity), true

	case "dynamic_supervision_detail_max_fields.remarks":
		if e.complexity.DynamicSupervisionDetailMaxFields.Remarks == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Remarks(childComplexity), true

	case "dynamic_supervision_detail_max_fields.speed_alarm_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.SpeedAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.SpeedAlarmTime(childComplexity), true

	case "dynamic_supervision_detail_max_fields.speeding_speed":
		if e.complexity.DynamicSupervisionDetailMaxFields.SpeedingSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.SpeedingSpeed(childComplexity), true

	case "dynamic_supervision_detail_max_fields.supervision_detail_id":
		if e.complexity.DynamicSupervisionDetailMaxFields.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.SupervisionDetailID(childComplexity), true

	case "dynamic_supervision_detail_max_fields.supervision_id":
		if e.complexity.DynamicSupervisionDetailMaxFields.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.SupervisionID(childComplexity), true

	case "dynamic_supervision_detail_max_fields.tachograph_data_exception":
		if e.complexity.DynamicSupervisionDetailMaxFields.TachographDataException == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.TachographDataException(childComplexity), true

	case "dynamic_supervision_detail_max_fields.tachograph_speed":
		if e.complexity.DynamicSupervisionDetailMaxFields.TachographSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.TachographSpeed(childComplexity), true

	case "dynamic_supervision_detail_max_fields.taxi_state":
		if e.complexity.DynamicSupervisionDetailMaxFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.TaxiState(childComplexity), true

	case "dynamic_supervision_detail_max_fields.trail":
		if e.complexity.DynamicSupervisionDetailMaxFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.Trail(childComplexity), true

	case "dynamic_supervision_detail_max_fields.treatment_time":
		if e.complexity.DynamicSupervisionDetailMaxFields.TreatmentTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.TreatmentTime(childComplexity), true

	case "dynamic_supervision_detail_max_fields.updated_at":
		if e.complexity.DynamicSupervisionDetailMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.UpdatedAt(childComplexity), true

	case "dynamic_supervision_detail_max_fields.updated_by":
		if e.complexity.DynamicSupervisionDetailMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.UpdatedBy(childComplexity), true

	case "dynamic_supervision_detail_max_fields.vehicle_id":
		if e.complexity.DynamicSupervisionDetailMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMaxFields.VehicleID(childComplexity), true

	case "dynamic_supervision_detail_min_fields.assignee":
		if e.complexity.DynamicSupervisionDetailMinFields.Assignee == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Assignee(childComplexity), true

	case "dynamic_supervision_detail_min_fields.business_scope":
		if e.complexity.DynamicSupervisionDetailMinFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.BusinessScope(childComplexity), true

	case "dynamic_supervision_detail_min_fields.created_at":
		if e.complexity.DynamicSupervisionDetailMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.CreatedAt(childComplexity), true

	case "dynamic_supervision_detail_min_fields.created_by":
		if e.complexity.DynamicSupervisionDetailMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.CreatedBy(childComplexity), true

	case "dynamic_supervision_detail_min_fields.curve":
		if e.complexity.DynamicSupervisionDetailMinFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Curve(childComplexity), true

	case "dynamic_supervision_detail_min_fields.deleted_at":
		if e.complexity.DynamicSupervisionDetailMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DeletedAt(childComplexity), true

	case "dynamic_supervision_detail_min_fields.deleted_by":
		if e.complexity.DynamicSupervisionDetailMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DeletedBy(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_measures":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_measures1":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures1(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_measures2":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures2(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_measures3":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures3(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_measures4":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures4(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_measures5":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures5(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_measures6":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures6(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_measures7":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalMeasures7(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_results":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_results1":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults1 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults1(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_results2":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults2 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults2(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_results3":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults3 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults3(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_results4":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults4 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults4(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_results5":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults5 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults5(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_results6":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults6 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults6(childComplexity), true

	case "dynamic_supervision_detail_min_fields.disposal_results7":
		if e.complexity.DynamicSupervisionDetailMinFields.DisposalResults7 == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DisposalResults7(childComplexity), true

	case "dynamic_supervision_detail_min_fields.driver_id":
		if e.complexity.DynamicSupervisionDetailMinFields.DriverID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.DriverID(childComplexity), true

	case "dynamic_supervision_detail_min_fields.enterprise_id":
		if e.complexity.DynamicSupervisionDetailMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.EnterpriseID(childComplexity), true

	case "dynamic_supervision_detail_min_fields.equipment":
		if e.complexity.DynamicSupervisionDetailMinFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Equipment(childComplexity), true

	case "dynamic_supervision_detail_min_fields.fatigue_alarm_time":
		if e.complexity.DynamicSupervisionDetailMinFields.FatigueAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.FatigueAlarmTime(childComplexity), true

	case "dynamic_supervision_detail_min_fields.feedback_time":
		if e.complexity.DynamicSupervisionDetailMinFields.FeedbackTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.FeedbackTime(childComplexity), true

	case "dynamic_supervision_detail_min_fields.GPS_speed":
		if e.complexity.DynamicSupervisionDetailMinFields.GpsSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.GpsSpeed(childComplexity), true

	case "dynamic_supervision_detail_min_fields.id":
		if e.complexity.DynamicSupervisionDetailMinFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.ID(childComplexity), true

	case "dynamic_supervision_detail_min_fields.latitude_longitude_description":
		if e.complexity.DynamicSupervisionDetailMinFields.LatitudeLongitudeDescription == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.LatitudeLongitudeDescription(childComplexity), true

	case "dynamic_supervision_detail_min_fields.lens_on":
		if e.complexity.DynamicSupervisionDetailMinFields.LensOn == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.LensOn(childComplexity), true

	case "dynamic_supervision_detail_min_fields.lens_position":
		if e.complexity.DynamicSupervisionDetailMinFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.LensPosition(childComplexity), true

	case "dynamic_supervision_detail_min_fields.monitor_end_time":
		if e.complexity.DynamicSupervisionDetailMinFields.MonitorEndTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.MonitorEndTime(childComplexity), true

	case "dynamic_supervision_detail_min_fields.monitoring_location":
		if e.complexity.DynamicSupervisionDetailMinFields.MonitoringLocation == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.MonitoringLocation(childComplexity), true

	case "dynamic_supervision_detail_min_fields.monitoring_time":
		if e.complexity.DynamicSupervisionDetailMinFields.MonitoringTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.MonitoringTime(childComplexity), true

	case "dynamic_supervision_detail_min_fields.other_infraction":
		if e.complexity.DynamicSupervisionDetailMinFields.OtherInfraction == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.OtherInfraction(childComplexity), true

	case "dynamic_supervision_detail_min_fields.others":
		if e.complexity.DynamicSupervisionDetailMinFields.Others == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Others(childComplexity), true

	case "dynamic_supervision_detail_min_fields.outage_alarm_time":
		if e.complexity.DynamicSupervisionDetailMinFields.OutageAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.OutageAlarmTime(childComplexity), true

	case "dynamic_supervision_detail_min_fields.remarks":
		if e.complexity.DynamicSupervisionDetailMinFields.Remarks == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Remarks(childComplexity), true

	case "dynamic_supervision_detail_min_fields.speed_alarm_time":
		if e.complexity.DynamicSupervisionDetailMinFields.SpeedAlarmTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.SpeedAlarmTime(childComplexity), true

	case "dynamic_supervision_detail_min_fields.speeding_speed":
		if e.complexity.DynamicSupervisionDetailMinFields.SpeedingSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.SpeedingSpeed(childComplexity), true

	case "dynamic_supervision_detail_min_fields.supervision_detail_id":
		if e.complexity.DynamicSupervisionDetailMinFields.SupervisionDetailID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.SupervisionDetailID(childComplexity), true

	case "dynamic_supervision_detail_min_fields.supervision_id":
		if e.complexity.DynamicSupervisionDetailMinFields.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.SupervisionID(childComplexity), true

	case "dynamic_supervision_detail_min_fields.tachograph_data_exception":
		if e.complexity.DynamicSupervisionDetailMinFields.TachographDataException == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.TachographDataException(childComplexity), true

	case "dynamic_supervision_detail_min_fields.tachograph_speed":
		if e.complexity.DynamicSupervisionDetailMinFields.TachographSpeed == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.TachographSpeed(childComplexity), true

	case "dynamic_supervision_detail_min_fields.taxi_state":
		if e.complexity.DynamicSupervisionDetailMinFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.TaxiState(childComplexity), true

	case "dynamic_supervision_detail_min_fields.trail":
		if e.complexity.DynamicSupervisionDetailMinFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.Trail(childComplexity), true

	case "dynamic_supervision_detail_min_fields.treatment_time":
		if e.complexity.DynamicSupervisionDetailMinFields.TreatmentTime == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.TreatmentTime(childComplexity), true

	case "dynamic_supervision_detail_min_fields.updated_at":
		if e.complexity.DynamicSupervisionDetailMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.UpdatedAt(childComplexity), true

	case "dynamic_supervision_detail_min_fields.updated_by":
		if e.complexity.DynamicSupervisionDetailMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.UpdatedBy(childComplexity), true

	case "dynamic_supervision_detail_min_fields.vehicle_id":
		if e.complexity.DynamicSupervisionDetailMinFields.VehicleID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMinFields.VehicleID(childComplexity), true

	case "dynamic_supervision_detail_mutation_response.affected_rows":
		if e.complexity.DynamicSupervisionDetailMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMutationResponse.AffectedRows(childComplexity), true

	case "dynamic_supervision_detail_mutation_response.returning":
		if e.complexity.DynamicSupervisionDetailMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailMutationResponse.Returning(childComplexity), true

	case "dynamic_supervision_detail_stddev_fields.business_scope":
		if e.complexity.DynamicSupervisionDetailStddevFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.BusinessScope(childComplexity), true

	case "dynamic_supervision_detail_stddev_fields.curve":
		if e.complexity.DynamicSupervisionDetailStddevFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.Curve(childComplexity), true

	case "dynamic_supervision_detail_stddev_fields.equipment":
		if e.complexity.DynamicSupervisionDetailStddevFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.Equipment(childComplexity), true

	case "dynamic_supervision_detail_stddev_fields.id":
		if e.complexity.DynamicSupervisionDetailStddevFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.ID(childComplexity), true

	case "dynamic_supervision_detail_stddev_fields.lens_position":
		if e.complexity.DynamicSupervisionDetailStddevFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.LensPosition(childComplexity), true

	case "dynamic_supervision_detail_stddev_fields.taxi_state":
		if e.complexity.DynamicSupervisionDetailStddevFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.TaxiState(childComplexity), true

	case "dynamic_supervision_detail_stddev_fields.trail":
		if e.complexity.DynamicSupervisionDetailStddevFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevFields.Trail(childComplexity), true

	case "dynamic_supervision_detail_stddev_pop_fields.business_scope":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.BusinessScope(childComplexity), true

	case "dynamic_supervision_detail_stddev_pop_fields.curve":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.Curve(childComplexity), true

	case "dynamic_supervision_detail_stddev_pop_fields.equipment":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.Equipment(childComplexity), true

	case "dynamic_supervision_detail_stddev_pop_fields.id":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.ID(childComplexity), true

	case "dynamic_supervision_detail_stddev_pop_fields.lens_position":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.LensPosition(childComplexity), true

	case "dynamic_supervision_detail_stddev_pop_fields.taxi_state":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.TaxiState(childComplexity), true

	case "dynamic_supervision_detail_stddev_pop_fields.trail":
		if e.complexity.DynamicSupervisionDetailStddevPopFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevPopFields.Trail(childComplexity), true

	case "dynamic_supervision_detail_stddev_samp_fields.business_scope":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.BusinessScope(childComplexity), true

	case "dynamic_supervision_detail_stddev_samp_fields.curve":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.Curve(childComplexity), true

	case "dynamic_supervision_detail_stddev_samp_fields.equipment":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.Equipment(childComplexity), true

	case "dynamic_supervision_detail_stddev_samp_fields.id":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.ID(childComplexity), true

	case "dynamic_supervision_detail_stddev_samp_fields.lens_position":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.LensPosition(childComplexity), true

	case "dynamic_supervision_detail_stddev_samp_fields.taxi_state":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.TaxiState(childComplexity), true

	case "dynamic_supervision_detail_stddev_samp_fields.trail":
		if e.complexity.DynamicSupervisionDetailStddevSampFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailStddevSampFields.Trail(childComplexity), true

	case "dynamic_supervision_detail_sum_fields.business_scope":
		if e.complexity.DynamicSupervisionDetailSumFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.BusinessScope(childComplexity), true

	case "dynamic_supervision_detail_sum_fields.curve":
		if e.complexity.DynamicSupervisionDetailSumFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.Curve(childComplexity), true

	case "dynamic_supervision_detail_sum_fields.equipment":
		if e.complexity.DynamicSupervisionDetailSumFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.Equipment(childComplexity), true

	case "dynamic_supervision_detail_sum_fields.id":
		if e.complexity.DynamicSupervisionDetailSumFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.ID(childComplexity), true

	case "dynamic_supervision_detail_sum_fields.lens_position":
		if e.complexity.DynamicSupervisionDetailSumFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.LensPosition(childComplexity), true

	case "dynamic_supervision_detail_sum_fields.taxi_state":
		if e.complexity.DynamicSupervisionDetailSumFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.TaxiState(childComplexity), true

	case "dynamic_supervision_detail_sum_fields.trail":
		if e.complexity.DynamicSupervisionDetailSumFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailSumFields.Trail(childComplexity), true

	case "dynamic_supervision_detail_var_pop_fields.business_scope":
		if e.complexity.DynamicSupervisionDetailVarPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.BusinessScope(childComplexity), true

	case "dynamic_supervision_detail_var_pop_fields.curve":
		if e.complexity.DynamicSupervisionDetailVarPopFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.Curve(childComplexity), true

	case "dynamic_supervision_detail_var_pop_fields.equipment":
		if e.complexity.DynamicSupervisionDetailVarPopFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.Equipment(childComplexity), true

	case "dynamic_supervision_detail_var_pop_fields.id":
		if e.complexity.DynamicSupervisionDetailVarPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.ID(childComplexity), true

	case "dynamic_supervision_detail_var_pop_fields.lens_position":
		if e.complexity.DynamicSupervisionDetailVarPopFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.LensPosition(childComplexity), true

	case "dynamic_supervision_detail_var_pop_fields.taxi_state":
		if e.complexity.DynamicSupervisionDetailVarPopFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.TaxiState(childComplexity), true

	case "dynamic_supervision_detail_var_pop_fields.trail":
		if e.complexity.DynamicSupervisionDetailVarPopFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarPopFields.Trail(childComplexity), true

	case "dynamic_supervision_detail_var_samp_fields.business_scope":
		if e.complexity.DynamicSupervisionDetailVarSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.BusinessScope(childComplexity), true

	case "dynamic_supervision_detail_var_samp_fields.curve":
		if e.complexity.DynamicSupervisionDetailVarSampFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.Curve(childComplexity), true

	case "dynamic_supervision_detail_var_samp_fields.equipment":
		if e.complexity.DynamicSupervisionDetailVarSampFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.Equipment(childComplexity), true

	case "dynamic_supervision_detail_var_samp_fields.id":
		if e.complexity.DynamicSupervisionDetailVarSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.ID(childComplexity), true

	case "dynamic_supervision_detail_var_samp_fields.lens_position":
		if e.complexity.DynamicSupervisionDetailVarSampFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.LensPosition(childComplexity), true

	case "dynamic_supervision_detail_var_samp_fields.taxi_state":
		if e.complexity.DynamicSupervisionDetailVarSampFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.TaxiState(childComplexity), true

	case "dynamic_supervision_detail_var_samp_fields.trail":
		if e.complexity.DynamicSupervisionDetailVarSampFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarSampFields.Trail(childComplexity), true

	case "dynamic_supervision_detail_variance_fields.business_scope":
		if e.complexity.DynamicSupervisionDetailVarianceFields.BusinessScope == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.BusinessScope(childComplexity), true

	case "dynamic_supervision_detail_variance_fields.curve":
		if e.complexity.DynamicSupervisionDetailVarianceFields.Curve == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.Curve(childComplexity), true

	case "dynamic_supervision_detail_variance_fields.equipment":
		if e.complexity.DynamicSupervisionDetailVarianceFields.Equipment == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.Equipment(childComplexity), true

	case "dynamic_supervision_detail_variance_fields.id":
		if e.complexity.DynamicSupervisionDetailVarianceFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.ID(childComplexity), true

	case "dynamic_supervision_detail_variance_fields.lens_position":
		if e.complexity.DynamicSupervisionDetailVarianceFields.LensPosition == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.LensPosition(childComplexity), true

	case "dynamic_supervision_detail_variance_fields.taxi_state":
		if e.complexity.DynamicSupervisionDetailVarianceFields.TaxiState == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.TaxiState(childComplexity), true

	case "dynamic_supervision_detail_variance_fields.trail":
		if e.complexity.DynamicSupervisionDetailVarianceFields.Trail == nil {
			break
		}

		return e.complexity.DynamicSupervisionDetailVarianceFields.Trail(childComplexity), true

	case "dynamic_supervision_max_fields.check_user_id":
		if e.complexity.DynamicSupervisionMaxFields.CheckUserID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.CheckUserID(childComplexity), true

	case "dynamic_supervision_max_fields.city_id":
		if e.complexity.DynamicSupervisionMaxFields.CityID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.CityID(childComplexity), true

	case "dynamic_supervision_max_fields.created_at":
		if e.complexity.DynamicSupervisionMaxFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.CreatedAt(childComplexity), true

	case "dynamic_supervision_max_fields.created_by":
		if e.complexity.DynamicSupervisionMaxFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.CreatedBy(childComplexity), true

	case "dynamic_supervision_max_fields.day":
		if e.complexity.DynamicSupervisionMaxFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.Day(childComplexity), true

	case "dynamic_supervision_max_fields.deleted_at":
		if e.complexity.DynamicSupervisionMaxFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.DeletedAt(childComplexity), true

	case "dynamic_supervision_max_fields.deleted_by":
		if e.complexity.DynamicSupervisionMaxFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.DeletedBy(childComplexity), true

	case "dynamic_supervision_max_fields.district_id":
		if e.complexity.DynamicSupervisionMaxFields.DistrictID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.DistrictID(childComplexity), true

	case "dynamic_supervision_max_fields.id":
		if e.complexity.DynamicSupervisionMaxFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.ID(childComplexity), true

	case "dynamic_supervision_max_fields.month":
		if e.complexity.DynamicSupervisionMaxFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.Month(childComplexity), true

	case "dynamic_supervision_max_fields.province_id":
		if e.complexity.DynamicSupervisionMaxFields.ProvinceID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.ProvinceID(childComplexity), true

	case "dynamic_supervision_max_fields.spot_check_date":
		if e.complexity.DynamicSupervisionMaxFields.SpotCheckDate == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.SpotCheckDate(childComplexity), true

	case "dynamic_supervision_max_fields.spot_check_number":
		if e.complexity.DynamicSupervisionMaxFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.SpotCheckNumber(childComplexity), true

	case "dynamic_supervision_max_fields.spot_check_ratio":
		if e.complexity.DynamicSupervisionMaxFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.SpotCheckRatio(childComplexity), true

	case "dynamic_supervision_max_fields.spot_check_total_number":
		if e.complexity.DynamicSupervisionMaxFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.SpotCheckTotalNumber(childComplexity), true

	case "dynamic_supervision_max_fields.supervision_id":
		if e.complexity.DynamicSupervisionMaxFields.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.SupervisionID(childComplexity), true

	case "dynamic_supervision_max_fields.total_number_vehicle":
		if e.complexity.DynamicSupervisionMaxFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.TotalNumberVehicle(childComplexity), true

	case "dynamic_supervision_max_fields.updated_at":
		if e.complexity.DynamicSupervisionMaxFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.UpdatedAt(childComplexity), true

	case "dynamic_supervision_max_fields.updated_by":
		if e.complexity.DynamicSupervisionMaxFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.UpdatedBy(childComplexity), true

	case "dynamic_supervision_max_fields.year":
		if e.complexity.DynamicSupervisionMaxFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionMaxFields.Year(childComplexity), true

	case "dynamic_supervision_min_fields.check_user_id":
		if e.complexity.DynamicSupervisionMinFields.CheckUserID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.CheckUserID(childComplexity), true

	case "dynamic_supervision_min_fields.city_id":
		if e.complexity.DynamicSupervisionMinFields.CityID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.CityID(childComplexity), true

	case "dynamic_supervision_min_fields.created_at":
		if e.complexity.DynamicSupervisionMinFields.CreatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.CreatedAt(childComplexity), true

	case "dynamic_supervision_min_fields.created_by":
		if e.complexity.DynamicSupervisionMinFields.CreatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.CreatedBy(childComplexity), true

	case "dynamic_supervision_min_fields.day":
		if e.complexity.DynamicSupervisionMinFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.Day(childComplexity), true

	case "dynamic_supervision_min_fields.deleted_at":
		if e.complexity.DynamicSupervisionMinFields.DeletedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.DeletedAt(childComplexity), true

	case "dynamic_supervision_min_fields.deleted_by":
		if e.complexity.DynamicSupervisionMinFields.DeletedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.DeletedBy(childComplexity), true

	case "dynamic_supervision_min_fields.district_id":
		if e.complexity.DynamicSupervisionMinFields.DistrictID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.DistrictID(childComplexity), true

	case "dynamic_supervision_min_fields.id":
		if e.complexity.DynamicSupervisionMinFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.ID(childComplexity), true

	case "dynamic_supervision_min_fields.month":
		if e.complexity.DynamicSupervisionMinFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.Month(childComplexity), true

	case "dynamic_supervision_min_fields.province_id":
		if e.complexity.DynamicSupervisionMinFields.ProvinceID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.ProvinceID(childComplexity), true

	case "dynamic_supervision_min_fields.spot_check_date":
		if e.complexity.DynamicSupervisionMinFields.SpotCheckDate == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.SpotCheckDate(childComplexity), true

	case "dynamic_supervision_min_fields.spot_check_number":
		if e.complexity.DynamicSupervisionMinFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.SpotCheckNumber(childComplexity), true

	case "dynamic_supervision_min_fields.spot_check_ratio":
		if e.complexity.DynamicSupervisionMinFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.SpotCheckRatio(childComplexity), true

	case "dynamic_supervision_min_fields.spot_check_total_number":
		if e.complexity.DynamicSupervisionMinFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.SpotCheckTotalNumber(childComplexity), true

	case "dynamic_supervision_min_fields.supervision_id":
		if e.complexity.DynamicSupervisionMinFields.SupervisionID == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.SupervisionID(childComplexity), true

	case "dynamic_supervision_min_fields.total_number_vehicle":
		if e.complexity.DynamicSupervisionMinFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.TotalNumberVehicle(childComplexity), true

	case "dynamic_supervision_min_fields.updated_at":
		if e.complexity.DynamicSupervisionMinFields.UpdatedAt == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.UpdatedAt(childComplexity), true

	case "dynamic_supervision_min_fields.updated_by":
		if e.complexity.DynamicSupervisionMinFields.UpdatedBy == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.UpdatedBy(childComplexity), true

	case "dynamic_supervision_min_fields.year":
		if e.complexity.DynamicSupervisionMinFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionMinFields.Year(childComplexity), true

	case "dynamic_supervision_mutation_response.affected_rows":
		if e.complexity.DynamicSupervisionMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.DynamicSupervisionMutationResponse.AffectedRows(childComplexity), true

	case "dynamic_supervision_mutation_response.returning":
		if e.complexity.DynamicSupervisionMutationResponse.Returning == nil {
			break
		}

		return e.complexity.DynamicSupervisionMutationResponse.Returning(childComplexity), true

	case "dynamic_supervision_stddev_fields.day":
		if e.complexity.DynamicSupervisionStddevFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.Day(childComplexity), true

	case "dynamic_supervision_stddev_fields.id":
		if e.complexity.DynamicSupervisionStddevFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.ID(childComplexity), true

	case "dynamic_supervision_stddev_fields.month":
		if e.complexity.DynamicSupervisionStddevFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.Month(childComplexity), true

	case "dynamic_supervision_stddev_fields.spot_check_number":
		if e.complexity.DynamicSupervisionStddevFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.SpotCheckNumber(childComplexity), true

	case "dynamic_supervision_stddev_fields.spot_check_ratio":
		if e.complexity.DynamicSupervisionStddevFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.SpotCheckRatio(childComplexity), true

	case "dynamic_supervision_stddev_fields.spot_check_total_number":
		if e.complexity.DynamicSupervisionStddevFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.SpotCheckTotalNumber(childComplexity), true

	case "dynamic_supervision_stddev_fields.total_number_vehicle":
		if e.complexity.DynamicSupervisionStddevFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.TotalNumberVehicle(childComplexity), true

	case "dynamic_supervision_stddev_fields.year":
		if e.complexity.DynamicSupervisionStddevFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevFields.Year(childComplexity), true

	case "dynamic_supervision_stddev_pop_fields.day":
		if e.complexity.DynamicSupervisionStddevPopFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.Day(childComplexity), true

	case "dynamic_supervision_stddev_pop_fields.id":
		if e.complexity.DynamicSupervisionStddevPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.ID(childComplexity), true

	case "dynamic_supervision_stddev_pop_fields.month":
		if e.complexity.DynamicSupervisionStddevPopFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.Month(childComplexity), true

	case "dynamic_supervision_stddev_pop_fields.spot_check_number":
		if e.complexity.DynamicSupervisionStddevPopFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.SpotCheckNumber(childComplexity), true

	case "dynamic_supervision_stddev_pop_fields.spot_check_ratio":
		if e.complexity.DynamicSupervisionStddevPopFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.SpotCheckRatio(childComplexity), true

	case "dynamic_supervision_stddev_pop_fields.spot_check_total_number":
		if e.complexity.DynamicSupervisionStddevPopFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.SpotCheckTotalNumber(childComplexity), true

	case "dynamic_supervision_stddev_pop_fields.total_number_vehicle":
		if e.complexity.DynamicSupervisionStddevPopFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.TotalNumberVehicle(childComplexity), true

	case "dynamic_supervision_stddev_pop_fields.year":
		if e.complexity.DynamicSupervisionStddevPopFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevPopFields.Year(childComplexity), true

	case "dynamic_supervision_stddev_samp_fields.day":
		if e.complexity.DynamicSupervisionStddevSampFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.Day(childComplexity), true

	case "dynamic_supervision_stddev_samp_fields.id":
		if e.complexity.DynamicSupervisionStddevSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.ID(childComplexity), true

	case "dynamic_supervision_stddev_samp_fields.month":
		if e.complexity.DynamicSupervisionStddevSampFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.Month(childComplexity), true

	case "dynamic_supervision_stddev_samp_fields.spot_check_number":
		if e.complexity.DynamicSupervisionStddevSampFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.SpotCheckNumber(childComplexity), true

	case "dynamic_supervision_stddev_samp_fields.spot_check_ratio":
		if e.complexity.DynamicSupervisionStddevSampFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.SpotCheckRatio(childComplexity), true

	case "dynamic_supervision_stddev_samp_fields.spot_check_total_number":
		if e.complexity.DynamicSupervisionStddevSampFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.SpotCheckTotalNumber(childComplexity), true

	case "dynamic_supervision_stddev_samp_fields.total_number_vehicle":
		if e.complexity.DynamicSupervisionStddevSampFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.TotalNumberVehicle(childComplexity), true

	case "dynamic_supervision_stddev_samp_fields.year":
		if e.complexity.DynamicSupervisionStddevSampFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionStddevSampFields.Year(childComplexity), true

	case "dynamic_supervision_sum_fields.day":
		if e.complexity.DynamicSupervisionSumFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.Day(childComplexity), true

	case "dynamic_supervision_sum_fields.id":
		if e.complexity.DynamicSupervisionSumFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.ID(childComplexity), true

	case "dynamic_supervision_sum_fields.month":
		if e.complexity.DynamicSupervisionSumFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.Month(childComplexity), true

	case "dynamic_supervision_sum_fields.spot_check_number":
		if e.complexity.DynamicSupervisionSumFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.SpotCheckNumber(childComplexity), true

	case "dynamic_supervision_sum_fields.spot_check_ratio":
		if e.complexity.DynamicSupervisionSumFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.SpotCheckRatio(childComplexity), true

	case "dynamic_supervision_sum_fields.spot_check_total_number":
		if e.complexity.DynamicSupervisionSumFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.SpotCheckTotalNumber(childComplexity), true

	case "dynamic_supervision_sum_fields.total_number_vehicle":
		if e.complexity.DynamicSupervisionSumFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.TotalNumberVehicle(childComplexity), true

	case "dynamic_supervision_sum_fields.year":
		if e.complexity.DynamicSupervisionSumFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionSumFields.Year(childComplexity), true

	case "dynamic_supervision_var_pop_fields.day":
		if e.complexity.DynamicSupervisionVarPopFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.Day(childComplexity), true

	case "dynamic_supervision_var_pop_fields.id":
		if e.complexity.DynamicSupervisionVarPopFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.ID(childComplexity), true

	case "dynamic_supervision_var_pop_fields.month":
		if e.complexity.DynamicSupervisionVarPopFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.Month(childComplexity), true

	case "dynamic_supervision_var_pop_fields.spot_check_number":
		if e.complexity.DynamicSupervisionVarPopFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.SpotCheckNumber(childComplexity), true

	case "dynamic_supervision_var_pop_fields.spot_check_ratio":
		if e.complexity.DynamicSupervisionVarPopFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.SpotCheckRatio(childComplexity), true

	case "dynamic_supervision_var_pop_fields.spot_check_total_number":
		if e.complexity.DynamicSupervisionVarPopFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.SpotCheckTotalNumber(childComplexity), true

	case "dynamic_supervision_var_pop_fields.total_number_vehicle":
		if e.complexity.DynamicSupervisionVarPopFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.TotalNumberVehicle(childComplexity), true

	case "dynamic_supervision_var_pop_fields.year":
		if e.complexity.DynamicSupervisionVarPopFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarPopFields.Year(childComplexity), true

	case "dynamic_supervision_var_samp_fields.day":
		if e.complexity.DynamicSupervisionVarSampFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.Day(childComplexity), true

	case "dynamic_supervision_var_samp_fields.id":
		if e.complexity.DynamicSupervisionVarSampFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.ID(childComplexity), true

	case "dynamic_supervision_var_samp_fields.month":
		if e.complexity.DynamicSupervisionVarSampFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.Month(childComplexity), true

	case "dynamic_supervision_var_samp_fields.spot_check_number":
		if e.complexity.DynamicSupervisionVarSampFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.SpotCheckNumber(childComplexity), true

	case "dynamic_supervision_var_samp_fields.spot_check_ratio":
		if e.complexity.DynamicSupervisionVarSampFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.SpotCheckRatio(childComplexity), true

	case "dynamic_supervision_var_samp_fields.spot_check_total_number":
		if e.complexity.DynamicSupervisionVarSampFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.SpotCheckTotalNumber(childComplexity), true

	case "dynamic_supervision_var_samp_fields.total_number_vehicle":
		if e.complexity.DynamicSupervisionVarSampFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.TotalNumberVehicle(childComplexity), true

	case "dynamic_supervision_var_samp_fields.year":
		if e.complexity.DynamicSupervisionVarSampFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarSampFields.Year(childComplexity), true

	case "dynamic_supervision_variance_fields.day":
		if e.complexity.DynamicSupervisionVarianceFields.Day == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.Day(childComplexity), true

	case "dynamic_supervision_variance_fields.id":
		if e.complexity.DynamicSupervisionVarianceFields.ID == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.ID(childComplexity), true

	case "dynamic_supervision_variance_fields.month":
		if e.complexity.DynamicSupervisionVarianceFields.Month == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.Month(childComplexity), true

	case "dynamic_supervision_variance_fields.spot_check_number":
		if e.complexity.DynamicSupervisionVarianceFields.SpotCheckNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.SpotCheckNumber(childComplexity), true

	case "dynamic_supervision_variance_fields.spot_check_ratio":
		if e.complexity.DynamicSupervisionVarianceFields.SpotCheckRatio == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.SpotCheckRatio(childComplexity), true

	case "dynamic_supervision_variance_fields.spot_check_total_number":
		if e.complexity.DynamicSupervisionVarianceFields.SpotCheckTotalNumber == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.SpotCheckTotalNumber(childComplexity), true

	case "dynamic_supervision_variance_fields.total_number_vehicle":
		if e.complexity.DynamicSupervisionVarianceFields.TotalNumberVehicle == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.TotalNumberVehicle(childComplexity), true

	case "dynamic_supervision_variance_fields.year":
		if e.complexity.DynamicSupervisionVarianceFields.Year == nil {
			break
		}

		return e.complexity.DynamicSupervisionVarianceFields.Year(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/dynamic_spot_check_disposal.graphqls", Input: `
"""
动态抽查处置表


columns and relationships of "dynamic_spot_check_disposal"

"""
type dynamic_spot_check_disposal {
    """语音内容"""
    announce_content: String

    """APP推送内容"""
    app_push_content: String

    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """处置内容"""
    disposal_content: String

    """处置方式字典"""
    disposal_method: Int

    """处置结果"""
    disposal_result: String

    """所在企业id"""
    enterprise_id: String

    """反馈时间"""
    feedback_time: timestamptz

    """主键"""
    id: bigint!

    """图像异常处置措施"""
    image_abnormal_handing_measure: String

    """是否语音通知"""
    is_announce: Boolean

    """是否APP推送"""
    is_app_push: Boolean

    """是否删除"""
    is_delete: Boolean

    """是否通报"""
    is_notify: Boolean

    """是否短信推送"""
    is_sms_push: Boolean

    """通报内容"""
    notify_content: String

    """操作用户"""
    operation_user: String

    """发送时间"""
    send_time: timestamptz

    """dynamic_supervision_ detail 动态监管抽查明细表的supervision_detail_id"""
    supervision_detail_id: String

    """行车记录仪数据处置措施"""
    tachograph_data_disposal_measure: String

    """手机号码"""
    telephone: String

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """vehicle_info 车辆信息表 的vehicle_id"""
    vehicle_id: String!
}

"""
aggregated selection of "dynamic_spot_check_disposal"
"""
type dynamic_spot_check_disposal_aggregate {
    aggregate: dynamic_spot_check_disposal_aggregate_fields
    nodes: [dynamic_spot_check_disposal!]!
}

"""
aggregate fields of "dynamic_spot_check_disposal"
"""
type dynamic_spot_check_disposal_aggregate_fields {
    avg: dynamic_spot_check_disposal_avg_fields
    count(columns: [dynamic_spot_check_disposal_select_column!], distinct: Boolean): Int
    max: dynamic_spot_check_disposal_max_fields
    min: dynamic_spot_check_disposal_min_fields
    stddev: dynamic_spot_check_disposal_stddev_fields
    stddev_pop: dynamic_spot_check_disposal_stddev_pop_fields
    stddev_samp: dynamic_spot_check_disposal_stddev_samp_fields
    sum: dynamic_spot_check_disposal_sum_fields
    var_pop: dynamic_spot_check_disposal_var_pop_fields
    var_samp: dynamic_spot_check_disposal_var_samp_fields
    variance: dynamic_spot_check_disposal_variance_fields
}

"""
order by aggregate values of table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_aggregate_order_by {
    avg: dynamic_spot_check_disposal_avg_order_by
    count: order_by
    max: dynamic_spot_check_disposal_max_order_by
    min: dynamic_spot_check_disposal_min_order_by
    stddev: dynamic_spot_check_disposal_stddev_order_by
    stddev_pop: dynamic_spot_check_disposal_stddev_pop_order_by
    stddev_samp: dynamic_spot_check_disposal_stddev_samp_order_by
    sum: dynamic_spot_check_disposal_sum_order_by
    var_pop: dynamic_spot_check_disposal_var_pop_order_by
    var_samp: dynamic_spot_check_disposal_var_samp_order_by
    variance: dynamic_spot_check_disposal_variance_order_by
}

"""
input type for inserting array relation for remote table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_arr_rel_insert_input {
    data: [dynamic_spot_check_disposal_insert_input!]!
    on_conflict: dynamic_spot_check_disposal_on_conflict
}

"""aggregate avg on columns"""
type dynamic_spot_check_disposal_avg_fields {
    disposal_method: Float
    id: Float
}

"""
order by avg() on columns of table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_avg_order_by {
    disposal_method: order_by
    id: order_by
}

"""
Boolean expression to filter rows from the table "dynamic_spot_check_disposal".
All fields are combined with a logical 'AND'.
"""
input dynamic_spot_check_disposal_bool_exp {
    _and: [dynamic_spot_check_disposal_bool_exp]
    _not: dynamic_spot_check_disposal_bool_exp
    _or: [dynamic_spot_check_disposal_bool_exp]
    announce_content: String_comparison_exp
    app_push_content: String_comparison_exp
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    disposal_content: String_comparison_exp
    disposal_method: Int_comparison_exp
    disposal_result: String_comparison_exp
    enterprise_id: String_comparison_exp
    feedback_time: timestamptz_comparison_exp
    id: bigint_comparison_exp
    image_abnormal_handing_measure: String_comparison_exp
    is_announce: Boolean_comparison_exp
    is_app_push: Boolean_comparison_exp
    is_delete: Boolean_comparison_exp
    is_notify: Boolean_comparison_exp
    is_sms_push: Boolean_comparison_exp
    notify_content: String_comparison_exp
    operation_user: String_comparison_exp
    send_time: timestamptz_comparison_exp
    supervision_detail_id: String_comparison_exp
    tachograph_data_disposal_measure: String_comparison_exp
    telephone: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "dynamic_spot_check_disposal"
"""
enum dynamic_spot_check_disposal_constraint {
    """unique or primary key constraint"""
    dynamic_spot_check_disposal_pkey
}

"""
input type for incrementing integer column in table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_inc_input {
    disposal_method: Int
    id: bigint
}

"""
input type for inserting data into table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_insert_input {
    announce_content: String
    app_push_content: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    disposal_content: String
    disposal_method: Int
    disposal_result: String
    enterprise_id: String
    feedback_time: timestamptz
    id: bigint
    image_abnormal_handing_measure: String
    is_announce: Boolean
    is_app_push: Boolean
    is_delete: Boolean
    is_notify: Boolean
    is_sms_push: Boolean
    notify_content: String
    operation_user: String
    send_time: timestamptz
    supervision_detail_id: String
    tachograph_data_disposal_measure: String
    telephone: String
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""aggregate max on columns"""
type dynamic_spot_check_disposal_max_fields {
    announce_content: String
    app_push_content: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    disposal_content: String
    disposal_method: Int
    disposal_result: String
    enterprise_id: String
    feedback_time: timestamptz
    id: bigint
    image_abnormal_handing_measure: String
    notify_content: String
    operation_user: String
    send_time: timestamptz
    supervision_detail_id: String
    tachograph_data_disposal_measure: String
    telephone: String
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""
order by max() on columns of table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_max_order_by {
    announce_content: order_by
    app_push_content: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    disposal_content: order_by
    disposal_method: order_by
    disposal_result: order_by
    enterprise_id: order_by
    feedback_time: order_by
    id: order_by
    image_abnormal_handing_measure: order_by
    notify_content: order_by
    operation_user: order_by
    send_time: order_by
    supervision_detail_id: order_by
    tachograph_data_disposal_measure: order_by
    telephone: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type dynamic_spot_check_disposal_min_fields {
    announce_content: String
    app_push_content: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    disposal_content: String
    disposal_method: Int
    disposal_result: String
    enterprise_id: String
    feedback_time: timestamptz
    id: bigint
    image_abnormal_handing_measure: String
    notify_content: String
    operation_user: String
    send_time: timestamptz
    supervision_detail_id: String
    tachograph_data_disposal_measure: String
    telephone: String
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""
order by min() on columns of table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_min_order_by {
    announce_content: order_by
    app_push_content: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    disposal_content: order_by
    disposal_method: order_by
    disposal_result: order_by
    enterprise_id: order_by
    feedback_time: order_by
    id: order_by
    image_abnormal_handing_measure: order_by
    notify_content: order_by
    operation_user: order_by
    send_time: order_by
    supervision_detail_id: order_by
    tachograph_data_disposal_measure: order_by
    telephone: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "dynamic_spot_check_disposal"
"""
type dynamic_spot_check_disposal_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [dynamic_spot_check_disposal!]!
}

"""
input type for inserting object relation for remote table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_obj_rel_insert_input {
    data: dynamic_spot_check_disposal_insert_input!
    on_conflict: dynamic_spot_check_disposal_on_conflict
}

"""
on conflict condition type for table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_on_conflict {
    constraint: dynamic_spot_check_disposal_constraint!
    update_columns: [dynamic_spot_check_disposal_update_column!]!
    where: dynamic_spot_check_disposal_bool_exp
}

"""
ordering options when selecting data from "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_order_by {
    announce_content: order_by
    app_push_content: order_by
    created_at: order_by
    created_by: order_by
    deleted_at: order_by
    deleted_by: order_by
    disposal_content: order_by
    disposal_method: order_by
    disposal_result: order_by
    enterprise_id: order_by
    feedback_time: order_by
    id: order_by
    image_abnormal_handing_measure: order_by
    is_announce: order_by
    is_app_push: order_by
    is_delete: order_by
    is_notify: order_by
    is_sms_push: order_by
    notify_content: order_by
    operation_user: order_by
    send_time: order_by
    supervision_detail_id: order_by
    tachograph_data_disposal_measure: order_by
    telephone: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_pk_columns_input {
    """主键"""
    id: bigint!
}

"""
select columns of table "dynamic_spot_check_disposal"
"""
enum dynamic_spot_check_disposal_select_column {
    """column name"""
    announce_content

    """column name"""
    app_push_content

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    disposal_content

    """column name"""
    disposal_method

    """column name"""
    disposal_result

    """column name"""
    enterprise_id

    """column name"""
    feedback_time

    """column name"""
    id

    """column name"""
    image_abnormal_handing_measure

    """column name"""
    is_announce

    """column name"""
    is_app_push

    """column name"""
    is_delete

    """column name"""
    is_notify

    """column name"""
    is_sms_push

    """column name"""
    notify_content

    """column name"""
    operation_user

    """column name"""
    send_time

    """column name"""
    supervision_detail_id

    """column name"""
    tachograph_data_disposal_measure

    """column name"""
    telephone

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_set_input {
    announce_content: String
    app_push_content: String
    created_at: timestamptz
    created_by: String
    deleted_at: timestamptz
    deleted_by: String
    disposal_content: String
    disposal_method: Int
    disposal_result: String
    enterprise_id: String
    feedback_time: timestamptz
    id: bigint
    image_abnormal_handing_measure: String
    is_announce: Boolean
    is_app_push: Boolean
    is_delete: Boolean
    is_notify: Boolean
    is_sms_push: Boolean
    notify_content: String
    operation_user: String
    send_time: timestamptz
    supervision_detail_id: String
    tachograph_data_disposal_measure: String
    telephone: String
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""aggregate stddev on columns"""
type dynamic_spot_check_disposal_stddev_fields {
    disposal_method: Float
    id: Float
}

"""
order by stddev() on columns of table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_stddev_order_by {
    disposal_method: order_by
    id: order_by
}

"""aggregate stddev_pop on columns"""
type dynamic_spot_check_disposal_stddev_pop_fields {
    disposal_method: Float
    id: Float
}

"""
order by stddev_pop() on columns of table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_stddev_pop_order_by {
    disposal_method: order_by
    id: order_by
}

"""aggregate stddev_samp on columns"""
type dynamic_spot_check_disposal_stddev_samp_fields {
    disposal_method: Float
    id: Float
}

"""
order by stddev_samp() on columns of table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_stddev_samp_order_by {
    disposal_method: order_by
    id: order_by
}

"""aggregate sum on columns"""
type dynamic_spot_check_disposal_sum_fields {
    disposal_method: Int
    id: bigint
}

"""
order by sum() on columns of table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_sum_order_by {
    disposal_method: order_by
    id: order_by
}

"""
update columns of table "dynamic_spot_check_disposal"
"""
enum dynamic_spot_check_disposal_update_column {
    """column name"""
    announce_content

    """column name"""
    app_push_content

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    disposal_content

    """column name"""
    disposal_method

    """column name"""
    disposal_result

    """column name"""
    enterprise_id

    """column name"""
    feedback_time

    """column name"""
    id

    """column name"""
    image_abnormal_handing_measure

    """column name"""
    is_announce

    """column name"""
    is_app_push

    """column name"""
    is_delete

    """column name"""
    is_notify

    """column name"""
    is_sms_push

    """column name"""
    notify_content

    """column name"""
    operation_user

    """column name"""
    send_time

    """column name"""
    supervision_detail_id

    """column name"""
    tachograph_data_disposal_measure

    """column name"""
    telephone

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type dynamic_spot_check_disposal_var_pop_fields {
    disposal_method: Float
    id: Float
}

"""
order by var_pop() on columns of table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_var_pop_order_by {
    disposal_method: order_by
    id: order_by
}

"""aggregate var_samp on columns"""
type dynamic_spot_check_disposal_var_samp_fields {
    disposal_method: Float
    id: Float
}

"""
order by var_samp() on columns of table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_var_samp_order_by {
    disposal_method: order_by
    id: order_by
}

"""aggregate variance on columns"""
type dynamic_spot_check_disposal_variance_fields {
    disposal_method: Float
    id: Float
}

"""
order by variance() on columns of table "dynamic_spot_check_disposal"
"""
input dynamic_spot_check_disposal_variance_order_by {
    disposal_method: order_by
    id: order_by
}


extend type Mutation {
    """
    delete data from the table: "dynamic_spot_check_disposal"
  """
    delete_dynamic_spot_check_disposal(
        """filter the rows which have to be deleted"""
        where: dynamic_spot_check_disposal_bool_exp!
    ): dynamic_spot_check_disposal_mutation_response

    """
    delete single row from the table: "dynamic_spot_check_disposal"
  """
    delete_dynamic_spot_check_disposal_by_pk(
        """主键"""
        id: bigint!
    ): dynamic_spot_check_disposal

    """
    insert data into the table: "dynamic_spot_check_disposal"
  """
    insert_dynamic_spot_check_disposal(
        """the rows to be inserted"""
        objects: [dynamic_spot_check_disposal_insert_input!]!

        """on conflict condition"""
        on_conflict: dynamic_spot_check_disposal_on_conflict
    ): dynamic_spot_check_disposal_mutation_response

    """
    insert a single row into the table: "dynamic_spot_check_disposal"
  """
    insert_dynamic_spot_check_disposal_one(
        """the row to be inserted"""
        object: dynamic_spot_check_disposal_insert_input!

        """on conflict condition"""
        on_conflict: dynamic_spot_check_disposal_on_conflict
    ): dynamic_spot_check_disposal

    """
    update data of the table: "dynamic_spot_check_disposal"
  """
    update_dynamic_spot_check_disposal(
        """increments the integer columns with given value of the filtered values"""
        _inc: dynamic_spot_check_disposal_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: dynamic_spot_check_disposal_set_input

        """filter the rows which have to be updated"""
        where: dynamic_spot_check_disposal_bool_exp!
    ): dynamic_spot_check_disposal_mutation_response

    """
    update single row of the table: "dynamic_spot_check_disposal"
  """
    update_dynamic_spot_check_disposal_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: dynamic_spot_check_disposal_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: dynamic_spot_check_disposal_set_input
        pk_columns: dynamic_spot_check_disposal_pk_columns_input!
    ): dynamic_spot_check_disposal
}



extend type Query {
    """
    fetch data from the table: "dynamic_spot_check_disposal"
  """
    dynamic_spot_check_disposal(
        """distinct select on columns"""
        distinct_on: [dynamic_spot_check_disposal_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_spot_check_disposal_order_by!]

        """filter the rows returned"""
        where: dynamic_spot_check_disposal_bool_exp
    ): [dynamic_spot_check_disposal!]!

    """
    fetch aggregated fields from the table: "dynamic_spot_check_disposal"
  """
    dynamic_spot_check_disposal_aggregate(
        """distinct select on columns"""
        distinct_on: [dynamic_spot_check_disposal_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_spot_check_disposal_order_by!]

        """filter the rows returned"""
        where: dynamic_spot_check_disposal_bool_exp
    ): dynamic_spot_check_disposal_aggregate!

    """
    fetch data from the table: "dynamic_spot_check_disposal" using primary key columns
    """
    dynamic_spot_check_disposal_by_pk(
        """主键"""
        id: bigint!
    ): dynamic_spot_check_disposal
}


extend type Subscription {
    """
    fetch data from the table: "dynamic_spot_check_disposal"
  """
    dynamic_spot_check_disposal(
        """distinct select on columns"""
        distinct_on: [dynamic_spot_check_disposal_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_spot_check_disposal_order_by!]

        """filter the rows returned"""
        where: dynamic_spot_check_disposal_bool_exp
    ): [dynamic_spot_check_disposal!]!

    """
    fetch aggregated fields from the table: "dynamic_spot_check_disposal"
  """
    dynamic_spot_check_disposal_aggregate(
        """distinct select on columns"""
        distinct_on: [dynamic_spot_check_disposal_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_spot_check_disposal_order_by!]

        """filter the rows returned"""
        where: dynamic_spot_check_disposal_bool_exp
    ): dynamic_spot_check_disposal_aggregate!

    """
    fetch data from the table: "dynamic_spot_check_disposal" using primary key columns
    """
    dynamic_spot_check_disposal_by_pk(
        """主键"""
        id: bigint!
    ): dynamic_spot_check_disposal
}

`, BuiltIn: false},
	{Name: "graph/graphqls/dynamic_supervision.graphqls", Input: `

"""
动态监管抽查主表


columns and relationships of "dynamic_supervision"

"""
type dynamic_supervision {
    """抽查人员"""
    check_user_id: String

    """抽查人员位置的城市ID"""
    city_id: String

    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """日"""
    day: Int

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """抽查人员位置的区域ID"""
    district_id: String

    """
    主键



    """
    id: bigint!

    """是否被删除"""
    is_delete: Boolean

    """月"""
    month: Int

    """抽查人员位置的省份ID"""
    province_id: String

    """抽查日期"""
    spot_check_date: timestamptz

    """抽查数量"""
    spot_check_number: Int

    """抽查比例"""
    spot_check_ratio: numeric

    """抽查总数"""
    spot_check_total_number: Int

    """联合主键"""
    supervision_id: String!

    """总车辆数"""
    total_number_vehicle: Int

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """年"""
    year: Int
}

"""
aggregated selection of "dynamic_supervision"
"""
type dynamic_supervision_aggregate {
    aggregate: dynamic_supervision_aggregate_fields
    nodes: [dynamic_supervision!]!
}

"""
aggregate fields of "dynamic_supervision"
"""
type dynamic_supervision_aggregate_fields {
    avg: dynamic_supervision_avg_fields
    count(columns: [dynamic_supervision_select_column!], distinct: Boolean): Int
    max: dynamic_supervision_max_fields
    min: dynamic_supervision_min_fields
    stddev: dynamic_supervision_stddev_fields
    stddev_pop: dynamic_supervision_stddev_pop_fields
    stddev_samp: dynamic_supervision_stddev_samp_fields
    sum: dynamic_supervision_sum_fields
    var_pop: dynamic_supervision_var_pop_fields
    var_samp: dynamic_supervision_var_samp_fields
    variance: dynamic_supervision_variance_fields
}

"""
order by aggregate values of table "dynamic_supervision"
"""
input dynamic_supervision_aggregate_order_by {
    avg: dynamic_supervision_avg_order_by
    count: order_by
    max: dynamic_supervision_max_order_by
    min: dynamic_supervision_min_order_by
    stddev: dynamic_supervision_stddev_order_by
    stddev_pop: dynamic_supervision_stddev_pop_order_by
    stddev_samp: dynamic_supervision_stddev_samp_order_by
    sum: dynamic_supervision_sum_order_by
    var_pop: dynamic_supervision_var_pop_order_by
    var_samp: dynamic_supervision_var_samp_order_by
    variance: dynamic_supervision_variance_order_by
}

"""
input type for inserting array relation for remote table "dynamic_supervision"
"""
input dynamic_supervision_arr_rel_insert_input {
    data: [dynamic_supervision_insert_input!]!
    on_conflict: dynamic_supervision_on_conflict
}

"""aggregate avg on columns"""
type dynamic_supervision_avg_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

"""
order by avg() on columns of table "dynamic_supervision"
"""
input dynamic_supervision_avg_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

"""
Boolean expression to filter rows from the table "dynamic_supervision". All fields are combined with a logical 'AND'.
"""
input dynamic_supervision_bool_exp {
    _and: [dynamic_supervision_bool_exp]
    _not: dynamic_supervision_bool_exp
    _or: [dynamic_supervision_bool_exp]
    check_user_id: String_comparison_exp
    city_id: String_comparison_exp
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    day: Int_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    district_id: String_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    month: Int_comparison_exp
    province_id: String_comparison_exp
    spot_check_date: timestamptz_comparison_exp
    spot_check_number: Int_comparison_exp
    spot_check_ratio: numeric_comparison_exp
    spot_check_total_number: Int_comparison_exp
    supervision_id: String_comparison_exp
    total_number_vehicle: Int_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    year: Int_comparison_exp
}

"""
unique or primary key constraints on table "dynamic_supervision"
"""
enum dynamic_supervision_constraint {
    """unique or primary key constraint"""
    dynamic_supervision_pkey
}

"""
input type for incrementing integer column in table "dynamic_supervision"
"""
input dynamic_supervision_inc_input {
    day: Int
    id: bigint
    month: Int
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    total_number_vehicle: Int
    year: Int
}

"""
input type for inserting data into table "dynamic_supervision"
"""
input dynamic_supervision_insert_input {
    check_user_id: String
    city_id: String
    created_at: timestamptz
    created_by: String
    day: Int
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    is_delete: Boolean
    month: Int
    province_id: String
    spot_check_date: timestamptz
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    supervision_id: String
    total_number_vehicle: Int
    updated_at: timestamptz
    updated_by: String
    year: Int
}

"""aggregate max on columns"""
type dynamic_supervision_max_fields {
    check_user_id: String
    city_id: String
    created_at: timestamptz
    created_by: String
    day: Int
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    month: Int
    province_id: String
    spot_check_date: timestamptz
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    supervision_id: String
    total_number_vehicle: Int
    updated_at: timestamptz
    updated_by: String
    year: Int
}

"""
order by max() on columns of table "dynamic_supervision"
"""
input dynamic_supervision_max_order_by {
    check_user_id: order_by
    city_id: order_by
    created_at: order_by
    created_by: order_by
    day: order_by
    deleted_at: order_by
    deleted_by: order_by
    district_id: order_by
    id: order_by
    month: order_by
    province_id: order_by
    spot_check_date: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    supervision_id: order_by
    total_number_vehicle: order_by
    updated_at: order_by
    updated_by: order_by
    year: order_by
}

"""aggregate min on columns"""
type dynamic_supervision_min_fields {
    check_user_id: String
    city_id: String
    created_at: timestamptz
    created_by: String
    day: Int
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    month: Int
    province_id: String
    spot_check_date: timestamptz
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    supervision_id: String
    total_number_vehicle: Int
    updated_at: timestamptz
    updated_by: String
    year: Int
}

"""
order by min() on columns of table "dynamic_supervision"
"""
input dynamic_supervision_min_order_by {
    check_user_id: order_by
    city_id: order_by
    created_at: order_by
    created_by: order_by
    day: order_by
    deleted_at: order_by
    deleted_by: order_by
    district_id: order_by
    id: order_by
    month: order_by
    province_id: order_by
    spot_check_date: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    supervision_id: order_by
    total_number_vehicle: order_by
    updated_at: order_by
    updated_by: order_by
    year: order_by
}

"""
response of any mutation on the table "dynamic_supervision"
"""
type dynamic_supervision_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [dynamic_supervision!]!
}

"""
input type for inserting object relation for remote table "dynamic_supervision"
"""
input dynamic_supervision_obj_rel_insert_input {
    data: dynamic_supervision_insert_input!
    on_conflict: dynamic_supervision_on_conflict
}

"""
on conflict condition type for table "dynamic_supervision"
"""
input dynamic_supervision_on_conflict {
    constraint: dynamic_supervision_constraint!
    update_columns: [dynamic_supervision_update_column!]!
    where: dynamic_supervision_bool_exp
}

"""
ordering options when selecting data from "dynamic_supervision"
"""
input dynamic_supervision_order_by {
    check_user_id: order_by
    city_id: order_by
    created_at: order_by
    created_by: order_by
    day: order_by
    deleted_at: order_by
    deleted_by: order_by
    district_id: order_by
    id: order_by
    is_delete: order_by
    month: order_by
    province_id: order_by
    spot_check_date: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    supervision_id: order_by
    total_number_vehicle: order_by
    updated_at: order_by
    updated_by: order_by
    year: order_by
}

"""
primary key columns input for table: "dynamic_supervision"
"""
input dynamic_supervision_pk_columns_input {
    """
    主键



    """
    id: bigint!

    """联合主键"""
    supervision_id: String!
}

"""
select columns of table "dynamic_supervision"
"""
enum dynamic_supervision_select_column {
    """column name"""
    check_user_id

    """column name"""
    city_id

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    day

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    district_id

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    month

    """column name"""
    province_id

    """column name"""
    spot_check_date

    """column name"""
    spot_check_number

    """column name"""
    spot_check_ratio

    """column name"""
    spot_check_total_number

    """column name"""
    supervision_id

    """column name"""
    total_number_vehicle

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    year
}

"""
input type for updating data in table "dynamic_supervision"
"""
input dynamic_supervision_set_input {
    check_user_id: String
    city_id: String
    created_at: timestamptz
    created_by: String
    day: Int
    deleted_at: timestamptz
    deleted_by: String
    district_id: String
    id: bigint
    is_delete: Boolean
    month: Int
    province_id: String
    spot_check_date: timestamptz
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    supervision_id: String
    total_number_vehicle: Int
    updated_at: timestamptz
    updated_by: String
    year: Int
}

"""aggregate stddev on columns"""
type dynamic_supervision_stddev_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

"""
order by stddev() on columns of table "dynamic_supervision"
"""
input dynamic_supervision_stddev_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

"""aggregate stddev_pop on columns"""
type dynamic_supervision_stddev_pop_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

"""
order by stddev_pop() on columns of table "dynamic_supervision"
"""
input dynamic_supervision_stddev_pop_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

"""aggregate stddev_samp on columns"""
type dynamic_supervision_stddev_samp_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

"""
order by stddev_samp() on columns of table "dynamic_supervision"
"""
input dynamic_supervision_stddev_samp_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

"""aggregate sum on columns"""
type dynamic_supervision_sum_fields {
    day: Int
    id: bigint
    month: Int
    spot_check_number: Int
    spot_check_ratio: numeric
    spot_check_total_number: Int
    total_number_vehicle: Int
    year: Int
}

"""
order by sum() on columns of table "dynamic_supervision"
"""
input dynamic_supervision_sum_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

"""
update columns of table "dynamic_supervision"
"""
enum dynamic_supervision_update_column {
    """column name"""
    check_user_id

    """column name"""
    city_id

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    day

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    district_id

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    month

    """column name"""
    province_id

    """column name"""
    spot_check_date

    """column name"""
    spot_check_number

    """column name"""
    spot_check_ratio

    """column name"""
    spot_check_total_number

    """column name"""
    supervision_id

    """column name"""
    total_number_vehicle

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    year
}

"""aggregate var_pop on columns"""
type dynamic_supervision_var_pop_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

"""
order by var_pop() on columns of table "dynamic_supervision"
"""
input dynamic_supervision_var_pop_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

"""aggregate var_samp on columns"""
type dynamic_supervision_var_samp_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

"""
order by var_samp() on columns of table "dynamic_supervision"
"""
input dynamic_supervision_var_samp_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}

"""aggregate variance on columns"""
type dynamic_supervision_variance_fields {
    day: Float
    id: Float
    month: Float
    spot_check_number: Float
    spot_check_ratio: Float
    spot_check_total_number: Float
    total_number_vehicle: Float
    year: Float
}

"""
order by variance() on columns of table "dynamic_supervision"
"""
input dynamic_supervision_variance_order_by {
    day: order_by
    id: order_by
    month: order_by
    spot_check_number: order_by
    spot_check_ratio: order_by
    spot_check_total_number: order_by
    total_number_vehicle: order_by
    year: order_by
}



"""mutation root"""
type Mutation {
    """
    delete data from the table: "dynamic_supervision"
  """
    delete_dynamic_supervision(
        """filter the rows which have to be deleted"""
        where: dynamic_supervision_bool_exp!
    ): dynamic_supervision_mutation_response

    """
    delete single row from the table: "dynamic_supervision"
  """
    delete_dynamic_supervision_by_pk(
        """
        主键



        """
        id: bigint!

        """联合主键"""
        supervision_id: String!
    ): dynamic_supervision

    """
    insert data into the table: "dynamic_supervision"
  """
    insert_dynamic_supervision(
        """the rows to be inserted"""
        objects: [dynamic_supervision_insert_input!]!

        """on conflict condition"""
        on_conflict: dynamic_supervision_on_conflict
    ): dynamic_supervision_mutation_response

    """
    insert a single row into the table: "dynamic_supervision"
  """
    insert_dynamic_supervision_one(
        """the row to be inserted"""
        object: dynamic_supervision_insert_input!

        """on conflict condition"""
        on_conflict: dynamic_supervision_on_conflict
    ): dynamic_supervision

    """
    update data of the table: "dynamic_supervision"
  """
    update_dynamic_supervision(
        """increments the integer columns with given value of the filtered values"""
        _inc: dynamic_supervision_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: dynamic_supervision_set_input

        """filter the rows which have to be updated"""
        where: dynamic_supervision_bool_exp!
    ): dynamic_supervision_mutation_response

    """
    update single row of the table: "dynamic_supervision"
  """
    update_dynamic_supervision_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: dynamic_supervision_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: dynamic_supervision_set_input
        pk_columns: dynamic_supervision_pk_columns_input!
    ): dynamic_supervision
}





"""query root"""
type Query {
    """
    fetch data from the table: "dynamic_supervision"
  """
    dynamic_supervision(
        """distinct select on columns"""
        distinct_on: [dynamic_supervision_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_supervision_order_by!]

        """filter the rows returned"""
        where: dynamic_supervision_bool_exp
    ): [dynamic_supervision!]!

    """
    fetch aggregated fields from the table: "dynamic_supervision"
  """
    dynamic_supervision_aggregate(
        """distinct select on columns"""
        distinct_on: [dynamic_supervision_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_supervision_order_by!]

        """filter the rows returned"""
        where: dynamic_supervision_bool_exp
    ): dynamic_supervision_aggregate!

    """
    fetch data from the table: "dynamic_supervision" using primary key columns
    """
    dynamic_supervision_by_pk(
        """
        主键



        """
        id: bigint!

        """联合主键"""
        supervision_id: String!
    ): dynamic_supervision
}


"""subscription root"""
type Subscription {
    """
    fetch data from the table: "dynamic_supervision"
  """
    dynamic_supervision(
        """distinct select on columns"""
        distinct_on: [dynamic_supervision_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_supervision_order_by!]

        """filter the rows returned"""
        where: dynamic_supervision_bool_exp
    ): [dynamic_supervision!]!

    """
    fetch aggregated fields from the table: "dynamic_supervision"
  """
    dynamic_supervision_aggregate(
        """distinct select on columns"""
        distinct_on: [dynamic_supervision_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_supervision_order_by!]

        """filter the rows returned"""
        where: dynamic_supervision_bool_exp
    ): dynamic_supervision_aggregate!

    """
    fetch data from the table: "dynamic_supervision" using primary key columns
    """
    dynamic_supervision_by_pk(
        """
        主键



        """
        id: bigint!

        """联合主键"""
        supervision_id: String!
    ): dynamic_supervision
}
`, BuiltIn: false},
	{Name: "graph/graphqls/dynamic_supervision_detail.graphqls", Input: `
"""
动态监管抽查明细表


columns and relationships of "dynamic_supervision_detail"

"""
type dynamic_supervision_detail {
    """卫星定位速度"""
    GPS_speed: String

    """受理人"""
    assignee: String

    """经营范围字典"""
    business_scope: Int

    """空间数据类型point表示经纬度"""
    coordinate: point

    """创建时间"""
    created_at: timestamptz!

    """创建人"""
    created_by: String!

    """曲线情况（曲线完整/回传异常/零速度）"""
    curve: Int

    """删除时间"""
    deleted_at: timestamptz

    """删除人"""
    deleted_by: String

    """处置措施"""
    disposal_measures: String

    """是否在线处置措施"""
    disposal_measures1: String

    """是否超速处置措施"""
    disposal_measures2: String

    """曲线情况处置措施"""
    disposal_measures3: String

    """客运疲劳驾驶处置措施"""
    disposal_measures4: String

    """客运凌晨停运处置措施"""
    disposal_measures5: String

    """行车记录仪数据处置措施"""
    disposal_measures6: String

    """轨迹情况处置措施"""
    disposal_measures7: String

    """处置结果"""
    disposal_results: String

    """是否在线处置结果"""
    disposal_results1: String

    """是否超速处置结果"""
    disposal_results2: String

    """曲线情况处置结果"""
    disposal_results3: String

    """客运疲劳驾驶处置结果"""
    disposal_results4: String

    """客运疲劳驾驶处置结果"""
    disposal_results5: String

    """行车记录仪数据处置结果"""
    disposal_results6: String

    """轨迹情况处置结果"""
    disposal_results7: String

    """驾驶员id"""
    driver_id: String

    """车辆所在企业id"""
    enterprise_id: String

    """设备情况（图像正常/无图像/摄像头 号损坏）"""
    equipment: Int

    """疲劳驾驶报警时间"""
    fatigue_alarm_time: timestamptz

    """反馈时间"""
    feedback_time: timestamptz

    """主键"""
    id: bigint!

    """是否被删除"""
    is_delete: Boolean

    """客运疲劳驾驶（是/否）"""
    is_fatigue_driving: Boolean

    """是否定位"""
    is_locate: Boolean

    """客运凌晨2-5时停运（是/否）"""
    is_morning_outage: Boolean

    """是否在线（是/否）"""
    is_online: Boolean

    """是否发送"""
    is_send: Boolean

    """是否超速（是/否）"""
    is_speeding: Boolean

    """行车记录仪数据（是否异常）"""
    is_tachograph_record_normal: Boolean

    """经纬度描述"""
    latitude_longitude_description: String

    """摄像头损坏号"""
    lens_on: String

    """镜头位置（正/偏）"""
    lens_position: Int

    """监管费到期时间"""
    monitor_end_time: timestamptz

    """监控平台显示位置"""
    monitoring_location: String

    """监控平台时间"""
    monitoring_time: timestamptz

    """其他违规"""
    other_infraction: String

    """轨迹其他情况"""
    others: String

    """凌晨2点到5点停运报警时间"""
    outage_alarm_time: timestamptz

    """备注"""
    remarks: String

    """超速报警时间"""
    speed_alarm_time: timestamptz

    """超速速度"""
    speeding_speed: String

    """联合主键"""
    supervision_detail_id: String!

    """动态监管抽查主表dynamic_supervision的supervision_id"""
    supervision_id: String

    """行车记录仪异常数据项"""
    tachograph_data_exception: String

    """行车记录仪速度"""
    tachograph_speed: String

    """出租空/重车状态（空/重）"""
    taxi_state: Int

    """轨迹情况（正常/漂移/其他）"""
    trail: Int

    """处置时间"""
    treatment_time: timestamptz

    """修改时间"""
    updated_at: timestamptz

    """修改人"""
    updated_by: String

    """车辆id"""
    vehicle_id: String
}

"""
aggregated selection of "dynamic_supervision_detail"
"""
type dynamic_supervision_detail_aggregate {
    aggregate: dynamic_supervision_detail_aggregate_fields
    nodes: [dynamic_supervision_detail!]!
}

"""
aggregate fields of "dynamic_supervision_detail"
"""
type dynamic_supervision_detail_aggregate_fields {
    avg: dynamic_supervision_detail_avg_fields
    count(columns: [dynamic_supervision_detail_select_column!], distinct: Boolean): Int
    max: dynamic_supervision_detail_max_fields
    min: dynamic_supervision_detail_min_fields
    stddev: dynamic_supervision_detail_stddev_fields
    stddev_pop: dynamic_supervision_detail_stddev_pop_fields
    stddev_samp: dynamic_supervision_detail_stddev_samp_fields
    sum: dynamic_supervision_detail_sum_fields
    var_pop: dynamic_supervision_detail_var_pop_fields
    var_samp: dynamic_supervision_detail_var_samp_fields
    variance: dynamic_supervision_detail_variance_fields
}

"""
order by aggregate values of table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_aggregate_order_by {
    avg: dynamic_supervision_detail_avg_order_by
    count: order_by
    max: dynamic_supervision_detail_max_order_by
    min: dynamic_supervision_detail_min_order_by
    stddev: dynamic_supervision_detail_stddev_order_by
    stddev_pop: dynamic_supervision_detail_stddev_pop_order_by
    stddev_samp: dynamic_supervision_detail_stddev_samp_order_by
    sum: dynamic_supervision_detail_sum_order_by
    var_pop: dynamic_supervision_detail_var_pop_order_by
    var_samp: dynamic_supervision_detail_var_samp_order_by
    variance: dynamic_supervision_detail_variance_order_by
}

"""
input type for inserting array relation for remote table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_arr_rel_insert_input {
    data: [dynamic_supervision_detail_insert_input!]!
    on_conflict: dynamic_supervision_detail_on_conflict
}

"""aggregate avg on columns"""
type dynamic_supervision_detail_avg_fields {
    business_scope: Float
    curve: Float
    equipment: Float
    id: Float
    lens_position: Float
    taxi_state: Float
    trail: Float
}

"""
order by avg() on columns of table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_avg_order_by {
    business_scope: order_by
    curve: order_by
    equipment: order_by
    id: order_by
    lens_position: order_by
    taxi_state: order_by
    trail: order_by
}

"""
Boolean expression to filter rows from the table "dynamic_supervision_detail". All fields are combined with a logical 'AND'.
"""
input dynamic_supervision_detail_bool_exp {
    GPS_speed: String_comparison_exp
    _and: [dynamic_supervision_detail_bool_exp]
    _not: dynamic_supervision_detail_bool_exp
    _or: [dynamic_supervision_detail_bool_exp]
    assignee: String_comparison_exp
    business_scope: Int_comparison_exp
    coordinate: point_comparison_exp
    created_at: timestamptz_comparison_exp
    created_by: String_comparison_exp
    curve: Int_comparison_exp
    deleted_at: timestamptz_comparison_exp
    deleted_by: String_comparison_exp
    disposal_measures: String_comparison_exp
    disposal_measures1: String_comparison_exp
    disposal_measures2: String_comparison_exp
    disposal_measures3: String_comparison_exp
    disposal_measures4: String_comparison_exp
    disposal_measures5: String_comparison_exp
    disposal_measures6: String_comparison_exp
    disposal_measures7: String_comparison_exp
    disposal_results: String_comparison_exp
    disposal_results1: String_comparison_exp
    disposal_results2: String_comparison_exp
    disposal_results3: String_comparison_exp
    disposal_results4: String_comparison_exp
    disposal_results5: String_comparison_exp
    disposal_results6: String_comparison_exp
    disposal_results7: String_comparison_exp
    driver_id: String_comparison_exp
    enterprise_id: String_comparison_exp
    equipment: Int_comparison_exp
    fatigue_alarm_time: timestamptz_comparison_exp
    feedback_time: timestamptz_comparison_exp
    id: bigint_comparison_exp
    is_delete: Boolean_comparison_exp
    is_fatigue_driving: Boolean_comparison_exp
    is_locate: Boolean_comparison_exp
    is_morning_outage: Boolean_comparison_exp
    is_online: Boolean_comparison_exp
    is_send: Boolean_comparison_exp
    is_speeding: Boolean_comparison_exp
    is_tachograph_record_normal: Boolean_comparison_exp
    latitude_longitude_description: String_comparison_exp
    lens_on: String_comparison_exp
    lens_position: Int_comparison_exp
    monitor_end_time: timestamptz_comparison_exp
    monitoring_location: String_comparison_exp
    monitoring_time: timestamptz_comparison_exp
    other_infraction: String_comparison_exp
    others: String_comparison_exp
    outage_alarm_time: timestamptz_comparison_exp
    remarks: String_comparison_exp
    speed_alarm_time: timestamptz_comparison_exp
    speeding_speed: String_comparison_exp
    supervision_detail_id: String_comparison_exp
    supervision_id: String_comparison_exp
    tachograph_data_exception: String_comparison_exp
    tachograph_speed: String_comparison_exp
    taxi_state: Int_comparison_exp
    trail: Int_comparison_exp
    treatment_time: timestamptz_comparison_exp
    updated_at: timestamptz_comparison_exp
    updated_by: String_comparison_exp
    vehicle_id: String_comparison_exp
}

"""
unique or primary key constraints on table "dynamic_supervision_detail"
"""
enum dynamic_supervision_detail_constraint {
    """unique or primary key constraint"""
    dynamic_supervision_detail_pkey
}

"""
input type for incrementing integer column in table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_inc_input {
    business_scope: Int
    curve: Int
    equipment: Int
    id: bigint
    lens_position: Int
    taxi_state: Int
    trail: Int
}

"""
input type for inserting data into table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_insert_input {
    GPS_speed: String
    assignee: String
    business_scope: Int
    coordinate: point
    created_at: timestamptz
    created_by: String
    curve: Int
    deleted_at: timestamptz
    deleted_by: String
    disposal_measures: String
    disposal_measures1: String
    disposal_measures2: String
    disposal_measures3: String
    disposal_measures4: String
    disposal_measures5: String
    disposal_measures6: String
    disposal_measures7: String
    disposal_results: String
    disposal_results1: String
    disposal_results2: String
    disposal_results3: String
    disposal_results4: String
    disposal_results5: String
    disposal_results6: String
    disposal_results7: String
    driver_id: String
    enterprise_id: String
    equipment: Int
    fatigue_alarm_time: timestamptz
    feedback_time: timestamptz
    id: bigint
    is_delete: Boolean
    is_fatigue_driving: Boolean
    is_locate: Boolean
    is_morning_outage: Boolean
    is_online: Boolean
    is_send: Boolean
    is_speeding: Boolean
    is_tachograph_record_normal: Boolean
    latitude_longitude_description: String
    lens_on: String
    lens_position: Int
    monitor_end_time: timestamptz
    monitoring_location: String
    monitoring_time: timestamptz
    other_infraction: String
    others: String
    outage_alarm_time: timestamptz
    remarks: String
    speed_alarm_time: timestamptz
    speeding_speed: String
    supervision_detail_id: String
    supervision_id: String
    tachograph_data_exception: String
    tachograph_speed: String
    taxi_state: Int
    trail: Int
    treatment_time: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""aggregate max on columns"""
type dynamic_supervision_detail_max_fields {
    GPS_speed: String
    assignee: String
    business_scope: Int
    created_at: timestamptz
    created_by: String
    curve: Int
    deleted_at: timestamptz
    deleted_by: String
    disposal_measures: String
    disposal_measures1: String
    disposal_measures2: String
    disposal_measures3: String
    disposal_measures4: String
    disposal_measures5: String
    disposal_measures6: String
    disposal_measures7: String
    disposal_results: String
    disposal_results1: String
    disposal_results2: String
    disposal_results3: String
    disposal_results4: String
    disposal_results5: String
    disposal_results6: String
    disposal_results7: String
    driver_id: String
    enterprise_id: String
    equipment: Int
    fatigue_alarm_time: timestamptz
    feedback_time: timestamptz
    id: bigint
    latitude_longitude_description: String
    lens_on: String
    lens_position: Int
    monitor_end_time: timestamptz
    monitoring_location: String
    monitoring_time: timestamptz
    other_infraction: String
    others: String
    outage_alarm_time: timestamptz
    remarks: String
    speed_alarm_time: timestamptz
    speeding_speed: String
    supervision_detail_id: String
    supervision_id: String
    tachograph_data_exception: String
    tachograph_speed: String
    taxi_state: Int
    trail: Int
    treatment_time: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""
order by max() on columns of table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_max_order_by {
    GPS_speed: order_by
    assignee: order_by
    business_scope: order_by
    created_at: order_by
    created_by: order_by
    curve: order_by
    deleted_at: order_by
    deleted_by: order_by
    disposal_measures: order_by
    disposal_measures1: order_by
    disposal_measures2: order_by
    disposal_measures3: order_by
    disposal_measures4: order_by
    disposal_measures5: order_by
    disposal_measures6: order_by
    disposal_measures7: order_by
    disposal_results: order_by
    disposal_results1: order_by
    disposal_results2: order_by
    disposal_results3: order_by
    disposal_results4: order_by
    disposal_results5: order_by
    disposal_results6: order_by
    disposal_results7: order_by
    driver_id: order_by
    enterprise_id: order_by
    equipment: order_by
    fatigue_alarm_time: order_by
    feedback_time: order_by
    id: order_by
    latitude_longitude_description: order_by
    lens_on: order_by
    lens_position: order_by
    monitor_end_time: order_by
    monitoring_location: order_by
    monitoring_time: order_by
    other_infraction: order_by
    others: order_by
    outage_alarm_time: order_by
    remarks: order_by
    speed_alarm_time: order_by
    speeding_speed: order_by
    supervision_detail_id: order_by
    supervision_id: order_by
    tachograph_data_exception: order_by
    tachograph_speed: order_by
    taxi_state: order_by
    trail: order_by
    treatment_time: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
}

"""aggregate min on columns"""
type dynamic_supervision_detail_min_fields {
    GPS_speed: String
    assignee: String
    business_scope: Int
    created_at: timestamptz
    created_by: String
    curve: Int
    deleted_at: timestamptz
    deleted_by: String
    disposal_measures: String
    disposal_measures1: String
    disposal_measures2: String
    disposal_measures3: String
    disposal_measures4: String
    disposal_measures5: String
    disposal_measures6: String
    disposal_measures7: String
    disposal_results: String
    disposal_results1: String
    disposal_results2: String
    disposal_results3: String
    disposal_results4: String
    disposal_results5: String
    disposal_results6: String
    disposal_results7: String
    driver_id: String
    enterprise_id: String
    equipment: Int
    fatigue_alarm_time: timestamptz
    feedback_time: timestamptz
    id: bigint
    latitude_longitude_description: String
    lens_on: String
    lens_position: Int
    monitor_end_time: timestamptz
    monitoring_location: String
    monitoring_time: timestamptz
    other_infraction: String
    others: String
    outage_alarm_time: timestamptz
    remarks: String
    speed_alarm_time: timestamptz
    speeding_speed: String
    supervision_detail_id: String
    supervision_id: String
    tachograph_data_exception: String
    tachograph_speed: String
    taxi_state: Int
    trail: Int
    treatment_time: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""
order by min() on columns of table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_min_order_by {
    GPS_speed: order_by
    assignee: order_by
    business_scope: order_by
    created_at: order_by
    created_by: order_by
    curve: order_by
    deleted_at: order_by
    deleted_by: order_by
    disposal_measures: order_by
    disposal_measures1: order_by
    disposal_measures2: order_by
    disposal_measures3: order_by
    disposal_measures4: order_by
    disposal_measures5: order_by
    disposal_measures6: order_by
    disposal_measures7: order_by
    disposal_results: order_by
    disposal_results1: order_by
    disposal_results2: order_by
    disposal_results3: order_by
    disposal_results4: order_by
    disposal_results5: order_by
    disposal_results6: order_by
    disposal_results7: order_by
    driver_id: order_by
    enterprise_id: order_by
    equipment: order_by
    fatigue_alarm_time: order_by
    feedback_time: order_by
    id: order_by
    latitude_longitude_description: order_by
    lens_on: order_by
    lens_position: order_by
    monitor_end_time: order_by
    monitoring_location: order_by
    monitoring_time: order_by
    other_infraction: order_by
    others: order_by
    outage_alarm_time: order_by
    remarks: order_by
    speed_alarm_time: order_by
    speeding_speed: order_by
    supervision_detail_id: order_by
    supervision_id: order_by
    tachograph_data_exception: order_by
    tachograph_speed: order_by
    taxi_state: order_by
    trail: order_by
    treatment_time: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
}

"""
response of any mutation on the table "dynamic_supervision_detail"
"""
type dynamic_supervision_detail_mutation_response {
    """number of affected rows by the mutation"""
    affected_rows: Int!

    """data of the affected rows by the mutation"""
    returning: [dynamic_supervision_detail!]!
}

"""
input type for inserting object relation for remote table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_obj_rel_insert_input {
    data: dynamic_supervision_detail_insert_input!
    on_conflict: dynamic_supervision_detail_on_conflict
}

"""
on conflict condition type for table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_on_conflict {
    constraint: dynamic_supervision_detail_constraint!
    update_columns: [dynamic_supervision_detail_update_column!]!
    where: dynamic_supervision_detail_bool_exp
}

"""
ordering options when selecting data from "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_order_by {
    GPS_speed: order_by
    assignee: order_by
    business_scope: order_by
    coordinate: order_by
    created_at: order_by
    created_by: order_by
    curve: order_by
    deleted_at: order_by
    deleted_by: order_by
    disposal_measures: order_by
    disposal_measures1: order_by
    disposal_measures2: order_by
    disposal_measures3: order_by
    disposal_measures4: order_by
    disposal_measures5: order_by
    disposal_measures6: order_by
    disposal_measures7: order_by
    disposal_results: order_by
    disposal_results1: order_by
    disposal_results2: order_by
    disposal_results3: order_by
    disposal_results4: order_by
    disposal_results5: order_by
    disposal_results6: order_by
    disposal_results7: order_by
    driver_id: order_by
    enterprise_id: order_by
    equipment: order_by
    fatigue_alarm_time: order_by
    feedback_time: order_by
    id: order_by
    is_delete: order_by
    is_fatigue_driving: order_by
    is_locate: order_by
    is_morning_outage: order_by
    is_online: order_by
    is_send: order_by
    is_speeding: order_by
    is_tachograph_record_normal: order_by
    latitude_longitude_description: order_by
    lens_on: order_by
    lens_position: order_by
    monitor_end_time: order_by
    monitoring_location: order_by
    monitoring_time: order_by
    other_infraction: order_by
    others: order_by
    outage_alarm_time: order_by
    remarks: order_by
    speed_alarm_time: order_by
    speeding_speed: order_by
    supervision_detail_id: order_by
    supervision_id: order_by
    tachograph_data_exception: order_by
    tachograph_speed: order_by
    taxi_state: order_by
    trail: order_by
    treatment_time: order_by
    updated_at: order_by
    updated_by: order_by
    vehicle_id: order_by
}

"""
primary key columns input for table: "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_pk_columns_input {
    """主键"""
    id: bigint!

    """联合主键"""
    supervision_detail_id: String!
}

"""
select columns of table "dynamic_supervision_detail"
"""
enum dynamic_supervision_detail_select_column {
    """column name"""
    GPS_speed

    """column name"""
    assignee

    """column name"""
    business_scope

    """column name"""
    coordinate

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    curve

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    disposal_measures

    """column name"""
    disposal_measures1

    """column name"""
    disposal_measures2

    """column name"""
    disposal_measures3

    """column name"""
    disposal_measures4

    """column name"""
    disposal_measures5

    """column name"""
    disposal_measures6

    """column name"""
    disposal_measures7

    """column name"""
    disposal_results

    """column name"""
    disposal_results1

    """column name"""
    disposal_results2

    """column name"""
    disposal_results3

    """column name"""
    disposal_results4

    """column name"""
    disposal_results5

    """column name"""
    disposal_results6

    """column name"""
    disposal_results7

    """column name"""
    driver_id

    """column name"""
    enterprise_id

    """column name"""
    equipment

    """column name"""
    fatigue_alarm_time

    """column name"""
    feedback_time

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    is_fatigue_driving

    """column name"""
    is_locate

    """column name"""
    is_morning_outage

    """column name"""
    is_online

    """column name"""
    is_send

    """column name"""
    is_speeding

    """column name"""
    is_tachograph_record_normal

    """column name"""
    latitude_longitude_description

    """column name"""
    lens_on

    """column name"""
    lens_position

    """column name"""
    monitor_end_time

    """column name"""
    monitoring_location

    """column name"""
    monitoring_time

    """column name"""
    other_infraction

    """column name"""
    others

    """column name"""
    outage_alarm_time

    """column name"""
    remarks

    """column name"""
    speed_alarm_time

    """column name"""
    speeding_speed

    """column name"""
    supervision_detail_id

    """column name"""
    supervision_id

    """column name"""
    tachograph_data_exception

    """column name"""
    tachograph_speed

    """column name"""
    taxi_state

    """column name"""
    trail

    """column name"""
    treatment_time

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id
}

"""
input type for updating data in table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_set_input {
    GPS_speed: String
    assignee: String
    business_scope: Int
    coordinate: point
    created_at: timestamptz
    created_by: String
    curve: Int
    deleted_at: timestamptz
    deleted_by: String
    disposal_measures: String
    disposal_measures1: String
    disposal_measures2: String
    disposal_measures3: String
    disposal_measures4: String
    disposal_measures5: String
    disposal_measures6: String
    disposal_measures7: String
    disposal_results: String
    disposal_results1: String
    disposal_results2: String
    disposal_results3: String
    disposal_results4: String
    disposal_results5: String
    disposal_results6: String
    disposal_results7: String
    driver_id: String
    enterprise_id: String
    equipment: Int
    fatigue_alarm_time: timestamptz
    feedback_time: timestamptz
    id: bigint
    is_delete: Boolean
    is_fatigue_driving: Boolean
    is_locate: Boolean
    is_morning_outage: Boolean
    is_online: Boolean
    is_send: Boolean
    is_speeding: Boolean
    is_tachograph_record_normal: Boolean
    latitude_longitude_description: String
    lens_on: String
    lens_position: Int
    monitor_end_time: timestamptz
    monitoring_location: String
    monitoring_time: timestamptz
    other_infraction: String
    others: String
    outage_alarm_time: timestamptz
    remarks: String
    speed_alarm_time: timestamptz
    speeding_speed: String
    supervision_detail_id: String
    supervision_id: String
    tachograph_data_exception: String
    tachograph_speed: String
    taxi_state: Int
    trail: Int
    treatment_time: timestamptz
    updated_at: timestamptz
    updated_by: String
    vehicle_id: String
}

"""aggregate stddev on columns"""
type dynamic_supervision_detail_stddev_fields {
    business_scope: Float
    curve: Float
    equipment: Float
    id: Float
    lens_position: Float
    taxi_state: Float
    trail: Float
}

"""
order by stddev() on columns of table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_stddev_order_by {
    business_scope: order_by
    curve: order_by
    equipment: order_by
    id: order_by
    lens_position: order_by
    taxi_state: order_by
    trail: order_by
}

"""aggregate stddev_pop on columns"""
type dynamic_supervision_detail_stddev_pop_fields {
    business_scope: Float
    curve: Float
    equipment: Float
    id: Float
    lens_position: Float
    taxi_state: Float
    trail: Float
}

"""
order by stddev_pop() on columns of table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_stddev_pop_order_by {
    business_scope: order_by
    curve: order_by
    equipment: order_by
    id: order_by
    lens_position: order_by
    taxi_state: order_by
    trail: order_by
}

"""aggregate stddev_samp on columns"""
type dynamic_supervision_detail_stddev_samp_fields {
    business_scope: Float
    curve: Float
    equipment: Float
    id: Float
    lens_position: Float
    taxi_state: Float
    trail: Float
}

"""
order by stddev_samp() on columns of table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_stddev_samp_order_by {
    business_scope: order_by
    curve: order_by
    equipment: order_by
    id: order_by
    lens_position: order_by
    taxi_state: order_by
    trail: order_by
}

"""aggregate sum on columns"""
type dynamic_supervision_detail_sum_fields {
    business_scope: Int
    curve: Int
    equipment: Int
    id: bigint
    lens_position: Int
    taxi_state: Int
    trail: Int
}

"""
order by sum() on columns of table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_sum_order_by {
    business_scope: order_by
    curve: order_by
    equipment: order_by
    id: order_by
    lens_position: order_by
    taxi_state: order_by
    trail: order_by
}

"""
update columns of table "dynamic_supervision_detail"
"""
enum dynamic_supervision_detail_update_column {
    """column name"""
    GPS_speed

    """column name"""
    assignee

    """column name"""
    business_scope

    """column name"""
    coordinate

    """column name"""
    created_at

    """column name"""
    created_by

    """column name"""
    curve

    """column name"""
    deleted_at

    """column name"""
    deleted_by

    """column name"""
    disposal_measures

    """column name"""
    disposal_measures1

    """column name"""
    disposal_measures2

    """column name"""
    disposal_measures3

    """column name"""
    disposal_measures4

    """column name"""
    disposal_measures5

    """column name"""
    disposal_measures6

    """column name"""
    disposal_measures7

    """column name"""
    disposal_results

    """column name"""
    disposal_results1

    """column name"""
    disposal_results2

    """column name"""
    disposal_results3

    """column name"""
    disposal_results4

    """column name"""
    disposal_results5

    """column name"""
    disposal_results6

    """column name"""
    disposal_results7

    """column name"""
    driver_id

    """column name"""
    enterprise_id

    """column name"""
    equipment

    """column name"""
    fatigue_alarm_time

    """column name"""
    feedback_time

    """column name"""
    id

    """column name"""
    is_delete

    """column name"""
    is_fatigue_driving

    """column name"""
    is_locate

    """column name"""
    is_morning_outage

    """column name"""
    is_online

    """column name"""
    is_send

    """column name"""
    is_speeding

    """column name"""
    is_tachograph_record_normal

    """column name"""
    latitude_longitude_description

    """column name"""
    lens_on

    """column name"""
    lens_position

    """column name"""
    monitor_end_time

    """column name"""
    monitoring_location

    """column name"""
    monitoring_time

    """column name"""
    other_infraction

    """column name"""
    others

    """column name"""
    outage_alarm_time

    """column name"""
    remarks

    """column name"""
    speed_alarm_time

    """column name"""
    speeding_speed

    """column name"""
    supervision_detail_id

    """column name"""
    supervision_id

    """column name"""
    tachograph_data_exception

    """column name"""
    tachograph_speed

    """column name"""
    taxi_state

    """column name"""
    trail

    """column name"""
    treatment_time

    """column name"""
    updated_at

    """column name"""
    updated_by

    """column name"""
    vehicle_id
}

"""aggregate var_pop on columns"""
type dynamic_supervision_detail_var_pop_fields {
    business_scope: Float
    curve: Float
    equipment: Float
    id: Float
    lens_position: Float
    taxi_state: Float
    trail: Float
}

"""
order by var_pop() on columns of table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_var_pop_order_by {
    business_scope: order_by
    curve: order_by
    equipment: order_by
    id: order_by
    lens_position: order_by
    taxi_state: order_by
    trail: order_by
}

"""aggregate var_samp on columns"""
type dynamic_supervision_detail_var_samp_fields {
    business_scope: Float
    curve: Float
    equipment: Float
    id: Float
    lens_position: Float
    taxi_state: Float
    trail: Float
}

"""
order by var_samp() on columns of table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_var_samp_order_by {
    business_scope: order_by
    curve: order_by
    equipment: order_by
    id: order_by
    lens_position: order_by
    taxi_state: order_by
    trail: order_by
}

"""aggregate variance on columns"""
type dynamic_supervision_detail_variance_fields {
    business_scope: Float
    curve: Float
    equipment: Float
    id: Float
    lens_position: Float
    taxi_state: Float
    trail: Float
}

"""
order by variance() on columns of table "dynamic_supervision_detail"
"""
input dynamic_supervision_detail_variance_order_by {
    business_scope: order_by
    curve: order_by
    equipment: order_by
    id: order_by
    lens_position: order_by
    taxi_state: order_by
    trail: order_by
}


extend type Mutation {
    """
    delete data from the table: "dynamic_supervision_detail"
  """
    delete_dynamic_supervision_detail(
        """filter the rows which have to be deleted"""
        where: dynamic_supervision_detail_bool_exp!
    ): dynamic_supervision_detail_mutation_response

    """
    delete single row from the table: "dynamic_supervision_detail"
  """
    delete_dynamic_supervision_detail_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        supervision_detail_id: String!
    ): dynamic_supervision_detail

    """
    insert data into the table: "dynamic_supervision_detail"
  """
    insert_dynamic_supervision_detail(
        """the rows to be inserted"""
        objects: [dynamic_supervision_detail_insert_input!]!

        """on conflict condition"""
        on_conflict: dynamic_supervision_detail_on_conflict
    ): dynamic_supervision_detail_mutation_response

    """
    insert a single row into the table: "dynamic_supervision_detail"
  """
    insert_dynamic_supervision_detail_one(
        """the row to be inserted"""
        object: dynamic_supervision_detail_insert_input!

        """on conflict condition"""
        on_conflict: dynamic_supervision_detail_on_conflict
    ): dynamic_supervision_detail

    """
    update data of the table: "dynamic_supervision_detail"
  """
    update_dynamic_supervision_detail(
        """increments the integer columns with given value of the filtered values"""
        _inc: dynamic_supervision_detail_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: dynamic_supervision_detail_set_input

        """filter the rows which have to be updated"""
        where: dynamic_supervision_detail_bool_exp!
    ): dynamic_supervision_detail_mutation_response

    """
    update single row of the table: "dynamic_supervision_detail"
  """
    update_dynamic_supervision_detail_by_pk(
        """increments the integer columns with given value of the filtered values"""
        _inc: dynamic_supervision_detail_inc_input

        """sets the columns of the filtered rows to the given values"""
        _set: dynamic_supervision_detail_set_input
        pk_columns: dynamic_supervision_detail_pk_columns_input!
    ): dynamic_supervision_detail
}


extend type Query {
    """
    fetch data from the table: "dynamic_supervision_detail"
  """
    dynamic_supervision_detail(
        """distinct select on columns"""
        distinct_on: [dynamic_supervision_detail_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_supervision_detail_order_by!]

        """filter the rows returned"""
        where: dynamic_supervision_detail_bool_exp
    ): [dynamic_supervision_detail!]!

    """
    fetch aggregated fields from the table: "dynamic_supervision_detail"
  """
    dynamic_supervision_detail_aggregate(
        """distinct select on columns"""
        distinct_on: [dynamic_supervision_detail_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_supervision_detail_order_by!]

        """filter the rows returned"""
        where: dynamic_supervision_detail_bool_exp
    ): dynamic_supervision_detail_aggregate!

    """
    fetch data from the table: "dynamic_supervision_detail" using primary key columns
    """
    dynamic_supervision_detail_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        supervision_detail_id: String!
    ): dynamic_supervision_detail
}


extend type Subscription {
    """
    fetch data from the table: "dynamic_supervision_detail"
  """
    dynamic_supervision_detail(
        """distinct select on columns"""
        distinct_on: [dynamic_supervision_detail_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_supervision_detail_order_by!]

        """filter the rows returned"""
        where: dynamic_supervision_detail_bool_exp
    ): [dynamic_supervision_detail!]!

    """
    fetch aggregated fields from the table: "dynamic_supervision_detail"
  """
    dynamic_supervision_detail_aggregate(
        """distinct select on columns"""
        distinct_on: [dynamic_supervision_detail_select_column!]

        """limit the number of rows returned"""
        limit: Int

        """skip the first n rows. Use only with order_by"""
        offset: Int

        """sort the rows by one or more columns"""
        order_by: [dynamic_supervision_detail_order_by!]

        """filter the rows returned"""
        where: dynamic_supervision_detail_bool_exp
    ): dynamic_supervision_detail_aggregate!

    """
    fetch data from the table: "dynamic_supervision_detail" using primary key columns
    """
    dynamic_supervision_detail_by_pk(
        """主键"""
        id: bigint!

        """联合主键"""
        supervision_detail_id: String!
    ): dynamic_supervision_detail
}

`, BuiltIn: false},
	{Name: "graph/graphqls/schema.graphqls", Input: `
scalar _jsonb
scalar bigint
scalar numeric
scalar timestamptz
scalar _text

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}


"""
expression to compare columns of type _jsonb. All fields are combined with logical 'AND'.
"""
input _jsonb_comparison_exp {
    _eq: _jsonb
    _gt: _jsonb
    _gte: _jsonb
    _in: [_jsonb!]
    _is_null: Boolean
    _lt: _jsonb
    _lte: _jsonb
    _neq: _jsonb
    _nin: [_jsonb!]
}

"""
expression to compare columns of type bigint. All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}


"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}


"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
    """in the ascending order, nulls last"""
    asc

    """in the ascending order, nulls first"""
    asc_nulls_first

    """in the ascending order, nulls last"""
    asc_nulls_last

    """in the descending order, nulls first"""
    desc

    """in the descending order, nulls first"""
    desc_nulls_first

    """in the descending order, nulls last"""
    desc_nulls_last
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}


"expression to compare columns of type _text. All fields are combined with logical 'AND'."
input _text_comparison_exp {
    _eq: _text
    _gt: _text
    _gte: _text
    _in: [_text!]
    _is_null: Boolean
    _lt: _text
    _lte: _text
    _neq: _text
    _nin: [_text!]
}

scalar point

"""
expression to compare columns of type point. All fields are combined with logical 'AND'.
"""
input point_comparison_exp {
    _eq: point
    _gt: point
    _gte: point
    _in: [point!]
    _is_null: Boolean
    _lt: point
    _lte: point
    _neq: point
    _nin: [point!]
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_dynamic_spot_check_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSpotCheckDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdynamic_spot_check_disposal_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dynamic_spot_check_disposal_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dynamic_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdynamic_supervision_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dynamic_supervision_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["supervision_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supervision_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dynamic_supervision_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSupervisionDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNdynamic_supervision_detail_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_dynamic_supervision_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["supervision_detail_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supervision_detail_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_spot_check_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DynamicSpotCheckDisposalInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdynamic_spot_check_disposal_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DynamicSpotCheckDisposalOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdynamic_spot_check_disposal_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_spot_check_disposal_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSpotCheckDisposalInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdynamic_spot_check_disposal_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DynamicSpotCheckDisposalOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdynamic_spot_check_disposal_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DynamicSupervisionInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdynamic_supervision_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DynamicSupervisionOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdynamic_supervision_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_supervision_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DynamicSupervisionDetailInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNdynamic_supervision_detail_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.DynamicSupervisionDetailOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdynamic_supervision_detail_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_supervision_detail_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSupervisionDetailInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdynamic_supervision_detail_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DynamicSupervisionDetailOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdynamic_supervision_detail_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_dynamic_supervision_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DynamicSupervisionInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNdynamic_supervision_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.DynamicSupervisionOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOdynamic_supervision_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_spot_check_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSpotCheckDisposalIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdynamic_spot_check_disposal_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSpotCheckDisposalSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdynamic_spot_check_disposal_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DynamicSpotCheckDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdynamic_spot_check_disposal_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_spot_check_disposal_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSpotCheckDisposalIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdynamic_spot_check_disposal_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSpotCheckDisposalSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdynamic_spot_check_disposal_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DynamicSpotCheckDisposalPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdynamic_spot_check_disposal_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSupervisionIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdynamic_supervision_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSupervisionSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdynamic_supervision_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DynamicSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdynamic_supervision_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_supervision_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSupervisionIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdynamic_supervision_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSupervisionSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdynamic_supervision_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DynamicSupervisionPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdynamic_supervision_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_supervision_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSupervisionDetailIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdynamic_supervision_detail_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSupervisionDetailSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdynamic_supervision_detail_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DynamicSupervisionDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNdynamic_supervision_detail_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_dynamic_supervision_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DynamicSupervisionDetailIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOdynamic_supervision_detail_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.DynamicSupervisionDetailSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOdynamic_supervision_detail_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.DynamicSupervisionDetailPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNdynamic_supervision_detail_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_spot_check_disposal_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSpotCheckDisposalSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_spot_check_disposal_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSpotCheckDisposalOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_spot_check_disposal_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSpotCheckDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_spot_check_disposal_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_spot_check_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSpotCheckDisposalSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_spot_check_disposal_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSpotCheckDisposalOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_spot_check_disposal_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSpotCheckDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_spot_check_disposal_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_spot_check_disposal_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_supervision_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_supervision_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_supervision_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_supervision_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_supervision_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_supervision_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["supervision_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supervision_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_detail_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionDetailSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_supervision_detail_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionDetailOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_supervision_detail_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_supervision_detail_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionDetailSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_supervision_detail_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionDetailOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_supervision_detail_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_supervision_detail_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_dynamic_supervision_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["supervision_detail_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supervision_detail_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_dynamic_spot_check_disposal_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSpotCheckDisposalSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_spot_check_disposal_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSpotCheckDisposalOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_spot_check_disposal_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSpotCheckDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_spot_check_disposal_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_dynamic_spot_check_disposal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSpotCheckDisposalSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_spot_check_disposal_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSpotCheckDisposalOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_spot_check_disposal_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSpotCheckDisposalBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_spot_check_disposal_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_dynamic_spot_check_disposal_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_dynamic_supervision_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_supervision_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_supervision_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_supervision_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_dynamic_supervision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_supervision_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_supervision_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_supervision_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_dynamic_supervision_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["supervision_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supervision_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_dynamic_supervision_detail_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionDetailSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_supervision_detail_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionDetailOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_supervision_detail_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_supervision_detail_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_dynamic_supervision_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionDetailSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOdynamic_supervision_detail_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.DynamicSupervisionDetailOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOdynamic_supervision_detail_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.DynamicSupervisionDetailBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOdynamic_supervision_detail_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_dynamic_supervision_detail_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["supervision_detail_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supervision_detail_id"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_dynamic_spot_check_disposal_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSpotCheckDisposalSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdynamic_spot_check_disposal_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_dynamic_supervision_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdynamic_supervision_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

func (ec *executionContext) field_dynamic_supervision_detail_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.DynamicSupervisionDetailSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOdynamic_supervision_detail_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_dynamic_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSupervision(rctx, args["where"].(model.DynamicSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionMutationResponse)
	fc.Result = res
	return ec.marshalOdynamic_supervision_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dynamic_supervision_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_supervision_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSupervisionByPk(rctx, args["id"].(int64), args["supervision_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervision)
	fc.Result = res
	return ec.marshalOdynamic_supervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSupervision(rctx, args["objects"].([]*model.DynamicSupervisionInsertInput), args["on_conflict"].(*model.DynamicSupervisionOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionMutationResponse)
	fc.Result = res
	return ec.marshalOdynamic_supervision_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_supervision_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_supervision_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSupervisionOne(rctx, args["object"].(model.DynamicSupervisionInsertInput), args["on_conflict"].(*model.DynamicSupervisionOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervision)
	fc.Result = res
	return ec.marshalOdynamic_supervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSupervision(rctx, args["_inc"].(*model.DynamicSupervisionIncInput), args["_set"].(*model.DynamicSupervisionSetInput), args["where"].(model.DynamicSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionMutationResponse)
	fc.Result = res
	return ec.marshalOdynamic_supervision_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_supervision_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_supervision_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSupervisionByPk(rctx, args["_inc"].(*model.DynamicSupervisionIncInput), args["_set"].(*model.DynamicSupervisionSetInput), args["pk_columns"].(model.DynamicSupervisionPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervision)
	fc.Result = res
	return ec.marshalOdynamic_supervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dynamic_spot_check_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_spot_check_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSpotCheckDisposal(rctx, args["where"].(model.DynamicSpotCheckDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalMutationResponse)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dynamic_spot_check_disposal_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_spot_check_disposal_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSpotCheckDisposalByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_spot_check_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_spot_check_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSpotCheckDisposal(rctx, args["objects"].([]*model.DynamicSpotCheckDisposalInsertInput), args["on_conflict"].(*model.DynamicSpotCheckDisposalOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalMutationResponse)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_spot_check_disposal_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_spot_check_disposal_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSpotCheckDisposalOne(rctx, args["object"].(model.DynamicSpotCheckDisposalInsertInput), args["on_conflict"].(*model.DynamicSpotCheckDisposalOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_spot_check_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_spot_check_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSpotCheckDisposal(rctx, args["_inc"].(*model.DynamicSpotCheckDisposalIncInput), args["_set"].(*model.DynamicSpotCheckDisposalSetInput), args["where"].(model.DynamicSpotCheckDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalMutationResponse)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_spot_check_disposal_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_spot_check_disposal_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSpotCheckDisposalByPk(rctx, args["_inc"].(*model.DynamicSpotCheckDisposalIncInput), args["_set"].(*model.DynamicSpotCheckDisposalSetInput), args["pk_columns"].(model.DynamicSpotCheckDisposalPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dynamic_supervision_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_supervision_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSupervisionDetail(rctx, args["where"].(model.DynamicSupervisionDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailMutationResponse)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_dynamic_supervision_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_dynamic_supervision_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDynamicSupervisionDetailByPk(rctx, args["id"].(int64), args["supervision_detail_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_supervision_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_supervision_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSupervisionDetail(rctx, args["objects"].([]*model.DynamicSupervisionDetailInsertInput), args["on_conflict"].(*model.DynamicSupervisionDetailOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailMutationResponse)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_dynamic_supervision_detail_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_dynamic_supervision_detail_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertDynamicSupervisionDetailOne(rctx, args["object"].(model.DynamicSupervisionDetailInsertInput), args["on_conflict"].(*model.DynamicSupervisionDetailOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_supervision_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_supervision_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSupervisionDetail(rctx, args["_inc"].(*model.DynamicSupervisionDetailIncInput), args["_set"].(*model.DynamicSupervisionDetailSetInput), args["where"].(model.DynamicSupervisionDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailMutationResponse)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_dynamic_supervision_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_dynamic_supervision_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDynamicSupervisionDetailByPk(rctx, args["_inc"].(*model.DynamicSupervisionDetailIncInput), args["_set"].(*model.DynamicSupervisionDetailSetInput), args["pk_columns"].(model.DynamicSupervisionDetailPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervision(rctx, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DynamicSupervision)
	fc.Result = res
	return ec.marshalNdynamic_supervision2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervisionAggregate(rctx, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionAggregate)
	fc.Result = res
	return ec.marshalNdynamic_supervision_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervisionByPk(rctx, args["id"].(int64), args["supervision_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervision)
	fc.Result = res
	return ec.marshalOdynamic_supervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervision(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_spot_check_disposal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_spot_check_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSpotCheckDisposal(rctx, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalNdynamic_spot_check_disposal2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_spot_check_disposal_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_spot_check_disposal_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSpotCheckDisposalAggregate(rctx, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalAggregate)
	fc.Result = res
	return ec.marshalNdynamic_spot_check_disposal_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_spot_check_disposal_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_spot_check_disposal_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSpotCheckDisposalByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposal(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision_detail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervisionDetail(rctx, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalNdynamic_supervision_detail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision_detail_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_detail_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervisionDetailAggregate(rctx, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailAggregate)
	fc.Result = res
	return ec.marshalNdynamic_supervision_detail_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dynamic_supervision_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dynamic_supervision_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DynamicSupervisionDetailByPk(rctx, args["id"].(int64), args["supervision_detail_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_dynamic_supervision(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dynamic_supervision_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DynamicSupervision(rctx, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.DynamicSupervision)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdynamic_supervision2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dynamic_supervision_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dynamic_supervision_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DynamicSupervisionAggregate(rctx, args["distinct_on"].([]model.DynamicSupervisionSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionOrderBy), args["where"].(*model.DynamicSupervisionBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DynamicSupervisionAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdynamic_supervision_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dynamic_supervision_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dynamic_supervision_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DynamicSupervisionByPk(rctx, args["id"].(int64), args["supervision_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DynamicSupervision)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOdynamic_supervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervision(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dynamic_spot_check_disposal(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dynamic_spot_check_disposal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DynamicSpotCheckDisposal(rctx, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.DynamicSpotCheckDisposal)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdynamic_spot_check_disposal2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dynamic_spot_check_disposal_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dynamic_spot_check_disposal_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DynamicSpotCheckDisposalAggregate(rctx, args["distinct_on"].([]model.DynamicSpotCheckDisposalSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSpotCheckDisposalOrderBy), args["where"].(*model.DynamicSpotCheckDisposalBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DynamicSpotCheckDisposalAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdynamic_spot_check_disposal_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dynamic_spot_check_disposal_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dynamic_spot_check_disposal_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DynamicSpotCheckDisposalByPk(rctx, args["id"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DynamicSpotCheckDisposal)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOdynamic_spot_check_disposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposal(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dynamic_supervision_detail(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dynamic_supervision_detail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DynamicSupervisionDetail(rctx, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.DynamicSupervisionDetail)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdynamic_supervision_detail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dynamic_supervision_detail_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dynamic_supervision_detail_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DynamicSupervisionDetailAggregate(rctx, args["distinct_on"].([]model.DynamicSupervisionDetailSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.DynamicSupervisionDetailOrderBy), args["where"].(*model.DynamicSupervisionDetailBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DynamicSupervisionDetailAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNdynamic_supervision_detail_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_dynamic_supervision_detail_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_dynamic_supervision_detail_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().DynamicSupervisionDetailByPk(rctx, args["id"].(int64), args["supervision_detail_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.DynamicSupervisionDetail)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOdynamic_supervision_detail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetail(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_announce_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_disposal_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_image_abnormal_handing_measure(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageAbnormalHandingMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_is_announce(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAnnounce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_is_app_push(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAppPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_is_notify(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNotify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_is_sms_push(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSmsPush, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_notify_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_send_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_tachograph_data_disposal_measure(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataDisposalMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalAggregateFields)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalNdynamic_spot_check_disposal2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalAvgFields)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_dynamic_spot_check_disposal_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalMaxFields)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalMinFields)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalStddevFields)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalStddevPopFields)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalStddevSampFields)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalSumFields)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalVarPopFields)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalVarSampFields)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSpotCheckDisposalVarianceFields)
	fc.Result = res
	return ec.marshalOdynamic_spot_check_disposal_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_avg_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_announce_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_disposal_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_image_abnormal_handing_measure(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageAbnormalHandingMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_notify_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_send_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_tachograph_data_disposal_measure(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataDisposalMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_announce_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnnounceContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_app_push_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPushContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_disposal_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_disposal_result(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_image_abnormal_handing_measure(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageAbnormalHandingMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_notify_content(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotifyContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_operation_user(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_send_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_tachograph_data_disposal_measure(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataDisposalMeasure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_telephone(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DynamicSpotCheckDisposal)
	fc.Result = res
	return ec.marshalNdynamic_spot_check_disposal2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_stddev_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_stddev_pop_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_stddev_samp_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_sum_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_var_pop_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_var_samp_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_variance_fields_disposal_method(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_spot_check_disposal_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSpotCheckDisposalVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_spot_check_disposal_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_spot_check_date(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervision) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionAggregateFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DynamicSupervision)
	fc.Result = res
	return ec.marshalNdynamic_supervision2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionAvgFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_dynamic_supervision_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionMaxFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionMinFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionStddevFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionStddevPopFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionStddevSampFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionSumFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionVarPopFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionVarSampFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionVarianceFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_avg_fields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_avg_fields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_avg_fields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_avg_fields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_avg_fields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_avg_fields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_avg_fields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_assignee(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_coordinate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coordinate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOpoint2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNtimestamptz2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_measures(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_measures1(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_measures2(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_measures3(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_measures4(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_measures5(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_measures6(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_measures7(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_results(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_results1(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_results2(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_results3(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_results4(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_results5(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_results6(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_disposal_results7(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_fatigue_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_is_delete(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_is_fatigue_driving(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFatigueDriving, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_is_locate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_is_morning_outage(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMorningOutage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_is_online(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_is_send(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_is_speeding(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSpeeding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_is_tachograph_record_normal(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsTachographRecordNormal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_latitude_longitude_description(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatitudeLongitudeDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_lens_on(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_monitor_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitorEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_monitoring_location(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_monitoring_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_other_infraction(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherInfraction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_others(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Others, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_outage_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutageAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_speed_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_speeding_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedingSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_tachograph_data_exception(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_treatment_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatmentTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailAggregateFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalNdynamic_supervision_detail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailAvgFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_dynamic_supervision_detail_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailMaxFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailMinFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailStddevFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailStddevPopFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailStddevSampFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailSumFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailVarPopFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailVarSampFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DynamicSupervisionDetailVarianceFields)
	fc.Result = res
	return ec.marshalOdynamic_supervision_detail_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_avg_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_avg_fields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_avg_fields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_avg_fields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_avg_fields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_avg_fields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_assignee(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_measures(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_measures1(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_measures2(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_measures3(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_measures4(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_measures5(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_measures6(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_measures7(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_results(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_results1(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_results2(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_results3(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_results4(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_results5(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_results6(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_disposal_results7(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_fatigue_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_latitude_longitude_description(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatitudeLongitudeDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_lens_on(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_monitor_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitorEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_monitoring_location(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_monitoring_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_other_infraction(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherInfraction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_others(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Others, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_outage_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutageAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_speed_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_speeding_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedingSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_tachograph_data_exception(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_treatment_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatmentTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_GPS_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GpsSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_assignee(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assignee, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_measures(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_measures1(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_measures2(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_measures3(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_measures4(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_measures5(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_measures6(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_measures7(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalMeasures7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_results(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_results1(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_results2(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_results3(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_results4(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults4, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_results5(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults5, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_results6(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults6, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_disposal_results7(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisposalResults7, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_fatigue_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FatigueAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_feedback_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_latitude_longitude_description(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatitudeLongitudeDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_lens_on(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_monitor_end_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitorEndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_monitoring_location(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_monitoring_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_other_infraction(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherInfraction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_others(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Others, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_outage_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutageAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_remarks(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_speed_alarm_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedAlarmTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_speeding_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedingSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_supervision_detail_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionDetailID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_tachograph_data_exception(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographDataException, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_tachograph_speed(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TachographSpeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_treatment_time(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatmentTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DynamicSupervisionDetail)
	fc.Result = res
	return ec.marshalNdynamic_supervision_detail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_fields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_fields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_fields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_fields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_fields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_pop_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_pop_fields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_pop_fields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_pop_fields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_pop_fields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_pop_fields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_samp_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_samp_fields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_samp_fields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_samp_fields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_samp_fields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_stddev_samp_fields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_sum_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_sum_fields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_sum_fields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_sum_fields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_sum_fields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_sum_fields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_pop_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_pop_fields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_pop_fields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_pop_fields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_pop_fields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_pop_fields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_samp_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_samp_fields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_samp_fields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_samp_fields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_samp_fields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_var_samp_fields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_variance_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_variance_fields_curve(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Curve, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_variance_fields_equipment(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Equipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_variance_fields_lens_position(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LensPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_variance_fields_taxi_state(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxiState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_detail_variance_fields_trail(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionDetailVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_detail_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_spot_check_date(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_max_fields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_check_user_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CheckUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_city_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_created_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_created_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_deleted_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_deleted_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_district_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_province_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_spot_check_date(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_supervision_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_updated_at(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOtimestamptz2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_updated_by(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_min_fields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DynamicSupervision)
	fc.Result = res
	return ec.marshalNdynamic_supervision2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_fields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_fields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_fields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_fields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_fields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_fields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_fields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_pop_fields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_pop_fields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_pop_fields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_pop_fields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_pop_fields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_pop_fields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_pop_fields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_samp_fields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_samp_fields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_samp_fields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_samp_fields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_samp_fields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_samp_fields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_stddev_samp_fields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_sum_fields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_sum_fields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_sum_fields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_sum_fields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_sum_fields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_sum_fields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_sum_fields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_pop_fields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_pop_fields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_pop_fields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_pop_fields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_pop_fields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_pop_fields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_pop_fields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_samp_fields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_samp_fields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_samp_fields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_samp_fields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_samp_fields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_samp_fields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_var_samp_fields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_variance_fields_day(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_variance_fields_month(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_variance_fields_spot_check_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_variance_fields_spot_check_ratio(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_variance_fields_spot_check_total_number(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpotCheckTotalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_variance_fields_total_number_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNumberVehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _dynamic_supervision_variance_fields_year(ctx context.Context, field graphql.CollectedField, obj *model.DynamicSupervisionVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "dynamic_supervision_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model1.BooleanComparisonExp, error) {
	var it model1.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model1.IntComparisonExp, error) {
	var it model1.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model1.StringComparisonExp, error) {
	var it model1.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_jsonb_comparison_exp(ctx context.Context, obj interface{}) (model1.JsonbComparisonExp, error) {
	var it model1.JsonbComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_jsonb2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_jsonb2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInput_text_comparison_exp(ctx context.Context, obj interface{}) (model.TextComparisonExp, error) {
	var it model.TextComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalO_text2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalO_text2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalO_text2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model1.BigintComparisonExp, error) {
	var it model1.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_aggregate_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalAggregateOrderBy, error) {
	var it model.DynamicSpotCheckDisposalAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdynamic_spot_check_disposal_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdynamic_spot_check_disposal_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdynamic_spot_check_disposal_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdynamic_spot_check_disposal_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdynamic_spot_check_disposal_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdynamic_spot_check_disposal_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdynamic_spot_check_disposal_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdynamic_spot_check_disposal_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdynamic_spot_check_disposal_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdynamic_spot_check_disposal_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalArrRelInsertInput, error) {
	var it model.DynamicSpotCheckDisposalArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdynamic_spot_check_disposal_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdynamic_spot_check_disposal_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_avg_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalAvgOrderBy, error) {
	var it model.DynamicSpotCheckDisposalAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_bool_exp(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalBoolExp, error) {
	var it model.DynamicSpotCheckDisposalBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdynamic_spot_check_disposal_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdynamic_spot_check_disposal_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdynamic_spot_check_disposal_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_content"))
			it.DisposalContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_abnormal_handing_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_abnormal_handing_measure"))
			it.ImageAbnormalHandingMeasure, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_disposal_measure"))
			it.TachographDataDisposalMeasure, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_inc_input(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalIncInput, error) {
	var it model.DynamicSpotCheckDisposalIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_insert_input(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalInsertInput, error) {
	var it model.DynamicSpotCheckDisposalInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_content"))
			it.DisposalContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_abnormal_handing_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_abnormal_handing_measure"))
			it.ImageAbnormalHandingMeasure, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_disposal_measure"))
			it.TachographDataDisposalMeasure, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_max_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalMaxOrderBy, error) {
	var it model.DynamicSpotCheckDisposalMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_content"))
			it.DisposalContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_abnormal_handing_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_abnormal_handing_measure"))
			it.ImageAbnormalHandingMeasure, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_disposal_measure"))
			it.TachographDataDisposalMeasure, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_min_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalMinOrderBy, error) {
	var it model.DynamicSpotCheckDisposalMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_content"))
			it.DisposalContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_abnormal_handing_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_abnormal_handing_measure"))
			it.ImageAbnormalHandingMeasure, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_disposal_measure"))
			it.TachographDataDisposalMeasure, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalObjRelInsertInput, error) {
	var it model.DynamicSpotCheckDisposalObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdynamic_spot_check_disposal_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdynamic_spot_check_disposal_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_on_conflict(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalOnConflict, error) {
	var it model.DynamicSpotCheckDisposalOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdynamic_spot_check_disposal_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdynamic_spot_check_disposal_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdynamic_spot_check_disposal_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalOrderBy, error) {
	var it model.DynamicSpotCheckDisposalOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_content"))
			it.DisposalContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_abnormal_handing_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_abnormal_handing_measure"))
			it.ImageAbnormalHandingMeasure, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_disposal_measure"))
			it.TachographDataDisposalMeasure, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_pk_columns_input(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalPkColumnsInput, error) {
	var it model.DynamicSpotCheckDisposalPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_set_input(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalSetInput, error) {
	var it model.DynamicSpotCheckDisposalSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "announce_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("announce_content"))
			it.AnnounceContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "app_push_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("app_push_content"))
			it.AppPushContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_content"))
			it.DisposalContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_result"))
			it.DisposalResult, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "image_abnormal_handing_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image_abnormal_handing_measure"))
			it.ImageAbnormalHandingMeasure, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_announce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_announce"))
			it.IsAnnounce, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_app_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_app_push"))
			it.IsAppPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_notify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_notify"))
			it.IsNotify, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_sms_push":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_sms_push"))
			it.IsSmsPush, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notify_content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notify_content"))
			it.NotifyContent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operation_user":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation_user"))
			it.OperationUser, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "send_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("send_time"))
			it.SendTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_disposal_measure":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_disposal_measure"))
			it.TachographDataDisposalMeasure, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "telephone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("telephone"))
			it.Telephone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_stddev_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalStddevOrderBy, error) {
	var it model.DynamicSpotCheckDisposalStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalStddevPopOrderBy, error) {
	var it model.DynamicSpotCheckDisposalStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalStddevSampOrderBy, error) {
	var it model.DynamicSpotCheckDisposalStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_sum_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalSumOrderBy, error) {
	var it model.DynamicSpotCheckDisposalSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_var_pop_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalVarPopOrderBy, error) {
	var it model.DynamicSpotCheckDisposalVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_var_samp_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalVarSampOrderBy, error) {
	var it model.DynamicSpotCheckDisposalVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_spot_check_disposal_variance_order_by(ctx context.Context, obj interface{}) (model.DynamicSpotCheckDisposalVarianceOrderBy, error) {
	var it model.DynamicSpotCheckDisposalVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "disposal_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_method"))
			it.DisposalMethod, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_aggregate_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionAggregateOrderBy, error) {
	var it model.DynamicSupervisionAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdynamic_supervision_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdynamic_supervision_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdynamic_supervision_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdynamic_supervision_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdynamic_supervision_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdynamic_supervision_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdynamic_supervision_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdynamic_supervision_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdynamic_supervision_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdynamic_supervision_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionArrRelInsertInput, error) {
	var it model.DynamicSupervisionArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdynamic_supervision_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdynamic_supervision_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_avg_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionAvgOrderBy, error) {
	var it model.DynamicSupervisionAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_bool_exp(ctx context.Context, obj interface{}) (model.DynamicSupervisionBoolExp, error) {
	var it model.DynamicSupervisionBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdynamic_supervision_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdynamic_supervision_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdynamic_supervision_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_date"))
			it.SpotCheckDate, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_aggregate_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailAggregateOrderBy, error) {
	var it model.DynamicSupervisionDetailAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOdynamic_supervision_detail_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOdynamic_supervision_detail_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOdynamic_supervision_detail_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOdynamic_supervision_detail_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOdynamic_supervision_detail_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOdynamic_supervision_detail_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOdynamic_supervision_detail_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOdynamic_supervision_detail_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOdynamic_supervision_detail_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOdynamic_supervision_detail_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailArrRelInsertInput, error) {
	var it model.DynamicSupervisionDetailArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdynamic_supervision_detail_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdynamic_supervision_detail_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_avg_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailAvgOrderBy, error) {
	var it model.DynamicSupervisionDetailAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_bool_exp(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailBoolExp, error) {
	var it model.DynamicSupervisionDetailBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOdynamic_supervision_detail_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOdynamic_supervision_detail_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOdynamic_supervision_detail_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures"))
			it.DisposalMeasures, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures1"))
			it.DisposalMeasures1, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures2"))
			it.DisposalMeasures2, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures3"))
			it.DisposalMeasures3, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures4"))
			it.DisposalMeasures4, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures5"))
			it.DisposalMeasures5, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures6"))
			it.DisposalMeasures6, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures7"))
			it.DisposalMeasures7, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results"))
			it.DisposalResults, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results1"))
			it.DisposalResults1, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results2"))
			it.DisposalResults2, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results3"))
			it.DisposalResults3, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results4"))
			it.DisposalResults4, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results5"))
			it.DisposalResults5, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results6"))
			it.DisposalResults6, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results7"))
			it.DisposalResults7, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_alarm_time"))
			it.FatigueAlarmTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fatigue_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fatigue_driving"))
			it.IsFatigueDriving, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_morning_outage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_morning_outage"))
			it.IsMorningOutage, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_speeding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_speeding"))
			it.IsSpeeding, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_tachograph_record_normal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_tachograph_record_normal"))
			it.IsTachographRecordNormal, err = ec.unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude_longitude_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude_longitude_description"))
			it.LatitudeLongitudeDescription, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_on"))
			it.LensOn, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitor_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitor_end_time"))
			it.MonitorEndTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_location"))
			it.MonitoringLocation, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_time"))
			it.MonitoringTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_infraction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_infraction"))
			it.OtherInfraction, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "others":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("others"))
			it.Others, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_alarm_time"))
			it.OutageAlarmTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_alarm_time"))
			it.SpeedAlarmTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "speeding_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speeding_speed"))
			it.SpeedingSpeed, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_exception":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_exception"))
			it.TachographDataException, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "treatment_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treatment_time"))
			it.TreatmentTime, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_inc_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailIncInput, error) {
	var it model.DynamicSupervisionDetailIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_insert_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailInsertInput, error) {
	var it model.DynamicSupervisionDetailInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures"))
			it.DisposalMeasures, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures1"))
			it.DisposalMeasures1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures2"))
			it.DisposalMeasures2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures3"))
			it.DisposalMeasures3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures4"))
			it.DisposalMeasures4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures5"))
			it.DisposalMeasures5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures6"))
			it.DisposalMeasures6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures7"))
			it.DisposalMeasures7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results"))
			it.DisposalResults, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results1"))
			it.DisposalResults1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results2"))
			it.DisposalResults2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results3"))
			it.DisposalResults3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results4"))
			it.DisposalResults4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results5"))
			it.DisposalResults5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results6"))
			it.DisposalResults6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results7"))
			it.DisposalResults7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_alarm_time"))
			it.FatigueAlarmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fatigue_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fatigue_driving"))
			it.IsFatigueDriving, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_morning_outage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_morning_outage"))
			it.IsMorningOutage, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_speeding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_speeding"))
			it.IsSpeeding, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_tachograph_record_normal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_tachograph_record_normal"))
			it.IsTachographRecordNormal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude_longitude_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude_longitude_description"))
			it.LatitudeLongitudeDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_on"))
			it.LensOn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitor_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitor_end_time"))
			it.MonitorEndTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_location"))
			it.MonitoringLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_time"))
			it.MonitoringTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_infraction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_infraction"))
			it.OtherInfraction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "others":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("others"))
			it.Others, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_alarm_time"))
			it.OutageAlarmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_alarm_time"))
			it.SpeedAlarmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "speeding_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speeding_speed"))
			it.SpeedingSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_exception":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_exception"))
			it.TachographDataException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "treatment_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treatment_time"))
			it.TreatmentTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_max_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailMaxOrderBy, error) {
	var it model.DynamicSupervisionDetailMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures"))
			it.DisposalMeasures, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures1"))
			it.DisposalMeasures1, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures2"))
			it.DisposalMeasures2, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures3"))
			it.DisposalMeasures3, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures4"))
			it.DisposalMeasures4, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures5"))
			it.DisposalMeasures5, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures6"))
			it.DisposalMeasures6, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures7"))
			it.DisposalMeasures7, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results"))
			it.DisposalResults, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results1"))
			it.DisposalResults1, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results2"))
			it.DisposalResults2, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results3"))
			it.DisposalResults3, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results4"))
			it.DisposalResults4, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results5"))
			it.DisposalResults5, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results6"))
			it.DisposalResults6, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results7"))
			it.DisposalResults7, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_alarm_time"))
			it.FatigueAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude_longitude_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude_longitude_description"))
			it.LatitudeLongitudeDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_on"))
			it.LensOn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitor_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitor_end_time"))
			it.MonitorEndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_location"))
			it.MonitoringLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_time"))
			it.MonitoringTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_infraction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_infraction"))
			it.OtherInfraction, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "others":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("others"))
			it.Others, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_alarm_time"))
			it.OutageAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_alarm_time"))
			it.SpeedAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speeding_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speeding_speed"))
			it.SpeedingSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_exception":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_exception"))
			it.TachographDataException, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "treatment_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treatment_time"))
			it.TreatmentTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_min_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailMinOrderBy, error) {
	var it model.DynamicSupervisionDetailMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures"))
			it.DisposalMeasures, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures1"))
			it.DisposalMeasures1, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures2"))
			it.DisposalMeasures2, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures3"))
			it.DisposalMeasures3, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures4"))
			it.DisposalMeasures4, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures5"))
			it.DisposalMeasures5, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures6"))
			it.DisposalMeasures6, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures7"))
			it.DisposalMeasures7, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results"))
			it.DisposalResults, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results1"))
			it.DisposalResults1, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results2"))
			it.DisposalResults2, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results3"))
			it.DisposalResults3, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results4"))
			it.DisposalResults4, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results5"))
			it.DisposalResults5, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results6"))
			it.DisposalResults6, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results7"))
			it.DisposalResults7, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_alarm_time"))
			it.FatigueAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude_longitude_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude_longitude_description"))
			it.LatitudeLongitudeDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_on"))
			it.LensOn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitor_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitor_end_time"))
			it.MonitorEndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_location"))
			it.MonitoringLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_time"))
			it.MonitoringTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_infraction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_infraction"))
			it.OtherInfraction, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "others":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("others"))
			it.Others, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_alarm_time"))
			it.OutageAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_alarm_time"))
			it.SpeedAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speeding_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speeding_speed"))
			it.SpeedingSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_exception":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_exception"))
			it.TachographDataException, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "treatment_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treatment_time"))
			it.TreatmentTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailObjRelInsertInput, error) {
	var it model.DynamicSupervisionDetailObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdynamic_supervision_detail_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdynamic_supervision_detail_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_on_conflict(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailOnConflict, error) {
	var it model.DynamicSupervisionDetailOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdynamic_supervision_detail_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdynamic_supervision_detail_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdynamic_supervision_detail_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailOrderBy, error) {
	var it model.DynamicSupervisionDetailOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures"))
			it.DisposalMeasures, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures1"))
			it.DisposalMeasures1, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures2"))
			it.DisposalMeasures2, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures3"))
			it.DisposalMeasures3, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures4"))
			it.DisposalMeasures4, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures5"))
			it.DisposalMeasures5, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures6"))
			it.DisposalMeasures6, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures7"))
			it.DisposalMeasures7, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results"))
			it.DisposalResults, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results1"))
			it.DisposalResults1, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results2"))
			it.DisposalResults2, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results3"))
			it.DisposalResults3, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results4"))
			it.DisposalResults4, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results5"))
			it.DisposalResults5, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results6"))
			it.DisposalResults6, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results7"))
			it.DisposalResults7, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_alarm_time"))
			it.FatigueAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fatigue_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fatigue_driving"))
			it.IsFatigueDriving, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_morning_outage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_morning_outage"))
			it.IsMorningOutage, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_speeding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_speeding"))
			it.IsSpeeding, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_tachograph_record_normal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_tachograph_record_normal"))
			it.IsTachographRecordNormal, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude_longitude_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude_longitude_description"))
			it.LatitudeLongitudeDescription, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_on"))
			it.LensOn, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitor_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitor_end_time"))
			it.MonitorEndTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_location"))
			it.MonitoringLocation, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_time"))
			it.MonitoringTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_infraction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_infraction"))
			it.OtherInfraction, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "others":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("others"))
			it.Others, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_alarm_time"))
			it.OutageAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_alarm_time"))
			it.SpeedAlarmTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "speeding_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speeding_speed"))
			it.SpeedingSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_exception":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_exception"))
			it.TachographDataException, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "treatment_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treatment_time"))
			it.TreatmentTime, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_pk_columns_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailPkColumnsInput, error) {
	var it model.DynamicSupervisionDetailPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_set_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailSetInput, error) {
	var it model.DynamicSupervisionDetailSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "GPS_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GPS_speed"))
			it.GpsSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignee":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignee"))
			it.Assignee, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "coordinate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinate"))
			it.Coordinate, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures"))
			it.DisposalMeasures, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures1"))
			it.DisposalMeasures1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures2"))
			it.DisposalMeasures2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures3"))
			it.DisposalMeasures3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures4"))
			it.DisposalMeasures4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures5"))
			it.DisposalMeasures5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures6"))
			it.DisposalMeasures6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_measures7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_measures7"))
			it.DisposalMeasures7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results"))
			it.DisposalResults, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results1"))
			it.DisposalResults1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results2"))
			it.DisposalResults2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results3"))
			it.DisposalResults3, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results4":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results4"))
			it.DisposalResults4, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results5":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results5"))
			it.DisposalResults5, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results6":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results6"))
			it.DisposalResults6, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "disposal_results7":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disposal_results7"))
			it.DisposalResults7, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driver_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driver_id"))
			it.DriverID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "fatigue_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fatigue_alarm_time"))
			it.FatigueAlarmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback_time"))
			it.FeedbackTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_fatigue_driving":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_fatigue_driving"))
			it.IsFatigueDriving, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_locate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_locate"))
			it.IsLocate, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_morning_outage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_morning_outage"))
			it.IsMorningOutage, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_online":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_online"))
			it.IsOnline, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_send":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_send"))
			it.IsSend, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_speeding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_speeding"))
			it.IsSpeeding, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_tachograph_record_normal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_tachograph_record_normal"))
			it.IsTachographRecordNormal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "latitude_longitude_description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude_longitude_description"))
			it.LatitudeLongitudeDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_on":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_on"))
			it.LensOn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitor_end_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitor_end_time"))
			it.MonitorEndTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_location"))
			it.MonitoringLocation, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "monitoring_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("monitoring_time"))
			it.MonitoringTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "other_infraction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("other_infraction"))
			it.OtherInfraction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "others":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("others"))
			it.Others, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "outage_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("outage_alarm_time"))
			it.OutageAlarmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "remarks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remarks"))
			it.Remarks, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "speed_alarm_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speed_alarm_time"))
			it.SpeedAlarmTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "speeding_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("speeding_speed"))
			it.SpeedingSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_detail_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_detail_id"))
			it.SupervisionDetailID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_data_exception":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_data_exception"))
			it.TachographDataException, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tachograph_speed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tachograph_speed"))
			it.TachographSpeed, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "treatment_time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("treatment_time"))
			it.TreatmentTime, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_stddev_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailStddevOrderBy, error) {
	var it model.DynamicSupervisionDetailStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailStddevPopOrderBy, error) {
	var it model.DynamicSupervisionDetailStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailStddevSampOrderBy, error) {
	var it model.DynamicSupervisionDetailStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_sum_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailSumOrderBy, error) {
	var it model.DynamicSupervisionDetailSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_var_pop_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailVarPopOrderBy, error) {
	var it model.DynamicSupervisionDetailVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_var_samp_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailVarSampOrderBy, error) {
	var it model.DynamicSupervisionDetailVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_detail_variance_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionDetailVarianceOrderBy, error) {
	var it model.DynamicSupervisionDetailVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "curve":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curve"))
			it.Curve, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "equipment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equipment"))
			it.Equipment, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "lens_position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lens_position"))
			it.LensPosition, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "taxi_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxi_state"))
			it.TaxiState, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "trail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trail"))
			it.Trail, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_inc_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionIncInput, error) {
	var it model.DynamicSupervisionIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_insert_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionInsertInput, error) {
	var it model.DynamicSupervisionInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_date"))
			it.SpotCheckDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_max_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionMaxOrderBy, error) {
	var it model.DynamicSupervisionMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_date"))
			it.SpotCheckDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_min_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionMinOrderBy, error) {
	var it model.DynamicSupervisionMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_date"))
			it.SpotCheckDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionObjRelInsertInput, error) {
	var it model.DynamicSupervisionObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNdynamic_supervision_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOdynamic_supervision_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_on_conflict(ctx context.Context, obj interface{}) (model.DynamicSupervisionOnConflict, error) {
	var it model.DynamicSupervisionOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNdynamic_supervision_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNdynamic_supervision_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOdynamic_supervision_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionOrderBy, error) {
	var it model.DynamicSupervisionOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_date"))
			it.SpotCheckDate, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_pk_columns_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionPkColumnsInput, error) {
	var it model.DynamicSupervisionPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_set_input(ctx context.Context, obj interface{}) (model.DynamicSupervisionSetInput, error) {
	var it model.DynamicSupervisionSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "check_user_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("check_user_id"))
			it.CheckUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_at"))
			it.CreatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "created_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created_by"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_at"))
			it.DeletedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deleted_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deleted_by"))
			it.DeletedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_delete":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_delete"))
			it.IsDelete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_date"))
			it.SpotCheckDate, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervision_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervision_id"))
			it.SupervisionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_at":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_at"))
			it.UpdatedAt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updated_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updated_by"))
			it.UpdatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_stddev_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionStddevOrderBy, error) {
	var it model.DynamicSupervisionStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionStddevPopOrderBy, error) {
	var it model.DynamicSupervisionStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionStddevSampOrderBy, error) {
	var it model.DynamicSupervisionStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_sum_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionSumOrderBy, error) {
	var it model.DynamicSupervisionSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_var_pop_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionVarPopOrderBy, error) {
	var it model.DynamicSupervisionVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_var_samp_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionVarSampOrderBy, error) {
	var it model.DynamicSupervisionVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputdynamic_supervision_variance_order_by(ctx context.Context, obj interface{}) (model.DynamicSupervisionVarianceOrderBy, error) {
	var it model.DynamicSupervisionVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			it.Day, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "month":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("month"))
			it.Month, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_number"))
			it.SpotCheckNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_ratio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_ratio"))
			it.SpotCheckRatio, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "spot_check_total_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spot_check_total_number"))
			it.SpotCheckTotalNumber, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "total_number_vehicle":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("total_number_vehicle"))
			it.TotalNumberVehicle, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "year":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			it.Year, err = ec.unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model1.NumericComparisonExp, error) {
	var it model1.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputpoint_comparison_exp(ctx context.Context, obj interface{}) (model1.PointComparisonExp, error) {
	var it model1.PointComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOpoint2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOpoint2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputtimestamptz_comparison_exp(ctx context.Context, obj interface{}) (model1.TimestamptzComparisonExp, error) {
	var it model1.TimestamptzComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOtimestamptz2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_dynamic_supervision":
			out.Values[i] = ec._Mutation_delete_dynamic_supervision(ctx, field)
		case "delete_dynamic_supervision_by_pk":
			out.Values[i] = ec._Mutation_delete_dynamic_supervision_by_pk(ctx, field)
		case "insert_dynamic_supervision":
			out.Values[i] = ec._Mutation_insert_dynamic_supervision(ctx, field)
		case "insert_dynamic_supervision_one":
			out.Values[i] = ec._Mutation_insert_dynamic_supervision_one(ctx, field)
		case "update_dynamic_supervision":
			out.Values[i] = ec._Mutation_update_dynamic_supervision(ctx, field)
		case "update_dynamic_supervision_by_pk":
			out.Values[i] = ec._Mutation_update_dynamic_supervision_by_pk(ctx, field)
		case "delete_dynamic_spot_check_disposal":
			out.Values[i] = ec._Mutation_delete_dynamic_spot_check_disposal(ctx, field)
		case "delete_dynamic_spot_check_disposal_by_pk":
			out.Values[i] = ec._Mutation_delete_dynamic_spot_check_disposal_by_pk(ctx, field)
		case "insert_dynamic_spot_check_disposal":
			out.Values[i] = ec._Mutation_insert_dynamic_spot_check_disposal(ctx, field)
		case "insert_dynamic_spot_check_disposal_one":
			out.Values[i] = ec._Mutation_insert_dynamic_spot_check_disposal_one(ctx, field)
		case "update_dynamic_spot_check_disposal":
			out.Values[i] = ec._Mutation_update_dynamic_spot_check_disposal(ctx, field)
		case "update_dynamic_spot_check_disposal_by_pk":
			out.Values[i] = ec._Mutation_update_dynamic_spot_check_disposal_by_pk(ctx, field)
		case "delete_dynamic_supervision_detail":
			out.Values[i] = ec._Mutation_delete_dynamic_supervision_detail(ctx, field)
		case "delete_dynamic_supervision_detail_by_pk":
			out.Values[i] = ec._Mutation_delete_dynamic_supervision_detail_by_pk(ctx, field)
		case "insert_dynamic_supervision_detail":
			out.Values[i] = ec._Mutation_insert_dynamic_supervision_detail(ctx, field)
		case "insert_dynamic_supervision_detail_one":
			out.Values[i] = ec._Mutation_insert_dynamic_supervision_detail_one(ctx, field)
		case "update_dynamic_supervision_detail":
			out.Values[i] = ec._Mutation_update_dynamic_supervision_detail(ctx, field)
		case "update_dynamic_supervision_detail_by_pk":
			out.Values[i] = ec._Mutation_update_dynamic_supervision_detail_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "dynamic_supervision":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_supervision_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_supervision_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision_by_pk(ctx, field)
				return res
			})
		case "dynamic_spot_check_disposal":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_spot_check_disposal(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_spot_check_disposal_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_spot_check_disposal_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_spot_check_disposal_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_spot_check_disposal_by_pk(ctx, field)
				return res
			})
		case "dynamic_supervision_detail":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision_detail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_supervision_detail_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision_detail_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dynamic_supervision_detail_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dynamic_supervision_detail_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "dynamic_supervision":
		return ec._Subscription_dynamic_supervision(ctx, fields[0])
	case "dynamic_supervision_aggregate":
		return ec._Subscription_dynamic_supervision_aggregate(ctx, fields[0])
	case "dynamic_supervision_by_pk":
		return ec._Subscription_dynamic_supervision_by_pk(ctx, fields[0])
	case "dynamic_spot_check_disposal":
		return ec._Subscription_dynamic_spot_check_disposal(ctx, fields[0])
	case "dynamic_spot_check_disposal_aggregate":
		return ec._Subscription_dynamic_spot_check_disposal_aggregate(ctx, fields[0])
	case "dynamic_spot_check_disposal_by_pk":
		return ec._Subscription_dynamic_spot_check_disposal_by_pk(ctx, fields[0])
	case "dynamic_supervision_detail":
		return ec._Subscription_dynamic_supervision_detail(ctx, fields[0])
	case "dynamic_supervision_detail_aggregate":
		return ec._Subscription_dynamic_supervision_detail_aggregate(ctx, fields[0])
	case "dynamic_supervision_detail_by_pk":
		return ec._Subscription_dynamic_supervision_detail_by_pk(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposalImplementors = []string{"dynamic_spot_check_disposal"}

func (ec *executionContext) _dynamic_spot_check_disposal(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposal) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposalImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal")
		case "announce_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_app_push_content(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dynamic_spot_check_disposal_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._dynamic_spot_check_disposal_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleted_at":
			out.Values[i] = ec._dynamic_spot_check_disposal_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dynamic_spot_check_disposal_deleted_by(ctx, field, obj)
		case "disposal_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_disposal_content(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._dynamic_spot_check_disposal_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._dynamic_spot_check_disposal_disposal_result(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._dynamic_spot_check_disposal_enterprise_id(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._dynamic_spot_check_disposal_feedback_time(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_spot_check_disposal_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "image_abnormal_handing_measure":
			out.Values[i] = ec._dynamic_spot_check_disposal_image_abnormal_handing_measure(ctx, field, obj)
		case "is_announce":
			out.Values[i] = ec._dynamic_spot_check_disposal_is_announce(ctx, field, obj)
		case "is_app_push":
			out.Values[i] = ec._dynamic_spot_check_disposal_is_app_push(ctx, field, obj)
		case "is_delete":
			out.Values[i] = ec._dynamic_spot_check_disposal_is_delete(ctx, field, obj)
		case "is_notify":
			out.Values[i] = ec._dynamic_spot_check_disposal_is_notify(ctx, field, obj)
		case "is_sms_push":
			out.Values[i] = ec._dynamic_spot_check_disposal_is_sms_push(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_notify_content(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._dynamic_spot_check_disposal_operation_user(ctx, field, obj)
		case "send_time":
			out.Values[i] = ec._dynamic_spot_check_disposal_send_time(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._dynamic_spot_check_disposal_supervision_detail_id(ctx, field, obj)
		case "tachograph_data_disposal_measure":
			out.Values[i] = ec._dynamic_spot_check_disposal_tachograph_data_disposal_measure(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._dynamic_spot_check_disposal_telephone(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dynamic_spot_check_disposal_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dynamic_spot_check_disposal_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._dynamic_spot_check_disposal_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_aggregateImplementors = []string{"dynamic_spot_check_disposal_aggregate"}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_aggregate")
		case "aggregate":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_aggregate_fieldsImplementors = []string{"dynamic_spot_check_disposal_aggregate_fields"}

func (ec *executionContext) _dynamic_spot_check_disposal_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_aggregate_fields")
		case "avg":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._dynamic_spot_check_disposal_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_avg_fieldsImplementors = []string{"dynamic_spot_check_disposal_avg_fields"}

func (ec *executionContext) _dynamic_spot_check_disposal_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_avg_fields")
		case "disposal_method":
			out.Values[i] = ec._dynamic_spot_check_disposal_avg_fields_disposal_method(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_spot_check_disposal_avg_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_max_fieldsImplementors = []string{"dynamic_spot_check_disposal_max_fields"}

func (ec *executionContext) _dynamic_spot_check_disposal_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_max_fields")
		case "announce_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_app_push_content(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_deleted_by(ctx, field, obj)
		case "disposal_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_disposal_content(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_disposal_result(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_enterprise_id(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_feedback_time(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_id(ctx, field, obj)
		case "image_abnormal_handing_measure":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_image_abnormal_handing_measure(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_notify_content(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_operation_user(ctx, field, obj)
		case "send_time":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_send_time(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_supervision_detail_id(ctx, field, obj)
		case "tachograph_data_disposal_measure":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_tachograph_data_disposal_measure(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_telephone(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._dynamic_spot_check_disposal_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_min_fieldsImplementors = []string{"dynamic_spot_check_disposal_min_fields"}

func (ec *executionContext) _dynamic_spot_check_disposal_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_min_fields")
		case "announce_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_announce_content(ctx, field, obj)
		case "app_push_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_app_push_content(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_created_by(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_deleted_by(ctx, field, obj)
		case "disposal_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_disposal_content(ctx, field, obj)
		case "disposal_method":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_disposal_method(ctx, field, obj)
		case "disposal_result":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_disposal_result(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_enterprise_id(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_feedback_time(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_id(ctx, field, obj)
		case "image_abnormal_handing_measure":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_image_abnormal_handing_measure(ctx, field, obj)
		case "notify_content":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_notify_content(ctx, field, obj)
		case "operation_user":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_operation_user(ctx, field, obj)
		case "send_time":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_send_time(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_supervision_detail_id(ctx, field, obj)
		case "tachograph_data_disposal_measure":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_tachograph_data_disposal_measure(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_telephone(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._dynamic_spot_check_disposal_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_mutation_responseImplementors = []string{"dynamic_spot_check_disposal_mutation_response"}

func (ec *executionContext) _dynamic_spot_check_disposal_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._dynamic_spot_check_disposal_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._dynamic_spot_check_disposal_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_stddev_fieldsImplementors = []string{"dynamic_spot_check_disposal_stddev_fields"}

func (ec *executionContext) _dynamic_spot_check_disposal_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_stddev_fields")
		case "disposal_method":
			out.Values[i] = ec._dynamic_spot_check_disposal_stddev_fields_disposal_method(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_spot_check_disposal_stddev_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_stddev_pop_fieldsImplementors = []string{"dynamic_spot_check_disposal_stddev_pop_fields"}

func (ec *executionContext) _dynamic_spot_check_disposal_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_stddev_pop_fields")
		case "disposal_method":
			out.Values[i] = ec._dynamic_spot_check_disposal_stddev_pop_fields_disposal_method(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_spot_check_disposal_stddev_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_stddev_samp_fieldsImplementors = []string{"dynamic_spot_check_disposal_stddev_samp_fields"}

func (ec *executionContext) _dynamic_spot_check_disposal_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_stddev_samp_fields")
		case "disposal_method":
			out.Values[i] = ec._dynamic_spot_check_disposal_stddev_samp_fields_disposal_method(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_spot_check_disposal_stddev_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_sum_fieldsImplementors = []string{"dynamic_spot_check_disposal_sum_fields"}

func (ec *executionContext) _dynamic_spot_check_disposal_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_sum_fields")
		case "disposal_method":
			out.Values[i] = ec._dynamic_spot_check_disposal_sum_fields_disposal_method(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_spot_check_disposal_sum_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_var_pop_fieldsImplementors = []string{"dynamic_spot_check_disposal_var_pop_fields"}

func (ec *executionContext) _dynamic_spot_check_disposal_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_var_pop_fields")
		case "disposal_method":
			out.Values[i] = ec._dynamic_spot_check_disposal_var_pop_fields_disposal_method(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_spot_check_disposal_var_pop_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_var_samp_fieldsImplementors = []string{"dynamic_spot_check_disposal_var_samp_fields"}

func (ec *executionContext) _dynamic_spot_check_disposal_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_var_samp_fields")
		case "disposal_method":
			out.Values[i] = ec._dynamic_spot_check_disposal_var_samp_fields_disposal_method(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_spot_check_disposal_var_samp_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_spot_check_disposal_variance_fieldsImplementors = []string{"dynamic_spot_check_disposal_variance_fields"}

func (ec *executionContext) _dynamic_spot_check_disposal_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSpotCheckDisposalVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_spot_check_disposal_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_spot_check_disposal_variance_fields")
		case "disposal_method":
			out.Values[i] = ec._dynamic_spot_check_disposal_variance_fields_disposal_method(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_spot_check_disposal_variance_fields_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervisionImplementors = []string{"dynamic_supervision"}

func (ec *executionContext) _dynamic_supervision(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervision) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervisionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision")
		case "check_user_id":
			out.Values[i] = ec._dynamic_supervision_check_user_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._dynamic_supervision_city_id(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dynamic_supervision_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._dynamic_supervision_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "day":
			out.Values[i] = ec._dynamic_supervision_day(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._dynamic_supervision_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dynamic_supervision_deleted_by(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._dynamic_supervision_district_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._dynamic_supervision_is_delete(ctx, field, obj)
		case "month":
			out.Values[i] = ec._dynamic_supervision_month(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._dynamic_supervision_province_id(ctx, field, obj)
		case "spot_check_date":
			out.Values[i] = ec._dynamic_supervision_spot_check_date(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._dynamic_supervision_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._dynamic_supervision_spot_check_ratio(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._dynamic_supervision_spot_check_total_number(ctx, field, obj)
		case "supervision_id":
			out.Values[i] = ec._dynamic_supervision_supervision_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total_number_vehicle":
			out.Values[i] = ec._dynamic_supervision_total_number_vehicle(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dynamic_supervision_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dynamic_supervision_updated_by(ctx, field, obj)
		case "year":
			out.Values[i] = ec._dynamic_supervision_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_aggregateImplementors = []string{"dynamic_supervision_aggregate"}

func (ec *executionContext) _dynamic_supervision_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_aggregate")
		case "aggregate":
			out.Values[i] = ec._dynamic_supervision_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._dynamic_supervision_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_aggregate_fieldsImplementors = []string{"dynamic_supervision_aggregate_fields"}

func (ec *executionContext) _dynamic_supervision_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_aggregate_fields")
		case "avg":
			out.Values[i] = ec._dynamic_supervision_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._dynamic_supervision_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._dynamic_supervision_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._dynamic_supervision_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._dynamic_supervision_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._dynamic_supervision_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._dynamic_supervision_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._dynamic_supervision_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._dynamic_supervision_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._dynamic_supervision_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._dynamic_supervision_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_avg_fieldsImplementors = []string{"dynamic_supervision_avg_fields"}

func (ec *executionContext) _dynamic_supervision_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_avg_fields")
		case "day":
			out.Values[i] = ec._dynamic_supervision_avg_fields_day(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_avg_fields_id(ctx, field, obj)
		case "month":
			out.Values[i] = ec._dynamic_supervision_avg_fields_month(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._dynamic_supervision_avg_fields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._dynamic_supervision_avg_fields_spot_check_ratio(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._dynamic_supervision_avg_fields_spot_check_total_number(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._dynamic_supervision_avg_fields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._dynamic_supervision_avg_fields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detailImplementors = []string{"dynamic_supervision_detail"}

func (ec *executionContext) _dynamic_supervision_detail(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail")
		case "GPS_speed":
			out.Values[i] = ec._dynamic_supervision_detail_GPS_speed(ctx, field, obj)
		case "assignee":
			out.Values[i] = ec._dynamic_supervision_detail_assignee(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._dynamic_supervision_detail_business_scope(ctx, field, obj)
		case "coordinate":
			out.Values[i] = ec._dynamic_supervision_detail_coordinate(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dynamic_supervision_detail_created_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created_by":
			out.Values[i] = ec._dynamic_supervision_detail_created_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "curve":
			out.Values[i] = ec._dynamic_supervision_detail_curve(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._dynamic_supervision_detail_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dynamic_supervision_detail_deleted_by(ctx, field, obj)
		case "disposal_measures":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_measures(ctx, field, obj)
		case "disposal_measures1":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_measures1(ctx, field, obj)
		case "disposal_measures2":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_measures2(ctx, field, obj)
		case "disposal_measures3":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_measures3(ctx, field, obj)
		case "disposal_measures4":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_measures4(ctx, field, obj)
		case "disposal_measures5":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_measures5(ctx, field, obj)
		case "disposal_measures6":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_measures6(ctx, field, obj)
		case "disposal_measures7":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_measures7(ctx, field, obj)
		case "disposal_results":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_results(ctx, field, obj)
		case "disposal_results1":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_results1(ctx, field, obj)
		case "disposal_results2":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_results2(ctx, field, obj)
		case "disposal_results3":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_results3(ctx, field, obj)
		case "disposal_results4":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_results4(ctx, field, obj)
		case "disposal_results5":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_results5(ctx, field, obj)
		case "disposal_results6":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_results6(ctx, field, obj)
		case "disposal_results7":
			out.Values[i] = ec._dynamic_supervision_detail_disposal_results7(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._dynamic_supervision_detail_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._dynamic_supervision_detail_enterprise_id(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._dynamic_supervision_detail_equipment(ctx, field, obj)
		case "fatigue_alarm_time":
			out.Values[i] = ec._dynamic_supervision_detail_fatigue_alarm_time(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._dynamic_supervision_detail_feedback_time(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_detail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_delete":
			out.Values[i] = ec._dynamic_supervision_detail_is_delete(ctx, field, obj)
		case "is_fatigue_driving":
			out.Values[i] = ec._dynamic_supervision_detail_is_fatigue_driving(ctx, field, obj)
		case "is_locate":
			out.Values[i] = ec._dynamic_supervision_detail_is_locate(ctx, field, obj)
		case "is_morning_outage":
			out.Values[i] = ec._dynamic_supervision_detail_is_morning_outage(ctx, field, obj)
		case "is_online":
			out.Values[i] = ec._dynamic_supervision_detail_is_online(ctx, field, obj)
		case "is_send":
			out.Values[i] = ec._dynamic_supervision_detail_is_send(ctx, field, obj)
		case "is_speeding":
			out.Values[i] = ec._dynamic_supervision_detail_is_speeding(ctx, field, obj)
		case "is_tachograph_record_normal":
			out.Values[i] = ec._dynamic_supervision_detail_is_tachograph_record_normal(ctx, field, obj)
		case "latitude_longitude_description":
			out.Values[i] = ec._dynamic_supervision_detail_latitude_longitude_description(ctx, field, obj)
		case "lens_on":
			out.Values[i] = ec._dynamic_supervision_detail_lens_on(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._dynamic_supervision_detail_lens_position(ctx, field, obj)
		case "monitor_end_time":
			out.Values[i] = ec._dynamic_supervision_detail_monitor_end_time(ctx, field, obj)
		case "monitoring_location":
			out.Values[i] = ec._dynamic_supervision_detail_monitoring_location(ctx, field, obj)
		case "monitoring_time":
			out.Values[i] = ec._dynamic_supervision_detail_monitoring_time(ctx, field, obj)
		case "other_infraction":
			out.Values[i] = ec._dynamic_supervision_detail_other_infraction(ctx, field, obj)
		case "others":
			out.Values[i] = ec._dynamic_supervision_detail_others(ctx, field, obj)
		case "outage_alarm_time":
			out.Values[i] = ec._dynamic_supervision_detail_outage_alarm_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._dynamic_supervision_detail_remarks(ctx, field, obj)
		case "speed_alarm_time":
			out.Values[i] = ec._dynamic_supervision_detail_speed_alarm_time(ctx, field, obj)
		case "speeding_speed":
			out.Values[i] = ec._dynamic_supervision_detail_speeding_speed(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._dynamic_supervision_detail_supervision_detail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supervision_id":
			out.Values[i] = ec._dynamic_supervision_detail_supervision_id(ctx, field, obj)
		case "tachograph_data_exception":
			out.Values[i] = ec._dynamic_supervision_detail_tachograph_data_exception(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._dynamic_supervision_detail_tachograph_speed(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._dynamic_supervision_detail_taxi_state(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._dynamic_supervision_detail_trail(ctx, field, obj)
		case "treatment_time":
			out.Values[i] = ec._dynamic_supervision_detail_treatment_time(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dynamic_supervision_detail_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dynamic_supervision_detail_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._dynamic_supervision_detail_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_aggregateImplementors = []string{"dynamic_supervision_detail_aggregate"}

func (ec *executionContext) _dynamic_supervision_detail_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_aggregate")
		case "aggregate":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_aggregate_fieldsImplementors = []string{"dynamic_supervision_detail_aggregate_fields"}

func (ec *executionContext) _dynamic_supervision_detail_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_aggregate_fields")
		case "avg":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._dynamic_supervision_detail_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_avg_fieldsImplementors = []string{"dynamic_supervision_detail_avg_fields"}

func (ec *executionContext) _dynamic_supervision_detail_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_avg_fields")
		case "business_scope":
			out.Values[i] = ec._dynamic_supervision_detail_avg_fields_business_scope(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._dynamic_supervision_detail_avg_fields_curve(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._dynamic_supervision_detail_avg_fields_equipment(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_detail_avg_fields_id(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._dynamic_supervision_detail_avg_fields_lens_position(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._dynamic_supervision_detail_avg_fields_taxi_state(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._dynamic_supervision_detail_avg_fields_trail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_max_fieldsImplementors = []string{"dynamic_supervision_detail_max_fields"}

func (ec *executionContext) _dynamic_supervision_detail_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_max_fields")
		case "GPS_speed":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_GPS_speed(ctx, field, obj)
		case "assignee":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_assignee(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_business_scope(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_created_by(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_curve(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_deleted_by(ctx, field, obj)
		case "disposal_measures":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_measures(ctx, field, obj)
		case "disposal_measures1":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_measures1(ctx, field, obj)
		case "disposal_measures2":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_measures2(ctx, field, obj)
		case "disposal_measures3":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_measures3(ctx, field, obj)
		case "disposal_measures4":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_measures4(ctx, field, obj)
		case "disposal_measures5":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_measures5(ctx, field, obj)
		case "disposal_measures6":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_measures6(ctx, field, obj)
		case "disposal_measures7":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_measures7(ctx, field, obj)
		case "disposal_results":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_results(ctx, field, obj)
		case "disposal_results1":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_results1(ctx, field, obj)
		case "disposal_results2":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_results2(ctx, field, obj)
		case "disposal_results3":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_results3(ctx, field, obj)
		case "disposal_results4":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_results4(ctx, field, obj)
		case "disposal_results5":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_results5(ctx, field, obj)
		case "disposal_results6":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_results6(ctx, field, obj)
		case "disposal_results7":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_disposal_results7(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_enterprise_id(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_equipment(ctx, field, obj)
		case "fatigue_alarm_time":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_fatigue_alarm_time(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_feedback_time(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_id(ctx, field, obj)
		case "latitude_longitude_description":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_latitude_longitude_description(ctx, field, obj)
		case "lens_on":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_lens_on(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_lens_position(ctx, field, obj)
		case "monitor_end_time":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_monitor_end_time(ctx, field, obj)
		case "monitoring_location":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_monitoring_location(ctx, field, obj)
		case "monitoring_time":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_monitoring_time(ctx, field, obj)
		case "other_infraction":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_other_infraction(ctx, field, obj)
		case "others":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_others(ctx, field, obj)
		case "outage_alarm_time":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_outage_alarm_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_remarks(ctx, field, obj)
		case "speed_alarm_time":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_speed_alarm_time(ctx, field, obj)
		case "speeding_speed":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_speeding_speed(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_supervision_detail_id(ctx, field, obj)
		case "supervision_id":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_supervision_id(ctx, field, obj)
		case "tachograph_data_exception":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_tachograph_data_exception(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_tachograph_speed(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_taxi_state(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_trail(ctx, field, obj)
		case "treatment_time":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_treatment_time(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._dynamic_supervision_detail_max_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_min_fieldsImplementors = []string{"dynamic_supervision_detail_min_fields"}

func (ec *executionContext) _dynamic_supervision_detail_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_min_fields")
		case "GPS_speed":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_GPS_speed(ctx, field, obj)
		case "assignee":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_assignee(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_business_scope(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_created_by(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_curve(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_deleted_by(ctx, field, obj)
		case "disposal_measures":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_measures(ctx, field, obj)
		case "disposal_measures1":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_measures1(ctx, field, obj)
		case "disposal_measures2":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_measures2(ctx, field, obj)
		case "disposal_measures3":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_measures3(ctx, field, obj)
		case "disposal_measures4":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_measures4(ctx, field, obj)
		case "disposal_measures5":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_measures5(ctx, field, obj)
		case "disposal_measures6":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_measures6(ctx, field, obj)
		case "disposal_measures7":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_measures7(ctx, field, obj)
		case "disposal_results":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_results(ctx, field, obj)
		case "disposal_results1":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_results1(ctx, field, obj)
		case "disposal_results2":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_results2(ctx, field, obj)
		case "disposal_results3":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_results3(ctx, field, obj)
		case "disposal_results4":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_results4(ctx, field, obj)
		case "disposal_results5":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_results5(ctx, field, obj)
		case "disposal_results6":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_results6(ctx, field, obj)
		case "disposal_results7":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_disposal_results7(ctx, field, obj)
		case "driver_id":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_driver_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_enterprise_id(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_equipment(ctx, field, obj)
		case "fatigue_alarm_time":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_fatigue_alarm_time(ctx, field, obj)
		case "feedback_time":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_feedback_time(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_id(ctx, field, obj)
		case "latitude_longitude_description":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_latitude_longitude_description(ctx, field, obj)
		case "lens_on":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_lens_on(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_lens_position(ctx, field, obj)
		case "monitor_end_time":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_monitor_end_time(ctx, field, obj)
		case "monitoring_location":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_monitoring_location(ctx, field, obj)
		case "monitoring_time":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_monitoring_time(ctx, field, obj)
		case "other_infraction":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_other_infraction(ctx, field, obj)
		case "others":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_others(ctx, field, obj)
		case "outage_alarm_time":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_outage_alarm_time(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_remarks(ctx, field, obj)
		case "speed_alarm_time":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_speed_alarm_time(ctx, field, obj)
		case "speeding_speed":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_speeding_speed(ctx, field, obj)
		case "supervision_detail_id":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_supervision_detail_id(ctx, field, obj)
		case "supervision_id":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_supervision_id(ctx, field, obj)
		case "tachograph_data_exception":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_tachograph_data_exception(ctx, field, obj)
		case "tachograph_speed":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_tachograph_speed(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_taxi_state(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_trail(ctx, field, obj)
		case "treatment_time":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_treatment_time(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_updated_by(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._dynamic_supervision_detail_min_fields_vehicle_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_mutation_responseImplementors = []string{"dynamic_supervision_detail_mutation_response"}

func (ec *executionContext) _dynamic_supervision_detail_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._dynamic_supervision_detail_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._dynamic_supervision_detail_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_stddev_fieldsImplementors = []string{"dynamic_supervision_detail_stddev_fields"}

func (ec *executionContext) _dynamic_supervision_detail_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_stddev_fields")
		case "business_scope":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_fields_business_scope(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_fields_curve(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_fields_equipment(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_fields_id(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_fields_lens_position(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_fields_taxi_state(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_fields_trail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_stddev_pop_fieldsImplementors = []string{"dynamic_supervision_detail_stddev_pop_fields"}

func (ec *executionContext) _dynamic_supervision_detail_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_stddev_pop_fields")
		case "business_scope":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_pop_fields_business_scope(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_pop_fields_curve(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_pop_fields_equipment(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_pop_fields_id(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_pop_fields_lens_position(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_pop_fields_taxi_state(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_pop_fields_trail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_stddev_samp_fieldsImplementors = []string{"dynamic_supervision_detail_stddev_samp_fields"}

func (ec *executionContext) _dynamic_supervision_detail_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_stddev_samp_fields")
		case "business_scope":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_samp_fields_business_scope(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_samp_fields_curve(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_samp_fields_equipment(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_samp_fields_id(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_samp_fields_lens_position(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_samp_fields_taxi_state(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._dynamic_supervision_detail_stddev_samp_fields_trail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_sum_fieldsImplementors = []string{"dynamic_supervision_detail_sum_fields"}

func (ec *executionContext) _dynamic_supervision_detail_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_sum_fields")
		case "business_scope":
			out.Values[i] = ec._dynamic_supervision_detail_sum_fields_business_scope(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._dynamic_supervision_detail_sum_fields_curve(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._dynamic_supervision_detail_sum_fields_equipment(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_detail_sum_fields_id(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._dynamic_supervision_detail_sum_fields_lens_position(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._dynamic_supervision_detail_sum_fields_taxi_state(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._dynamic_supervision_detail_sum_fields_trail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_var_pop_fieldsImplementors = []string{"dynamic_supervision_detail_var_pop_fields"}

func (ec *executionContext) _dynamic_supervision_detail_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_var_pop_fields")
		case "business_scope":
			out.Values[i] = ec._dynamic_supervision_detail_var_pop_fields_business_scope(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._dynamic_supervision_detail_var_pop_fields_curve(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._dynamic_supervision_detail_var_pop_fields_equipment(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_detail_var_pop_fields_id(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._dynamic_supervision_detail_var_pop_fields_lens_position(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._dynamic_supervision_detail_var_pop_fields_taxi_state(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._dynamic_supervision_detail_var_pop_fields_trail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_var_samp_fieldsImplementors = []string{"dynamic_supervision_detail_var_samp_fields"}

func (ec *executionContext) _dynamic_supervision_detail_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_var_samp_fields")
		case "business_scope":
			out.Values[i] = ec._dynamic_supervision_detail_var_samp_fields_business_scope(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._dynamic_supervision_detail_var_samp_fields_curve(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._dynamic_supervision_detail_var_samp_fields_equipment(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_detail_var_samp_fields_id(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._dynamic_supervision_detail_var_samp_fields_lens_position(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._dynamic_supervision_detail_var_samp_fields_taxi_state(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._dynamic_supervision_detail_var_samp_fields_trail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_detail_variance_fieldsImplementors = []string{"dynamic_supervision_detail_variance_fields"}

func (ec *executionContext) _dynamic_supervision_detail_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionDetailVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_detail_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_detail_variance_fields")
		case "business_scope":
			out.Values[i] = ec._dynamic_supervision_detail_variance_fields_business_scope(ctx, field, obj)
		case "curve":
			out.Values[i] = ec._dynamic_supervision_detail_variance_fields_curve(ctx, field, obj)
		case "equipment":
			out.Values[i] = ec._dynamic_supervision_detail_variance_fields_equipment(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_detail_variance_fields_id(ctx, field, obj)
		case "lens_position":
			out.Values[i] = ec._dynamic_supervision_detail_variance_fields_lens_position(ctx, field, obj)
		case "taxi_state":
			out.Values[i] = ec._dynamic_supervision_detail_variance_fields_taxi_state(ctx, field, obj)
		case "trail":
			out.Values[i] = ec._dynamic_supervision_detail_variance_fields_trail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_max_fieldsImplementors = []string{"dynamic_supervision_max_fields"}

func (ec *executionContext) _dynamic_supervision_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_max_fields")
		case "check_user_id":
			out.Values[i] = ec._dynamic_supervision_max_fields_check_user_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._dynamic_supervision_max_fields_city_id(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dynamic_supervision_max_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._dynamic_supervision_max_fields_created_by(ctx, field, obj)
		case "day":
			out.Values[i] = ec._dynamic_supervision_max_fields_day(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._dynamic_supervision_max_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dynamic_supervision_max_fields_deleted_by(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._dynamic_supervision_max_fields_district_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_max_fields_id(ctx, field, obj)
		case "month":
			out.Values[i] = ec._dynamic_supervision_max_fields_month(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._dynamic_supervision_max_fields_province_id(ctx, field, obj)
		case "spot_check_date":
			out.Values[i] = ec._dynamic_supervision_max_fields_spot_check_date(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._dynamic_supervision_max_fields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._dynamic_supervision_max_fields_spot_check_ratio(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._dynamic_supervision_max_fields_spot_check_total_number(ctx, field, obj)
		case "supervision_id":
			out.Values[i] = ec._dynamic_supervision_max_fields_supervision_id(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._dynamic_supervision_max_fields_total_number_vehicle(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dynamic_supervision_max_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dynamic_supervision_max_fields_updated_by(ctx, field, obj)
		case "year":
			out.Values[i] = ec._dynamic_supervision_max_fields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_min_fieldsImplementors = []string{"dynamic_supervision_min_fields"}

func (ec *executionContext) _dynamic_supervision_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_min_fields")
		case "check_user_id":
			out.Values[i] = ec._dynamic_supervision_min_fields_check_user_id(ctx, field, obj)
		case "city_id":
			out.Values[i] = ec._dynamic_supervision_min_fields_city_id(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._dynamic_supervision_min_fields_created_at(ctx, field, obj)
		case "created_by":
			out.Values[i] = ec._dynamic_supervision_min_fields_created_by(ctx, field, obj)
		case "day":
			out.Values[i] = ec._dynamic_supervision_min_fields_day(ctx, field, obj)
		case "deleted_at":
			out.Values[i] = ec._dynamic_supervision_min_fields_deleted_at(ctx, field, obj)
		case "deleted_by":
			out.Values[i] = ec._dynamic_supervision_min_fields_deleted_by(ctx, field, obj)
		case "district_id":
			out.Values[i] = ec._dynamic_supervision_min_fields_district_id(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_min_fields_id(ctx, field, obj)
		case "month":
			out.Values[i] = ec._dynamic_supervision_min_fields_month(ctx, field, obj)
		case "province_id":
			out.Values[i] = ec._dynamic_supervision_min_fields_province_id(ctx, field, obj)
		case "spot_check_date":
			out.Values[i] = ec._dynamic_supervision_min_fields_spot_check_date(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._dynamic_supervision_min_fields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._dynamic_supervision_min_fields_spot_check_ratio(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._dynamic_supervision_min_fields_spot_check_total_number(ctx, field, obj)
		case "supervision_id":
			out.Values[i] = ec._dynamic_supervision_min_fields_supervision_id(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._dynamic_supervision_min_fields_total_number_vehicle(ctx, field, obj)
		case "updated_at":
			out.Values[i] = ec._dynamic_supervision_min_fields_updated_at(ctx, field, obj)
		case "updated_by":
			out.Values[i] = ec._dynamic_supervision_min_fields_updated_by(ctx, field, obj)
		case "year":
			out.Values[i] = ec._dynamic_supervision_min_fields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_mutation_responseImplementors = []string{"dynamic_supervision_mutation_response"}

func (ec *executionContext) _dynamic_supervision_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._dynamic_supervision_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._dynamic_supervision_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_stddev_fieldsImplementors = []string{"dynamic_supervision_stddev_fields"}

func (ec *executionContext) _dynamic_supervision_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_stddev_fields")
		case "day":
			out.Values[i] = ec._dynamic_supervision_stddev_fields_day(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_stddev_fields_id(ctx, field, obj)
		case "month":
			out.Values[i] = ec._dynamic_supervision_stddev_fields_month(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._dynamic_supervision_stddev_fields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._dynamic_supervision_stddev_fields_spot_check_ratio(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._dynamic_supervision_stddev_fields_spot_check_total_number(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._dynamic_supervision_stddev_fields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._dynamic_supervision_stddev_fields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_stddev_pop_fieldsImplementors = []string{"dynamic_supervision_stddev_pop_fields"}

func (ec *executionContext) _dynamic_supervision_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_stddev_pop_fields")
		case "day":
			out.Values[i] = ec._dynamic_supervision_stddev_pop_fields_day(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_stddev_pop_fields_id(ctx, field, obj)
		case "month":
			out.Values[i] = ec._dynamic_supervision_stddev_pop_fields_month(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._dynamic_supervision_stddev_pop_fields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._dynamic_supervision_stddev_pop_fields_spot_check_ratio(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._dynamic_supervision_stddev_pop_fields_spot_check_total_number(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._dynamic_supervision_stddev_pop_fields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._dynamic_supervision_stddev_pop_fields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_stddev_samp_fieldsImplementors = []string{"dynamic_supervision_stddev_samp_fields"}

func (ec *executionContext) _dynamic_supervision_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_stddev_samp_fields")
		case "day":
			out.Values[i] = ec._dynamic_supervision_stddev_samp_fields_day(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_stddev_samp_fields_id(ctx, field, obj)
		case "month":
			out.Values[i] = ec._dynamic_supervision_stddev_samp_fields_month(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._dynamic_supervision_stddev_samp_fields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._dynamic_supervision_stddev_samp_fields_spot_check_ratio(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._dynamic_supervision_stddev_samp_fields_spot_check_total_number(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._dynamic_supervision_stddev_samp_fields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._dynamic_supervision_stddev_samp_fields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_sum_fieldsImplementors = []string{"dynamic_supervision_sum_fields"}

func (ec *executionContext) _dynamic_supervision_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_sum_fields")
		case "day":
			out.Values[i] = ec._dynamic_supervision_sum_fields_day(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_sum_fields_id(ctx, field, obj)
		case "month":
			out.Values[i] = ec._dynamic_supervision_sum_fields_month(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._dynamic_supervision_sum_fields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._dynamic_supervision_sum_fields_spot_check_ratio(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._dynamic_supervision_sum_fields_spot_check_total_number(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._dynamic_supervision_sum_fields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._dynamic_supervision_sum_fields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_var_pop_fieldsImplementors = []string{"dynamic_supervision_var_pop_fields"}

func (ec *executionContext) _dynamic_supervision_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_var_pop_fields")
		case "day":
			out.Values[i] = ec._dynamic_supervision_var_pop_fields_day(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_var_pop_fields_id(ctx, field, obj)
		case "month":
			out.Values[i] = ec._dynamic_supervision_var_pop_fields_month(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._dynamic_supervision_var_pop_fields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._dynamic_supervision_var_pop_fields_spot_check_ratio(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._dynamic_supervision_var_pop_fields_spot_check_total_number(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._dynamic_supervision_var_pop_fields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._dynamic_supervision_var_pop_fields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_var_samp_fieldsImplementors = []string{"dynamic_supervision_var_samp_fields"}

func (ec *executionContext) _dynamic_supervision_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_var_samp_fields")
		case "day":
			out.Values[i] = ec._dynamic_supervision_var_samp_fields_day(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_var_samp_fields_id(ctx, field, obj)
		case "month":
			out.Values[i] = ec._dynamic_supervision_var_samp_fields_month(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._dynamic_supervision_var_samp_fields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._dynamic_supervision_var_samp_fields_spot_check_ratio(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._dynamic_supervision_var_samp_fields_spot_check_total_number(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._dynamic_supervision_var_samp_fields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._dynamic_supervision_var_samp_fields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dynamic_supervision_variance_fieldsImplementors = []string{"dynamic_supervision_variance_fields"}

func (ec *executionContext) _dynamic_supervision_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.DynamicSupervisionVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dynamic_supervision_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("dynamic_supervision_variance_fields")
		case "day":
			out.Values[i] = ec._dynamic_supervision_variance_fields_day(ctx, field, obj)
		case "id":
			out.Values[i] = ec._dynamic_supervision_variance_fields_id(ctx, field, obj)
		case "month":
			out.Values[i] = ec._dynamic_supervision_variance_fields_month(ctx, field, obj)
		case "spot_check_number":
			out.Values[i] = ec._dynamic_supervision_variance_fields_spot_check_number(ctx, field, obj)
		case "spot_check_ratio":
			out.Values[i] = ec._dynamic_supervision_variance_fields_spot_check_ratio(ctx, field, obj)
		case "spot_check_total_number":
			out.Values[i] = ec._dynamic_supervision_variance_fields_spot_check_total_number(ctx, field, obj)
		case "total_number_vehicle":
			out.Values[i] = ec._dynamic_supervision_variance_fields_total_number_vehicle(ctx, field, obj)
		case "year":
			out.Values[i] = ec._dynamic_supervision_variance_fields_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_jsonb2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_jsonb2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_text2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_text2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNdynamic_spot_check_disposal2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DynamicSpotCheckDisposal) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdynamic_spot_check_disposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposal(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdynamic_spot_check_disposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposal(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposal) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal(ctx, sel, v)
}

func (ec *executionContext) marshalNdynamic_spot_check_disposal_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAggregate(ctx context.Context, sel ast.SelectionSet, v model.DynamicSpotCheckDisposalAggregate) graphql.Marshaler {
	return ec._dynamic_spot_check_disposal_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdynamic_spot_check_disposal_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdynamic_spot_check_disposal_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx context.Context, v interface{}) (model.DynamicSpotCheckDisposalBoolExp, error) {
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_spot_check_disposal_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalConstraint(ctx context.Context, v interface{}) (model.DynamicSpotCheckDisposalConstraint, error) {
	var res model.DynamicSpotCheckDisposalConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdynamic_spot_check_disposal_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalConstraint(ctx context.Context, sel ast.SelectionSet, v model.DynamicSpotCheckDisposalConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdynamic_spot_check_disposal_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInput(ctx context.Context, v interface{}) (model.DynamicSpotCheckDisposalInsertInput, error) {
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_spot_check_disposal_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSpotCheckDisposalInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSpotCheckDisposalInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_spot_check_disposal_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdynamic_spot_check_disposal_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalInsertInput(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalInsertInput, error) {
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_spot_check_disposal_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalOrderBy, error) {
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_spot_check_disposal_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalPkColumnsInput(ctx context.Context, v interface{}) (model.DynamicSpotCheckDisposalPkColumnsInput, error) {
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_spot_check_disposal_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumn(ctx context.Context, v interface{}) (model.DynamicSpotCheckDisposalSelectColumn, error) {
	var res model.DynamicSpotCheckDisposalSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdynamic_spot_check_disposal_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DynamicSpotCheckDisposalSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdynamic_spot_check_disposal_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalUpdateColumn(ctx context.Context, v interface{}) (model.DynamicSpotCheckDisposalUpdateColumn, error) {
	var res model.DynamicSpotCheckDisposalUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdynamic_spot_check_disposal_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DynamicSpotCheckDisposalUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdynamic_spot_check_disposal_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DynamicSpotCheckDisposalUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DynamicSpotCheckDisposalUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_spot_check_disposal_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdynamic_spot_check_disposal_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DynamicSpotCheckDisposalUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdynamic_spot_check_disposal_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdynamic_supervision2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DynamicSupervision) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdynamic_supervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervision(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdynamic_supervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervision(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervision) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._dynamic_supervision(ctx, sel, v)
}

func (ec *executionContext) marshalNdynamic_supervision_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAggregate(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionAggregate) graphql.Marshaler {
	return ec._dynamic_supervision_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdynamic_supervision_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._dynamic_supervision_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdynamic_supervision_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx context.Context, v interface{}) (model.DynamicSupervisionBoolExp, error) {
	res, err := ec.unmarshalInputdynamic_supervision_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_supervision_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionConstraint(ctx context.Context, v interface{}) (model.DynamicSupervisionConstraint, error) {
	var res model.DynamicSupervisionConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdynamic_supervision_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionConstraint(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNdynamic_supervision_detail2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DynamicSupervisionDetail) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdynamic_supervision_detail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNdynamic_supervision_detail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetail(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._dynamic_supervision_detail(ctx, sel, v)
}

func (ec *executionContext) marshalNdynamic_supervision_detail_aggregate2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAggregate(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionDetailAggregate) graphql.Marshaler {
	return ec._dynamic_supervision_detail_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNdynamic_supervision_detail_aggregate2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAggregate(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNdynamic_supervision_detail_bool_exp2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx context.Context, v interface{}) (model.DynamicSupervisionDetailBoolExp, error) {
	res, err := ec.unmarshalInputdynamic_supervision_detail_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_supervision_detail_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailConstraint(ctx context.Context, v interface{}) (model.DynamicSupervisionDetailConstraint, error) {
	var res model.DynamicSupervisionDetailConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdynamic_supervision_detail_constraint2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailConstraint(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionDetailConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdynamic_supervision_detail_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInput(ctx context.Context, v interface{}) (model.DynamicSupervisionDetailInsertInput, error) {
	res, err := ec.unmarshalInputdynamic_supervision_detail_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_supervision_detail_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionDetailInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionDetailInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_supervision_detail_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdynamic_supervision_detail_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailInsertInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailInsertInput, error) {
	res, err := ec.unmarshalInputdynamic_supervision_detail_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_supervision_detail_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailOrderBy, error) {
	res, err := ec.unmarshalInputdynamic_supervision_detail_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_supervision_detail_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailPkColumnsInput(ctx context.Context, v interface{}) (model.DynamicSupervisionDetailPkColumnsInput, error) {
	res, err := ec.unmarshalInputdynamic_supervision_detail_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_supervision_detail_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumn(ctx context.Context, v interface{}) (model.DynamicSupervisionDetailSelectColumn, error) {
	var res model.DynamicSupervisionDetailSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdynamic_supervision_detail_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionDetailSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdynamic_supervision_detail_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailUpdateColumn(ctx context.Context, v interface{}) (model.DynamicSupervisionDetailUpdateColumn, error) {
	var res model.DynamicSupervisionDetailUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdynamic_supervision_detail_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionDetailUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdynamic_supervision_detail_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DynamicSupervisionDetailUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DynamicSupervisionDetailUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_supervision_detail_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdynamic_supervision_detail_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DynamicSupervisionDetailUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdynamic_supervision_detail_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNdynamic_supervision_insert_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInput(ctx context.Context, v interface{}) (model.DynamicSupervisionInsertInput, error) {
	res, err := ec.unmarshalInputdynamic_supervision_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_supervision_insert_input2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_supervision_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNdynamic_supervision_insert_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionInsertInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionInsertInput, error) {
	res, err := ec.unmarshalInputdynamic_supervision_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_supervision_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionOrderBy, error) {
	res, err := ec.unmarshalInputdynamic_supervision_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_supervision_pk_columns_input2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionPkColumnsInput(ctx context.Context, v interface{}) (model.DynamicSupervisionPkColumnsInput, error) {
	res, err := ec.unmarshalInputdynamic_supervision_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNdynamic_supervision_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumn(ctx context.Context, v interface{}) (model.DynamicSupervisionSelectColumn, error) {
	var res model.DynamicSupervisionSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdynamic_supervision_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdynamic_supervision_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionUpdateColumn(ctx context.Context, v interface{}) (model.DynamicSupervisionUpdateColumn, error) {
	var res model.DynamicSupervisionUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNdynamic_supervision_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.DynamicSupervisionUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNdynamic_supervision_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.DynamicSupervisionUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DynamicSupervisionUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_supervision_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNdynamic_supervision_update_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DynamicSupervisionUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdynamic_supervision_update_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNpoint2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNpoint2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := scalar.MarshalTimestamptz(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := scalar.MarshalTimestamptz(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model1.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model1.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model1.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalO_jsonb2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_jsonb2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_jsonb2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_jsonb2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_jsonb2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_jsonb2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalO_text2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_text2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalO_text2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_text2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalO_text2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO_text2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model1.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposal(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal(ctx, sel, v)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalAvgOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx context.Context, v interface{}) ([]*model.DynamicSpotCheckDisposalBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSpotCheckDisposalBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdynamic_spot_check_disposal_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalBoolExp(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalIncInput(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMaxOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMinOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOnConflict(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSpotCheckDisposalOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSpotCheckDisposalOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_spot_check_disposal_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DynamicSpotCheckDisposalSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DynamicSpotCheckDisposalSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_spot_check_disposal_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DynamicSpotCheckDisposalSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdynamic_spot_check_disposal_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSetInput(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalSumOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarPopOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarSampOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_spot_check_disposal_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSpotCheckDisposalVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_spot_check_disposal_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_spot_check_disposal_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSpotCheckDisposalVarianceOrderBy(ctx context.Context, v interface{}) (*model.DynamicSpotCheckDisposalVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_spot_check_disposal_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervision(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervision) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision(ctx, sel, v)
}

func (ec *executionContext) marshalOdynamic_supervision_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdynamic_supervision_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionAvgOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdynamic_supervision_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdynamic_supervision_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdynamic_supervision_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionBoolExp(ctx context.Context, v interface{}) (*model.DynamicSupervisionBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_detail2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetail(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail(ctx, sel, v)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_aggregate_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_avg_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_avg_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailAvgOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_bool_exp2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionDetailBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionDetailBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOdynamic_supervision_detail_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_bool_exp2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailBoolExp(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailIncInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMaxOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMinOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOnConflict(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionDetailOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionDetailOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_supervision_detail_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DynamicSupervisionDetailSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DynamicSupervisionDetailSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_supervision_detail_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdynamic_supervision_detail_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DynamicSupervisionDetailSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdynamic_supervision_detail_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSetInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailSumOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarPopOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarSampOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_detail_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionDetailVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_detail_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_detail_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionDetailVarianceOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionDetailVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_detail_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdynamic_supervision_inc_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionIncInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_max_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_max_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMaxOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_min_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMinFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_min_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMinOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_mutation_response2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_on_conflict2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOnConflict(ctx context.Context, v interface{}) (*model.DynamicSupervisionOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOdynamic_supervision_order_by2ᚕᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderByᚄ(ctx context.Context, v interface{}) ([]*model.DynamicSupervisionOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DynamicSupervisionOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_supervision_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOdynamic_supervision_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.DynamicSupervisionSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.DynamicSupervisionSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNdynamic_supervision_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOdynamic_supervision_select_column2ᚕVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DynamicSupervisionSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNdynamic_supervision_select_column2VehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOdynamic_supervision_set_input2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSetInput(ctx context.Context, v interface{}) (*model.DynamicSupervisionSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_stddev_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_stddev_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_stddev_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_stddev_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevPopOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_stddev_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_stddev_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionStddevSampOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_sum_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSumFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_sum_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionSumOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_var_pop_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_var_pop_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarPopOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_var_samp_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_var_samp_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarSampOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOdynamic_supervision_variance_fields2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.DynamicSupervisionVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._dynamic_supervision_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOdynamic_supervision_variance_order_by2ᚖVehicleSupervisionᚋinternalᚋmodulesᚋdynamic_supervisionᚋgraphᚋmodelᚐDynamicSupervisionVarianceOrderBy(ctx context.Context, v interface{}) (*model.DynamicSupervisionVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputdynamic_supervision_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOnumeric_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model1.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnumeric_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model1.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model1.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model1.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOpoint2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNpoint2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOpoint2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNpoint2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOpoint2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOpoint2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOpoint_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐPointComparisonExp(ctx context.Context, v interface{}) (*model1.PointComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputpoint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, v interface{}) ([]*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*time.Time, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNtimestamptz2ᚖtimeᚐTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOtimestamptz2ᚕᚖtimeᚐTimeᚄ(ctx context.Context, sel ast.SelectionSet, v []*time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNtimestamptz2ᚖtimeᚐTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalar.UnmarshalTimestamptz(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOtimestamptz2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalar.MarshalTimestamptz(*v)
}

func (ec *executionContext) unmarshalOtimestamptz_comparison_exp2ᚖVehicleSupervisionᚋpkgᚋgraphqlᚋmodelᚐTimestamptzComparisonExp(ctx context.Context, v interface{}) (*model1.TimestamptzComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputtimestamptz_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
