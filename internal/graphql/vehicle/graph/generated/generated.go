// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"io"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"lai.com/gqlgen_study/keyVehicleSupervision03/graph/model"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		DeleteVehicleInfo     func(childComplexity int, where model.VehicleInfoBoolExp) int
		DeleteVehicleInfoByPk func(childComplexity int, id int64, vehicleID string) int
		InsertVehicleInfo     func(childComplexity int, objects []*model.VehicleInfoInsertInput, onConflict *model.VehicleInfoOnConflict) int
		InsertVehicleInfoOne  func(childComplexity int, object model.VehicleInfoInsertInput, onConflict *model.VehicleInfoOnConflict) int
		UpdateVehicleInfo     func(childComplexity int, inc *model.VehicleInfoIncInput, set *model.VehicleInfoSetInput, where model.VehicleInfoBoolExp) int
		UpdateVehicleInfoByPk func(childComplexity int, inc *model.VehicleInfoIncInput, set *model.VehicleInfoSetInput, pkColumns model.VehicleInfoPkColumnsInput) int
	}

	Query struct {
		VehicleInfo          func(childComplexity int, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) int
		VehicleInfoAggregate func(childComplexity int, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) int
		VehicleInfoByPk      func(childComplexity int, id int64, vehicleID string) int
	}

	Subscription struct {
		VehicleInfo          func(childComplexity int, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) int
		VehicleInfoAggregate func(childComplexity int, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) int
		VehicleInfoByPk      func(childComplexity int, id int64, vehicleID string) int
	}

	VehicleInfo struct {
		BusinessScope               func(childComplexity int) int
		DepartmentID                func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		Heavy                       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IndustryCategory            func(childComplexity int) int
		IsApplyInstallTerminal      func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckID                 func(childComplexity int) int
		OperatingRoute              func(childComplexity int) int
		OperatingState              func(childComplexity int) int
		OperatingType               func(childComplexity int) int
		OperatingVehicleID          func(childComplexity int) int
		Seats                       func(childComplexity int) int
		TerminalID                  func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehicleType                 func(childComplexity int) int
	}

	VehicleInfoAggregate struct {
		Aggregate func(childComplexity int) int
		Nodes     func(childComplexity int) int
	}

	VehicleInfoAggregateFields struct {
		Avg        func(childComplexity int) int
		Count      func(childComplexity int, columns []model.VehicleInfoSelectColumn, distinct *bool) int
		Max        func(childComplexity int) int
		Min        func(childComplexity int) int
		Stddev     func(childComplexity int) int
		StddevPop  func(childComplexity int) int
		StddevSamp func(childComplexity int) int
		Sum        func(childComplexity int) int
		VarPop     func(childComplexity int) int
		VarSamp    func(childComplexity int) int
		Variance   func(childComplexity int) int
	}

	VehicleInfoAvgFields struct {
		BusinessScope      func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoMaxFields struct {
		BusinessScope               func(childComplexity int) int
		DepartmentID                func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		Heavy                       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IndustryCategory            func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckID                 func(childComplexity int) int
		OperatingRoute              func(childComplexity int) int
		OperatingState              func(childComplexity int) int
		OperatingType               func(childComplexity int) int
		OperatingVehicleID          func(childComplexity int) int
		RoadTransportLicenseNumber  func(childComplexity int) int
		Seats                       func(childComplexity int) int
		TerminalID                  func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehicleType                 func(childComplexity int) int
	}

	VehicleInfoMinFields struct {
		BusinessScope               func(childComplexity int) int
		DepartmentID                func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		Heavy                       func(childComplexity int) int
		ID                          func(childComplexity int) int
		IndustryCategory            func(childComplexity int) int
		LicensePlateColor           func(childComplexity int) int
		LicensePlateNumber          func(childComplexity int) int
		LicensePlateType            func(childComplexity int) int
		MuckTruckID                 func(childComplexity int) int
		OperatingRoute              func(childComplexity int) int
		OperatingState              func(childComplexity int) int
		OperatingType               func(childComplexity int) int
		OperatingVehicleID          func(childComplexity int) int
		RoadTransportLicenseNumber  func(childComplexity int) int
		Seats                       func(childComplexity int) int
		TerminalID                  func(childComplexity int) int
		VehicleID                   func(childComplexity int) int
		VehicleIdentificationNumber func(childComplexity int) int
		VehicleType                 func(childComplexity int) int
	}

	VehicleInfoMutationResponse struct {
		AffectedRows func(childComplexity int) int
		Returning    func(childComplexity int) int
	}

	VehicleInfoStddevFields struct {
		BusinessScope      func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoStddevPopFields struct {
		BusinessScope      func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoStddevSampFields struct {
		BusinessScope      func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoSumFields struct {
		BusinessScope      func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoVarPopFields struct {
		BusinessScope      func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoVarSampFields struct {
		BusinessScope      func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}

	VehicleInfoVarianceFields struct {
		BusinessScope      func(childComplexity int) int
		Heavy              func(childComplexity int) int
		ID                 func(childComplexity int) int
		IndustryCategory   func(childComplexity int) int
		LicensePlateColor  func(childComplexity int) int
		LicensePlateType   func(childComplexity int) int
		MuckTruckID        func(childComplexity int) int
		OperatingState     func(childComplexity int) int
		OperatingType      func(childComplexity int) int
		OperatingVehicleID func(childComplexity int) int
		Seats              func(childComplexity int) int
		VehicleType        func(childComplexity int) int
	}
}

type MutationResolver interface {
	DeleteVehicleInfo(ctx context.Context, where model.VehicleInfoBoolExp) (*model.VehicleInfoMutationResponse, error)
	DeleteVehicleInfoByPk(ctx context.Context, id int64, vehicleID string) (*model.VehicleInfo, error)
	InsertVehicleInfo(ctx context.Context, objects []*model.VehicleInfoInsertInput, onConflict *model.VehicleInfoOnConflict) (*model.VehicleInfoMutationResponse, error)
	InsertVehicleInfoOne(ctx context.Context, object model.VehicleInfoInsertInput, onConflict *model.VehicleInfoOnConflict) (*model.VehicleInfo, error)
	UpdateVehicleInfo(ctx context.Context, inc *model.VehicleInfoIncInput, set *model.VehicleInfoSetInput, where model.VehicleInfoBoolExp) (*model.VehicleInfoMutationResponse, error)
	UpdateVehicleInfoByPk(ctx context.Context, inc *model.VehicleInfoIncInput, set *model.VehicleInfoSetInput, pkColumns model.VehicleInfoPkColumnsInput) (*model.VehicleInfo, error)
}
type QueryResolver interface {
	VehicleInfo(ctx context.Context, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) ([]*model.VehicleInfo, error)
	VehicleInfoAggregate(ctx context.Context, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) (*model.VehicleInfoAggregate, error)
	VehicleInfoByPk(ctx context.Context, id int64, vehicleID string) (*model.VehicleInfo, error)
}
type SubscriptionResolver interface {
	VehicleInfo(ctx context.Context, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) (<-chan []*model.VehicleInfo, error)
	VehicleInfoAggregate(ctx context.Context, distinctOn []model.VehicleInfoSelectColumn, limit *int, offset *int, orderBy []*model.VehicleInfoOrderBy, where *model.VehicleInfoBoolExp) (<-chan *model.VehicleInfoAggregate, error)
	VehicleInfoByPk(ctx context.Context, id int64, vehicleID string) (<-chan *model.VehicleInfo, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.delete_vehicle_info":
		if e.complexity.Mutation.DeleteVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleInfo(childComplexity, args["where"].(model.VehicleInfoBoolExp)), true

	case "Mutation.delete_vehicle_info_by_pk":
		if e.complexity.Mutation.DeleteVehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_delete_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteVehicleInfoByPk(childComplexity, args["id"].(int64), args["vehicle_id"].(string)), true

	case "Mutation.insert_vehicle_info":
		if e.complexity.Mutation.InsertVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleInfo(childComplexity, args["objects"].([]*model.VehicleInfoInsertInput), args["on_conflict"].(*model.VehicleInfoOnConflict)), true

	case "Mutation.insert_vehicle_info_one":
		if e.complexity.Mutation.InsertVehicleInfoOne == nil {
			break
		}

		args, err := ec.field_Mutation_insert_vehicle_info_one_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InsertVehicleInfoOne(childComplexity, args["object"].(model.VehicleInfoInsertInput), args["on_conflict"].(*model.VehicleInfoOnConflict)), true

	case "Mutation.update_vehicle_info":
		if e.complexity.Mutation.UpdateVehicleInfo == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleInfo(childComplexity, args["_inc"].(*model.VehicleInfoIncInput), args["_set"].(*model.VehicleInfoSetInput), args["where"].(model.VehicleInfoBoolExp)), true

	case "Mutation.update_vehicle_info_by_pk":
		if e.complexity.Mutation.UpdateVehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Mutation_update_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicleInfoByPk(childComplexity, args["_inc"].(*model.VehicleInfoIncInput), args["_set"].(*model.VehicleInfoSetInput), args["pk_columns"].(model.VehicleInfoPkColumnsInput)), true

	case "Query.vehicle_info":
		if e.complexity.Query.VehicleInfo == nil {
			break
		}

		args, err := ec.field_Query_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleInfo(childComplexity, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp)), true

	case "Query.vehicle_info_aggregate":
		if e.complexity.Query.VehicleInfoAggregate == nil {
			break
		}

		args, err := ec.field_Query_vehicle_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleInfoAggregate(childComplexity, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp)), true

	case "Query.vehicle_info_by_pk":
		if e.complexity.Query.VehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Query_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VehicleInfoByPk(childComplexity, args["id"].(int64), args["vehicle_id"].(string)), true

	case "Subscription.vehicle_info":
		if e.complexity.Subscription.VehicleInfo == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_info_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleInfo(childComplexity, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp)), true

	case "Subscription.vehicle_info_aggregate":
		if e.complexity.Subscription.VehicleInfoAggregate == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_info_aggregate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleInfoAggregate(childComplexity, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp)), true

	case "Subscription.vehicle_info_by_pk":
		if e.complexity.Subscription.VehicleInfoByPk == nil {
			break
		}

		args, err := ec.field_Subscription_vehicle_info_by_pk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleInfoByPk(childComplexity, args["id"].(int64), args["vehicle_id"].(string)), true

	case "vehicle_info.business_scope":
		if e.complexity.VehicleInfo.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfo.BusinessScope(childComplexity), true

	case "vehicle_info.department_id":
		if e.complexity.VehicleInfo.DepartmentID == nil {
			break
		}

		return e.complexity.VehicleInfo.DepartmentID(childComplexity), true

	case "vehicle_info.enterprise_id":
		if e.complexity.VehicleInfo.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleInfo.EnterpriseID(childComplexity), true

	case "vehicle_info.heavy":
		if e.complexity.VehicleInfo.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfo.Heavy(childComplexity), true

	case "vehicle_info.id":
		if e.complexity.VehicleInfo.ID == nil {
			break
		}

		return e.complexity.VehicleInfo.ID(childComplexity), true

	case "vehicle_info.industry_category":
		if e.complexity.VehicleInfo.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfo.IndustryCategory(childComplexity), true

	case "vehicle_info.is_apply_install_terminal":
		if e.complexity.VehicleInfo.IsApplyInstallTerminal == nil {
			break
		}

		return e.complexity.VehicleInfo.IsApplyInstallTerminal(childComplexity), true

	case "vehicle_info.license_plate_color":
		if e.complexity.VehicleInfo.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfo.LicensePlateColor(childComplexity), true

	case "vehicle_info.license_plate_number":
		if e.complexity.VehicleInfo.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleInfo.LicensePlateNumber(childComplexity), true

	case "vehicle_info.license_plate_type":
		if e.complexity.VehicleInfo.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfo.LicensePlateType(childComplexity), true

	case "vehicle_info.muck_truck_id":
		if e.complexity.VehicleInfo.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfo.MuckTruckID(childComplexity), true

	case "vehicle_info.operating_route":
		if e.complexity.VehicleInfo.OperatingRoute == nil {
			break
		}

		return e.complexity.VehicleInfo.OperatingRoute(childComplexity), true

	case "vehicle_info.operating_state":
		if e.complexity.VehicleInfo.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfo.OperatingState(childComplexity), true

	case "vehicle_info.operating_type":
		if e.complexity.VehicleInfo.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfo.OperatingType(childComplexity), true

	case "vehicle_info.operating_vehicle_id":
		if e.complexity.VehicleInfo.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfo.OperatingVehicleID(childComplexity), true

	case "vehicle_info.seats":
		if e.complexity.VehicleInfo.Seats == nil {
			break
		}

		return e.complexity.VehicleInfo.Seats(childComplexity), true

	case "vehicle_info.terminal_id":
		if e.complexity.VehicleInfo.TerminalID == nil {
			break
		}

		return e.complexity.VehicleInfo.TerminalID(childComplexity), true

	case "vehicle_info.vehicle_id":
		if e.complexity.VehicleInfo.VehicleID == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleID(childComplexity), true

	case "vehicle_info.vehicle_identification_number":
		if e.complexity.VehicleInfo.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleIdentificationNumber(childComplexity), true

	case "vehicle_info.vehicle_type":
		if e.complexity.VehicleInfo.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfo.VehicleType(childComplexity), true

	case "vehicle_info_aggregate.aggregate":
		if e.complexity.VehicleInfoAggregate.Aggregate == nil {
			break
		}

		return e.complexity.VehicleInfoAggregate.Aggregate(childComplexity), true

	case "vehicle_info_aggregate.nodes":
		if e.complexity.VehicleInfoAggregate.Nodes == nil {
			break
		}

		return e.complexity.VehicleInfoAggregate.Nodes(childComplexity), true

	case "vehicle_info_aggregate_fields.avg":
		if e.complexity.VehicleInfoAggregateFields.Avg == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Avg(childComplexity), true

	case "vehicle_info_aggregate_fields.count":
		if e.complexity.VehicleInfoAggregateFields.Count == nil {
			break
		}

		args, err := ec.field_vehicle_info_aggregate_fields_count_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.VehicleInfoAggregateFields.Count(childComplexity, args["columns"].([]model.VehicleInfoSelectColumn), args["distinct"].(*bool)), true

	case "vehicle_info_aggregate_fields.max":
		if e.complexity.VehicleInfoAggregateFields.Max == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Max(childComplexity), true

	case "vehicle_info_aggregate_fields.min":
		if e.complexity.VehicleInfoAggregateFields.Min == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Min(childComplexity), true

	case "vehicle_info_aggregate_fields.stddev":
		if e.complexity.VehicleInfoAggregateFields.Stddev == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Stddev(childComplexity), true

	case "vehicle_info_aggregate_fields.stddev_pop":
		if e.complexity.VehicleInfoAggregateFields.StddevPop == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.StddevPop(childComplexity), true

	case "vehicle_info_aggregate_fields.stddev_samp":
		if e.complexity.VehicleInfoAggregateFields.StddevSamp == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.StddevSamp(childComplexity), true

	case "vehicle_info_aggregate_fields.sum":
		if e.complexity.VehicleInfoAggregateFields.Sum == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Sum(childComplexity), true

	case "vehicle_info_aggregate_fields.var_pop":
		if e.complexity.VehicleInfoAggregateFields.VarPop == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.VarPop(childComplexity), true

	case "vehicle_info_aggregate_fields.var_samp":
		if e.complexity.VehicleInfoAggregateFields.VarSamp == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.VarSamp(childComplexity), true

	case "vehicle_info_aggregate_fields.variance":
		if e.complexity.VehicleInfoAggregateFields.Variance == nil {
			break
		}

		return e.complexity.VehicleInfoAggregateFields.Variance(childComplexity), true

	case "vehicle_info_avg_fields.business_scope":
		if e.complexity.VehicleInfoAvgFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.BusinessScope(childComplexity), true

	case "vehicle_info_avg_fields.heavy":
		if e.complexity.VehicleInfoAvgFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.Heavy(childComplexity), true

	case "vehicle_info_avg_fields.id":
		if e.complexity.VehicleInfoAvgFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.ID(childComplexity), true

	case "vehicle_info_avg_fields.industry_category":
		if e.complexity.VehicleInfoAvgFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.IndustryCategory(childComplexity), true

	case "vehicle_info_avg_fields.license_plate_color":
		if e.complexity.VehicleInfoAvgFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_avg_fields.license_plate_type":
		if e.complexity.VehicleInfoAvgFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.LicensePlateType(childComplexity), true

	case "vehicle_info_avg_fields.muck_truck_id":
		if e.complexity.VehicleInfoAvgFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.MuckTruckID(childComplexity), true

	case "vehicle_info_avg_fields.operating_state":
		if e.complexity.VehicleInfoAvgFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.OperatingState(childComplexity), true

	case "vehicle_info_avg_fields.operating_type":
		if e.complexity.VehicleInfoAvgFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.OperatingType(childComplexity), true

	case "vehicle_info_avg_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoAvgFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_avg_fields.seats":
		if e.complexity.VehicleInfoAvgFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.Seats(childComplexity), true

	case "vehicle_info_avg_fields.vehicle_type":
		if e.complexity.VehicleInfoAvgFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoAvgFields.VehicleType(childComplexity), true

	case "vehicle_info_max_fields.business_scope":
		if e.complexity.VehicleInfoMaxFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.BusinessScope(childComplexity), true

	case "vehicle_info_max_fields.department_id":
		if e.complexity.VehicleInfoMaxFields.DepartmentID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.DepartmentID(childComplexity), true

	case "vehicle_info_max_fields.enterprise_id":
		if e.complexity.VehicleInfoMaxFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.EnterpriseID(childComplexity), true

	case "vehicle_info_max_fields.heavy":
		if e.complexity.VehicleInfoMaxFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.Heavy(childComplexity), true

	case "vehicle_info_max_fields.id":
		if e.complexity.VehicleInfoMaxFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.ID(childComplexity), true

	case "vehicle_info_max_fields.industry_category":
		if e.complexity.VehicleInfoMaxFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.IndustryCategory(childComplexity), true

	case "vehicle_info_max_fields.license_plate_color":
		if e.complexity.VehicleInfoMaxFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_max_fields.license_plate_number":
		if e.complexity.VehicleInfoMaxFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.LicensePlateNumber(childComplexity), true

	case "vehicle_info_max_fields.license_plate_type":
		if e.complexity.VehicleInfoMaxFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.LicensePlateType(childComplexity), true

	case "vehicle_info_max_fields.muck_truck_id":
		if e.complexity.VehicleInfoMaxFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.MuckTruckID(childComplexity), true

	case "vehicle_info_max_fields.operating_route":
		if e.complexity.VehicleInfoMaxFields.OperatingRoute == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.OperatingRoute(childComplexity), true

	case "vehicle_info_max_fields.operating_state":
		if e.complexity.VehicleInfoMaxFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.OperatingState(childComplexity), true

	case "vehicle_info_max_fields.operating_type":
		if e.complexity.VehicleInfoMaxFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.OperatingType(childComplexity), true

	case "vehicle_info_max_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoMaxFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_max_fields.road_transport_license_number":
		if e.complexity.VehicleInfoMaxFields.RoadTransportLicenseNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.RoadTransportLicenseNumber(childComplexity), true

	case "vehicle_info_max_fields.seats":
		if e.complexity.VehicleInfoMaxFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.Seats(childComplexity), true

	case "vehicle_info_max_fields.terminal_id":
		if e.complexity.VehicleInfoMaxFields.TerminalID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.TerminalID(childComplexity), true

	case "vehicle_info_max_fields.vehicle_id":
		if e.complexity.VehicleInfoMaxFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleID(childComplexity), true

	case "vehicle_info_max_fields.vehicle_identification_number":
		if e.complexity.VehicleInfoMaxFields.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleIdentificationNumber(childComplexity), true

	case "vehicle_info_max_fields.vehicle_type":
		if e.complexity.VehicleInfoMaxFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoMaxFields.VehicleType(childComplexity), true

	case "vehicle_info_min_fields.business_scope":
		if e.complexity.VehicleInfoMinFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.BusinessScope(childComplexity), true

	case "vehicle_info_min_fields.department_id":
		if e.complexity.VehicleInfoMinFields.DepartmentID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.DepartmentID(childComplexity), true

	case "vehicle_info_min_fields.enterprise_id":
		if e.complexity.VehicleInfoMinFields.EnterpriseID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.EnterpriseID(childComplexity), true

	case "vehicle_info_min_fields.heavy":
		if e.complexity.VehicleInfoMinFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.Heavy(childComplexity), true

	case "vehicle_info_min_fields.id":
		if e.complexity.VehicleInfoMinFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.ID(childComplexity), true

	case "vehicle_info_min_fields.industry_category":
		if e.complexity.VehicleInfoMinFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.IndustryCategory(childComplexity), true

	case "vehicle_info_min_fields.license_plate_color":
		if e.complexity.VehicleInfoMinFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_min_fields.license_plate_number":
		if e.complexity.VehicleInfoMinFields.LicensePlateNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.LicensePlateNumber(childComplexity), true

	case "vehicle_info_min_fields.license_plate_type":
		if e.complexity.VehicleInfoMinFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.LicensePlateType(childComplexity), true

	case "vehicle_info_min_fields.muck_truck_id":
		if e.complexity.VehicleInfoMinFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.MuckTruckID(childComplexity), true

	case "vehicle_info_min_fields.operating_route":
		if e.complexity.VehicleInfoMinFields.OperatingRoute == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.OperatingRoute(childComplexity), true

	case "vehicle_info_min_fields.operating_state":
		if e.complexity.VehicleInfoMinFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.OperatingState(childComplexity), true

	case "vehicle_info_min_fields.operating_type":
		if e.complexity.VehicleInfoMinFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.OperatingType(childComplexity), true

	case "vehicle_info_min_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoMinFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_min_fields.road_transport_license_number":
		if e.complexity.VehicleInfoMinFields.RoadTransportLicenseNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.RoadTransportLicenseNumber(childComplexity), true

	case "vehicle_info_min_fields.seats":
		if e.complexity.VehicleInfoMinFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.Seats(childComplexity), true

	case "vehicle_info_min_fields.terminal_id":
		if e.complexity.VehicleInfoMinFields.TerminalID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.TerminalID(childComplexity), true

	case "vehicle_info_min_fields.vehicle_id":
		if e.complexity.VehicleInfoMinFields.VehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleID(childComplexity), true

	case "vehicle_info_min_fields.vehicle_identification_number":
		if e.complexity.VehicleInfoMinFields.VehicleIdentificationNumber == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleIdentificationNumber(childComplexity), true

	case "vehicle_info_min_fields.vehicle_type":
		if e.complexity.VehicleInfoMinFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoMinFields.VehicleType(childComplexity), true

	case "vehicle_info_mutation_response.affected_rows":
		if e.complexity.VehicleInfoMutationResponse.AffectedRows == nil {
			break
		}

		return e.complexity.VehicleInfoMutationResponse.AffectedRows(childComplexity), true

	case "vehicle_info_mutation_response.returning":
		if e.complexity.VehicleInfoMutationResponse.Returning == nil {
			break
		}

		return e.complexity.VehicleInfoMutationResponse.Returning(childComplexity), true

	case "vehicle_info_stddev_fields.business_scope":
		if e.complexity.VehicleInfoStddevFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.BusinessScope(childComplexity), true

	case "vehicle_info_stddev_fields.heavy":
		if e.complexity.VehicleInfoStddevFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.Heavy(childComplexity), true

	case "vehicle_info_stddev_fields.id":
		if e.complexity.VehicleInfoStddevFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.ID(childComplexity), true

	case "vehicle_info_stddev_fields.industry_category":
		if e.complexity.VehicleInfoStddevFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.IndustryCategory(childComplexity), true

	case "vehicle_info_stddev_fields.license_plate_color":
		if e.complexity.VehicleInfoStddevFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_stddev_fields.license_plate_type":
		if e.complexity.VehicleInfoStddevFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.LicensePlateType(childComplexity), true

	case "vehicle_info_stddev_fields.muck_truck_id":
		if e.complexity.VehicleInfoStddevFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.MuckTruckID(childComplexity), true

	case "vehicle_info_stddev_fields.operating_state":
		if e.complexity.VehicleInfoStddevFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.OperatingState(childComplexity), true

	case "vehicle_info_stddev_fields.operating_type":
		if e.complexity.VehicleInfoStddevFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.OperatingType(childComplexity), true

	case "vehicle_info_stddev_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoStddevFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_stddev_fields.seats":
		if e.complexity.VehicleInfoStddevFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.Seats(childComplexity), true

	case "vehicle_info_stddev_fields.vehicle_type":
		if e.complexity.VehicleInfoStddevFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevFields.VehicleType(childComplexity), true

	case "vehicle_info_stddev_pop_fields.business_scope":
		if e.complexity.VehicleInfoStddevPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.BusinessScope(childComplexity), true

	case "vehicle_info_stddev_pop_fields.heavy":
		if e.complexity.VehicleInfoStddevPopFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.Heavy(childComplexity), true

	case "vehicle_info_stddev_pop_fields.id":
		if e.complexity.VehicleInfoStddevPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.ID(childComplexity), true

	case "vehicle_info_stddev_pop_fields.industry_category":
		if e.complexity.VehicleInfoStddevPopFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.IndustryCategory(childComplexity), true

	case "vehicle_info_stddev_pop_fields.license_plate_color":
		if e.complexity.VehicleInfoStddevPopFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_stddev_pop_fields.license_plate_type":
		if e.complexity.VehicleInfoStddevPopFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.LicensePlateType(childComplexity), true

	case "vehicle_info_stddev_pop_fields.muck_truck_id":
		if e.complexity.VehicleInfoStddevPopFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.MuckTruckID(childComplexity), true

	case "vehicle_info_stddev_pop_fields.operating_state":
		if e.complexity.VehicleInfoStddevPopFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.OperatingState(childComplexity), true

	case "vehicle_info_stddev_pop_fields.operating_type":
		if e.complexity.VehicleInfoStddevPopFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.OperatingType(childComplexity), true

	case "vehicle_info_stddev_pop_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoStddevPopFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_stddev_pop_fields.seats":
		if e.complexity.VehicleInfoStddevPopFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.Seats(childComplexity), true

	case "vehicle_info_stddev_pop_fields.vehicle_type":
		if e.complexity.VehicleInfoStddevPopFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevPopFields.VehicleType(childComplexity), true

	case "vehicle_info_stddev_samp_fields.business_scope":
		if e.complexity.VehicleInfoStddevSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.BusinessScope(childComplexity), true

	case "vehicle_info_stddev_samp_fields.heavy":
		if e.complexity.VehicleInfoStddevSampFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.Heavy(childComplexity), true

	case "vehicle_info_stddev_samp_fields.id":
		if e.complexity.VehicleInfoStddevSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.ID(childComplexity), true

	case "vehicle_info_stddev_samp_fields.industry_category":
		if e.complexity.VehicleInfoStddevSampFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.IndustryCategory(childComplexity), true

	case "vehicle_info_stddev_samp_fields.license_plate_color":
		if e.complexity.VehicleInfoStddevSampFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_stddev_samp_fields.license_plate_type":
		if e.complexity.VehicleInfoStddevSampFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.LicensePlateType(childComplexity), true

	case "vehicle_info_stddev_samp_fields.muck_truck_id":
		if e.complexity.VehicleInfoStddevSampFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.MuckTruckID(childComplexity), true

	case "vehicle_info_stddev_samp_fields.operating_state":
		if e.complexity.VehicleInfoStddevSampFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.OperatingState(childComplexity), true

	case "vehicle_info_stddev_samp_fields.operating_type":
		if e.complexity.VehicleInfoStddevSampFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.OperatingType(childComplexity), true

	case "vehicle_info_stddev_samp_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoStddevSampFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_stddev_samp_fields.seats":
		if e.complexity.VehicleInfoStddevSampFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.Seats(childComplexity), true

	case "vehicle_info_stddev_samp_fields.vehicle_type":
		if e.complexity.VehicleInfoStddevSampFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoStddevSampFields.VehicleType(childComplexity), true

	case "vehicle_info_sum_fields.business_scope":
		if e.complexity.VehicleInfoSumFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.BusinessScope(childComplexity), true

	case "vehicle_info_sum_fields.heavy":
		if e.complexity.VehicleInfoSumFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.Heavy(childComplexity), true

	case "vehicle_info_sum_fields.id":
		if e.complexity.VehicleInfoSumFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.ID(childComplexity), true

	case "vehicle_info_sum_fields.industry_category":
		if e.complexity.VehicleInfoSumFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.IndustryCategory(childComplexity), true

	case "vehicle_info_sum_fields.license_plate_color":
		if e.complexity.VehicleInfoSumFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_sum_fields.license_plate_type":
		if e.complexity.VehicleInfoSumFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.LicensePlateType(childComplexity), true

	case "vehicle_info_sum_fields.muck_truck_id":
		if e.complexity.VehicleInfoSumFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.MuckTruckID(childComplexity), true

	case "vehicle_info_sum_fields.operating_state":
		if e.complexity.VehicleInfoSumFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.OperatingState(childComplexity), true

	case "vehicle_info_sum_fields.operating_type":
		if e.complexity.VehicleInfoSumFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.OperatingType(childComplexity), true

	case "vehicle_info_sum_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoSumFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_sum_fields.seats":
		if e.complexity.VehicleInfoSumFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.Seats(childComplexity), true

	case "vehicle_info_sum_fields.vehicle_type":
		if e.complexity.VehicleInfoSumFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoSumFields.VehicleType(childComplexity), true

	case "vehicle_info_var_pop_fields.business_scope":
		if e.complexity.VehicleInfoVarPopFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.BusinessScope(childComplexity), true

	case "vehicle_info_var_pop_fields.heavy":
		if e.complexity.VehicleInfoVarPopFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.Heavy(childComplexity), true

	case "vehicle_info_var_pop_fields.id":
		if e.complexity.VehicleInfoVarPopFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.ID(childComplexity), true

	case "vehicle_info_var_pop_fields.industry_category":
		if e.complexity.VehicleInfoVarPopFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.IndustryCategory(childComplexity), true

	case "vehicle_info_var_pop_fields.license_plate_color":
		if e.complexity.VehicleInfoVarPopFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_var_pop_fields.license_plate_type":
		if e.complexity.VehicleInfoVarPopFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.LicensePlateType(childComplexity), true

	case "vehicle_info_var_pop_fields.muck_truck_id":
		if e.complexity.VehicleInfoVarPopFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.MuckTruckID(childComplexity), true

	case "vehicle_info_var_pop_fields.operating_state":
		if e.complexity.VehicleInfoVarPopFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.OperatingState(childComplexity), true

	case "vehicle_info_var_pop_fields.operating_type":
		if e.complexity.VehicleInfoVarPopFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.OperatingType(childComplexity), true

	case "vehicle_info_var_pop_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoVarPopFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_var_pop_fields.seats":
		if e.complexity.VehicleInfoVarPopFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.Seats(childComplexity), true

	case "vehicle_info_var_pop_fields.vehicle_type":
		if e.complexity.VehicleInfoVarPopFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoVarPopFields.VehicleType(childComplexity), true

	case "vehicle_info_var_samp_fields.business_scope":
		if e.complexity.VehicleInfoVarSampFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.BusinessScope(childComplexity), true

	case "vehicle_info_var_samp_fields.heavy":
		if e.complexity.VehicleInfoVarSampFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.Heavy(childComplexity), true

	case "vehicle_info_var_samp_fields.id":
		if e.complexity.VehicleInfoVarSampFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.ID(childComplexity), true

	case "vehicle_info_var_samp_fields.industry_category":
		if e.complexity.VehicleInfoVarSampFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.IndustryCategory(childComplexity), true

	case "vehicle_info_var_samp_fields.license_plate_color":
		if e.complexity.VehicleInfoVarSampFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_var_samp_fields.license_plate_type":
		if e.complexity.VehicleInfoVarSampFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.LicensePlateType(childComplexity), true

	case "vehicle_info_var_samp_fields.muck_truck_id":
		if e.complexity.VehicleInfoVarSampFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.MuckTruckID(childComplexity), true

	case "vehicle_info_var_samp_fields.operating_state":
		if e.complexity.VehicleInfoVarSampFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.OperatingState(childComplexity), true

	case "vehicle_info_var_samp_fields.operating_type":
		if e.complexity.VehicleInfoVarSampFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.OperatingType(childComplexity), true

	case "vehicle_info_var_samp_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoVarSampFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_var_samp_fields.seats":
		if e.complexity.VehicleInfoVarSampFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.Seats(childComplexity), true

	case "vehicle_info_var_samp_fields.vehicle_type":
		if e.complexity.VehicleInfoVarSampFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoVarSampFields.VehicleType(childComplexity), true

	case "vehicle_info_variance_fields.business_scope":
		if e.complexity.VehicleInfoVarianceFields.BusinessScope == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.BusinessScope(childComplexity), true

	case "vehicle_info_variance_fields.heavy":
		if e.complexity.VehicleInfoVarianceFields.Heavy == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.Heavy(childComplexity), true

	case "vehicle_info_variance_fields.id":
		if e.complexity.VehicleInfoVarianceFields.ID == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.ID(childComplexity), true

	case "vehicle_info_variance_fields.industry_category":
		if e.complexity.VehicleInfoVarianceFields.IndustryCategory == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.IndustryCategory(childComplexity), true

	case "vehicle_info_variance_fields.license_plate_color":
		if e.complexity.VehicleInfoVarianceFields.LicensePlateColor == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.LicensePlateColor(childComplexity), true

	case "vehicle_info_variance_fields.license_plate_type":
		if e.complexity.VehicleInfoVarianceFields.LicensePlateType == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.LicensePlateType(childComplexity), true

	case "vehicle_info_variance_fields.muck_truck_id":
		if e.complexity.VehicleInfoVarianceFields.MuckTruckID == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.MuckTruckID(childComplexity), true

	case "vehicle_info_variance_fields.operating_state":
		if e.complexity.VehicleInfoVarianceFields.OperatingState == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.OperatingState(childComplexity), true

	case "vehicle_info_variance_fields.operating_type":
		if e.complexity.VehicleInfoVarianceFields.OperatingType == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.OperatingType(childComplexity), true

	case "vehicle_info_variance_fields.operating_vehicle_id":
		if e.complexity.VehicleInfoVarianceFields.OperatingVehicleID == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.OperatingVehicleID(childComplexity), true

	case "vehicle_info_variance_fields.seats":
		if e.complexity.VehicleInfoVarianceFields.Seats == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.Seats(childComplexity), true

	case "vehicle_info_variance_fields.vehicle_type":
		if e.complexity.VehicleInfoVarianceFields.VehicleType == nil {
			break
		}

		return e.complexity.VehicleInfoVarianceFields.VehicleType(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/schema.graphqls", Input: `#schema {
#    query: Query
#    mutation: Mutation
#    subscription: Subscription
#}

scalar bigint

input bigint_comparison_exp {
    _eq: bigint
    _gt: bigint
    _gte: bigint
    _in: [bigint!]
    _is_null: Boolean
    _lt: bigint
    _lte: bigint
    _neq: bigint
    _nin: [bigint!]
}

input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

type Mutation {
    delete_vehicle_info(
        where: vehicle_info_bool_exp!
    ): vehicle_info_mutation_response
    delete_vehicle_info_by_pk(
        id: bigint!
        vehicle_id: String!
    ): vehicle_info
    insert_vehicle_info(
        objects: [vehicle_info_insert_input!]!
        on_conflict: vehicle_info_on_conflict
    ): vehicle_info_mutation_response
    insert_vehicle_info_one(
        object: vehicle_info_insert_input!
        on_conflict: vehicle_info_on_conflict
    ): vehicle_info
    update_vehicle_info(
        _inc: vehicle_info_inc_input
        _set: vehicle_info_set_input
        where: vehicle_info_bool_exp!
    ): vehicle_info_mutation_response
    update_vehicle_info_by_pk(
        _inc: vehicle_info_inc_input
        _set: vehicle_info_set_input
        pk_columns: vehicle_info_pk_columns_input!
    ): vehicle_info
}

scalar numeric

input numeric_comparison_exp {
    _eq: numeric
    _gt: numeric
    _gte: numeric
    _in: [numeric!]
    _is_null: Boolean
    _lt: numeric
    _lte: numeric
    _neq: numeric
    _nin: [numeric!]
}

enum order_by {
    asc
    asc_nulls_first
    asc_nulls_last
    desc
    desc_nulls_first
    desc_nulls_last
}

type Query {
    vehicle_info(
        distinct_on: [vehicle_info_select_column!]
        limit: Int
        offset: Int
        order_by: [vehicle_info_order_by!]
        where: vehicle_info_bool_exp
    ): [vehicle_info!]!
    vehicle_info_aggregate(
        distinct_on: [vehicle_info_select_column!]
        limit: Int
        offset: Int
        order_by: [vehicle_info_order_by!]
        where: vehicle_info_bool_exp
    ): vehicle_info_aggregate!
    vehicle_info_by_pk(
        id: bigint!
        vehicle_id: String!
    ): vehicle_info
}

input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

type Subscription {
    vehicle_info(
        distinct_on: [vehicle_info_select_column!]
        limit: Int
        offset: Int
        order_by: [vehicle_info_order_by!]
        where: vehicle_info_bool_exp
    ): [vehicle_info!]!
    vehicle_info_aggregate(
        distinct_on: [vehicle_info_select_column!]
        limit: Int
        offset: Int
        order_by: [vehicle_info_order_by!]
        where: vehicle_info_bool_exp
    ): vehicle_info_aggregate!
    vehicle_info_by_pk(
        id: bigint!
        vehicle_id: String!
    ): vehicle_info
}

type vehicle_info {
    business_scope: Int
    department_id: String
    enterprise_id: String
    heavy: numeric
    id: bigint!
    industry_category: Int
    is_apply_install_terminal: Boolean
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint!
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint!
    seats: Int
    terminal_id: String
    vehicle_id: String!
    vehicle_identification_number: String
    vehicle_type: Int
}

type vehicle_info_aggregate {
    aggregate: vehicle_info_aggregate_fields
    nodes: [vehicle_info!]!
}

type vehicle_info_aggregate_fields {
    avg: vehicle_info_avg_fields
    count(columns: [vehicle_info_select_column!], distinct: Boolean): Int
    max: vehicle_info_max_fields
    min: vehicle_info_min_fields
    stddev: vehicle_info_stddev_fields
    stddev_pop: vehicle_info_stddev_pop_fields
    stddev_samp: vehicle_info_stddev_samp_fields
    sum: vehicle_info_sum_fields
    var_pop: vehicle_info_var_pop_fields
    var_samp: vehicle_info_var_samp_fields
    variance: vehicle_info_variance_fields
}

input vehicle_info_aggregate_order_by {
    avg: vehicle_info_avg_order_by
    count: order_by
    max: vehicle_info_max_order_by
    min: vehicle_info_min_order_by
    stddev: vehicle_info_stddev_order_by
    stddev_pop: vehicle_info_stddev_pop_order_by
    stddev_samp: vehicle_info_stddev_samp_order_by
    sum: vehicle_info_sum_order_by
    var_pop: vehicle_info_var_pop_order_by
    var_samp: vehicle_info_var_samp_order_by
    variance: vehicle_info_variance_order_by
}

input vehicle_info_arr_rel_insert_input {
    data: [vehicle_info_insert_input!]!
    on_conflict: vehicle_info_on_conflict
}

type vehicle_info_avg_fields {
    business_scope: Float
    heavy: Float
    id: Float
    industry_category: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    seats: Float
    vehicle_type: Float
}

input vehicle_info_avg_order_by {
    business_scope: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    seats: order_by
    vehicle_type: order_by
}

input vehicle_info_bool_exp {
    _and: [vehicle_info_bool_exp]
    _not: vehicle_info_bool_exp
    _or: [vehicle_info_bool_exp]
    business_scope: Int_comparison_exp
    department_id: String_comparison_exp
    enterprise_id: String_comparison_exp
    heavy: numeric_comparison_exp
    id: bigint_comparison_exp
    industry_category: Int_comparison_exp
    is_apply_install_terminal: Boolean_comparison_exp
    license_plate_color: Int_comparison_exp
    license_plate_number: String_comparison_exp
    license_plate_type: Int_comparison_exp
    muck_truck_id: bigint_comparison_exp
    operating_route: String_comparison_exp
    operating_state: Int_comparison_exp
    operating_type: Int_comparison_exp
    operating_vehicle_id: bigint_comparison_exp
    road_transport_license_number: String_comparison_exp
    seats: Int_comparison_exp
    terminal_id: String_comparison_exp
    vehicle_id: String_comparison_exp
    vehicle_identification_number: String_comparison_exp
    vehicle_type: Int_comparison_exp
}

enum vehicle_info_constraint {
    vehicle_info_pkey
}

input vehicle_info_inc_input {
    business_scope: Int
    heavy: numeric
    id: bigint
    industry_category: Int
    license_plate_color: Int
    license_plate_type: Int
    muck_truck_id: bigint
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    seats: Int
    vehicle_type: Int
}

input vehicle_info_insert_input {
    business_scope: Int
    department_id: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    is_apply_install_terminal: Boolean
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    vehicle_id: String
    vehicle_identification_number: String
    vehicle_type: Int
}

type vehicle_info_max_fields {
    business_scope: Int
    department_id: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    vehicle_id: String
    vehicle_identification_number: String
    vehicle_type: Int
}

input vehicle_info_max_order_by {
    business_scope: order_by
    department_id: order_by
    enterprise_id: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_route: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    road_transport_license_number: order_by
    seats: order_by
    terminal_id: order_by
    vehicle_id: order_by
    vehicle_identification_number: order_by
    vehicle_type: order_by
}

type vehicle_info_min_fields {
    business_scope: Int
    department_id: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    vehicle_id: String
    vehicle_identification_number: String
    vehicle_type: Int
}

input vehicle_info_min_order_by {
    business_scope: order_by
    department_id: order_by
    enterprise_id: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_route: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    road_transport_license_number: order_by
    seats: order_by
    terminal_id: order_by
    vehicle_id: order_by
    vehicle_identification_number: order_by
    vehicle_type: order_by
}

type vehicle_info_mutation_response {
    affected_rows: Int!
    returning: [vehicle_info!]!
}

input vehicle_info_obj_rel_insert_input {
    data: vehicle_info_insert_input!
    on_conflict: vehicle_info_on_conflict
}

input vehicle_info_on_conflict {
    constraint: vehicle_info_constraint!
    update_columns: [vehicle_info_update_column!]!
    where: vehicle_info_bool_exp
}

input vehicle_info_order_by {
    business_scope: order_by
    department_id: order_by
    enterprise_id: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    is_apply_install_terminal: order_by
    license_plate_color: order_by
    license_plate_number: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_route: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    road_transport_license_number: order_by
    seats: order_by
    terminal_id: order_by
    vehicle_id: order_by
    vehicle_identification_number: order_by
    vehicle_type: order_by
}

input vehicle_info_pk_columns_input {
    id: bigint!
    vehicle_id: String!
}

enum vehicle_info_select_column {
    business_scope
    department_id
    enterprise_id
    heavy
    id
    industry_category
    is_apply_install_terminal
    license_plate_color
    license_plate_number
    license_plate_type
    muck_truck_id
    operating_route
    operating_state
    operating_type
    operating_vehicle_id
    road_transport_license_number
    seats
    terminal_id
    vehicle_id
    vehicle_identification_number
    vehicle_type
}

input vehicle_info_set_input {
    business_scope: Int
    department_id: String
    enterprise_id: String
    heavy: numeric
    id: bigint
    industry_category: Int
    is_apply_install_terminal: Boolean
    license_plate_color: Int
    license_plate_number: String
    license_plate_type: Int
    muck_truck_id: bigint
    operating_route: String
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    road_transport_license_number: String
    seats: Int
    terminal_id: String
    vehicle_id: String
    vehicle_identification_number: String
    vehicle_type: Int
}

type vehicle_info_stddev_fields {
    business_scope: Float
    heavy: Float
    id: Float
    industry_category: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    seats: Float
    vehicle_type: Float
}

input vehicle_info_stddev_order_by {
    business_scope: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    seats: order_by
    vehicle_type: order_by
}

type vehicle_info_stddev_pop_fields {
    business_scope: Float
    heavy: Float
    id: Float
    industry_category: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    seats: Float
    vehicle_type: Float
}

input vehicle_info_stddev_pop_order_by {
    business_scope: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    seats: order_by
    vehicle_type: order_by
}

type vehicle_info_stddev_samp_fields {
    business_scope: Float
    heavy: Float
    id: Float
    industry_category: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    seats: Float
    vehicle_type: Float
}

input vehicle_info_stddev_samp_order_by {
    business_scope: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    seats: order_by
    vehicle_type: order_by
}

type vehicle_info_sum_fields {
    business_scope: Int
    heavy: numeric
    id: bigint
    industry_category: Int
    license_plate_color: Int
    license_plate_type: Int
    muck_truck_id: bigint
    operating_state: Int
    operating_type: Int
    operating_vehicle_id: bigint
    seats: Int
    vehicle_type: Int
}

input vehicle_info_sum_order_by {
    business_scope: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    seats: order_by
    vehicle_type: order_by
}

enum vehicle_info_update_column {
    business_scope
    department_id
    enterprise_id
    heavy
    id
    industry_category
    is_apply_install_terminal
    license_plate_color
    license_plate_number
    license_plate_type
    muck_truck_id
    operating_route
    operating_state
    operating_type
    operating_vehicle_id
    road_transport_license_number
    seats
    terminal_id
    vehicle_id
    vehicle_identification_number
    vehicle_type
}

type vehicle_info_var_pop_fields {
    business_scope: Float
    heavy: Float
    id: Float
    industry_category: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    seats: Float
    vehicle_type: Float
}

input vehicle_info_var_pop_order_by {
    business_scope: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    seats: order_by
    vehicle_type: order_by
}

type vehicle_info_var_samp_fields {
    business_scope: Float
    heavy: Float
    id: Float
    industry_category: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    seats: Float
    vehicle_type: Float
}

input vehicle_info_var_samp_order_by {
    business_scope: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    seats: order_by
    vehicle_type: order_by
}

type vehicle_info_variance_fields {
    business_scope: Float
    heavy: Float
    id: Float
    industry_category: Float
    license_plate_color: Float
    license_plate_type: Float
    muck_truck_id: Float
    operating_state: Float
    operating_type: Float
    operating_vehicle_id: Float
    seats: Float
    vehicle_type: Float
}

input vehicle_info_variance_order_by {
    business_scope: order_by
    heavy: order_by
    id: order_by
    industry_category: order_by
    license_plate_color: order_by
    license_plate_type: order_by
    muck_truck_id: order_by
    operating_state: order_by
    operating_type: order_by
    operating_vehicle_id: order_by
    seats: order_by
    vehicle_type: order_by
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_delete_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg0, err = ec.unmarshalNvehicle_info_bool_exp2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_delete_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.VehicleInfoInsertInput
	if tmp, ok := rawArgs["objects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objects"))
		arg0, err = ec.unmarshalNvehicle_info_insert_input2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoInsertInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["objects"] = arg0
	var arg1 *model.VehicleInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_info_on_conflict2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_insert_vehicle_info_one_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VehicleInfoInsertInput
	if tmp, ok := rawArgs["object"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("object"))
		arg0, err = ec.unmarshalNvehicle_info_insert_input2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoInsertInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["object"] = arg0
	var arg1 *model.VehicleInfoOnConflict
	if tmp, ok := rawArgs["on_conflict"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
		arg1, err = ec.unmarshalOvehicle_info_on_conflict2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOnConflict(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["on_conflict"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_info_inc_input2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_info_set_input2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNvehicle_info_bool_exp2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_update_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.VehicleInfoIncInput
	if tmp, ok := rawArgs["_inc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_inc"))
		arg0, err = ec.unmarshalOvehicle_info_inc_input2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoIncInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_inc"] = arg0
	var arg1 *model.VehicleInfoSetInput
	if tmp, ok := rawArgs["_set"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_set"))
		arg1, err = ec.unmarshalOvehicle_info_set_input2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["_set"] = arg1
	var arg2 model.VehicleInfoPkColumnsInput
	if tmp, ok := rawArgs["pk_columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pk_columns"))
		arg2, err = ec.unmarshalNvehicle_info_pk_columns_input2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoPkColumnsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pk_columns"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_select_column2ᚕlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_order_by2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_bool_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_select_column2ᚕlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_order_by2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_bool_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_info_aggregate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_select_column2ᚕlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_order_by2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_bool_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_info_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoSelectColumn
	if tmp, ok := rawArgs["distinct_on"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct_on"))
		arg0, err = ec.unmarshalOvehicle_info_select_column2ᚕlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct_on"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	var arg3 []*model.VehicleInfoOrderBy
	if tmp, ok := rawArgs["order_by"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
		arg3, err = ec.unmarshalOvehicle_info_order_by2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOrderByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order_by"] = arg3
	var arg4 *model.VehicleInfoBoolExp
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg4, err = ec.unmarshalOvehicle_info_bool_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg4
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicle_info_by_pk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNbigint2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["vehicle_id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vehicle_id"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_vehicle_info_aggregate_fields_count_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.VehicleInfoSelectColumn
	if tmp, ok := rawArgs["columns"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("columns"))
		arg0, err = ec.unmarshalOvehicle_info_select_column2ᚕlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["columns"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["distinct"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("distinct"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["distinct"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Mutation_delete_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleInfo(rctx, args["where"].(model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_info_mutation_response2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_delete_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_delete_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteVehicleInfoByPk(rctx, args["id"].(int64), args["vehicle_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfo)
	fc.Result = res
	return ec.marshalOvehicle_info2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleInfo(rctx, args["objects"].([]*model.VehicleInfoInsertInput), args["on_conflict"].(*model.VehicleInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_info_mutation_response2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_insert_vehicle_info_one(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_insert_vehicle_info_one_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InsertVehicleInfoOne(rctx, args["object"].(model.VehicleInfoInsertInput), args["on_conflict"].(*model.VehicleInfoOnConflict))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfo)
	fc.Result = res
	return ec.marshalOvehicle_info2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleInfo(rctx, args["_inc"].(*model.VehicleInfoIncInput), args["_set"].(*model.VehicleInfoSetInput), args["where"].(model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoMutationResponse)
	fc.Result = res
	return ec.marshalOvehicle_info_mutation_response2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMutationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_update_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_update_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVehicleInfoByPk(rctx, args["_inc"].(*model.VehicleInfoIncInput), args["_set"].(*model.VehicleInfoSetInput), args["pk_columns"].(model.VehicleInfoPkColumnsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfo)
	fc.Result = res
	return ec.marshalOvehicle_info2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleInfo(rctx, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleInfo)
	fc.Result = res
	return ec.marshalNvehicle_info2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleInfoAggregate(rctx, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoAggregate)
	fc.Result = res
	return ec.marshalNvehicle_info_aggregate2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoAggregate(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VehicleInfoByPk(rctx, args["id"].(int64), args["vehicle_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfo)
	fc.Result = res
	return ec.marshalOvehicle_info2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_vehicle_info(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_info_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleInfo(rctx, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan []*model.VehicleInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_info2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_info_aggregate(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_info_aggregate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleInfoAggregate(rctx, args["distinct_on"].([]model.VehicleInfoSelectColumn), args["limit"].(*int), args["offset"].(*int), args["order_by"].([]*model.VehicleInfoOrderBy), args["where"].(*model.VehicleInfoBoolExp))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleInfoAggregate)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNvehicle_info_aggregate2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoAggregate(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _Subscription_vehicle_info_by_pk(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Subscription_vehicle_info_by_pk_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().VehicleInfoByPk(rctx, args["id"].(int64), args["vehicle_id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.VehicleInfo)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalOvehicle_info2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfo(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_department_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_is_apply_install_terminal(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsApplyInstallTerminal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_operating_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNbigint2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_aggregate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aggregate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoAggregateFields)
	fc.Result = res
	return ec.marshalOvehicle_info_aggregate_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoAggregateFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_nodes(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleInfo)
	fc.Result = res
	return ec.marshalNvehicle_info2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_avg(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoAvgFields)
	fc.Result = res
	return ec.marshalOvehicle_info_avg_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoAvgFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_count(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_vehicle_info_aggregate_fields_count_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_max(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoMaxFields)
	fc.Result = res
	return ec.marshalOvehicle_info_max_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMaxFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_min(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoMinFields)
	fc.Result = res
	return ec.marshalOvehicle_info_min_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMinFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_stddev(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stddev, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoStddevFields)
	fc.Result = res
	return ec.marshalOvehicle_info_stddev_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_stddev_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoStddevPopFields)
	fc.Result = res
	return ec.marshalOvehicle_info_stddev_pop_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_stddev_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StddevSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoStddevSampFields)
	fc.Result = res
	return ec.marshalOvehicle_info_stddev_samp_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_sum(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoSumFields)
	fc.Result = res
	return ec.marshalOvehicle_info_sum_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSumFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_var_pop(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarPop, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoVarPopFields)
	fc.Result = res
	return ec.marshalOvehicle_info_var_pop_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarPopFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_var_samp(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VarSamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoVarSampFields)
	fc.Result = res
	return ec.marshalOvehicle_info_var_samp_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarSampFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_aggregate_fields_variance(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAggregateFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_aggregate_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VehicleInfoVarianceFields)
	fc.Result = res
	return ec.marshalOvehicle_info_variance_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarianceFields(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_avg_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoAvgFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_avg_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_operating_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_road_transport_license_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadTransportLicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_max_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMaxFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_max_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_department_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_license_plate_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_operating_route(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_road_transport_license_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoadTransportLicenseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_terminal_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_identification_number(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleIdentificationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_min_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMinFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_min_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_mutation_response_affected_rows(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AffectedRows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_mutation_response_returning(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoMutationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_mutation_response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Returning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.VehicleInfo)
	fc.Result = res
	return ec.marshalNvehicle_info2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_pop_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_stddev_samp_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoStddevSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_stddev_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOnumeric2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalObigint2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_sum_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoSumFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_sum_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_pop_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarPopFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_pop_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_var_samp_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarSampFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_var_samp_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_heavy(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heavy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_industry_category(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_license_plate_color(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateColor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_license_plate_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicensePlateType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_muck_truck_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckTruckID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_operating_state(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_operating_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_operating_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingVehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_seats(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _vehicle_info_variance_fields_vehicle_type(ctx context.Context, field graphql.CollectedField, obj *model.VehicleInfoVarianceFields) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "vehicle_info_variance_fields",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model.BooleanComparisonExp, error) {
	var it model.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInt_comparison_exp(ctx context.Context, obj interface{}) (model.IntComparisonExp, error) {
	var it model.IntComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model.StringComparisonExp, error) {
	var it model.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbigint_comparison_exp(ctx context.Context, obj interface{}) (model.BigintComparisonExp, error) {
	var it model.BigintComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalObigint2ᚕint64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputnumeric_comparison_exp(ctx context.Context, obj interface{}) (model.NumericComparisonExp, error) {
	var it model.NumericComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOnumeric2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_aggregate_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoAggregateOrderBy, error) {
	var it model.VehicleInfoAggregateOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "avg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avg"))
			it.Avg, err = ec.unmarshalOvehicle_info_avg_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoAvgOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			it.Count, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			it.Max, err = ec.unmarshalOvehicle_info_max_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMaxOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			it.Min, err = ec.unmarshalOvehicle_info_min_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMinOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev"))
			it.Stddev, err = ec.unmarshalOvehicle_info_stddev_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_pop"))
			it.StddevPop, err = ec.unmarshalOvehicle_info_stddev_pop_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "stddev_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stddev_samp"))
			it.StddevSamp, err = ec.unmarshalOvehicle_info_stddev_samp_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "sum":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sum"))
			it.Sum, err = ec.unmarshalOvehicle_info_sum_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSumOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_pop":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_pop"))
			it.VarPop, err = ec.unmarshalOvehicle_info_var_pop_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarPopOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "var_samp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("var_samp"))
			it.VarSamp, err = ec.unmarshalOvehicle_info_var_samp_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarSampOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "variance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variance"))
			it.Variance, err = ec.unmarshalOvehicle_info_variance_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarianceOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_arr_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleInfoArrRelInsertInput, error) {
	var it model.VehicleInfoArrRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_info_insert_input2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoInsertInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_info_on_conflict2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_avg_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoAvgOrderBy, error) {
	var it model.VehicleInfoAvgOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_bool_exp(ctx context.Context, obj interface{}) (model.VehicleInfoBoolExp, error) {
	var it model.VehicleInfoBoolExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_and"))
			it.And, err = ec.unmarshalOvehicle_info_bool_exp2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_not"))
			it.Not, err = ec.unmarshalOvehicle_info_bool_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "_or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_or"))
			it.Or, err = ec.unmarshalOvehicle_info_bool_exp2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐNumericComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOBoolean_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOString_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐBigintComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOString_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOString_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐIntComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_inc_input(ctx context.Context, obj interface{}) (model.VehicleInfoIncInput, error) {
	var it model.VehicleInfoIncInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_insert_input(ctx context.Context, obj interface{}) (model.VehicleInfoInsertInput, error) {
	var it model.VehicleInfoInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_max_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoMaxOrderBy, error) {
	var it model.VehicleInfoMaxOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_min_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoMinOrderBy, error) {
	var it model.VehicleInfoMinOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_obj_rel_insert_input(ctx context.Context, obj interface{}) (model.VehicleInfoObjRelInsertInput, error) {
	var it model.VehicleInfoObjRelInsertInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNvehicle_info_insert_input2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoInsertInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "on_conflict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("on_conflict"))
			it.OnConflict, err = ec.unmarshalOvehicle_info_on_conflict2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOnConflict(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_on_conflict(ctx context.Context, obj interface{}) (model.VehicleInfoOnConflict, error) {
	var it model.VehicleInfoOnConflict
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "constraint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
			it.Constraint, err = ec.unmarshalNvehicle_info_constraint2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "update_columns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("update_columns"))
			it.UpdateColumns, err = ec.unmarshalNvehicle_info_update_column2ᚕlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoUpdateColumnᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOvehicle_info_bool_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoOrderBy, error) {
	var it model.VehicleInfoOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_pk_columns_input(ctx context.Context, obj interface{}) (model.VehicleInfoPkColumnsInput, error) {
	var it model.VehicleInfoPkColumnsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNbigint2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_set_input(ctx context.Context, obj interface{}) (model.VehicleInfoSetInput, error) {
	var it model.VehicleInfoSetInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOnumeric2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_apply_install_terminal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_apply_install_terminal"))
			it.IsApplyInstallTerminal, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_number"))
			it.LicensePlateNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_route"))
			it.OperatingRoute, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalObigint2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "road_transport_license_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("road_transport_license_number"))
			it.RoadTransportLicenseNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "terminal_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminal_id"))
			it.TerminalID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_id"))
			it.VehicleID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_identification_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_identification_number"))
			it.VehicleIdentificationNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_stddev_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoStddevOrderBy, error) {
	var it model.VehicleInfoStddevOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_stddev_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoStddevPopOrderBy, error) {
	var it model.VehicleInfoStddevPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_stddev_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoStddevSampOrderBy, error) {
	var it model.VehicleInfoStddevSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_sum_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoSumOrderBy, error) {
	var it model.VehicleInfoSumOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_var_pop_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoVarPopOrderBy, error) {
	var it model.VehicleInfoVarPopOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_var_samp_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoVarSampOrderBy, error) {
	var it model.VehicleInfoVarSampOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputvehicle_info_variance_order_by(ctx context.Context, obj interface{}) (model.VehicleInfoVarianceOrderBy, error) {
	var it model.VehicleInfoVarianceOrderBy
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "heavy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("heavy"))
			it.Heavy, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry_category"))
			it.IndustryCategory, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_color"))
			it.LicensePlateColor, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "license_plate_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("license_plate_type"))
			it.LicensePlateType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "muck_truck_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("muck_truck_id"))
			it.MuckTruckID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_state"))
			it.OperatingState, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_type"))
			it.OperatingType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_vehicle_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_vehicle_id"))
			it.OperatingVehicleID, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "seats":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seats"))
			it.Seats, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		case "vehicle_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vehicle_type"))
			it.VehicleType, err = ec.unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "delete_vehicle_info":
			out.Values[i] = ec._Mutation_delete_vehicle_info(ctx, field)
		case "delete_vehicle_info_by_pk":
			out.Values[i] = ec._Mutation_delete_vehicle_info_by_pk(ctx, field)
		case "insert_vehicle_info":
			out.Values[i] = ec._Mutation_insert_vehicle_info(ctx, field)
		case "insert_vehicle_info_one":
			out.Values[i] = ec._Mutation_insert_vehicle_info_one(ctx, field)
		case "update_vehicle_info":
			out.Values[i] = ec._Mutation_update_vehicle_info(ctx, field)
		case "update_vehicle_info_by_pk":
			out.Values[i] = ec._Mutation_update_vehicle_info_by_pk(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "vehicle_info":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_info(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_info_aggregate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_info_aggregate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "vehicle_info_by_pk":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle_info_by_pk(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "vehicle_info":
		return ec._Subscription_vehicle_info(ctx, fields[0])
	case "vehicle_info_aggregate":
		return ec._Subscription_vehicle_info_aggregate(ctx, fields[0])
	case "vehicle_info_by_pk":
		return ec._Subscription_vehicle_info_by_pk(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_infoImplementors = []string{"vehicle_info"}

func (ec *executionContext) _vehicle_info(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_infoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_business_scope(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._vehicle_info_department_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_info_enterprise_id(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "industry_category":
			out.Values[i] = ec._vehicle_info_industry_category(ctx, field, obj)
		case "is_apply_install_terminal":
			out.Values[i] = ec._vehicle_info_is_apply_install_terminal(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_info_license_plate_number(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_muck_truck_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operating_route":
			out.Values[i] = ec._vehicle_info_operating_route(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_operating_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "seats":
			out.Values[i] = ec._vehicle_info_seats(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._vehicle_info_terminal_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_info_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vehicle_identification_number":
			out.Values[i] = ec._vehicle_info_vehicle_identification_number(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_aggregateImplementors = []string{"vehicle_info_aggregate"}

func (ec *executionContext) _vehicle_info_aggregate(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoAggregate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_aggregateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_aggregate")
		case "aggregate":
			out.Values[i] = ec._vehicle_info_aggregate_aggregate(ctx, field, obj)
		case "nodes":
			out.Values[i] = ec._vehicle_info_aggregate_nodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_aggregate_fieldsImplementors = []string{"vehicle_info_aggregate_fields"}

func (ec *executionContext) _vehicle_info_aggregate_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoAggregateFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_aggregate_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_aggregate_fields")
		case "avg":
			out.Values[i] = ec._vehicle_info_aggregate_fields_avg(ctx, field, obj)
		case "count":
			out.Values[i] = ec._vehicle_info_aggregate_fields_count(ctx, field, obj)
		case "max":
			out.Values[i] = ec._vehicle_info_aggregate_fields_max(ctx, field, obj)
		case "min":
			out.Values[i] = ec._vehicle_info_aggregate_fields_min(ctx, field, obj)
		case "stddev":
			out.Values[i] = ec._vehicle_info_aggregate_fields_stddev(ctx, field, obj)
		case "stddev_pop":
			out.Values[i] = ec._vehicle_info_aggregate_fields_stddev_pop(ctx, field, obj)
		case "stddev_samp":
			out.Values[i] = ec._vehicle_info_aggregate_fields_stddev_samp(ctx, field, obj)
		case "sum":
			out.Values[i] = ec._vehicle_info_aggregate_fields_sum(ctx, field, obj)
		case "var_pop":
			out.Values[i] = ec._vehicle_info_aggregate_fields_var_pop(ctx, field, obj)
		case "var_samp":
			out.Values[i] = ec._vehicle_info_aggregate_fields_var_samp(ctx, field, obj)
		case "variance":
			out.Values[i] = ec._vehicle_info_aggregate_fields_variance(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_avg_fieldsImplementors = []string{"vehicle_info_avg_fields"}

func (ec *executionContext) _vehicle_info_avg_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoAvgFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_avg_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_avg_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_avg_fields_business_scope(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_avg_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_avg_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_avg_fields_industry_category(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_avg_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_avg_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_avg_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_avg_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_avg_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_avg_fields_operating_vehicle_id(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_avg_fields_seats(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_avg_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_max_fieldsImplementors = []string{"vehicle_info_max_fields"}

func (ec *executionContext) _vehicle_info_max_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoMaxFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_max_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_max_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_max_fields_business_scope(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._vehicle_info_max_fields_department_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_info_max_fields_enterprise_id(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_max_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_max_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_max_fields_industry_category(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_max_fields_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_info_max_fields_license_plate_number(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_max_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_max_fields_muck_truck_id(ctx, field, obj)
		case "operating_route":
			out.Values[i] = ec._vehicle_info_max_fields_operating_route(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_max_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_max_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_max_fields_operating_vehicle_id(ctx, field, obj)
		case "road_transport_license_number":
			out.Values[i] = ec._vehicle_info_max_fields_road_transport_license_number(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_max_fields_seats(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._vehicle_info_max_fields_terminal_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_id(ctx, field, obj)
		case "vehicle_identification_number":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_identification_number(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_max_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_min_fieldsImplementors = []string{"vehicle_info_min_fields"}

func (ec *executionContext) _vehicle_info_min_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoMinFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_min_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_min_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_min_fields_business_scope(ctx, field, obj)
		case "department_id":
			out.Values[i] = ec._vehicle_info_min_fields_department_id(ctx, field, obj)
		case "enterprise_id":
			out.Values[i] = ec._vehicle_info_min_fields_enterprise_id(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_min_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_min_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_min_fields_industry_category(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_min_fields_license_plate_color(ctx, field, obj)
		case "license_plate_number":
			out.Values[i] = ec._vehicle_info_min_fields_license_plate_number(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_min_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_min_fields_muck_truck_id(ctx, field, obj)
		case "operating_route":
			out.Values[i] = ec._vehicle_info_min_fields_operating_route(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_min_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_min_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_min_fields_operating_vehicle_id(ctx, field, obj)
		case "road_transport_license_number":
			out.Values[i] = ec._vehicle_info_min_fields_road_transport_license_number(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_min_fields_seats(ctx, field, obj)
		case "terminal_id":
			out.Values[i] = ec._vehicle_info_min_fields_terminal_id(ctx, field, obj)
		case "vehicle_id":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_id(ctx, field, obj)
		case "vehicle_identification_number":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_identification_number(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_min_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_mutation_responseImplementors = []string{"vehicle_info_mutation_response"}

func (ec *executionContext) _vehicle_info_mutation_response(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoMutationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_mutation_responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_mutation_response")
		case "affected_rows":
			out.Values[i] = ec._vehicle_info_mutation_response_affected_rows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "returning":
			out.Values[i] = ec._vehicle_info_mutation_response_returning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_stddev_fieldsImplementors = []string{"vehicle_info_stddev_fields"}

func (ec *executionContext) _vehicle_info_stddev_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoStddevFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_stddev_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_stddev_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_stddev_fields_business_scope(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_stddev_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_stddev_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_stddev_fields_industry_category(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_stddev_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_stddev_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_stddev_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_stddev_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_stddev_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_stddev_fields_operating_vehicle_id(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_stddev_fields_seats(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_stddev_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_stddev_pop_fieldsImplementors = []string{"vehicle_info_stddev_pop_fields"}

func (ec *executionContext) _vehicle_info_stddev_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoStddevPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_stddev_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_stddev_pop_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_business_scope(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_industry_category(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_operating_vehicle_id(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_seats(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_stddev_pop_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_stddev_samp_fieldsImplementors = []string{"vehicle_info_stddev_samp_fields"}

func (ec *executionContext) _vehicle_info_stddev_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoStddevSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_stddev_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_stddev_samp_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_business_scope(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_industry_category(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_operating_vehicle_id(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_seats(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_stddev_samp_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_sum_fieldsImplementors = []string{"vehicle_info_sum_fields"}

func (ec *executionContext) _vehicle_info_sum_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoSumFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_sum_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_sum_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_sum_fields_business_scope(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_sum_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_sum_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_sum_fields_industry_category(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_sum_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_sum_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_sum_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_sum_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_sum_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_sum_fields_operating_vehicle_id(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_sum_fields_seats(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_sum_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_var_pop_fieldsImplementors = []string{"vehicle_info_var_pop_fields"}

func (ec *executionContext) _vehicle_info_var_pop_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoVarPopFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_var_pop_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_var_pop_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_var_pop_fields_business_scope(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_var_pop_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_var_pop_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_var_pop_fields_industry_category(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_var_pop_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_var_pop_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_var_pop_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_var_pop_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_var_pop_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_var_pop_fields_operating_vehicle_id(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_var_pop_fields_seats(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_var_pop_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_var_samp_fieldsImplementors = []string{"vehicle_info_var_samp_fields"}

func (ec *executionContext) _vehicle_info_var_samp_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoVarSampFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_var_samp_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_var_samp_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_var_samp_fields_business_scope(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_var_samp_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_var_samp_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_var_samp_fields_industry_category(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_var_samp_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_var_samp_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_var_samp_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_var_samp_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_var_samp_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_var_samp_fields_operating_vehicle_id(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_var_samp_fields_seats(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_var_samp_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicle_info_variance_fieldsImplementors = []string{"vehicle_info_variance_fields"}

func (ec *executionContext) _vehicle_info_variance_fields(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleInfoVarianceFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicle_info_variance_fieldsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("vehicle_info_variance_fields")
		case "business_scope":
			out.Values[i] = ec._vehicle_info_variance_fields_business_scope(ctx, field, obj)
		case "heavy":
			out.Values[i] = ec._vehicle_info_variance_fields_heavy(ctx, field, obj)
		case "id":
			out.Values[i] = ec._vehicle_info_variance_fields_id(ctx, field, obj)
		case "industry_category":
			out.Values[i] = ec._vehicle_info_variance_fields_industry_category(ctx, field, obj)
		case "license_plate_color":
			out.Values[i] = ec._vehicle_info_variance_fields_license_plate_color(ctx, field, obj)
		case "license_plate_type":
			out.Values[i] = ec._vehicle_info_variance_fields_license_plate_type(ctx, field, obj)
		case "muck_truck_id":
			out.Values[i] = ec._vehicle_info_variance_fields_muck_truck_id(ctx, field, obj)
		case "operating_state":
			out.Values[i] = ec._vehicle_info_variance_fields_operating_state(ctx, field, obj)
		case "operating_type":
			out.Values[i] = ec._vehicle_info_variance_fields_operating_type(ctx, field, obj)
		case "operating_vehicle_id":
			out.Values[i] = ec._vehicle_info_variance_fields_operating_vehicle_id(ctx, field, obj)
		case "seats":
			out.Values[i] = ec._vehicle_info_variance_fields_seats(ctx, field, obj)
		case "vehicle_type":
			out.Values[i] = ec._vehicle_info_variance_fields_vehicle_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNbigint2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNbigint2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNnumeric2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNnumeric2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNvehicle_info2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VehicleInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_info2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNvehicle_info2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfo(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_info(ctx, sel, v)
}

func (ec *executionContext) marshalNvehicle_info_aggregate2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoAggregate(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoAggregate) graphql.Marshaler {
	return ec._vehicle_info_aggregate(ctx, sel, &v)
}

func (ec *executionContext) marshalNvehicle_info_aggregate2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoAggregate(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoAggregate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._vehicle_info_aggregate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNvehicle_info_bool_exp2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx context.Context, v interface{}) (model.VehicleInfoBoolExp, error) {
	res, err := ec.unmarshalInputvehicle_info_bool_exp(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_constraint2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoConstraint(ctx context.Context, v interface{}) (model.VehicleInfoConstraint, error) {
	var res model.VehicleInfoConstraint
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_info_constraint2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoConstraint(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoConstraint) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_info_insert_input2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoInsertInput(ctx context.Context, v interface{}) (model.VehicleInfoInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_info_insert_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_insert_input2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoInsertInputᚄ(ctx context.Context, v interface{}) ([]*model.VehicleInfoInsertInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleInfoInsertInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_insert_input2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoInsertInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNvehicle_info_insert_input2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoInsertInput(ctx context.Context, v interface{}) (*model.VehicleInfoInsertInput, error) {
	res, err := ec.unmarshalInputvehicle_info_insert_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoOrderBy, error) {
	res, err := ec.unmarshalInputvehicle_info_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_pk_columns_input2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoPkColumnsInput(ctx context.Context, v interface{}) (model.VehicleInfoPkColumnsInput, error) {
	res, err := ec.unmarshalInputvehicle_info_pk_columns_input(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNvehicle_info_select_column2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSelectColumn(ctx context.Context, v interface{}) (model.VehicleInfoSelectColumn, error) {
	var res model.VehicleInfoSelectColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_info_select_column2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSelectColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoSelectColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_info_update_column2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoUpdateColumn(ctx context.Context, v interface{}) (model.VehicleInfoUpdateColumn, error) {
	var res model.VehicleInfoUpdateColumn
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNvehicle_info_update_column2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoUpdateColumn(ctx context.Context, sel ast.SelectionSet, v model.VehicleInfoUpdateColumn) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNvehicle_info_update_column2ᚕlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoUpdateColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleInfoUpdateColumn, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleInfoUpdateColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_update_column2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoUpdateColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNvehicle_info_update_column2ᚕlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoUpdateColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleInfoUpdateColumn) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_info_update_column2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoUpdateColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐIntComparisonExp(ctx context.Context, v interface{}) (*model.IntComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInt_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalObigint2ᚕint64ᚄ(ctx context.Context, v interface{}) ([]int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNbigint2int64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalObigint2ᚕint64ᚄ(ctx context.Context, sel ast.SelectionSet, v []int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNbigint2int64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalObigint2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalObigint2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalObigint_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐBigintComparisonExp(ctx context.Context, v interface{}) (*model.BigintComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputbigint_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNnumeric2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOnumeric2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNnumeric2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOnumeric2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOnumeric2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOnumeric_comparison_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐNumericComparisonExp(ctx context.Context, v interface{}) (*model.NumericComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputnumeric_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (*model.OrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OrderBy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOorder_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v *model.OrderBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOvehicle_info2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfo(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_info_aggregate_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoAggregateFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoAggregateFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_aggregate_fields(ctx, sel, v)
}

func (ec *executionContext) marshalOvehicle_info_avg_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoAvgFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoAvgFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_avg_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_avg_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoAvgOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoAvgOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_avg_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_info_bool_exp2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx context.Context, v interface{}) ([]*model.VehicleInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleInfoBoolExp, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOvehicle_info_bool_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_info_bool_exp2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoBoolExp(ctx context.Context, v interface{}) (*model.VehicleInfoBoolExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_bool_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_info_inc_input2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoIncInput(ctx context.Context, v interface{}) (*model.VehicleInfoIncInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_inc_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_max_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMaxFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoMaxFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_max_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_max_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMaxOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoMaxOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_max_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_min_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMinFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoMinFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_min_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_min_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMinOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoMinOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_min_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_mutation_response2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoMutationResponse(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoMutationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_mutation_response(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_on_conflict2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOnConflict(ctx context.Context, v interface{}) (*model.VehicleInfoOnConflict, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_on_conflict(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOvehicle_info_order_by2ᚕᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOrderByᚄ(ctx context.Context, v interface{}) ([]*model.VehicleInfoOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.VehicleInfoOrderBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoOrderBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOvehicle_info_select_column2ᚕlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx context.Context, v interface{}) ([]model.VehicleInfoSelectColumn, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]model.VehicleInfoSelectColumn, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNvehicle_info_select_column2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSelectColumn(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOvehicle_info_select_column2ᚕlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSelectColumnᚄ(ctx context.Context, sel ast.SelectionSet, v []model.VehicleInfoSelectColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNvehicle_info_select_column2laiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSelectColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOvehicle_info_set_input2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSetInput(ctx context.Context, v interface{}) (*model.VehicleInfoSetInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_set_input(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_stddev_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoStddevFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_stddev_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_stddev_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoStddevOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_stddev_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_stddev_pop_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoStddevPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_stddev_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_stddev_pop_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoStddevPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_stddev_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_stddev_samp_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoStddevSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_stddev_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_stddev_samp_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoStddevSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoStddevSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_stddev_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_sum_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSumFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoSumFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_sum_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_sum_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoSumOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoSumOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_sum_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_var_pop_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarPopFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoVarPopFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_var_pop_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_var_pop_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarPopOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoVarPopOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_var_pop_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_var_samp_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarSampFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoVarSampFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_var_samp_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_var_samp_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarSampOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoVarSampOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_var_samp_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOvehicle_info_variance_fields2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarianceFields(ctx context.Context, sel ast.SelectionSet, v *model.VehicleInfoVarianceFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._vehicle_info_variance_fields(ctx, sel, v)
}

func (ec *executionContext) unmarshalOvehicle_info_variance_order_by2ᚖlaiᚗcomᚋgqlgen_studyᚋkeyVehicleSupervision03ᚋgraphᚋmodelᚐVehicleInfoVarianceOrderBy(ctx context.Context, v interface{}) (*model.VehicleInfoVarianceOrderBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputvehicle_info_variance_order_by(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
