// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// 基础模型
type IModel interface {
	IsIModel()
}

type BooleanComparisonExp struct {
	Eq     *bool  `json:"_eq"`
	Gt     *bool  `json:"_gt"`
	Gte    *bool  `json:"_gte"`
	In     []bool `json:"_in"`
	IsNull *bool  `json:"_is_null"`
	Lt     *bool  `json:"_lt"`
	Lte    *bool  `json:"_lte"`
	Neq    *bool  `json:"_neq"`
	Nin    []bool `json:"_nin"`
}

// 城市
type City struct {
	// 城市ID
	CityID string `json:"city_id"`
	// 城市名称
	Name string `json:"name"`
	// 城市对应的区域列表
	DistrictList []*District `json:"district_list"`
	// 城市对应的省份
	Province *Province `json:"province"`
}

// 城市列表查询条件
type CityListQuery struct {
	// 城市名称-模糊查询
	CityName *string `json:"city_name"`
	// 省份ID
	ProvinceID *string `json:"province_id"`
}

// 新增部门入参
type CreateDepartmentParam struct {
	// 所在企业ID
	EnterpriseID string `json:"enterprise_id"`
	// 上级部门
	SuperiorDepartmentID *string `json:"superior_department_id"`
	// 部门名称
	DepartmentName string `json:"department_name"`
	// 部门编码
	DepartmentCode string `json:"department_code"`
	// 部门类别
	DepartmentCategory *string `json:"department_category"`
	// 内部序号
	InternalNumber *string `json:"internal_number"`
	// 备注
	Remark *string `json:"remark"`
}

// 新增企业-入参
type CreateEnterpriseParam struct {
	// 上级企业ID
	SuperiorEnterpriseID *string `json:"superior_enterprise_id"`
	// 企业编号
	EnterpriseCode string `json:"enterprise_code"`
	// 企业名称
	EnterpriseName string `json:"enterprise_name"`
	// 企业级别
	EnterpriseLevel EnterpriseLevelEnum `json:"enterprise_level"`
	// 显示序号
	DisplayNumber *int `json:"display_number"`
	// 联系人信息
	ContactPersons []map[string]interface{} `json:"contact_persons"`
	// 企业地址
	EnterpriseAddress *string `json:"enterprise_address"`
	// 经营范围
	BusinessScope *BusinessScope `json:"business_scope"`
	// 传真号码
	FaxNumber *string `json:"fax_number"`
	// 省份
	ProvinceID string `json:"province_id"`
	// 城市
	CityID string `json:"city_id"`
	// 区
	DistrictID string `json:"district_id"`
	// 机构类别
	InstitutionCategory *InstitutionCategoryEnum `json:"institution_category"`
	// 经营许可证
	OperatingLicense *string `json:"operating_license"`
	// 营业执照
	BusinessLicense *string `json:"business_license"`
	// 营业执照发证日期
	BusinessLicenseIssuanceDate *string `json:"business_license_issuance_date"`
	// 营业执照到期日期
	BusinessLicenseExpiryDate *string `json:"business_license_expiry_date"`
	// 企业性质
	EnterpriseNature *EnterpriseNatureEnum `json:"enterprise_nature"`
	// 企业法人代表
	LegalRepresentative *string `json:"legal_representative"`
	// 企业法人代表联系电话
	LegalRepresentativePhone *string `json:"legal_representative_phone"`
	// 企业法人代表身份证
	LegalRepresentativeIDCard *string `json:"legal_representative_id_card"`
	// 企业法人身份证号
	LegalPersonIDNumber *string `json:"legal_person_id_number"`
	// 委托代理人
	EntrustedAgent *string `json:"entrusted_agent"`
	// 委托代理人联系电话
	EntrustedAgentPhone *string `json:"entrusted_agent_phone"`
	// 委托代理人身份证
	EntrustedAgentIDCard *string `json:"entrusted_agent_id_card"`
	// 委托代理人身份证号
	AgentIDNumber *string `json:"agent_id_number"`
	// 组织机构代码(企业的营运证)
	OrganizationCode *string `json:"organization_code"`
	// 组织机构代码证
	OrganizationCodeCertificate *string `json:"organization_code_certificate"`
	// 业务办理扫描件
	BusinessPic *string `json:"business_pic"`
}

// 部门
type Department struct {
	// 部门ID
	DepartmentID string `json:"department_id"`
	// 所在企业
	Enterprise *Enterprise `json:"enterprise"`
	// 上级部门
	SuperiorDepartment *Department `json:"superior_department"`
	// 部门名称
	DepartmentName *string `json:"department_name"`
	// 部门编码
	DepartmentCode *string `json:"department_code"`
	// 部门类别
	DepartmentCategory *string `json:"department_category"`
	// 内部序号
	InternalNumber *string `json:"internal_number"`
	// 备注
	Remark *string `json:"remark"`
	// 创建时间
	CreateAt *string `json:"create_at"`
	// 创建人
	CreateBy *SystemUser `json:"create_by"`
	// 修改时间
	UpdateAt *string `json:"update_at"`
	// 修改人
	UpdateBy *SystemUser `json:"update_by"`
	// 删除时间
	DeleteAt *string `json:"delete_at"`
	// 删除人
	DeleteBy *SystemUser `json:"delete_by"`
}

func (Department) IsIModel() {}

// 部门connection
type DepartmentConnection struct {
	// 记录
	Nodes []*Department `json:"nodes"`
	// 分页信息
	PageInfo *PageInfo `json:"page_info"`
}

// 部门列表查询条件
type DepartmentListQuery struct {
	// 分页参数
	PageParam *PageQuery `json:"page_param"`
	// 排序
	OrderBy *DepartmentOrder `json:"order_by"`
}

// 部门列表排序
type DepartmentOrder struct {
	// 排序方向
	Direction *OrderDirection `json:"direction"`
	// 排序字段
	Field *DepartmentOrderField `json:"field"`
}

// 部门详情查询条件
type DepartmentQuery struct {
	// 部门ID
	DepartmentID string `json:"department_id"`
}

type Dict struct {
	// 字典类型
	DictType *DictType `json:"dict_type"`
	// 字典的值
	DictValue int `json:"dict_value"`
	// 字典的名称
	DictName string `json:"dict_name"`
}

// 字典类别查询条件
type DictListQuery struct {
	// 字典类别的编号
	TypeCode string `json:"type_code"`
}

// 字典类型
type DictType struct {
	// 字典类型的编号
	TypeCode string `json:"type_code"`
	// 字典类型的名称
	TypeName string `json:"type_name"`
}

// 区域
type District struct {
	// 区域ID
	DistrictID string `json:"district_id"`
	// 区域名称
	Name string `json:"name"`
	// 区域对应的省份
	Province *Province `json:"province"`
	// 区域对应的城市
	City *City `json:"city"`
}

// 区域列表查询条件
type DistrictListQuery struct {
	// 区域名称-模糊查询
	DistrictName *string `json:"district_name"`
	// 省份ID
	ProvinceID *string `json:"province_id"`
	// 城市ID
	CityID *string `json:"city_id"`
}

// 驾驶员
type Driver struct {
	DriverID string `json:"driver_id"`
}

// 企业connection
type EnterpriseConnection struct {
	// 记录
	Nodes []*Enterprise `json:"nodes"`
	// 分页信息
	PageInfo *PageInfo `json:"page_info"`
}

// 县-企业统计
type EnterpriseDistrictStatistics struct {
	// 区(县)
	District *District `json:"district"`
	// 公路客运
	HighWayTransport int `json:"high_way_transport"`
	// 旅游客运
	TravelTransport int `json:"travel_transport"`
	// 危化品车
	DangerTransport int `json:"danger_transport"`
	// 巡游出租车
	AroundTaxi int `json:"around_taxi"`
	// 网约出租车
	OnlineTaxi int `json:"online_taxi"`
	// 货车
	Trunk int `json:"trunk"`
	// 工程运输车(渣土车)
	MuckCar int `json:"muck_car"`
	// 工程运输车(混凝土)
	ConcreteCar int `json:"concrete_car"`
	// 租赁车
	RetailCar int `json:"retail_car"`
	// 校车
	SchoolCar int `json:"school_car"`
	// 营转非大客车
	BusinessToNonBus int `json:"business_to_non_bus"`
}

// 县-企业统计
type EnterpriseDistrictStatisticsQuery struct {
	// 城市ID
	CityID *string `json:"city_id"`
}

// 企业列表查询条件
type EnterpriseListQuery struct {
	// 分页参数
	PageParam *PageQuery `json:"page_param"`
	// 排序
	OrderBy *EnterpriseOrder `json:"order_by"`
	// 区域(县)ID
	DistrictID *StringComparisonExp `json:"district_id"`
	// 企业名称
	EnterpriseName *StringComparisonExp `json:"enterprise_name"`
	// 经营范围
	BusinessScope *StringComparisonExp `json:"business_scope"`
	// 是否黑名单
	IsBlack *BooleanComparisonExp `json:"is_black"`
}

// 企业-排序
type EnterpriseOrder struct {
	// 方向
	Direction OrderDirection `json:"direction"`
	// 排序字段
	Field EnterpriseOrderField `json:"field"`
}

// 企业详情-入参
type EnterpriseQuery struct {
	// 企业ID
	EnterpriseID string `json:"enterprise_id"`
}

// 高速交警部门
type HighSpeedPoliceDept struct {
	// 高速交警部门ID
	DeptID string `json:"dept_id"`
	// 部门名称
	Name string `json:"name"`
	// 上级部门
	SuperDept *HighSpeedPoliceDept `json:"super_dept"`
	// 备注
	Remarks *string `json:"remarks"`
	// 创建时间
	CreateAt string `json:"create_at"`
	// 创建人
	CreateBy *SystemUser `json:"create_by"`
	// 修改时间
	UpdateAt *string `json:"update_at"`
	// 修改人
	UpdateBy *SystemUser `json:"update_by"`
	// 删除时间
	DeleteAt *string `json:"delete_at"`
	// 删除人
	DeleteBy *SystemUser `json:"delete_by"`
}

// 分页信息
type PageInfo struct {
	// 记录数量
	Total int `json:"total"`
}

// 基本分页请求参数
type PageQuery struct {
	// 第几页
	CurrentPage int `json:"current_page"`
	// 分页大小
	PageSize int `json:"page_size"`
}

// 省份
type Province struct {
	// 省份ID
	ProvinceID string `json:"province_id"`
	// 省份名称
	Name string `json:"name"`
	// 省份对应的城市列表
	CityList []*City `json:"city_list"`
}

// 省份列表查询条件
type ProvinceListQuery struct {
	// 省份名称-模糊查询
	ProvinceName *string `json:"province_name"`
}

// 删除部门参数
type RemoveDepartmentParam struct {
	// 部门ID
	DepartmentID string `json:"department_id"`
}

// 删除企业参数
type RemoveEnterpriseParam struct {
	// 企业ID
	EnterpriseID string `json:"enterprise_id"`
}

type StringComparisonExp struct {
	Eq       *string  `json:"_eq"`
	Gt       *string  `json:"_gt"`
	Gte      *string  `json:"_gte"`
	Ilike    *string  `json:"_ilike"`
	In       []string `json:"_in"`
	IsNull   *bool    `json:"_is_null"`
	Like     *string  `json:"_like"`
	Lt       *string  `json:"_lt"`
	Lte      *string  `json:"_lte"`
	Neq      *string  `json:"_neq"`
	Nilike   *string  `json:"_nilike"`
	Nin      []string `json:"_nin"`
	Nlike    *string  `json:"_nlike"`
	Nsimilar *string  `json:"_nsimilar"`
	Similar  *string  `json:"_similar"`
}

// 系统用户
type SystemUser struct {
	// 用户ID
	UserID string `json:"user_id"`
	// 用户名
	Username string `json:"username"`
	// 企业
	Enterprise *Enterprise `json:"enterprise"`
	// 级别
	Grade *Dict `json:"grade"`
	// 所在部门
	Department *Department `json:"department"`
	// 审核级别
	AuditLevel *Dict `json:"audit_level"`
	// 用户类型
	UserType *Dict `json:"user_type"`
	// 是否有效
	IsValid *bool `json:"is_valid"`
	// 状态
	UserStatus *Dict `json:"user_status"`
	// 代理用户
	ProxyUser *string `json:"proxy_user"`
	// ip地址
	IPAddress *string `json:"ip_address"`
	// 是否绑定IP
	IsBindIP *bool `json:"is_bind_ip"`
	// 邮箱
	Email *string `json:"email"`
	// 联系电话
	Telephone *string `json:"telephone"`
	// 手机
	Mobile *string `json:"mobile"`
	// 手机串码
	Mkey *string `json:"mkey"`
	// 客户端版本号
	AppVersion *string `json:"app_version"`
	// 微信ID
	WxID *string `json:"wx_id"`
	// 是否渣土车管控平台绑定账号
	IsSlagCarPlatform *bool `json:"is_slag_car_platform"`
	// 备注
	Remarks *string `json:"remarks"`
	// 创建时间
	CreateAt string `json:"create_at"`
	// 创建人
	CreateBy *SystemUser `json:"create_by"`
	// 修改时间
	UpdateAt *string `json:"update_at"`
	// 修改人
	UpdateBy *SystemUser `json:"update_by"`
	// 删除时间
	DeleteAt *string `json:"delete_at"`
	// 删除人
	DeleteBy *SystemUser `json:"delete_by"`
}

func (SystemUser) IsIModel() {}

// 系统用户connection
type SystemUserConnection struct {
	// 记录
	Nodes []*SystemUser `json:"nodes"`
	// 分页信息
	PageInfo *PageInfo `json:"page_info"`
}

// 系统用户列表查询条件
type SystemUsersQuery struct {
	// 分页参数
	PageParam *PageQuery `json:"page_param"`
}

// 修改部门
type UpdateDepartmentParam struct {
	// 部门ID
	DepartmentID string `json:"department_id"`
	// 所在企业ID
	EnterpriseID string `json:"enterprise_id"`
	// 上级部门
	SuperiorDepartmentID *string `json:"superior_department_id"`
	// 部门名称
	DepartmentName *string `json:"department_name"`
	// 部门编码
	DepartmentCode *string `json:"department_code"`
	// 部门类别
	DepartmentCategory *string `json:"department_category"`
	// 内部序号
	InternalNumber *string `json:"internal_number"`
	// 备注
	Remark *string `json:"remark"`
}

// 修改企业-入参
type UpdateEnterpriseParam struct {
	// 企业ID
	EnterpriseID string `json:"enterprise_id"`
	// 上级企业ID
	SuperiorEnterpriseID *string `json:"superior_enterprise_id"`
	// 企业编号
	EnterpriseCode string `json:"enterprise_code"`
	// 企业名称
	EnterpriseName string `json:"enterprise_name"`
	// 企业级别
	EnterpriseLevel EnterpriseLevelEnum `json:"enterprise_level"`
	// 显示序号
	DisplayNumber *int `json:"display_number"`
	// 联系人信息
	ContactPersons []map[string]interface{} `json:"contact_persons"`
	// 企业地址
	EnterpriseAddress *string `json:"enterprise_address"`
	// 经营范围
	BusinessScope *BusinessScope `json:"business_scope"`
	// 传真号码
	FaxNumber *string `json:"fax_number"`
	// 省份
	ProvinceID string `json:"province_id"`
	// 城市
	CityID string `json:"city_id"`
	// 区
	DistrictID string `json:"district_id"`
	// 机构类别
	InstitutionCategory *InstitutionCategoryEnum `json:"institution_category"`
	// 经营许可证
	OperatingLicense *string `json:"operating_license"`
	// 营业执照
	BusinessLicense *string `json:"business_license"`
	// 营业执照发证日期
	BusinessLicenseIssuanceDate *string `json:"business_license_issuance_date"`
	// 营业执照到期日期
	BusinessLicenseExpiryDate *string `json:"business_license_expiry_date"`
	// 企业性质
	EnterpriseNature *EnterpriseNatureEnum `json:"enterprise_nature"`
	// 企业法人代表
	LegalRepresentative *string `json:"legal_representative"`
	// 企业法人代表联系电话
	LegalRepresentativePhone *string `json:"legal_representative_phone"`
	// 企业法人代表身份证
	LegalRepresentativeIDCard *string `json:"legal_representative_id_card"`
	// 企业法人身份证号
	LegalPersonIDNumber *string `json:"legal_person_id_number"`
	// 委托代理人
	EntrustedAgent *string `json:"entrusted_agent"`
	// 委托代理人联系电话
	EntrustedAgentPhone *string `json:"entrusted_agent_phone"`
	// 委托代理人身份证
	EntrustedAgentIDCard *string `json:"entrusted_agent_id_card"`
	// 委托代理人身份证号
	AgentIDNumber *string `json:"agent_id_number"`
	// 组织机构代码(企业的营运证)
	OrganizationCode *string `json:"organization_code"`
	// 组织机构代码证
	OrganizationCodeCertificate *string `json:"organization_code_certificate"`
	// 业务办理扫描件
	BusinessPic *string `json:"business_pic"`
}

// 车辆
type Vehicle struct {
	VehicleID string `json:"vehicle_id"`
}

// 经营范围枚举
type BusinessScope string

const (
	// 枚举内容还未知
	BusinessScopeOthers BusinessScope = "OTHERS"
)

var AllBusinessScope = []BusinessScope{
	BusinessScopeOthers,
}

func (e BusinessScope) IsValid() bool {
	switch e {
	case BusinessScopeOthers:
		return true
	}
	return false
}

func (e BusinessScope) String() string {
	return string(e)
}

func (e *BusinessScope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BusinessScope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BusinessScope", str)
	}
	return nil
}

func (e BusinessScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 部门-排序字段
type DepartmentOrderField string

const (
	// 创建时间
	DepartmentOrderFieldCreateAt DepartmentOrderField = "CREATE_AT"
	// 修改时间
	DepartmentOrderFieldUpdateAt DepartmentOrderField = "UPDATE_AT"
	// 部门名称
	DepartmentOrderFieldDepartmentName DepartmentOrderField = "DEPARTMENT_NAME"
)

var AllDepartmentOrderField = []DepartmentOrderField{
	DepartmentOrderFieldCreateAt,
	DepartmentOrderFieldUpdateAt,
	DepartmentOrderFieldDepartmentName,
}

func (e DepartmentOrderField) IsValid() bool {
	switch e {
	case DepartmentOrderFieldCreateAt, DepartmentOrderFieldUpdateAt, DepartmentOrderFieldDepartmentName:
		return true
	}
	return false
}

func (e DepartmentOrderField) String() string {
	return string(e)
}

func (e *DepartmentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DepartmentOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DepartmentOrderField", str)
	}
	return nil
}

func (e DepartmentOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 企业级别枚举
type EnterpriseLevelEnum string

const (
	// 枚举内容未知
	EnterpriseLevelEnumOthers EnterpriseLevelEnum = "OTHERS"
)

var AllEnterpriseLevelEnum = []EnterpriseLevelEnum{
	EnterpriseLevelEnumOthers,
}

func (e EnterpriseLevelEnum) IsValid() bool {
	switch e {
	case EnterpriseLevelEnumOthers:
		return true
	}
	return false
}

func (e EnterpriseLevelEnum) String() string {
	return string(e)
}

func (e *EnterpriseLevelEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseLevelEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseLevelEnum", str)
	}
	return nil
}

func (e EnterpriseLevelEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 企业性质枚举
type EnterpriseNatureEnum string

const (
	// 枚举内容未知
	EnterpriseNatureEnumOthers EnterpriseNatureEnum = "OTHERS"
)

var AllEnterpriseNatureEnum = []EnterpriseNatureEnum{
	EnterpriseNatureEnumOthers,
}

func (e EnterpriseNatureEnum) IsValid() bool {
	switch e {
	case EnterpriseNatureEnumOthers:
		return true
	}
	return false
}

func (e EnterpriseNatureEnum) String() string {
	return string(e)
}

func (e *EnterpriseNatureEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseNatureEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseNatureEnum", str)
	}
	return nil
}

func (e EnterpriseNatureEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 企业排序字段
type EnterpriseOrderField string

const (
	// 创建时间
	EnterpriseOrderFieldCreateAt EnterpriseOrderField = "CREATE_AT"
	// 修改时间
	EnterpriseOrderFieldUpdateAt EnterpriseOrderField = "UPDATE_AT"
)

var AllEnterpriseOrderField = []EnterpriseOrderField{
	EnterpriseOrderFieldCreateAt,
	EnterpriseOrderFieldUpdateAt,
}

func (e EnterpriseOrderField) IsValid() bool {
	switch e {
	case EnterpriseOrderFieldCreateAt, EnterpriseOrderFieldUpdateAt:
		return true
	}
	return false
}

func (e EnterpriseOrderField) String() string {
	return string(e)
}

func (e *EnterpriseOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseOrderField", str)
	}
	return nil
}

func (e EnterpriseOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 机构类别枚举
type InstitutionCategoryEnum string

const (
	// 枚举内容未知
	InstitutionCategoryEnumOthers InstitutionCategoryEnum = "OTHERS"
)

var AllInstitutionCategoryEnum = []InstitutionCategoryEnum{
	InstitutionCategoryEnumOthers,
}

func (e InstitutionCategoryEnum) IsValid() bool {
	switch e {
	case InstitutionCategoryEnumOthers:
		return true
	}
	return false
}

func (e InstitutionCategoryEnum) String() string {
	return string(e)
}

func (e *InstitutionCategoryEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InstitutionCategoryEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InstitutionCategoryEnum", str)
	}
	return nil
}

func (e InstitutionCategoryEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 排序方向枚举
type OrderDirection string

const (
	// 从大到小排序
	OrderDirectionAsc OrderDirection = "ASC"
	// 从小到大排序
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
