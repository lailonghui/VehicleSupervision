// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"system-manage/internal/graphql/system/graph/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	City struct {
		CityID       func(childComplexity int) int
		DistrictList func(childComplexity int) int
		Name         func(childComplexity int) int
		Province     func(childComplexity int) int
	}

	Department struct {
		CreateAt           func(childComplexity int) int
		CreateBy           func(childComplexity int) int
		DeleteAt           func(childComplexity int) int
		DeleteBy           func(childComplexity int) int
		DepartmentCategory func(childComplexity int) int
		DepartmentCode     func(childComplexity int) int
		DepartmentID       func(childComplexity int) int
		DepartmentName     func(childComplexity int) int
		Enterprise         func(childComplexity int) int
		InternalNumber     func(childComplexity int) int
		Remark             func(childComplexity int) int
		SuperiorDepartment func(childComplexity int) int
		UpdateAt           func(childComplexity int) int
		UpdateBy           func(childComplexity int) int
	}

	DepartmentConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Dict struct {
		DictName  func(childComplexity int) int
		DictType  func(childComplexity int) int
		DictValue func(childComplexity int) int
	}

	DictType struct {
		TypeCode func(childComplexity int) int
		TypeName func(childComplexity int) int
	}

	District struct {
		City       func(childComplexity int) int
		DistrictID func(childComplexity int) int
		Name       func(childComplexity int) int
		Province   func(childComplexity int) int
	}

	Driver struct {
		DriverID func(childComplexity int) int
	}

	Enterprise struct {
		AgentIDNumber               func(childComplexity int) int
		AssociationReviewBy         func(childComplexity int) int
		AssociationReviewOpinion    func(childComplexity int) int
		AssociationReviewTime       func(childComplexity int) int
		Brigade                     func(childComplexity int) int
		BrigadeReviewBy             func(childComplexity int) int
		BrigadeReviewOpinion        func(childComplexity int) int
		BrigadeReviewTime           func(childComplexity int) int
		BusinessLicense             func(childComplexity int) int
		BusinessLicenseExpiryDate   func(childComplexity int) int
		BusinessLicenseIssuanceDate func(childComplexity int) int
		BusinessPic                 func(childComplexity int) int
		BusinessScope               func(childComplexity int) int
		City                        func(childComplexity int) int
		ContactPersons              func(childComplexity int) int
		CreateAt                    func(childComplexity int) int
		CreateBy                    func(childComplexity int) int
		DeleteAt                    func(childComplexity int) int
		DeleteBy                    func(childComplexity int) int
		DisplayNumber               func(childComplexity int) int
		District                    func(childComplexity int) int
		EnterpriseAddress           func(childComplexity int) int
		EnterpriseCode              func(childComplexity int) int
		EnterpriseID                func(childComplexity int) int
		EnterpriseLevel             func(childComplexity int) int
		EnterpriseName              func(childComplexity int) int
		EnterpriseNature            func(childComplexity int) int
		EntrustedAgent              func(childComplexity int) int
		EntrustedAgentIDCard        func(childComplexity int) int
		EntrustedAgentPhone         func(childComplexity int) int
		FaxNumber                   func(childComplexity int) int
		HighSpeedBrigade            func(childComplexity int) int
		HighSpeedDetachment         func(childComplexity int) int
		HighSpeedSquadron           func(childComplexity int) int
		InstitutionCategory         func(childComplexity int) int
		IsBlack                     func(childComplexity int) int
		IsCheck                     func(childComplexity int) int
		IsExpire                    func(childComplexity int) int
		IsInput                     func(childComplexity int) int
		IsInstall                   func(childComplexity int) int
		IsRideHailingDrivingSchool  func(childComplexity int) int
		IsRideHailingEnterprise     func(childComplexity int) int
		IsUploadProvince            func(childComplexity int) int
		LegalPersonIDNumber         func(childComplexity int) int
		LegalRepresentative         func(childComplexity int) int
		LegalRepresentativeIDCard   func(childComplexity int) int
		LegalRepresentativePhone    func(childComplexity int) int
		OperatingLicense            func(childComplexity int) int
		OrganizationCode            func(childComplexity int) int
		OrganizationCodeCertificate func(childComplexity int) int
		PoliceStation               func(childComplexity int) int
		Province                    func(childComplexity int) int
		RecordAt                    func(childComplexity int) int
		RecordBy                    func(childComplexity int) int
		Remarks                     func(childComplexity int) int
		Score                       func(childComplexity int) int
		SlagCarSupplierCode         func(childComplexity int) int
		SlagCarSupplierState        func(childComplexity int) int
		SuperiorEnterprise          func(childComplexity int) int
		TrafficPoliceLevel          func(childComplexity int) int
		UpdateAt                    func(childComplexity int) int
		UpdateBy                    func(childComplexity int) int
		UpdateTimeIn                func(childComplexity int) int
	}

	EnterpriseConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	EnterpriseDistrictStatistics struct {
		AroundTaxi       func(childComplexity int) int
		BusinessToNonBus func(childComplexity int) int
		ConcreteCar      func(childComplexity int) int
		DangerTransport  func(childComplexity int) int
		District         func(childComplexity int) int
		HighWayTransport func(childComplexity int) int
		MuckCar          func(childComplexity int) int
		OnlineTaxi       func(childComplexity int) int
		RetailCar        func(childComplexity int) int
		SchoolCar        func(childComplexity int) int
		TravelTransport  func(childComplexity int) int
		Trunk            func(childComplexity int) int
	}

	HighSpeedPoliceDept struct {
		CreateAt  func(childComplexity int) int
		CreateBy  func(childComplexity int) int
		DeleteAt  func(childComplexity int) int
		DeleteBy  func(childComplexity int) int
		DeptID    func(childComplexity int) int
		Name      func(childComplexity int) int
		Remarks   func(childComplexity int) int
		SuperDept func(childComplexity int) int
		UpdateAt  func(childComplexity int) int
		UpdateBy  func(childComplexity int) int
	}

	Mutation struct {
		CreateDepartment func(childComplexity int, input model.CreateDepartmentParam) int
		CreateEnterprise func(childComplexity int, input model.CreateEnterpriseParam) int
		RemoveDepartment func(childComplexity int, input model.RemoveDepartmentParam) int
		RemoveEnterprise func(childComplexity int, input model.RemoveEnterpriseParam) int
		UpdateDepartment func(childComplexity int, input model.UpdateDepartmentParam) int
		UpdateEnterprise func(childComplexity int, input model.UpdateEnterpriseParam) int
	}

	PageInfo struct {
		Total func(childComplexity int) int
	}

	Province struct {
		CityList   func(childComplexity int) int
		Name       func(childComplexity int) int
		ProvinceID func(childComplexity int) int
	}

	Query struct {
		CityList                     func(childComplexity int, query *model.CityListQuery) int
		Department                   func(childComplexity int, query model.DepartmentQuery) int
		DepartmentList               func(childComplexity int, query model.DepartmentListQuery) int
		DictList                     func(childComplexity int, query model.DictListQuery) int
		DistrictList                 func(childComplexity int, query *model.DistrictListQuery) int
		Enterprise                   func(childComplexity int, query model.EnterpriseQuery) int
		EnterpriseDistrictStatistics func(childComplexity int, query *model.EnterpriseDistrictStatisticsQuery) int
		EnterpriseList               func(childComplexity int, query *model.EnterpriseListQuery) int
		ProvinceList                 func(childComplexity int, query *model.ProvinceListQuery) int
		SystemUser                   func(childComplexity int, userID string) int
		SystemUsers                  func(childComplexity int, query *model.SystemUsersQuery) int
	}

	SystemUser struct {
		AppVersion        func(childComplexity int) int
		AuditLevel        func(childComplexity int) int
		CreateAt          func(childComplexity int) int
		CreateBy          func(childComplexity int) int
		DeleteAt          func(childComplexity int) int
		DeleteBy          func(childComplexity int) int
		Department        func(childComplexity int) int
		Email             func(childComplexity int) int
		Enterprise        func(childComplexity int) int
		Grade             func(childComplexity int) int
		IPAddress         func(childComplexity int) int
		IsBindIP          func(childComplexity int) int
		IsSlagCarPlatform func(childComplexity int) int
		IsValid           func(childComplexity int) int
		Mkey              func(childComplexity int) int
		Mobile            func(childComplexity int) int
		ProxyUser         func(childComplexity int) int
		Remarks           func(childComplexity int) int
		Telephone         func(childComplexity int) int
		UpdateAt          func(childComplexity int) int
		UpdateBy          func(childComplexity int) int
		UserID            func(childComplexity int) int
		UserStatus        func(childComplexity int) int
		UserType          func(childComplexity int) int
		Username          func(childComplexity int) int
		WxID              func(childComplexity int) int
	}

	SystemUserConnection struct {
		Nodes    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	Vehicle struct {
		VehicleID func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateDepartment(ctx context.Context, input model.CreateDepartmentParam) (*model.Department, error)
	UpdateDepartment(ctx context.Context, input model.UpdateDepartmentParam) (*model.Department, error)
	RemoveDepartment(ctx context.Context, input model.RemoveDepartmentParam) (*model.Department, error)
	CreateEnterprise(ctx context.Context, input model.CreateEnterpriseParam) (*model.Enterprise, error)
	UpdateEnterprise(ctx context.Context, input model.UpdateEnterpriseParam) (*model.Enterprise, error)
	RemoveEnterprise(ctx context.Context, input model.RemoveEnterpriseParam) (*model.Enterprise, error)
}
type QueryResolver interface {
	Department(ctx context.Context, query model.DepartmentQuery) (*model.Department, error)
	DepartmentList(ctx context.Context, query model.DepartmentListQuery) (*model.DepartmentConnection, error)
	DictList(ctx context.Context, query model.DictListQuery) ([]*model.Dict, error)
	ProvinceList(ctx context.Context, query *model.ProvinceListQuery) ([]*model.Province, error)
	CityList(ctx context.Context, query *model.CityListQuery) ([]*model.City, error)
	DistrictList(ctx context.Context, query *model.DistrictListQuery) ([]*model.District, error)
	Enterprise(ctx context.Context, query model.EnterpriseQuery) (*model.Enterprise, error)
	EnterpriseList(ctx context.Context, query *model.EnterpriseListQuery) (*model.EnterpriseConnection, error)
	EnterpriseDistrictStatistics(ctx context.Context, query *model.EnterpriseDistrictStatisticsQuery) ([]*model.EnterpriseDistrictStatistics, error)
	SystemUser(ctx context.Context, userID string) (*model.SystemUser, error)
	SystemUsers(ctx context.Context, query *model.SystemUsersQuery) (*model.SystemUserConnection, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "City.city_id":
		if e.complexity.City.CityID == nil {
			break
		}

		return e.complexity.City.CityID(childComplexity), true

	case "City.district_list":
		if e.complexity.City.DistrictList == nil {
			break
		}

		return e.complexity.City.DistrictList(childComplexity), true

	case "City.name":
		if e.complexity.City.Name == nil {
			break
		}

		return e.complexity.City.Name(childComplexity), true

	case "City.province":
		if e.complexity.City.Province == nil {
			break
		}

		return e.complexity.City.Province(childComplexity), true

	case "Department.create_at":
		if e.complexity.Department.CreateAt == nil {
			break
		}

		return e.complexity.Department.CreateAt(childComplexity), true

	case "Department.create_by":
		if e.complexity.Department.CreateBy == nil {
			break
		}

		return e.complexity.Department.CreateBy(childComplexity), true

	case "Department.delete_at":
		if e.complexity.Department.DeleteAt == nil {
			break
		}

		return e.complexity.Department.DeleteAt(childComplexity), true

	case "Department.delete_by":
		if e.complexity.Department.DeleteBy == nil {
			break
		}

		return e.complexity.Department.DeleteBy(childComplexity), true

	case "Department.department_category":
		if e.complexity.Department.DepartmentCategory == nil {
			break
		}

		return e.complexity.Department.DepartmentCategory(childComplexity), true

	case "Department.department_code":
		if e.complexity.Department.DepartmentCode == nil {
			break
		}

		return e.complexity.Department.DepartmentCode(childComplexity), true

	case "Department.department_id":
		if e.complexity.Department.DepartmentID == nil {
			break
		}

		return e.complexity.Department.DepartmentID(childComplexity), true

	case "Department.department_name":
		if e.complexity.Department.DepartmentName == nil {
			break
		}

		return e.complexity.Department.DepartmentName(childComplexity), true

	case "Department.enterprise":
		if e.complexity.Department.Enterprise == nil {
			break
		}

		return e.complexity.Department.Enterprise(childComplexity), true

	case "Department.internal_number":
		if e.complexity.Department.InternalNumber == nil {
			break
		}

		return e.complexity.Department.InternalNumber(childComplexity), true

	case "Department.remark":
		if e.complexity.Department.Remark == nil {
			break
		}

		return e.complexity.Department.Remark(childComplexity), true

	case "Department.superior_department":
		if e.complexity.Department.SuperiorDepartment == nil {
			break
		}

		return e.complexity.Department.SuperiorDepartment(childComplexity), true

	case "Department.update_at":
		if e.complexity.Department.UpdateAt == nil {
			break
		}

		return e.complexity.Department.UpdateAt(childComplexity), true

	case "Department.update_by":
		if e.complexity.Department.UpdateBy == nil {
			break
		}

		return e.complexity.Department.UpdateBy(childComplexity), true

	case "DepartmentConnection.nodes":
		if e.complexity.DepartmentConnection.Nodes == nil {
			break
		}

		return e.complexity.DepartmentConnection.Nodes(childComplexity), true

	case "DepartmentConnection.page_info":
		if e.complexity.DepartmentConnection.PageInfo == nil {
			break
		}

		return e.complexity.DepartmentConnection.PageInfo(childComplexity), true

	case "Dict.dict_name":
		if e.complexity.Dict.DictName == nil {
			break
		}

		return e.complexity.Dict.DictName(childComplexity), true

	case "Dict.dict_type":
		if e.complexity.Dict.DictType == nil {
			break
		}

		return e.complexity.Dict.DictType(childComplexity), true

	case "Dict.dict_value":
		if e.complexity.Dict.DictValue == nil {
			break
		}

		return e.complexity.Dict.DictValue(childComplexity), true

	case "DictType.type_code":
		if e.complexity.DictType.TypeCode == nil {
			break
		}

		return e.complexity.DictType.TypeCode(childComplexity), true

	case "DictType.type_name":
		if e.complexity.DictType.TypeName == nil {
			break
		}

		return e.complexity.DictType.TypeName(childComplexity), true

	case "District.city":
		if e.complexity.District.City == nil {
			break
		}

		return e.complexity.District.City(childComplexity), true

	case "District.district_id":
		if e.complexity.District.DistrictID == nil {
			break
		}

		return e.complexity.District.DistrictID(childComplexity), true

	case "District.name":
		if e.complexity.District.Name == nil {
			break
		}

		return e.complexity.District.Name(childComplexity), true

	case "District.province":
		if e.complexity.District.Province == nil {
			break
		}

		return e.complexity.District.Province(childComplexity), true

	case "Driver.driver_id":
		if e.complexity.Driver.DriverID == nil {
			break
		}

		return e.complexity.Driver.DriverID(childComplexity), true

	case "Enterprise.agent_id_number":
		if e.complexity.Enterprise.AgentIDNumber == nil {
			break
		}

		return e.complexity.Enterprise.AgentIDNumber(childComplexity), true

	case "Enterprise.association_review_by":
		if e.complexity.Enterprise.AssociationReviewBy == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewBy(childComplexity), true

	case "Enterprise.association_review_opinion":
		if e.complexity.Enterprise.AssociationReviewOpinion == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewOpinion(childComplexity), true

	case "Enterprise.association_review_time":
		if e.complexity.Enterprise.AssociationReviewTime == nil {
			break
		}

		return e.complexity.Enterprise.AssociationReviewTime(childComplexity), true

	case "Enterprise.brigade":
		if e.complexity.Enterprise.Brigade == nil {
			break
		}

		return e.complexity.Enterprise.Brigade(childComplexity), true

	case "Enterprise.brigade_review_by":
		if e.complexity.Enterprise.BrigadeReviewBy == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewBy(childComplexity), true

	case "Enterprise.brigade_review_opinion":
		if e.complexity.Enterprise.BrigadeReviewOpinion == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewOpinion(childComplexity), true

	case "Enterprise.brigade_review_time":
		if e.complexity.Enterprise.BrigadeReviewTime == nil {
			break
		}

		return e.complexity.Enterprise.BrigadeReviewTime(childComplexity), true

	case "Enterprise.business_license":
		if e.complexity.Enterprise.BusinessLicense == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicense(childComplexity), true

	case "Enterprise.business_license_expiry_date":
		if e.complexity.Enterprise.BusinessLicenseExpiryDate == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicenseExpiryDate(childComplexity), true

	case "Enterprise.business_license_issuance_date":
		if e.complexity.Enterprise.BusinessLicenseIssuanceDate == nil {
			break
		}

		return e.complexity.Enterprise.BusinessLicenseIssuanceDate(childComplexity), true

	case "Enterprise.business_pic":
		if e.complexity.Enterprise.BusinessPic == nil {
			break
		}

		return e.complexity.Enterprise.BusinessPic(childComplexity), true

	case "Enterprise.business_scope":
		if e.complexity.Enterprise.BusinessScope == nil {
			break
		}

		return e.complexity.Enterprise.BusinessScope(childComplexity), true

	case "Enterprise.city":
		if e.complexity.Enterprise.City == nil {
			break
		}

		return e.complexity.Enterprise.City(childComplexity), true

	case "Enterprise.contact_persons":
		if e.complexity.Enterprise.ContactPersons == nil {
			break
		}

		return e.complexity.Enterprise.ContactPersons(childComplexity), true

	case "Enterprise.create_at":
		if e.complexity.Enterprise.CreateAt == nil {
			break
		}

		return e.complexity.Enterprise.CreateAt(childComplexity), true

	case "Enterprise.create_by":
		if e.complexity.Enterprise.CreateBy == nil {
			break
		}

		return e.complexity.Enterprise.CreateBy(childComplexity), true

	case "Enterprise.delete_at":
		if e.complexity.Enterprise.DeleteAt == nil {
			break
		}

		return e.complexity.Enterprise.DeleteAt(childComplexity), true

	case "Enterprise.delete_by":
		if e.complexity.Enterprise.DeleteBy == nil {
			break
		}

		return e.complexity.Enterprise.DeleteBy(childComplexity), true

	case "Enterprise.display_number":
		if e.complexity.Enterprise.DisplayNumber == nil {
			break
		}

		return e.complexity.Enterprise.DisplayNumber(childComplexity), true

	case "Enterprise.district":
		if e.complexity.Enterprise.District == nil {
			break
		}

		return e.complexity.Enterprise.District(childComplexity), true

	case "Enterprise.enterprise_address":
		if e.complexity.Enterprise.EnterpriseAddress == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseAddress(childComplexity), true

	case "Enterprise.enterprise_code":
		if e.complexity.Enterprise.EnterpriseCode == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseCode(childComplexity), true

	case "Enterprise.enterprise_id":
		if e.complexity.Enterprise.EnterpriseID == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseID(childComplexity), true

	case "Enterprise.enterprise_level":
		if e.complexity.Enterprise.EnterpriseLevel == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseLevel(childComplexity), true

	case "Enterprise.enterprise_name":
		if e.complexity.Enterprise.EnterpriseName == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseName(childComplexity), true

	case "Enterprise.enterprise_nature":
		if e.complexity.Enterprise.EnterpriseNature == nil {
			break
		}

		return e.complexity.Enterprise.EnterpriseNature(childComplexity), true

	case "Enterprise.entrusted_agent":
		if e.complexity.Enterprise.EntrustedAgent == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgent(childComplexity), true

	case "Enterprise.entrusted_agent_id_card":
		if e.complexity.Enterprise.EntrustedAgentIDCard == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgentIDCard(childComplexity), true

	case "Enterprise.entrusted_agent_phone":
		if e.complexity.Enterprise.EntrustedAgentPhone == nil {
			break
		}

		return e.complexity.Enterprise.EntrustedAgentPhone(childComplexity), true

	case "Enterprise.fax_number":
		if e.complexity.Enterprise.FaxNumber == nil {
			break
		}

		return e.complexity.Enterprise.FaxNumber(childComplexity), true

	case "Enterprise.high_speed_brigade":
		if e.complexity.Enterprise.HighSpeedBrigade == nil {
			break
		}

		return e.complexity.Enterprise.HighSpeedBrigade(childComplexity), true

	case "Enterprise.high_speed_detachment":
		if e.complexity.Enterprise.HighSpeedDetachment == nil {
			break
		}

		return e.complexity.Enterprise.HighSpeedDetachment(childComplexity), true

	case "Enterprise.high_speed_squadron":
		if e.complexity.Enterprise.HighSpeedSquadron == nil {
			break
		}

		return e.complexity.Enterprise.HighSpeedSquadron(childComplexity), true

	case "Enterprise.institution_category":
		if e.complexity.Enterprise.InstitutionCategory == nil {
			break
		}

		return e.complexity.Enterprise.InstitutionCategory(childComplexity), true

	case "Enterprise.is_black":
		if e.complexity.Enterprise.IsBlack == nil {
			break
		}

		return e.complexity.Enterprise.IsBlack(childComplexity), true

	case "Enterprise.is_check":
		if e.complexity.Enterprise.IsCheck == nil {
			break
		}

		return e.complexity.Enterprise.IsCheck(childComplexity), true

	case "Enterprise.is_expire":
		if e.complexity.Enterprise.IsExpire == nil {
			break
		}

		return e.complexity.Enterprise.IsExpire(childComplexity), true

	case "Enterprise.is_input":
		if e.complexity.Enterprise.IsInput == nil {
			break
		}

		return e.complexity.Enterprise.IsInput(childComplexity), true

	case "Enterprise.is_install":
		if e.complexity.Enterprise.IsInstall == nil {
			break
		}

		return e.complexity.Enterprise.IsInstall(childComplexity), true

	case "Enterprise.is_ride_hailing_driving_school":
		if e.complexity.Enterprise.IsRideHailingDrivingSchool == nil {
			break
		}

		return e.complexity.Enterprise.IsRideHailingDrivingSchool(childComplexity), true

	case "Enterprise.is_ride_hailing_enterprise":
		if e.complexity.Enterprise.IsRideHailingEnterprise == nil {
			break
		}

		return e.complexity.Enterprise.IsRideHailingEnterprise(childComplexity), true

	case "Enterprise.is_upload_province":
		if e.complexity.Enterprise.IsUploadProvince == nil {
			break
		}

		return e.complexity.Enterprise.IsUploadProvince(childComplexity), true

	case "Enterprise.legal_person_id_number":
		if e.complexity.Enterprise.LegalPersonIDNumber == nil {
			break
		}

		return e.complexity.Enterprise.LegalPersonIDNumber(childComplexity), true

	case "Enterprise.legal_representative":
		if e.complexity.Enterprise.LegalRepresentative == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentative(childComplexity), true

	case "Enterprise.legal_representative_id_card":
		if e.complexity.Enterprise.LegalRepresentativeIDCard == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentativeIDCard(childComplexity), true

	case "Enterprise.legal_representative_phone":
		if e.complexity.Enterprise.LegalRepresentativePhone == nil {
			break
		}

		return e.complexity.Enterprise.LegalRepresentativePhone(childComplexity), true

	case "Enterprise.operating_license":
		if e.complexity.Enterprise.OperatingLicense == nil {
			break
		}

		return e.complexity.Enterprise.OperatingLicense(childComplexity), true

	case "Enterprise.organization_code":
		if e.complexity.Enterprise.OrganizationCode == nil {
			break
		}

		return e.complexity.Enterprise.OrganizationCode(childComplexity), true

	case "Enterprise.organization_code_certificate":
		if e.complexity.Enterprise.OrganizationCodeCertificate == nil {
			break
		}

		return e.complexity.Enterprise.OrganizationCodeCertificate(childComplexity), true

	case "Enterprise.police_station":
		if e.complexity.Enterprise.PoliceStation == nil {
			break
		}

		return e.complexity.Enterprise.PoliceStation(childComplexity), true

	case "Enterprise.province":
		if e.complexity.Enterprise.Province == nil {
			break
		}

		return e.complexity.Enterprise.Province(childComplexity), true

	case "Enterprise.record_at":
		if e.complexity.Enterprise.RecordAt == nil {
			break
		}

		return e.complexity.Enterprise.RecordAt(childComplexity), true

	case "Enterprise.record_by":
		if e.complexity.Enterprise.RecordBy == nil {
			break
		}

		return e.complexity.Enterprise.RecordBy(childComplexity), true

	case "Enterprise.remarks":
		if e.complexity.Enterprise.Remarks == nil {
			break
		}

		return e.complexity.Enterprise.Remarks(childComplexity), true

	case "Enterprise.score":
		if e.complexity.Enterprise.Score == nil {
			break
		}

		return e.complexity.Enterprise.Score(childComplexity), true

	case "Enterprise.slag_car_supplier_code":
		if e.complexity.Enterprise.SlagCarSupplierCode == nil {
			break
		}

		return e.complexity.Enterprise.SlagCarSupplierCode(childComplexity), true

	case "Enterprise.slag_car_supplier_state":
		if e.complexity.Enterprise.SlagCarSupplierState == nil {
			break
		}

		return e.complexity.Enterprise.SlagCarSupplierState(childComplexity), true

	case "Enterprise.superior_enterprise":
		if e.complexity.Enterprise.SuperiorEnterprise == nil {
			break
		}

		return e.complexity.Enterprise.SuperiorEnterprise(childComplexity), true

	case "Enterprise.traffic_police_level":
		if e.complexity.Enterprise.TrafficPoliceLevel == nil {
			break
		}

		return e.complexity.Enterprise.TrafficPoliceLevel(childComplexity), true

	case "Enterprise.update_at":
		if e.complexity.Enterprise.UpdateAt == nil {
			break
		}

		return e.complexity.Enterprise.UpdateAt(childComplexity), true

	case "Enterprise.update_by":
		if e.complexity.Enterprise.UpdateBy == nil {
			break
		}

		return e.complexity.Enterprise.UpdateBy(childComplexity), true

	case "Enterprise.update_time_in":
		if e.complexity.Enterprise.UpdateTimeIn == nil {
			break
		}

		return e.complexity.Enterprise.UpdateTimeIn(childComplexity), true

	case "EnterpriseConnection.nodes":
		if e.complexity.EnterpriseConnection.Nodes == nil {
			break
		}

		return e.complexity.EnterpriseConnection.Nodes(childComplexity), true

	case "EnterpriseConnection.page_info":
		if e.complexity.EnterpriseConnection.PageInfo == nil {
			break
		}

		return e.complexity.EnterpriseConnection.PageInfo(childComplexity), true

	case "EnterpriseDistrictStatistics.around_taxi":
		if e.complexity.EnterpriseDistrictStatistics.AroundTaxi == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.AroundTaxi(childComplexity), true

	case "EnterpriseDistrictStatistics.business_to_non_bus":
		if e.complexity.EnterpriseDistrictStatistics.BusinessToNonBus == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.BusinessToNonBus(childComplexity), true

	case "EnterpriseDistrictStatistics.concrete_car":
		if e.complexity.EnterpriseDistrictStatistics.ConcreteCar == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.ConcreteCar(childComplexity), true

	case "EnterpriseDistrictStatistics.danger_transport":
		if e.complexity.EnterpriseDistrictStatistics.DangerTransport == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.DangerTransport(childComplexity), true

	case "EnterpriseDistrictStatistics.district":
		if e.complexity.EnterpriseDistrictStatistics.District == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.District(childComplexity), true

	case "EnterpriseDistrictStatistics.high_way_transport":
		if e.complexity.EnterpriseDistrictStatistics.HighWayTransport == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.HighWayTransport(childComplexity), true

	case "EnterpriseDistrictStatistics.muck_car":
		if e.complexity.EnterpriseDistrictStatistics.MuckCar == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.MuckCar(childComplexity), true

	case "EnterpriseDistrictStatistics.online_taxi":
		if e.complexity.EnterpriseDistrictStatistics.OnlineTaxi == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.OnlineTaxi(childComplexity), true

	case "EnterpriseDistrictStatistics.retail_car":
		if e.complexity.EnterpriseDistrictStatistics.RetailCar == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.RetailCar(childComplexity), true

	case "EnterpriseDistrictStatistics.school_car":
		if e.complexity.EnterpriseDistrictStatistics.SchoolCar == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.SchoolCar(childComplexity), true

	case "EnterpriseDistrictStatistics.travel_transport":
		if e.complexity.EnterpriseDistrictStatistics.TravelTransport == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.TravelTransport(childComplexity), true

	case "EnterpriseDistrictStatistics.trunk":
		if e.complexity.EnterpriseDistrictStatistics.Trunk == nil {
			break
		}

		return e.complexity.EnterpriseDistrictStatistics.Trunk(childComplexity), true

	case "HighSpeedPoliceDept.create_at":
		if e.complexity.HighSpeedPoliceDept.CreateAt == nil {
			break
		}

		return e.complexity.HighSpeedPoliceDept.CreateAt(childComplexity), true

	case "HighSpeedPoliceDept.create_by":
		if e.complexity.HighSpeedPoliceDept.CreateBy == nil {
			break
		}

		return e.complexity.HighSpeedPoliceDept.CreateBy(childComplexity), true

	case "HighSpeedPoliceDept.delete_at":
		if e.complexity.HighSpeedPoliceDept.DeleteAt == nil {
			break
		}

		return e.complexity.HighSpeedPoliceDept.DeleteAt(childComplexity), true

	case "HighSpeedPoliceDept.delete_by":
		if e.complexity.HighSpeedPoliceDept.DeleteBy == nil {
			break
		}

		return e.complexity.HighSpeedPoliceDept.DeleteBy(childComplexity), true

	case "HighSpeedPoliceDept.dept_id":
		if e.complexity.HighSpeedPoliceDept.DeptID == nil {
			break
		}

		return e.complexity.HighSpeedPoliceDept.DeptID(childComplexity), true

	case "HighSpeedPoliceDept.name":
		if e.complexity.HighSpeedPoliceDept.Name == nil {
			break
		}

		return e.complexity.HighSpeedPoliceDept.Name(childComplexity), true

	case "HighSpeedPoliceDept.remarks":
		if e.complexity.HighSpeedPoliceDept.Remarks == nil {
			break
		}

		return e.complexity.HighSpeedPoliceDept.Remarks(childComplexity), true

	case "HighSpeedPoliceDept.super_dept":
		if e.complexity.HighSpeedPoliceDept.SuperDept == nil {
			break
		}

		return e.complexity.HighSpeedPoliceDept.SuperDept(childComplexity), true

	case "HighSpeedPoliceDept.update_at":
		if e.complexity.HighSpeedPoliceDept.UpdateAt == nil {
			break
		}

		return e.complexity.HighSpeedPoliceDept.UpdateAt(childComplexity), true

	case "HighSpeedPoliceDept.update_by":
		if e.complexity.HighSpeedPoliceDept.UpdateBy == nil {
			break
		}

		return e.complexity.HighSpeedPoliceDept.UpdateBy(childComplexity), true

	case "Mutation.createDepartment":
		if e.complexity.Mutation.CreateDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_createDepartment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDepartment(childComplexity, args["input"].(model.CreateDepartmentParam)), true

	case "Mutation.createEnterprise":
		if e.complexity.Mutation.CreateEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_createEnterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEnterprise(childComplexity, args["input"].(model.CreateEnterpriseParam)), true

	case "Mutation.removeDepartment":
		if e.complexity.Mutation.RemoveDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_removeDepartment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveDepartment(childComplexity, args["input"].(model.RemoveDepartmentParam)), true

	case "Mutation.removeEnterprise":
		if e.complexity.Mutation.RemoveEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_removeEnterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveEnterprise(childComplexity, args["input"].(model.RemoveEnterpriseParam)), true

	case "Mutation.updateDepartment":
		if e.complexity.Mutation.UpdateDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_updateDepartment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDepartment(childComplexity, args["input"].(model.UpdateDepartmentParam)), true

	case "Mutation.updateEnterprise":
		if e.complexity.Mutation.UpdateEnterprise == nil {
			break
		}

		args, err := ec.field_Mutation_updateEnterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEnterprise(childComplexity, args["input"].(model.UpdateEnterpriseParam)), true

	case "PageInfo.total":
		if e.complexity.PageInfo.Total == nil {
			break
		}

		return e.complexity.PageInfo.Total(childComplexity), true

	case "Province.city_list":
		if e.complexity.Province.CityList == nil {
			break
		}

		return e.complexity.Province.CityList(childComplexity), true

	case "Province.name":
		if e.complexity.Province.Name == nil {
			break
		}

		return e.complexity.Province.Name(childComplexity), true

	case "Province.province_id":
		if e.complexity.Province.ProvinceID == nil {
			break
		}

		return e.complexity.Province.ProvinceID(childComplexity), true

	case "Query.cityList":
		if e.complexity.Query.CityList == nil {
			break
		}

		args, err := ec.field_Query_cityList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CityList(childComplexity, args["query"].(*model.CityListQuery)), true

	case "Query.department":
		if e.complexity.Query.Department == nil {
			break
		}

		args, err := ec.field_Query_department_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Department(childComplexity, args["query"].(model.DepartmentQuery)), true

	case "Query.departmentList":
		if e.complexity.Query.DepartmentList == nil {
			break
		}

		args, err := ec.field_Query_departmentList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DepartmentList(childComplexity, args["query"].(model.DepartmentListQuery)), true

	case "Query.dictList":
		if e.complexity.Query.DictList == nil {
			break
		}

		args, err := ec.field_Query_dictList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DictList(childComplexity, args["query"].(model.DictListQuery)), true

	case "Query.districtList":
		if e.complexity.Query.DistrictList == nil {
			break
		}

		args, err := ec.field_Query_districtList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DistrictList(childComplexity, args["query"].(*model.DistrictListQuery)), true

	case "Query.enterprise":
		if e.complexity.Query.Enterprise == nil {
			break
		}

		args, err := ec.field_Query_enterprise_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Enterprise(childComplexity, args["query"].(model.EnterpriseQuery)), true

	case "Query.enterpriseDistrictStatistics":
		if e.complexity.Query.EnterpriseDistrictStatistics == nil {
			break
		}

		args, err := ec.field_Query_enterpriseDistrictStatistics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseDistrictStatistics(childComplexity, args["query"].(*model.EnterpriseDistrictStatisticsQuery)), true

	case "Query.enterpriseList":
		if e.complexity.Query.EnterpriseList == nil {
			break
		}

		args, err := ec.field_Query_enterpriseList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnterpriseList(childComplexity, args["query"].(*model.EnterpriseListQuery)), true

	case "Query.provinceList":
		if e.complexity.Query.ProvinceList == nil {
			break
		}

		args, err := ec.field_Query_provinceList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProvinceList(childComplexity, args["query"].(*model.ProvinceListQuery)), true

	case "Query.systemUser":
		if e.complexity.Query.SystemUser == nil {
			break
		}

		args, err := ec.field_Query_systemUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUser(childComplexity, args["userId"].(string)), true

	case "Query.systemUsers":
		if e.complexity.Query.SystemUsers == nil {
			break
		}

		args, err := ec.field_Query_systemUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemUsers(childComplexity, args["query"].(*model.SystemUsersQuery)), true

	case "SystemUser.app_version":
		if e.complexity.SystemUser.AppVersion == nil {
			break
		}

		return e.complexity.SystemUser.AppVersion(childComplexity), true

	case "SystemUser.audit_level":
		if e.complexity.SystemUser.AuditLevel == nil {
			break
		}

		return e.complexity.SystemUser.AuditLevel(childComplexity), true

	case "SystemUser.create_at":
		if e.complexity.SystemUser.CreateAt == nil {
			break
		}

		return e.complexity.SystemUser.CreateAt(childComplexity), true

	case "SystemUser.create_by":
		if e.complexity.SystemUser.CreateBy == nil {
			break
		}

		return e.complexity.SystemUser.CreateBy(childComplexity), true

	case "SystemUser.delete_at":
		if e.complexity.SystemUser.DeleteAt == nil {
			break
		}

		return e.complexity.SystemUser.DeleteAt(childComplexity), true

	case "SystemUser.delete_by":
		if e.complexity.SystemUser.DeleteBy == nil {
			break
		}

		return e.complexity.SystemUser.DeleteBy(childComplexity), true

	case "SystemUser.department":
		if e.complexity.SystemUser.Department == nil {
			break
		}

		return e.complexity.SystemUser.Department(childComplexity), true

	case "SystemUser.email":
		if e.complexity.SystemUser.Email == nil {
			break
		}

		return e.complexity.SystemUser.Email(childComplexity), true

	case "SystemUser.enterprise":
		if e.complexity.SystemUser.Enterprise == nil {
			break
		}

		return e.complexity.SystemUser.Enterprise(childComplexity), true

	case "SystemUser.grade":
		if e.complexity.SystemUser.Grade == nil {
			break
		}

		return e.complexity.SystemUser.Grade(childComplexity), true

	case "SystemUser.ip_address":
		if e.complexity.SystemUser.IPAddress == nil {
			break
		}

		return e.complexity.SystemUser.IPAddress(childComplexity), true

	case "SystemUser.is_bind_ip":
		if e.complexity.SystemUser.IsBindIP == nil {
			break
		}

		return e.complexity.SystemUser.IsBindIP(childComplexity), true

	case "SystemUser.is_slag_car_platform":
		if e.complexity.SystemUser.IsSlagCarPlatform == nil {
			break
		}

		return e.complexity.SystemUser.IsSlagCarPlatform(childComplexity), true

	case "SystemUser.is_valid":
		if e.complexity.SystemUser.IsValid == nil {
			break
		}

		return e.complexity.SystemUser.IsValid(childComplexity), true

	case "SystemUser.mkey":
		if e.complexity.SystemUser.Mkey == nil {
			break
		}

		return e.complexity.SystemUser.Mkey(childComplexity), true

	case "SystemUser.mobile":
		if e.complexity.SystemUser.Mobile == nil {
			break
		}

		return e.complexity.SystemUser.Mobile(childComplexity), true

	case "SystemUser.proxy_user":
		if e.complexity.SystemUser.ProxyUser == nil {
			break
		}

		return e.complexity.SystemUser.ProxyUser(childComplexity), true

	case "SystemUser.remarks":
		if e.complexity.SystemUser.Remarks == nil {
			break
		}

		return e.complexity.SystemUser.Remarks(childComplexity), true

	case "SystemUser.telephone":
		if e.complexity.SystemUser.Telephone == nil {
			break
		}

		return e.complexity.SystemUser.Telephone(childComplexity), true

	case "SystemUser.update_at":
		if e.complexity.SystemUser.UpdateAt == nil {
			break
		}

		return e.complexity.SystemUser.UpdateAt(childComplexity), true

	case "SystemUser.update_by":
		if e.complexity.SystemUser.UpdateBy == nil {
			break
		}

		return e.complexity.SystemUser.UpdateBy(childComplexity), true

	case "SystemUser.user_id":
		if e.complexity.SystemUser.UserID == nil {
			break
		}

		return e.complexity.SystemUser.UserID(childComplexity), true

	case "SystemUser.user_status":
		if e.complexity.SystemUser.UserStatus == nil {
			break
		}

		return e.complexity.SystemUser.UserStatus(childComplexity), true

	case "SystemUser.user_type":
		if e.complexity.SystemUser.UserType == nil {
			break
		}

		return e.complexity.SystemUser.UserType(childComplexity), true

	case "SystemUser.username":
		if e.complexity.SystemUser.Username == nil {
			break
		}

		return e.complexity.SystemUser.Username(childComplexity), true

	case "SystemUser.wx_id":
		if e.complexity.SystemUser.WxID == nil {
			break
		}

		return e.complexity.SystemUser.WxID(childComplexity), true

	case "SystemUserConnection.nodes":
		if e.complexity.SystemUserConnection.Nodes == nil {
			break
		}

		return e.complexity.SystemUserConnection.Nodes(childComplexity), true

	case "SystemUserConnection.page_info":
		if e.complexity.SystemUserConnection.PageInfo == nil {
			break
		}

		return e.complexity.SystemUserConnection.PageInfo(childComplexity), true

	case "Vehicle.vehicle_id":
		if e.complexity.Vehicle.VehicleID == nil {
			break
		}

		return e.complexity.Vehicle.VehicleID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/graphqls/common.graphqls", Input: `# 通用


"基础模型"
interface IModel {

    "创建时间"
    create_at: DateTime
    "创建人"
    create_by: SystemUser
    "修改时间"
    update_at: DateTime
    "修改人"
    update_by: SystemUser
    "删除时间"
    delete_at: DateTime
    "删除人"
    delete_by: SystemUser
}



"分页信息"
type PageInfo{
    "记录数量"
    total: Int!

}


"高速交警部门"
type HighSpeedPoliceDept{
    "高速交警部门ID"
    dept_id :ID!
    "部门名称"
    name:String!
    "上级部门"
    super_dept: HighSpeedPoliceDept
    "备注"
    remarks: String
    "创建时间"
    create_at: DateTime!
    "创建人"
    create_by: SystemUser!
    "修改时间"
    update_at: DateTime
    "修改人"
    update_by: SystemUser
    "删除时间"
    delete_at: DateTime
    "删除人"
    delete_by: SystemUser

}



# 车辆
"车辆"
type Vehicle{
    vehicle_id: ID!
}
# 驾驶员
"驾驶员"
type Driver{
    driver_id :ID!
}





"基本分页请求参数"
input PageQuery{
    "第几页"
    current_page: Int!
    "分页大小"
    page_size: Int!
}


input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}


"排序方向枚举"
enum OrderDirection{
    "从大到小排序"
    ASC
    "从小到大排序"
    DESC
}

scalar Map
scalar Time
scalar Date
scalar DateTime
scalar Upload
`, BuiltIn: false},
	{Name: "graph/graphqls/department.graphqls", Input: `"部门"
type Department implements IModel{
    "部门ID"
    department_id: ID!
    "所在企业"
    enterprise: Enterprise
    "上级部门"
    superior_department: Department
    "部门名称"
    department_name: String
    "部门编码"
    department_code: String
    "部门类别"
    department_category: String
    "内部序号"
    internal_number: String
    "备注"
    remark: String
    "创建时间"
    create_at: DateTime
    "创建人"
    create_by: SystemUser
    "修改时间"
    update_at: DateTime
    "修改人"
    update_by: SystemUser
    "删除时间"
    delete_at: DateTime
    "删除人"
    delete_by: SystemUser

}


"部门connection"
type DepartmentConnection {
    "记录"
    nodes: [Department!]
    "分页信息"
    page_info: PageInfo!
}

"部门详情查询条件"
input DepartmentQuery{
    "部门ID"
    department_id: ID!
}

"部门列表查询条件"
input DepartmentListQuery {
    "分页参数"
    page_param:PageQuery = {current_page:1,page_size: 10}
    "排序"
    order_by: DepartmentOrder = {direction: DESC, field: CREATE_AT}
}

"部门列表排序"
input DepartmentOrder{
    "排序方向"
    direction: OrderDirection
    "排序字段"
    field:DepartmentOrderField
}


"修改部门"
input UpdateDepartmentParam {
    "部门ID"
    department_id: ID!
    "所在企业ID"
    enterprise_id: ID!
    "上级部门"
    superior_department_id: ID
    "部门名称"
    department_name: String
    "部门编码"
    department_code: String
    "部门类别"
    department_category: String
    "内部序号"
    internal_number: String
    "备注"
    remark: String
}

"删除部门参数"
input RemoveDepartmentParam{
    "部门ID"
    department_id: ID!
}

"新增部门入参"
input CreateDepartmentParam {
    "所在企业ID"
    enterprise_id: ID!
    "上级部门"
    superior_department_id: ID
    "部门名称"
    department_name: String!
    "部门编码"
    department_code: String!
    "部门类别"
    department_category: String
    "内部序号"
    internal_number: String
    "备注"
    remark: String
}

"部门-排序字段"
enum DepartmentOrderField{
    "创建时间"
    CREATE_AT
    "修改时间"
    UPDATE_AT
    "部门名称"
    DEPARTMENT_NAME
}


extend type Query{
    "获取具体部门详情"
    department(query:DepartmentQuery!): Department
    "部门信息查列表询"
    departmentList(query:DepartmentListQuery!): DepartmentConnection!
}

extend type Mutation {
    "新增部门"
    createDepartment(input: CreateDepartmentParam!): Department!
    "修改部门"
    updateDepartment(input: UpdateDepartmentParam!): Department!
    "删除部门"
    removeDepartment(input: RemoveDepartmentParam!):Department!
}`, BuiltIn: false},
	{Name: "graph/graphqls/dict.graphqls", Input: `type Dict{
    "字典类型"
    dict_type: DictType!
    "字典的值"
    dict_value: Int!
    "字典的名称"
    dict_name: String!
}

"字典类型"
type DictType{
    "字典类型的编号"
    type_code: String!
    "字典类型的名称"
    type_name: String!
}

"省份"
type Province{
    "省份ID"
    province_id: ID!
    "省份名称"
    name: String!
    "省份对应的城市列表"
    city_list: [City!]
}

"城市"
type City{
    "城市ID"
    city_id: ID!
    "城市名称"
    name: String!
    "城市对应的区域列表"
    district_list: [District!]
    "城市对应的省份"
    province: Province!
}

"区域"
type  District{
    "区域ID"
    district_id: ID!
    "区域名称"
    name: String!
    "区域对应的省份"
    province: Province!
    "区域对应的城市"
    city: City!
}

"字典类别查询条件"
input DictListQuery{
    "字典类别的编号"
    type_code: String!
}

"省份列表查询条件"
input ProvinceListQuery{
    "省份名称-模糊查询"
    province_name: String
}

"城市列表查询条件"
input CityListQuery{
    "城市名称-模糊查询"
    city_name: String
    "省份ID"
    province_id: ID
}

"区域列表查询条件"
input DistrictListQuery{
    "区域名称-模糊查询"
    district_name: String
    "省份ID"
    province_id: ID
    "城市ID"
    city_id: ID
}

extend type Query {
    "字典列表"
    dictList(query: DictListQuery!): [Dict!]
    "省份列表"
    provinceList(query: ProvinceListQuery): [Province!]
    "城市列表"
    cityList(query:CityListQuery): [City!]
    "区域列表"
    districtList(query: DistrictListQuery): [District!]
}`, BuiltIn: false},
	{Name: "graph/graphqls/enterprise.graphqls", Input: `"企业"
type Enterprise {
    "企业ID"
    enterprise_id: ID!
    "上级企业"
    superior_enterprise: String
    "企业编号"
    enterprise_code: String!
    "企业名称"
    enterprise_name: String!
    "企业级别"
    enterprise_level: Int!
    "显示序号"
    display_number: Int
    "联系人信息"
    contact_persons: [Map!]
    "企业地址"
    enterprise_address: String
    "经营范围"
    business_scope: Int
    "传真号码"
    fax_number: String
    "省份"
    province: Int
    "城市"
    city: Int
    "区"
    district: Int
    "机构类别"
    institution_category: Int
    "经营许可证"
    operating_license: String
    "营业执照"
    business_license: String
    "营业执照发证日期"
    business_license_issuance_date: DateTime
    "营业执照到期日期"
    business_license_expiry_date: DateTime
    "企业性质"
    enterprise_nature: Int
    "企业法人代表"
    legal_representative: String
    "企业法人代表联系电话"
    legal_representative_phone: String
    "企业法人代表身份证"
    legal_representative_id_card: String
    "企业法人身份证号"
    legal_person_id_number: String
    "委托代理人"
    entrusted_agent: String
    "委托代理人联系电话"
    entrusted_agent_phone: String
    "委托代理人身份证"
    entrusted_agent_id_card: String
    "委托代理人身份证号"
    agent_id_number: String
    "组织机构代码(企业的营运证)"
    organization_code: String
    "组织机构代码证"
    organization_code_certificate: String
    "内网更新时间"
    update_time_in: DateTime
    "业务办理扫描件"
    business_pic: String
    "是否黑名单"
    is_black: Boolean
    "高速支队"
    high_speed_detachment: String
    "高速大队"
    high_speed_brigade: String
    "高速中队"
    high_speed_squadron: String
    "高速交警级别"
    traffic_police_level: Int
    "是否网约车驾校"
    is_ride_hailing_driving_school: Boolean
    "是否网约车企业"
    is_ride_hailing_enterprise: Boolean
    "是否试用期结束"
    is_expire: Boolean
    "审核状态"
    is_check: Int
    "是否安装"
    is_install: Boolean
    "是否录入完成"
    is_input: Boolean
    "所属大队"
    brigade: String
    "所属派出所"
    police_station: String
    "大队审核意见"
    brigade_review_opinion: String
    "大队审核时间"
    brigade_review_time: DateTime
    "大队审核人"
    brigade_review_by: String
    "是否上传省厅"
    is_upload_province: Boolean
    "记分"
    score: Int
    "渣土车供应商编号"
    slag_car_supplier_code: String
    "渣土车供应商状态"
    slag_car_supplier_state: Int
    "协会审核意见"
    association_review_opinion: String
    "协会审核时间"
    association_review_time: DateTime
    "协会审核人员"
    association_review_by: String
    "创建时间"
    create_at: DateTime
    "创建人"
    create_by: String
    "修改时间"
    update_at: DateTime
    "修改人"
    update_by: String
    "删除时间"
    delete_at: DateTime
    "删除人"
    delete_by: String
    "登记时间"
    record_at: DateTime
    "登记人"
    record_by: String
    "备注"
    remarks: String

}


"县-企业统计"
type EnterpriseDistrictStatistics{
    "区(县)"
    district: District!
    "公路客运"
    high_way_transport: Int!
    "旅游客运"
    travel_transport: Int!
    "危化品车"
    danger_transport: Int!
    "巡游出租车"
    around_taxi: Int!
    "网约出租车"
    online_taxi: Int!
    "货车"
    trunk: Int!
    "工程运输车(渣土车)"
    muck_car : Int!
    "工程运输车(混凝土)"
    concrete_car: Int!
    "租赁车"
    retail_car: Int!
    "校车"
    school_car: Int!
    "营转非大客车"
    business_to_non_bus: Int!
}


"企业connection"
type EnterpriseConnection {
    "记录"
    nodes: [Enterprise!]
    "分页信息"
    page_info: PageInfo!
}

"企业详情-入参"
input EnterpriseQuery{
    "企业ID"
    enterprise_id:ID!
}

"企业列表查询条件"
input EnterpriseListQuery{
    "分页参数"
    page_param: PageQuery = {current_page:1,page_size: 10}
    "排序"
    order_by: EnterpriseOrder = {direction: DESC, field: CREATE_AT}
    "区域(县)ID"
    district_id: String_comparison_exp
    "企业名称"
    enterprise_name: String_comparison_exp
    "经营范围"
    business_scope: String_comparison_exp
    "是否黑名单"
    is_black: Boolean_comparison_exp
}

"企业-排序"
input EnterpriseOrder{
    "方向"
    direction: OrderDirection!
    "排序字段"
    field: EnterpriseOrderField!
}


"县-企业统计"
input EnterpriseDistrictStatisticsQuery{
    "城市ID"
    city_id :ID
}


"新增企业-入参"
input CreateEnterpriseParam{
    "上级企业ID"
    superior_enterprise_id: ID
    "企业编号"
    enterprise_code: String!
    "企业名称"
    enterprise_name: String!
    "企业级别"
    enterprise_level: EnterpriseLevelEnum!
    "显示序号"
    display_number: Int
    "联系人信息"
    contact_persons: [Map!]
    "企业地址"
    enterprise_address: String
    "经营范围"
    business_scope: BusinessScope
    "传真号码"
    fax_number: String
    "省份"
    province_id: ID!
    "城市"
    city_id: ID!
    "区"
    district_id: ID!
    "机构类别"
    institution_category: InstitutionCategoryEnum
    "经营许可证"
    operating_license: String
    "营业执照"
    business_license: String
    "营业执照发证日期"
    business_license_issuance_date: DateTime
    "营业执照到期日期"
    business_license_expiry_date: DateTime
    "企业性质"
    enterprise_nature: EnterpriseNatureEnum
    "企业法人代表"
    legal_representative: String
    "企业法人代表联系电话"
    legal_representative_phone: String
    "企业法人代表身份证"
    legal_representative_id_card: String
    "企业法人身份证号"
    legal_person_id_number: String
    "委托代理人"
    entrusted_agent: String
    "委托代理人联系电话"
    entrusted_agent_phone: String
    "委托代理人身份证"
    entrusted_agent_id_card: String
    "委托代理人身份证号"
    agent_id_number: String
    "组织机构代码(企业的营运证)"
    organization_code: String
    "组织机构代码证"
    organization_code_certificate: String
    "业务办理扫描件"
    business_pic: String
}


"修改企业-入参"
input UpdateEnterpriseParam{
    "企业ID"
    enterprise_id: ID!
    "上级企业ID"
    superior_enterprise_id: ID
    "企业编号"
    enterprise_code: String!
    "企业名称"
    enterprise_name: String!
    "企业级别"
    enterprise_level: EnterpriseLevelEnum!
    "显示序号"
    display_number: Int
    "联系人信息"
    contact_persons: [Map!]
    "企业地址"
    enterprise_address: String
    "经营范围"
    business_scope: BusinessScope
    "传真号码"
    fax_number: String
    "省份"
    province_id: ID!
    "城市"
    city_id: ID!
    "区"
    district_id: ID!
    "机构类别"
    institution_category: InstitutionCategoryEnum
    "经营许可证"
    operating_license: String
    "营业执照"
    business_license: String
    "营业执照发证日期"
    business_license_issuance_date: DateTime
    "营业执照到期日期"
    business_license_expiry_date: DateTime
    "企业性质"
    enterprise_nature: EnterpriseNatureEnum
    "企业法人代表"
    legal_representative: String
    "企业法人代表联系电话"
    legal_representative_phone: String
    "企业法人代表身份证"
    legal_representative_id_card: String
    "企业法人身份证号"
    legal_person_id_number: String
    "委托代理人"
    entrusted_agent: String
    "委托代理人联系电话"
    entrusted_agent_phone: String
    "委托代理人身份证"
    entrusted_agent_id_card: String
    "委托代理人身份证号"
    agent_id_number: String
    "组织机构代码(企业的营运证)"
    organization_code: String
    "组织机构代码证"
    organization_code_certificate: String
    "业务办理扫描件"
    business_pic: String
}

"删除企业参数"
input RemoveEnterpriseParam{
    "企业ID"
    enterprise_id: ID!
}


"企业级别枚举"
enum EnterpriseLevelEnum{
    "枚举内容未知"
    OTHERS
}

"机构类别枚举"
enum InstitutionCategoryEnum{
    "枚举内容未知"
    OTHERS
}

"企业性质枚举"
enum EnterpriseNatureEnum{
    "枚举内容未知"
    OTHERS
}

"企业排序字段"
enum EnterpriseOrderField{
    "创建时间"
    CREATE_AT
    "修改时间"
    UPDATE_AT
}

"经营范围枚举"
enum BusinessScope{
    "枚举内容还未知"
    OTHERS
}

extend type Query{
    "获取具体企业详情"
    enterprise(query:EnterpriseQuery!):Enterprise
    "企业信息列表查询"
    enterpriseList(query:EnterpriseListQuery): EnterpriseConnection!
    "县级企业统计"
    enterpriseDistrictStatistics(query: EnterpriseDistrictStatisticsQuery):[EnterpriseDistrictStatistics!]
}

extend type Mutation {
    "新增企业"
    createEnterprise(input:CreateEnterpriseParam! ):Enterprise!
    "修改企业"
    updateEnterprise(input:UpdateEnterpriseParam!): Enterprise!
    "删除企业"
    removeEnterprise(input: RemoveEnterpriseParam!):Enterprise!
}`, BuiltIn: false},
	{Name: "graph/graphqls/system_user.graphqls", Input: `"系统用户"
type SystemUser implements IModel{
    "用户ID"
    user_id: ID!
    "用户名"
    username: String!
    "企业"
    enterprise: Enterprise
    "级别"
    grade: Dict
    "所在部门"
    department: Department
    "审核级别"
    audit_level: Dict
    "用户类型"
    user_type: Dict
    "是否有效"
    is_valid: Boolean
    "状态"
    user_status: Dict
    "代理用户"
    proxy_user: String
    "ip地址"
    ip_address: String
    "是否绑定IP"
    is_bind_ip: Boolean
    "邮箱"
    email: String
    "联系电话"
    telephone: String
    "手机"
    mobile: String
    "手机串码"
    mkey: String
    "客户端版本号"
    app_version: String
    "微信ID"
    wx_id: String
    "是否渣土车管控平台绑定账号"
    is_slag_car_platform: Boolean
    "备注"
    remarks: String
    "创建时间"
    create_at: DateTime!
    "创建人"
    create_by: SystemUser!
    "修改时间"
    update_at: DateTime
    "修改人"
    update_by: SystemUser
    "删除时间"
    delete_at: DateTime
    "删除人"
    delete_by: SystemUser

}

"系统用户connection"
type SystemUserConnection {
    "记录"
    nodes: [SystemUser!]
    "分页信息"
    page_info: PageInfo!
}


"系统用户列表查询条件"
input SystemUsersQuery{
    "分页参数"
    page_param:PageQuery = {current_page:1,page_size: 10}
}

extend type Query{
    "获取具体系统用户详情"
    systemUser(userId: ID!):SystemUser
    "系统用户列表查询"
    systemUsers(query: SystemUsersQuery): SystemUserConnection!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createDepartment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateDepartmentParam
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateDepartmentParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCreateDepartmentParam(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createEnterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateEnterpriseParam
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateEnterpriseParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCreateEnterpriseParam(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeDepartment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RemoveDepartmentParam
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRemoveDepartmentParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐRemoveDepartmentParam(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeEnterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RemoveEnterpriseParam
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRemoveEnterpriseParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐRemoveEnterpriseParam(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDepartment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateDepartmentParam
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateDepartmentParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐUpdateDepartmentParam(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEnterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateEnterpriseParam
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateEnterpriseParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐUpdateEnterpriseParam(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_cityList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CityListQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOCityListQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCityListQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_departmentList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DepartmentListQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNDepartmentListQuery2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentListQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_department_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DepartmentQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNDepartmentQuery2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dictList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DictListQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNDictListQuery2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDictListQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_districtList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DistrictListQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalODistrictListQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDistrictListQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterpriseDistrictStatistics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseDistrictStatisticsQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOEnterpriseDistrictStatisticsQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseDistrictStatisticsQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterpriseList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EnterpriseListQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOEnterpriseListQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseListQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enterprise_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EnterpriseQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNEnterpriseQuery2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_provinceList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ProvinceListQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOProvinceListQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐProvinceListQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_systemUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_systemUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SystemUsersQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalOSystemUsersQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUsersQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _City_city_id(ctx context.Context, field graphql.CollectedField, obj *model.City) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _City_name(ctx context.Context, field graphql.CollectedField, obj *model.City) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _City_district_list(ctx context.Context, field graphql.CollectedField, obj *model.City) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.District)
	fc.Result = res
	return ec.marshalODistrict2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDistrictᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _City_province(ctx context.Context, field graphql.CollectedField, obj *model.City) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "City",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Province, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Province)
	fc.Result = res
	return ec.marshalNProvince2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐProvince(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_id(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_superior_department(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorDepartment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_name(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_code(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_department_category(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_internal_number(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_remark(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_create_at(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_create_by(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_update_at(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_update_by(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Department_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.Department) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Department",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DepartmentConnection_page_info(ctx context.Context, field graphql.CollectedField, obj *model.DepartmentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DepartmentConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Dict_dict_type(ctx context.Context, field graphql.CollectedField, obj *model.Dict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Dict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DictType)
	fc.Result = res
	return ec.marshalNDictType2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDictType(ctx, field.Selections, res)
}

func (ec *executionContext) _Dict_dict_value(ctx context.Context, field graphql.CollectedField, obj *model.Dict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Dict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Dict_dict_name(ctx context.Context, field graphql.CollectedField, obj *model.Dict) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Dict",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DictName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DictType_type_code(ctx context.Context, field graphql.CollectedField, obj *model.DictType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DictType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DictType_type_name(ctx context.Context, field graphql.CollectedField, obj *model.DictType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DictType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _District_district_id(ctx context.Context, field graphql.CollectedField, obj *model.District) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DistrictID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _District_name(ctx context.Context, field graphql.CollectedField, obj *model.District) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _District_province(ctx context.Context, field graphql.CollectedField, obj *model.District) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Province, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Province)
	fc.Result = res
	return ec.marshalNProvince2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐProvince(ctx, field.Selections, res)
}

func (ec *executionContext) _District_city(ctx context.Context, field graphql.CollectedField, obj *model.District) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "District",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.City)
	fc.Result = res
	return ec.marshalNCity2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCity(ctx, field.Selections, res)
}

func (ec *executionContext) _Driver_driver_id(ctx context.Context, field graphql.CollectedField, obj *model.Driver) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_id(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_superior_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperiorEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_code(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_name(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_level(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_display_number(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_contact_persons(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactPersons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2ᚕmapᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_address(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_scope(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_fax_number(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FaxNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_province(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Province, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_city(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_district(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.District, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_institution_category(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstitutionCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_operating_license(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatingLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_license(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicense, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_license_issuance_date(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseIssuanceDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_license_expiry_date(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessLicenseExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_enterprise_nature(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnterpriseNature, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_representative(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_representative_phone(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_representative_id_card(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalRepresentativeIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_legal_person_id_number(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalPersonIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_entrusted_agent(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_entrusted_agent_phone(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_entrusted_agent_id_card(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntrustedAgentIDCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_agent_id_number(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgentIDNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_organization_code(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_organization_code_certificate(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCodeCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_update_time_in(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTimeIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_business_pic(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessPic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_black(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBlack, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_high_speed_detachment(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HighSpeedDetachment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_high_speed_brigade(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HighSpeedBrigade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_high_speed_squadron(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HighSpeedSquadron, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_traffic_police_level(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrafficPoliceLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_ride_hailing_driving_school(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRideHailingDrivingSchool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_ride_hailing_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRideHailingEnterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_expire(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsExpire, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_check(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCheck, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_install(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInstall, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_input(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsInput, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Brigade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_police_station(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoliceStation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade_review_time(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_brigade_review_by(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrigadeReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_is_upload_province(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUploadProvince, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_score(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_slag_car_supplier_code(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SlagCarSupplierCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_slag_car_supplier_state(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SlagCarSupplierState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_association_review_opinion(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewOpinion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_association_review_time(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_association_review_by(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssociationReviewBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_create_at(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_create_by(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_update_at(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_update_by(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_record_at(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_record_by(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Enterprise_remarks(ctx context.Context, field graphql.CollectedField, obj *model.Enterprise) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Enterprise",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseConnection_page_info(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_district(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.District, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.District)
	fc.Result = res
	return ec.marshalNDistrict2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDistrict(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_high_way_transport(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HighWayTransport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_travel_transport(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TravelTransport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_danger_transport(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DangerTransport, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_around_taxi(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AroundTaxi, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_online_taxi(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnlineTaxi, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_trunk(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trunk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_muck_car(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MuckCar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_concrete_car(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConcreteCar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_retail_car(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetailCar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_school_car(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SchoolCar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EnterpriseDistrictStatistics_business_to_non_bus(ctx context.Context, field graphql.CollectedField, obj *model.EnterpriseDistrictStatistics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EnterpriseDistrictStatistics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessToNonBus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _HighSpeedPoliceDept_dept_id(ctx context.Context, field graphql.CollectedField, obj *model.HighSpeedPoliceDept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HighSpeedPoliceDept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeptID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HighSpeedPoliceDept_name(ctx context.Context, field graphql.CollectedField, obj *model.HighSpeedPoliceDept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HighSpeedPoliceDept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HighSpeedPoliceDept_super_dept(ctx context.Context, field graphql.CollectedField, obj *model.HighSpeedPoliceDept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HighSpeedPoliceDept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuperDept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.HighSpeedPoliceDept)
	fc.Result = res
	return ec.marshalOHighSpeedPoliceDept2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐHighSpeedPoliceDept(ctx, field.Selections, res)
}

func (ec *executionContext) _HighSpeedPoliceDept_remarks(ctx context.Context, field graphql.CollectedField, obj *model.HighSpeedPoliceDept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HighSpeedPoliceDept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HighSpeedPoliceDept_create_at(ctx context.Context, field graphql.CollectedField, obj *model.HighSpeedPoliceDept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HighSpeedPoliceDept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _HighSpeedPoliceDept_create_by(ctx context.Context, field graphql.CollectedField, obj *model.HighSpeedPoliceDept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HighSpeedPoliceDept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SystemUser)
	fc.Result = res
	return ec.marshalNSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _HighSpeedPoliceDept_update_at(ctx context.Context, field graphql.CollectedField, obj *model.HighSpeedPoliceDept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HighSpeedPoliceDept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HighSpeedPoliceDept_update_by(ctx context.Context, field graphql.CollectedField, obj *model.HighSpeedPoliceDept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HighSpeedPoliceDept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _HighSpeedPoliceDept_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.HighSpeedPoliceDept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HighSpeedPoliceDept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HighSpeedPoliceDept_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.HighSpeedPoliceDept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HighSpeedPoliceDept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createDepartment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDepartment(rctx, args["input"].(model.CreateDepartmentParam))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDepartment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDepartment(rctx, args["input"].(model.UpdateDepartmentParam))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeDepartment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveDepartment(rctx, args["input"].(model.RemoveDepartmentParam))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Department)
	fc.Result = res
	return ec.marshalNDepartment2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createEnterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createEnterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEnterprise(rctx, args["input"].(model.CreateEnterpriseParam))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateEnterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateEnterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEnterprise(rctx, args["input"].(model.UpdateEnterpriseParam))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeEnterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeEnterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveEnterprise(rctx, args["input"].(model.RemoveEnterpriseParam))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Enterprise)
	fc.Result = res
	return ec.marshalNEnterprise2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_total(ctx context.Context, field graphql.CollectedField, obj *model.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Province_province_id(ctx context.Context, field graphql.CollectedField, obj *model.Province) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvinceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Province_name(ctx context.Context, field graphql.CollectedField, obj *model.Province) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Province_city_list(ctx context.Context, field graphql.CollectedField, obj *model.Province) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Province",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CityList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.City)
	fc.Result = res
	return ec.marshalOCity2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_department(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_department_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Department(rctx, args["query"].(model.DepartmentQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_departmentList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_departmentList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DepartmentList(rctx, args["query"].(model.DepartmentListQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DepartmentConnection)
	fc.Result = res
	return ec.marshalNDepartmentConnection2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dictList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dictList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DictList(rctx, args["query"].(model.DictListQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Dict)
	fc.Result = res
	return ec.marshalODict2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDictᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_provinceList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_provinceList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProvinceList(rctx, args["query"].(*model.ProvinceListQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Province)
	fc.Result = res
	return ec.marshalOProvince2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐProvinceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_cityList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_cityList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CityList(rctx, args["query"].(*model.CityListQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.City)
	fc.Result = res
	return ec.marshalOCity2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_districtList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_districtList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DistrictList(rctx, args["query"].(*model.DistrictListQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.District)
	fc.Result = res
	return ec.marshalODistrict2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDistrictᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterprise(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterprise_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Enterprise(rctx, args["query"].(model.EnterpriseQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterpriseList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterpriseList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseList(rctx, args["query"].(*model.EnterpriseListQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EnterpriseConnection)
	fc.Result = res
	return ec.marshalNEnterpriseConnection2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_enterpriseDistrictStatistics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_enterpriseDistrictStatistics_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnterpriseDistrictStatistics(rctx, args["query"].(*model.EnterpriseDistrictStatisticsQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EnterpriseDistrictStatistics)
	fc.Result = res
	return ec.marshalOEnterpriseDistrictStatistics2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseDistrictStatisticsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_systemUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_systemUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUser(rctx, args["userId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_systemUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_systemUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemUsers(rctx, args["query"].(*model.SystemUsersQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SystemUserConnection)
	fc.Result = res
	return ec.marshalNSystemUserConnection2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_user_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_username(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_enterprise(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enterprise, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Enterprise)
	fc.Result = res
	return ec.marshalOEnterprise2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterprise(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_grade(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Dict)
	fc.Result = res
	return ec.marshalODict2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDict(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_department(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Department, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Department)
	fc.Result = res
	return ec.marshalODepartment2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_audit_level(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Dict)
	fc.Result = res
	return ec.marshalODict2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDict(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_user_type(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Dict)
	fc.Result = res
	return ec.marshalODict2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDict(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_is_valid(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_user_status(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Dict)
	fc.Result = res
	return ec.marshalODict2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDict(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_proxy_user(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProxyUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_ip_address(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_is_bind_ip(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBindIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_email(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_telephone(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_mobile(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mobile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_mkey(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mkey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_app_version(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_wx_id(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WxID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_is_slag_car_platform(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSlagCarPlatform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_remarks(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remarks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_create_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNDateTime2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_create_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SystemUser)
	fc.Result = res
	return ec.marshalNSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_update_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_update_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_delete_at(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalODateTime2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUser_delete_by(ctx context.Context, field graphql.CollectedField, obj *model.SystemUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserConnection_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SystemUser)
	fc.Result = res
	return ec.marshalOSystemUser2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SystemUserConnection_page_info(ctx context.Context, field graphql.CollectedField, obj *model.SystemUserConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SystemUserConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Vehicle_vehicle_id(ctx context.Context, field graphql.CollectedField, obj *model.Vehicle) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VehicleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBoolean_comparison_exp(ctx context.Context, obj interface{}) (model.BooleanComparisonExp, error) {
	var it model.BooleanComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOBoolean2ᚕboolᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCityListQuery(ctx context.Context, obj interface{}) (model.CityListQuery, error) {
	var it model.CityListQuery
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "city_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_name"))
			it.CityName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateDepartmentParam(ctx context.Context, obj interface{}) (model.CreateDepartmentParam, error) {
	var it model.CreateDepartmentParam
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateEnterpriseParam(ctx context.Context, obj interface{}) (model.CreateEnterpriseParam, error) {
	var it model.CreateEnterpriseParam
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalNEnterpriseLevelEnum2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseLevelEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_persons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_persons"))
			it.ContactPersons, err = ec.unmarshalOMap2ᚕmapᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOBusinessScope2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐBusinessScope(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOInstitutionCategoryEnum2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐInstitutionCategoryEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license"))
			it.OperatingLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOEnterpriseNatureEnum2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseNatureEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate"))
			it.OrganizationCodeCertificate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_pic"))
			it.BusinessPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentListQuery(ctx context.Context, obj interface{}) (model.DepartmentListQuery, error) {
	var it model.DepartmentListQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page_param"]; !present {
		asMap["page_param"] = map[string]interface{}{"current_page": 1, "page_size": 10}
	}
	if _, present := asMap["order_by"]; !present {
		asMap["order_by"] = map[string]interface{}{"direction": "DESC", "field": "CREATE_AT"}
	}

	for k, v := range asMap {
		switch k {
		case "page_param":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_param"))
			it.PageParam, err = ec.unmarshalOPageQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐPageQuery(ctx, v)
			if err != nil {
				return it, err
			}
		case "order_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
			it.OrderBy, err = ec.unmarshalODepartmentOrder2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentOrder(ctx context.Context, obj interface{}) (model.DepartmentOrder, error) {
	var it model.DepartmentOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOOrderDirection2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalODepartmentOrderField2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDepartmentQuery(ctx context.Context, obj interface{}) (model.DepartmentQuery, error) {
	var it model.DepartmentQuery
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDictListQuery(ctx context.Context, obj interface{}) (model.DictListQuery, error) {
	var it model.DictListQuery
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type_code"))
			it.TypeCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDistrictListQuery(ctx context.Context, obj interface{}) (model.DistrictListQuery, error) {
	var it model.DistrictListQuery
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "district_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_name"))
			it.DistrictName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseDistrictStatisticsQuery(ctx context.Context, obj interface{}) (model.EnterpriseDistrictStatisticsQuery, error) {
	var it model.EnterpriseDistrictStatisticsQuery
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseListQuery(ctx context.Context, obj interface{}) (model.EnterpriseListQuery, error) {
	var it model.EnterpriseListQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page_param"]; !present {
		asMap["page_param"] = map[string]interface{}{"current_page": 1, "page_size": 10}
	}
	if _, present := asMap["order_by"]; !present {
		asMap["order_by"] = map[string]interface{}{"direction": "DESC", "field": "CREATE_AT"}
	}

	for k, v := range asMap {
		switch k {
		case "page_param":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_param"))
			it.PageParam, err = ec.unmarshalOPageQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐPageQuery(ctx, v)
			if err != nil {
				return it, err
			}
		case "order_by":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order_by"))
			it.OrderBy, err = ec.unmarshalOEnterpriseOrder2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseOrder(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalOString_comparison_exp2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalOString_comparison_exp2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOString_comparison_exp2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐStringComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		case "is_black":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("is_black"))
			it.IsBlack, err = ec.unmarshalOBoolean_comparison_exp2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐBooleanComparisonExp(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseOrder(ctx context.Context, obj interface{}) (model.EnterpriseOrder, error) {
	var it model.EnterpriseOrder
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNEnterpriseOrderField2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEnterpriseQuery(ctx context.Context, obj interface{}) (model.EnterpriseQuery, error) {
	var it model.EnterpriseQuery
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPageQuery(ctx context.Context, obj interface{}) (model.PageQuery, error) {
	var it model.PageQuery
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "current_page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("current_page"))
			it.CurrentPage, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "page_size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_size"))
			it.PageSize, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProvinceListQuery(ctx context.Context, obj interface{}) (model.ProvinceListQuery, error) {
	var it model.ProvinceListQuery
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "province_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_name"))
			it.ProvinceName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRemoveDepartmentParam(ctx context.Context, obj interface{}) (model.RemoveDepartmentParam, error) {
	var it model.RemoveDepartmentParam
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRemoveEnterpriseParam(ctx context.Context, obj interface{}) (model.RemoveEnterpriseParam, error) {
	var it model.RemoveEnterpriseParam
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputString_comparison_exp(ctx context.Context, obj interface{}) (model.StringComparisonExp, error) {
	var it model.StringComparisonExp
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "_eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_gte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_gte"))
			it.Gte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_ilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_ilike"))
			it.Ilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_is_null":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_is_null"))
			it.IsNull, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_like"))
			it.Like, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_lte":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_lte"))
			it.Lte, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_neq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_neq"))
			it.Neq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nilike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nilike"))
			it.Nilike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nin"))
			it.Nin, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nlike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nlike"))
			it.Nlike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_nsimilar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_nsimilar"))
			it.Nsimilar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "_similar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("_similar"))
			it.Similar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemUsersQuery(ctx context.Context, obj interface{}) (model.SystemUsersQuery, error) {
	var it model.SystemUsersQuery
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["page_param"]; !present {
		asMap["page_param"] = map[string]interface{}{"current_page": 1, "page_size": 10}
	}

	for k, v := range asMap {
		switch k {
		case "page_param":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page_param"))
			it.PageParam, err = ec.unmarshalOPageQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐPageQuery(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateDepartmentParam(ctx context.Context, obj interface{}) (model.UpdateDepartmentParam, error) {
	var it model.UpdateDepartmentParam
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_id"))
			it.DepartmentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_department_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_department_id"))
			it.SuperiorDepartmentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_name"))
			it.DepartmentName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_code"))
			it.DepartmentCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "department_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("department_category"))
			it.DepartmentCategory, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "internal_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internal_number"))
			it.InternalNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "remark":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("remark"))
			it.Remark, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEnterpriseParam(ctx context.Context, obj interface{}) (model.UpdateEnterpriseParam, error) {
	var it model.UpdateEnterpriseParam
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_id"))
			it.EnterpriseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "superior_enterprise_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("superior_enterprise_id"))
			it.SuperiorEnterpriseID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_code"))
			it.EnterpriseCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_name"))
			it.EnterpriseName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_level"))
			it.EnterpriseLevel, err = ec.unmarshalNEnterpriseLevelEnum2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseLevelEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "display_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display_number"))
			it.DisplayNumber, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "contact_persons":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact_persons"))
			it.ContactPersons, err = ec.unmarshalOMap2ᚕmapᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_address"))
			it.EnterpriseAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_scope":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_scope"))
			it.BusinessScope, err = ec.unmarshalOBusinessScope2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐBusinessScope(ctx, v)
			if err != nil {
				return it, err
			}
		case "fax_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fax_number"))
			it.FaxNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "province_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("province_id"))
			it.ProvinceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "city_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city_id"))
			it.CityID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "district_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district_id"))
			it.DistrictID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution_category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution_category"))
			it.InstitutionCategory, err = ec.unmarshalOInstitutionCategoryEnum2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐInstitutionCategoryEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "operating_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operating_license"))
			it.OperatingLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license"))
			it.BusinessLicense, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_issuance_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_issuance_date"))
			it.BusinessLicenseIssuanceDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_license_expiry_date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_license_expiry_date"))
			it.BusinessLicenseExpiryDate, err = ec.unmarshalODateTime2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "enterprise_nature":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enterprise_nature"))
			it.EnterpriseNature, err = ec.unmarshalOEnterpriseNatureEnum2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseNatureEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative"))
			it.LegalRepresentative, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_phone"))
			it.LegalRepresentativePhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_representative_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_representative_id_card"))
			it.LegalRepresentativeIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "legal_person_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legal_person_id_number"))
			it.LegalPersonIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent"))
			it.EntrustedAgent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_phone"))
			it.EntrustedAgentPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "entrusted_agent_id_card":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entrusted_agent_id_card"))
			it.EntrustedAgentIDCard, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "agent_id_number":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agent_id_number"))
			it.AgentIDNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code"))
			it.OrganizationCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization_code_certificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization_code_certificate"))
			it.OrganizationCodeCertificate, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "business_pic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("business_pic"))
			it.BusinessPic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _IModel(ctx context.Context, sel ast.SelectionSet, obj model.IModel) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Department:
		return ec._Department(ctx, sel, &obj)
	case *model.Department:
		if obj == nil {
			return graphql.Null
		}
		return ec._Department(ctx, sel, obj)
	case model.SystemUser:
		return ec._SystemUser(ctx, sel, &obj)
	case *model.SystemUser:
		if obj == nil {
			return graphql.Null
		}
		return ec._SystemUser(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var cityImplementors = []string{"City"}

func (ec *executionContext) _City(ctx context.Context, sel ast.SelectionSet, obj *model.City) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("City")
		case "city_id":
			out.Values[i] = ec._City_city_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._City_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "district_list":
			out.Values[i] = ec._City_district_list(ctx, field, obj)
		case "province":
			out.Values[i] = ec._City_province(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentImplementors = []string{"Department", "IModel"}

func (ec *executionContext) _Department(ctx context.Context, sel ast.SelectionSet, obj *model.Department) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Department")
		case "department_id":
			out.Values[i] = ec._Department_department_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise":
			out.Values[i] = ec._Department_enterprise(ctx, field, obj)
		case "superior_department":
			out.Values[i] = ec._Department_superior_department(ctx, field, obj)
		case "department_name":
			out.Values[i] = ec._Department_department_name(ctx, field, obj)
		case "department_code":
			out.Values[i] = ec._Department_department_code(ctx, field, obj)
		case "department_category":
			out.Values[i] = ec._Department_department_category(ctx, field, obj)
		case "internal_number":
			out.Values[i] = ec._Department_internal_number(ctx, field, obj)
		case "remark":
			out.Values[i] = ec._Department_remark(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._Department_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._Department_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._Department_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._Department_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._Department_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._Department_delete_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var departmentConnectionImplementors = []string{"DepartmentConnection"}

func (ec *executionContext) _DepartmentConnection(ctx context.Context, sel ast.SelectionSet, obj *model.DepartmentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, departmentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DepartmentConnection")
		case "nodes":
			out.Values[i] = ec._DepartmentConnection_nodes(ctx, field, obj)
		case "page_info":
			out.Values[i] = ec._DepartmentConnection_page_info(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dictImplementors = []string{"Dict"}

func (ec *executionContext) _Dict(ctx context.Context, sel ast.SelectionSet, obj *model.Dict) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dictImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Dict")
		case "dict_type":
			out.Values[i] = ec._Dict_dict_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dict_value":
			out.Values[i] = ec._Dict_dict_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dict_name":
			out.Values[i] = ec._Dict_dict_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dictTypeImplementors = []string{"DictType"}

func (ec *executionContext) _DictType(ctx context.Context, sel ast.SelectionSet, obj *model.DictType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dictTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DictType")
		case "type_code":
			out.Values[i] = ec._DictType_type_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type_name":
			out.Values[i] = ec._DictType_type_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var districtImplementors = []string{"District"}

func (ec *executionContext) _District(ctx context.Context, sel ast.SelectionSet, obj *model.District) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, districtImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("District")
		case "district_id":
			out.Values[i] = ec._District_district_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._District_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "province":
			out.Values[i] = ec._District_province(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city":
			out.Values[i] = ec._District_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverImplementors = []string{"Driver"}

func (ec *executionContext) _Driver(ctx context.Context, sel ast.SelectionSet, obj *model.Driver) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Driver")
		case "driver_id":
			out.Values[i] = ec._Driver_driver_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseImplementors = []string{"Enterprise"}

func (ec *executionContext) _Enterprise(ctx context.Context, sel ast.SelectionSet, obj *model.Enterprise) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Enterprise")
		case "enterprise_id":
			out.Values[i] = ec._Enterprise_enterprise_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "superior_enterprise":
			out.Values[i] = ec._Enterprise_superior_enterprise(ctx, field, obj)
		case "enterprise_code":
			out.Values[i] = ec._Enterprise_enterprise_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_name":
			out.Values[i] = ec._Enterprise_enterprise_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise_level":
			out.Values[i] = ec._Enterprise_enterprise_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "display_number":
			out.Values[i] = ec._Enterprise_display_number(ctx, field, obj)
		case "contact_persons":
			out.Values[i] = ec._Enterprise_contact_persons(ctx, field, obj)
		case "enterprise_address":
			out.Values[i] = ec._Enterprise_enterprise_address(ctx, field, obj)
		case "business_scope":
			out.Values[i] = ec._Enterprise_business_scope(ctx, field, obj)
		case "fax_number":
			out.Values[i] = ec._Enterprise_fax_number(ctx, field, obj)
		case "province":
			out.Values[i] = ec._Enterprise_province(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Enterprise_city(ctx, field, obj)
		case "district":
			out.Values[i] = ec._Enterprise_district(ctx, field, obj)
		case "institution_category":
			out.Values[i] = ec._Enterprise_institution_category(ctx, field, obj)
		case "operating_license":
			out.Values[i] = ec._Enterprise_operating_license(ctx, field, obj)
		case "business_license":
			out.Values[i] = ec._Enterprise_business_license(ctx, field, obj)
		case "business_license_issuance_date":
			out.Values[i] = ec._Enterprise_business_license_issuance_date(ctx, field, obj)
		case "business_license_expiry_date":
			out.Values[i] = ec._Enterprise_business_license_expiry_date(ctx, field, obj)
		case "enterprise_nature":
			out.Values[i] = ec._Enterprise_enterprise_nature(ctx, field, obj)
		case "legal_representative":
			out.Values[i] = ec._Enterprise_legal_representative(ctx, field, obj)
		case "legal_representative_phone":
			out.Values[i] = ec._Enterprise_legal_representative_phone(ctx, field, obj)
		case "legal_representative_id_card":
			out.Values[i] = ec._Enterprise_legal_representative_id_card(ctx, field, obj)
		case "legal_person_id_number":
			out.Values[i] = ec._Enterprise_legal_person_id_number(ctx, field, obj)
		case "entrusted_agent":
			out.Values[i] = ec._Enterprise_entrusted_agent(ctx, field, obj)
		case "entrusted_agent_phone":
			out.Values[i] = ec._Enterprise_entrusted_agent_phone(ctx, field, obj)
		case "entrusted_agent_id_card":
			out.Values[i] = ec._Enterprise_entrusted_agent_id_card(ctx, field, obj)
		case "agent_id_number":
			out.Values[i] = ec._Enterprise_agent_id_number(ctx, field, obj)
		case "organization_code":
			out.Values[i] = ec._Enterprise_organization_code(ctx, field, obj)
		case "organization_code_certificate":
			out.Values[i] = ec._Enterprise_organization_code_certificate(ctx, field, obj)
		case "update_time_in":
			out.Values[i] = ec._Enterprise_update_time_in(ctx, field, obj)
		case "business_pic":
			out.Values[i] = ec._Enterprise_business_pic(ctx, field, obj)
		case "is_black":
			out.Values[i] = ec._Enterprise_is_black(ctx, field, obj)
		case "high_speed_detachment":
			out.Values[i] = ec._Enterprise_high_speed_detachment(ctx, field, obj)
		case "high_speed_brigade":
			out.Values[i] = ec._Enterprise_high_speed_brigade(ctx, field, obj)
		case "high_speed_squadron":
			out.Values[i] = ec._Enterprise_high_speed_squadron(ctx, field, obj)
		case "traffic_police_level":
			out.Values[i] = ec._Enterprise_traffic_police_level(ctx, field, obj)
		case "is_ride_hailing_driving_school":
			out.Values[i] = ec._Enterprise_is_ride_hailing_driving_school(ctx, field, obj)
		case "is_ride_hailing_enterprise":
			out.Values[i] = ec._Enterprise_is_ride_hailing_enterprise(ctx, field, obj)
		case "is_expire":
			out.Values[i] = ec._Enterprise_is_expire(ctx, field, obj)
		case "is_check":
			out.Values[i] = ec._Enterprise_is_check(ctx, field, obj)
		case "is_install":
			out.Values[i] = ec._Enterprise_is_install(ctx, field, obj)
		case "is_input":
			out.Values[i] = ec._Enterprise_is_input(ctx, field, obj)
		case "brigade":
			out.Values[i] = ec._Enterprise_brigade(ctx, field, obj)
		case "police_station":
			out.Values[i] = ec._Enterprise_police_station(ctx, field, obj)
		case "brigade_review_opinion":
			out.Values[i] = ec._Enterprise_brigade_review_opinion(ctx, field, obj)
		case "brigade_review_time":
			out.Values[i] = ec._Enterprise_brigade_review_time(ctx, field, obj)
		case "brigade_review_by":
			out.Values[i] = ec._Enterprise_brigade_review_by(ctx, field, obj)
		case "is_upload_province":
			out.Values[i] = ec._Enterprise_is_upload_province(ctx, field, obj)
		case "score":
			out.Values[i] = ec._Enterprise_score(ctx, field, obj)
		case "slag_car_supplier_code":
			out.Values[i] = ec._Enterprise_slag_car_supplier_code(ctx, field, obj)
		case "slag_car_supplier_state":
			out.Values[i] = ec._Enterprise_slag_car_supplier_state(ctx, field, obj)
		case "association_review_opinion":
			out.Values[i] = ec._Enterprise_association_review_opinion(ctx, field, obj)
		case "association_review_time":
			out.Values[i] = ec._Enterprise_association_review_time(ctx, field, obj)
		case "association_review_by":
			out.Values[i] = ec._Enterprise_association_review_by(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._Enterprise_create_at(ctx, field, obj)
		case "create_by":
			out.Values[i] = ec._Enterprise_create_by(ctx, field, obj)
		case "update_at":
			out.Values[i] = ec._Enterprise_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._Enterprise_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._Enterprise_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._Enterprise_delete_by(ctx, field, obj)
		case "record_at":
			out.Values[i] = ec._Enterprise_record_at(ctx, field, obj)
		case "record_by":
			out.Values[i] = ec._Enterprise_record_by(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._Enterprise_remarks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseConnectionImplementors = []string{"EnterpriseConnection"}

func (ec *executionContext) _EnterpriseConnection(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseConnection")
		case "nodes":
			out.Values[i] = ec._EnterpriseConnection_nodes(ctx, field, obj)
		case "page_info":
			out.Values[i] = ec._EnterpriseConnection_page_info(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var enterpriseDistrictStatisticsImplementors = []string{"EnterpriseDistrictStatistics"}

func (ec *executionContext) _EnterpriseDistrictStatistics(ctx context.Context, sel ast.SelectionSet, obj *model.EnterpriseDistrictStatistics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enterpriseDistrictStatisticsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnterpriseDistrictStatistics")
		case "district":
			out.Values[i] = ec._EnterpriseDistrictStatistics_district(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "high_way_transport":
			out.Values[i] = ec._EnterpriseDistrictStatistics_high_way_transport(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "travel_transport":
			out.Values[i] = ec._EnterpriseDistrictStatistics_travel_transport(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "danger_transport":
			out.Values[i] = ec._EnterpriseDistrictStatistics_danger_transport(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "around_taxi":
			out.Values[i] = ec._EnterpriseDistrictStatistics_around_taxi(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "online_taxi":
			out.Values[i] = ec._EnterpriseDistrictStatistics_online_taxi(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trunk":
			out.Values[i] = ec._EnterpriseDistrictStatistics_trunk(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "muck_car":
			out.Values[i] = ec._EnterpriseDistrictStatistics_muck_car(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "concrete_car":
			out.Values[i] = ec._EnterpriseDistrictStatistics_concrete_car(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "retail_car":
			out.Values[i] = ec._EnterpriseDistrictStatistics_retail_car(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "school_car":
			out.Values[i] = ec._EnterpriseDistrictStatistics_school_car(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "business_to_non_bus":
			out.Values[i] = ec._EnterpriseDistrictStatistics_business_to_non_bus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var highSpeedPoliceDeptImplementors = []string{"HighSpeedPoliceDept"}

func (ec *executionContext) _HighSpeedPoliceDept(ctx context.Context, sel ast.SelectionSet, obj *model.HighSpeedPoliceDept) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, highSpeedPoliceDeptImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HighSpeedPoliceDept")
		case "dept_id":
			out.Values[i] = ec._HighSpeedPoliceDept_dept_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._HighSpeedPoliceDept_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "super_dept":
			out.Values[i] = ec._HighSpeedPoliceDept_super_dept(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._HighSpeedPoliceDept_remarks(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._HighSpeedPoliceDept_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._HighSpeedPoliceDept_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_at":
			out.Values[i] = ec._HighSpeedPoliceDept_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._HighSpeedPoliceDept_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._HighSpeedPoliceDept_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._HighSpeedPoliceDept_delete_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createDepartment":
			out.Values[i] = ec._Mutation_createDepartment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDepartment":
			out.Values[i] = ec._Mutation_updateDepartment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeDepartment":
			out.Values[i] = ec._Mutation_removeDepartment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createEnterprise":
			out.Values[i] = ec._Mutation_createEnterprise(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEnterprise":
			out.Values[i] = ec._Mutation_updateEnterprise(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeEnterprise":
			out.Values[i] = ec._Mutation_removeEnterprise(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "total":
			out.Values[i] = ec._PageInfo_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var provinceImplementors = []string{"Province"}

func (ec *executionContext) _Province(ctx context.Context, sel ast.SelectionSet, obj *model.Province) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, provinceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Province")
		case "province_id":
			out.Values[i] = ec._Province_province_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Province_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city_list":
			out.Values[i] = ec._Province_city_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "department":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_department(ctx, field)
				return res
			})
		case "departmentList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_departmentList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dictList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dictList(ctx, field)
				return res
			})
		case "provinceList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_provinceList(ctx, field)
				return res
			})
		case "cityList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cityList(ctx, field)
				return res
			})
		case "districtList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_districtList(ctx, field)
				return res
			})
		case "enterprise":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterprise(ctx, field)
				return res
			})
		case "enterpriseList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterpriseList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "enterpriseDistrictStatistics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enterpriseDistrictStatistics(ctx, field)
				return res
			})
		case "systemUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_systemUser(ctx, field)
				return res
			})
		case "systemUsers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_systemUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserImplementors = []string{"SystemUser", "IModel"}

func (ec *executionContext) _SystemUser(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUser")
		case "user_id":
			out.Values[i] = ec._SystemUser_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":
			out.Values[i] = ec._SystemUser_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enterprise":
			out.Values[i] = ec._SystemUser_enterprise(ctx, field, obj)
		case "grade":
			out.Values[i] = ec._SystemUser_grade(ctx, field, obj)
		case "department":
			out.Values[i] = ec._SystemUser_department(ctx, field, obj)
		case "audit_level":
			out.Values[i] = ec._SystemUser_audit_level(ctx, field, obj)
		case "user_type":
			out.Values[i] = ec._SystemUser_user_type(ctx, field, obj)
		case "is_valid":
			out.Values[i] = ec._SystemUser_is_valid(ctx, field, obj)
		case "user_status":
			out.Values[i] = ec._SystemUser_user_status(ctx, field, obj)
		case "proxy_user":
			out.Values[i] = ec._SystemUser_proxy_user(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._SystemUser_ip_address(ctx, field, obj)
		case "is_bind_ip":
			out.Values[i] = ec._SystemUser_is_bind_ip(ctx, field, obj)
		case "email":
			out.Values[i] = ec._SystemUser_email(ctx, field, obj)
		case "telephone":
			out.Values[i] = ec._SystemUser_telephone(ctx, field, obj)
		case "mobile":
			out.Values[i] = ec._SystemUser_mobile(ctx, field, obj)
		case "mkey":
			out.Values[i] = ec._SystemUser_mkey(ctx, field, obj)
		case "app_version":
			out.Values[i] = ec._SystemUser_app_version(ctx, field, obj)
		case "wx_id":
			out.Values[i] = ec._SystemUser_wx_id(ctx, field, obj)
		case "is_slag_car_platform":
			out.Values[i] = ec._SystemUser_is_slag_car_platform(ctx, field, obj)
		case "remarks":
			out.Values[i] = ec._SystemUser_remarks(ctx, field, obj)
		case "create_at":
			out.Values[i] = ec._SystemUser_create_at(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_by":
			out.Values[i] = ec._SystemUser_create_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "update_at":
			out.Values[i] = ec._SystemUser_update_at(ctx, field, obj)
		case "update_by":
			out.Values[i] = ec._SystemUser_update_by(ctx, field, obj)
		case "delete_at":
			out.Values[i] = ec._SystemUser_delete_at(ctx, field, obj)
		case "delete_by":
			out.Values[i] = ec._SystemUser_delete_by(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var systemUserConnectionImplementors = []string{"SystemUserConnection"}

func (ec *executionContext) _SystemUserConnection(ctx context.Context, sel ast.SelectionSet, obj *model.SystemUserConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemUserConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemUserConnection")
		case "nodes":
			out.Values[i] = ec._SystemUserConnection_nodes(ctx, field, obj)
		case "page_info":
			out.Values[i] = ec._SystemUserConnection_page_info(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vehicleImplementors = []string{"Vehicle"}

func (ec *executionContext) _Vehicle(ctx context.Context, sel ast.SelectionSet, obj *model.Vehicle) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Vehicle")
		case "vehicle_id":
			out.Values[i] = ec._Vehicle_vehicle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCity2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCity(ctx context.Context, sel ast.SelectionSet, v *model.City) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._City(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateDepartmentParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCreateDepartmentParam(ctx context.Context, v interface{}) (model.CreateDepartmentParam, error) {
	res, err := ec.unmarshalInputCreateDepartmentParam(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateEnterpriseParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCreateEnterpriseParam(ctx context.Context, v interface{}) (model.CreateEnterpriseParam, error) {
	res, err := ec.unmarshalInputCreateEnterpriseParam(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDateTime2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNDepartment2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v model.Department) graphql.Marshaler {
	return ec._Department(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartment2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *model.Department) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) marshalNDepartmentConnection2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentConnection(ctx context.Context, sel ast.SelectionSet, v model.DepartmentConnection) graphql.Marshaler {
	return ec._DepartmentConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNDepartmentConnection2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentConnection(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DepartmentConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDepartmentListQuery2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentListQuery(ctx context.Context, v interface{}) (model.DepartmentListQuery, error) {
	res, err := ec.unmarshalInputDepartmentListQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDepartmentQuery2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentQuery(ctx context.Context, v interface{}) (model.DepartmentQuery, error) {
	res, err := ec.unmarshalInputDepartmentQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDict2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDict(ctx context.Context, sel ast.SelectionSet, v *model.Dict) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Dict(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDictListQuery2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDictListQuery(ctx context.Context, v interface{}) (model.DictListQuery, error) {
	res, err := ec.unmarshalInputDictListQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDictType2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDictType(ctx context.Context, sel ast.SelectionSet, v *model.DictType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DictType(ctx, sel, v)
}

func (ec *executionContext) marshalNDistrict2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDistrict(ctx context.Context, sel ast.SelectionSet, v *model.District) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._District(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterprise2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v model.Enterprise) graphql.Marshaler {
	return ec._Enterprise(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterprise2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v *model.Enterprise) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Enterprise(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseConnection2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseConnection(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseConnection) graphql.Marshaler {
	return ec._EnterpriseConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnterpriseConnection2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseConnection(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNEnterpriseDistrictStatistics2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseDistrictStatistics(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseDistrictStatistics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EnterpriseDistrictStatistics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEnterpriseLevelEnum2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseLevelEnum(ctx context.Context, v interface{}) (model.EnterpriseLevelEnum, error) {
	var res model.EnterpriseLevelEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseLevelEnum2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseLevelEnum(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseLevelEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEnterpriseOrderField2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseOrderField(ctx context.Context, v interface{}) (model.EnterpriseOrderField, error) {
	var res model.EnterpriseOrderField
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnterpriseOrderField2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseOrderField(ctx context.Context, sel ast.SelectionSet, v model.EnterpriseOrderField) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEnterpriseQuery2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseQuery(ctx context.Context, v interface{}) (model.EnterpriseQuery, error) {
	res, err := ec.unmarshalInputEnterpriseQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNOrderDirection2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐOrderDirection(ctx context.Context, v interface{}) (model.OrderDirection, error) {
	var res model.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v model.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *model.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNProvince2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐProvince(ctx context.Context, sel ast.SelectionSet, v *model.Province) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Province(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRemoveDepartmentParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐRemoveDepartmentParam(ctx context.Context, v interface{}) (model.RemoveDepartmentParam, error) {
	res, err := ec.unmarshalInputRemoveDepartmentParam(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRemoveEnterpriseParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐRemoveEnterpriseParam(ctx context.Context, v interface{}) (model.RemoveEnterpriseParam, error) {
	res, err := ec.unmarshalInputRemoveEnterpriseParam(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx context.Context, sel ast.SelectionSet, v *model.SystemUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SystemUser(ctx, sel, v)
}

func (ec *executionContext) marshalNSystemUserConnection2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUserConnection(ctx context.Context, sel ast.SelectionSet, v model.SystemUserConnection) graphql.Marshaler {
	return ec._SystemUserConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemUserConnection2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUserConnection(ctx context.Context, sel ast.SelectionSet, v *model.SystemUserConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SystemUserConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateDepartmentParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐUpdateDepartmentParam(ctx context.Context, v interface{}) (model.UpdateDepartmentParam, error) {
	res, err := ec.unmarshalInputUpdateDepartmentParam(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateEnterpriseParam2systemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐUpdateEnterpriseParam(ctx context.Context, v interface{}) (model.UpdateEnterpriseParam, error) {
	res, err := ec.unmarshalInputUpdateEnterpriseParam(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚕboolᚄ(ctx context.Context, v interface{}) ([]bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBoolean2bool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕboolᚄ(ctx context.Context, sel ast.SelectionSet, v []bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNBoolean2bool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBoolean_comparison_exp2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐBooleanComparisonExp(ctx context.Context, v interface{}) (*model.BooleanComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBoolean_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBusinessScope2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐBusinessScope(ctx context.Context, v interface{}) (*model.BusinessScope, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.BusinessScope)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBusinessScope2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐBusinessScope(ctx context.Context, sel ast.SelectionSet, v *model.BusinessScope) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCity2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCityᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.City) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCity2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOCityListQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐCityListQuery(ctx context.Context, v interface{}) (*model.CityListQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCityListQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODateTime2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalODepartment2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Department) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDepartment2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODepartment2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartment(ctx context.Context, sel ast.SelectionSet, v *model.Department) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Department(ctx, sel, v)
}

func (ec *executionContext) unmarshalODepartmentOrder2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentOrder(ctx context.Context, v interface{}) (*model.DepartmentOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDepartmentOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODepartmentOrderField2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentOrderField(ctx context.Context, v interface{}) (*model.DepartmentOrderField, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.DepartmentOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODepartmentOrderField2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDepartmentOrderField(ctx context.Context, sel ast.SelectionSet, v *model.DepartmentOrderField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODict2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDictᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Dict) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDict2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDict(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODict2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDict(ctx context.Context, sel ast.SelectionSet, v *model.Dict) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Dict(ctx, sel, v)
}

func (ec *executionContext) marshalODistrict2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDistrictᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.District) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDistrict2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDistrict(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODistrictListQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐDistrictListQuery(ctx context.Context, v interface{}) (*model.DistrictListQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDistrictListQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterprise2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Enterprise) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterprise2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterprise(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOEnterprise2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterprise(ctx context.Context, sel ast.SelectionSet, v *model.Enterprise) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Enterprise(ctx, sel, v)
}

func (ec *executionContext) marshalOEnterpriseDistrictStatistics2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseDistrictStatisticsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.EnterpriseDistrictStatistics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnterpriseDistrictStatistics2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseDistrictStatistics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOEnterpriseDistrictStatisticsQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseDistrictStatisticsQuery(ctx context.Context, v interface{}) (*model.EnterpriseDistrictStatisticsQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseDistrictStatisticsQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseListQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseListQuery(ctx context.Context, v interface{}) (*model.EnterpriseListQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseListQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEnterpriseNatureEnum2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseNatureEnum(ctx context.Context, v interface{}) (*model.EnterpriseNatureEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EnterpriseNatureEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEnterpriseNatureEnum2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseNatureEnum(ctx context.Context, sel ast.SelectionSet, v *model.EnterpriseNatureEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEnterpriseOrder2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐEnterpriseOrder(ctx context.Context, v interface{}) (*model.EnterpriseOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEnterpriseOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHighSpeedPoliceDept2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐHighSpeedPoliceDept(ctx context.Context, sel ast.SelectionSet, v *model.HighSpeedPoliceDept) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HighSpeedPoliceDept(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOInstitutionCategoryEnum2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐInstitutionCategoryEnum(ctx context.Context, v interface{}) (*model.InstitutionCategoryEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.InstitutionCategoryEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInstitutionCategoryEnum2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐInstitutionCategoryEnum(ctx context.Context, sel ast.SelectionSet, v *model.InstitutionCategoryEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOMap2ᚕmapᚄ(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMap2map(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMap2ᚕmapᚄ(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNMap2map(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOOrderDirection2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐOrderDirection(ctx context.Context, v interface{}) (*model.OrderDirection, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OrderDirection)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrderDirection2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v *model.OrderDirection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPageQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐPageQuery(ctx context.Context, v interface{}) (*model.PageQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPageQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProvince2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐProvinceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Province) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProvince2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐProvince(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOProvinceListQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐProvinceListQuery(ctx context.Context, v interface{}) (*model.ProvinceListQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputProvinceListQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOString_comparison_exp2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐStringComparisonExp(ctx context.Context, v interface{}) (*model.StringComparisonExp, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputString_comparison_exp(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemUser2ᚕᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SystemUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSystemUser2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUser(ctx context.Context, sel ast.SelectionSet, v *model.SystemUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemUser(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemUsersQuery2ᚖsystemᚑmanageᚋinternalᚋgraphqlᚋsystemᚋgraphᚋmodelᚐSystemUsersQuery(ctx context.Context, v interface{}) (*model.SystemUsersQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemUsersQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
